/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:42:06 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("\r", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", 13);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      int int1 = StringUtils.indexOfAny((CharSequence) "\r", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string1 = StringUtils.substringBetween("#", "#", "V");
      assertNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("\r");
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "AYc}<~n", (String) null);
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "AYc}<~n";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(1, charSequenceArray0.length);
      
      String string4 = StringUtils.rightPad("S_DIy3", (-900), "");
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("S_DIy3", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      String string0 = StringUtils.chop("\n\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Strings must not benull6-o={<t`TMm", "7Py(S+'#iJ3=04D", 20, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 31
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissing("\r", "\r", charSequenceArray0);
      assertEquals("\r", string0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", (-3119));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\r", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.substringBetween("\r", "\r", "\r");
      assertNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("AYc}<~n");
      assertFalse(string2.equals((Object)string0));
      assertEquals("AYc}<~n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("\r", "\r", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.rightPad("\r", 8192, "\r");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 8192);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string4;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "\r";
      stringArray0[4] = "";
      stringArray0[5] = string4;
      stringArray0[6] = "en4G4";
      stringArray0[7] = string4;
      // Undeclared exception!
      StringUtils.stripAll(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      char char0 = '_';
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '_', 2147483645, (-717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2147483645) > toIndex(-717)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String string0 = StringUtils.replacePattern("Method `", "Method `", "Method `");
      assertEquals("Method `", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Method `";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Method `", 101, 2222);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimum abbreviation width is %d", (String) null, 1595);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.stripAccents(string0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("preent");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      short short0 = (short)5;
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)1009;
      shortArray0[3] = (short) (-2445);
      shortArray0[4] = (short)32767;
      shortArray0[5] = (short)93;
      shortArray0[6] = (short)108;
      char char0 = 'G';
      int int0 = (-2080374781);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'G', (-2080374781), (int) (short)93);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      String string0 = StringUtils.chomp("w\r");
      assertEquals("w", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "h", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("!", '!');
      assertEquals("!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input f another", 114);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Aborting to protect against StackOverflowError - output of one loop is the input f another");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", 114);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, 'a');
      assertNull(string1);
      
      String string2 = StringUtils.join((float[]) null, 'a', 114, 114);
      assertNull(string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "]#_H|%LNP[-m^B5rn";
      stringArray0[6] = null;
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertEquals(7, stringArray0.length);
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf("]#_H|%LNP[-m^B5rn", string1, (-2060));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.rightPad(string1, 97, string1);
      assertNull(string4);
      
      int int1 = StringUtils.countMatches((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "]#_H|%LNP[-m^B5rn");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isWhitespace("]#_H|%LNP[-m^B5rn");
      assertFalse(boolean0);
      
      String string5 = StringUtils.trimToNull("/7");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("/7", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOfAny("/7", (CharSequence[]) null);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.substringBefore("c", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("c", string6);
      assertNotNull(string6);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 114;
      longArray0[1] = (long) 97;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 114;
      longArray0[4] = (long) 'a';
      longArray0[5] = (long) 97;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'G', (-2067947214), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.repeat("}L&}ds", "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'valueH attribute to specify the type explicitly):~%sParameter of type %s must reference an Enum type (alternatively, use the annotation's 'valueH attribute to specify the type explicitly):~%sEv)RGIRV*Oc#c", 2031);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) string0, (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      
      // Undeclared exception!
      StringUtils.toCodePoints(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", 12);
      assertEquals("            ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center(" ", 12, "            ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("            ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "            ", 'T');
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) "            ";
      objectArray0[1] = (Object) "            ";
      objectArray0[2] = (Object) "            ";
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "            ";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap(".|9*+ynX]v*<Q6z`D", 'W');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W.|9*+ynX]v*<Q6z`DW", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("yG^*wukj3 q!_sI/D", "...", 4342, 7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...sI/D", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("...sI/D", "yG^*wukj3 q!_sI/D", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1034);
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.CartesianProductTestExtension", (int) (short)1166, '^');
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string0, (int) (short)1166);
      assertEquals(1166, int0);
      
      String string1 = StringUtils.unwrap(string0, '^');
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      String string0 = StringUtils.replaceChars("...", (String) null, "0q5Kl+");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "...";
      objectArray0[1] = (Object) "...";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "0q5Kl+";
      objectArray0[4] = (Object) null;
      String string1 = StringUtils.join(objectArray0, 'A', (-814), (-814));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(5, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("...", (-814), 3);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("...");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("..", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("1mf", "H-H3^Ey");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "...", (-814), 1967);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.normalizeSpace("");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "0q5Kl+", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'A', 'A'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-60);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)19, (byte)16, (byte) (-104), (byte)11, (byte) (-97), (byte)13, (byte)9, (byte) (-60)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteBuffer0);
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(9, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)99, (byte)19, (byte)16, (byte) (-104), (byte)11, (byte) (-97), (byte)13, (byte)9, (byte) (-60)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(9, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(9, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=9 lim=9 cap=9]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(9, byteBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("c\u0013\u0010\uFFFD\u000B\uFFFD\r\t\uFFFD", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray1 = StringUtils.getBytes("..", charset0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String string0 = "h";
      String string1 = StringUtils.repeat("h", 8198);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = '1';
      charArray0[2] = '';
      charArray0[3] = '.';
      charArray0[4] = 'C';
      charArray0[5] = '%';
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("@M'%mGENtravBt&1`9,");
      assertEquals("@m'%mgentravbt&1`9,", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "@m'%mgentravbt&1`9,");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(19, charBuffer0.length());
      assertEquals(19, charBuffer0.limit());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("@m'%mgentravbt&1`9,", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(19, charBuffer0.length());
      assertEquals(19, charBuffer0.limit());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("@m'%mgentravbt&1`9,", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(19, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(19, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(19, charBuffer1.length());
      assertEquals("@m'%mgentravbt&1`9,", charBuffer1.toString());
      assertEquals(19, charBuffer1.capacity());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      
      boolean boolean0 = StringUtils.equals((CharSequence) "@M'%mGENtravBt&1`9,", (CharSequence) charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(boolean0);
      assertNotSame(charBuffer0, charBuffer1);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(19, charBuffer0.length());
      assertEquals(19, charBuffer0.limit());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("@m'%mgentravbt&1`9,", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      
      boolean boolean1 = StringUtils.isNumericSpace(charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(charBuffer0, charBuffer1);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(19, charBuffer0.length());
      assertEquals(19, charBuffer0.limit());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("@m'%mgentravbt&1`9,", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      
      String string1 = StringUtils.unwrap("b)?$^_H10rp|A`/W0u", "@M'%mGENtravBt&1`9,");
      assertFalse(string1.equals((Object)string0));
      assertEquals("b)?$^_H10rp|A`/W0u", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("b)?$^_H10rp|A`/W0u");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\b';
      String string0 = StringUtils.substringBetween("b)?$^_H10rp|A`/W0u", "b)?$^_H10rp|A`/W0u");
      assertNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'o', 10, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String string0 = "k0E";
      String string1 = StringUtils.repeat("k0E", 8200);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = ".]VI1sQ8&";
      // Undeclared exception!
      StringUtils.replaceIgnoreCase(string1, ".]VI1sQ8&", ".]VI1sQ8&", 8200);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("CKnnotnget the oString of a nullobjecO ", 'C');
      assertEquals("CKnnotnget the oString of a nullobjecO C", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("CKnnotnget the oString of a nullobjecO ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\n");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\n", charBuffer0.toString());
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) charBuffer0);
      assertFalse(boolean0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\n", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String string0 = "v";
      String string1 = StringUtils.leftPad("KlBkEjbI-d", 8210, "v");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("v", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string2, "Py(S+'#iJ3=04GSt7ings muWtnot be null6co={<t`lMm");
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "...", 32767);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("2;nr7OMU>K+nt&!&", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 8192, '\\');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.stripEnd("\r", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 528, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String string0 = StringUtils.abbreviate("nd8&z<*p`5i9", "w", 4, 4);
      assertEquals("wz<w", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "w", 4);
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("wz<w", 4, "w");
      assertTrue(string1.equals((Object)string0));
      assertEquals("wz<w", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.repeat('s', 2763);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) string0, (CharSequence) string0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.countMatches(charSequence0, charSequence0);
      assertEquals(1, int0);
      
      String string1 = StringUtils.leftPad(string0, 1, string0);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string1;
      stringArray0[5] = string1;
      stringArray0[6] = string1;
      stringArray0[7] = string1;
      // Undeclared exception!
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      String string0 = StringUtils.repeat("h", 8198);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String string0 = "Y&*0|`P";
      String string1 = StringUtils.replaceFirst("Y&*0|`P", "Y&*0|`P", "Y&*0|`P");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0|Y&*0|`P", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Y&*0|Y&*0|`P";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y&*0|`P";
      stringArray0[1] = "Y&*0|`P";
      String string2 = StringUtils.join((long[]) null, 'X');
      assertNull(string2);
      
      String string3 = "6PNG+u}t,#O@K";
      // Undeclared exception!
      StringUtils.center("Y&*0|`P", 65536, "6PNG+u}t,#O@K");
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("^", "^", (short)1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String string0 = StringUtils.leftPad("7Py(S+'#iJ3=04DStrings must not be null6-o={<t`TMm", 8192, "X");
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String string0 = StringUtils.leftPad("k0E", 8200, 'o');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("h", 8200, 'o');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(string0, 95, 8192);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("$VQ", string2, 647);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("$VQ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf(string0, string2, 8192);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "h";
      stringArray0[1] = "k0E";
      stringArray0[2] = "$VQ";
      stringArray0[3] = "$VQ";
      stringArray0[4] = "$VQ";
      stringArray0[5] = string2;
      stringArray0[6] = string0;
      stringArray0[7] = "$VQ";
      // Undeclared exception!
      StringUtils.stripAll(stringArray0, string1);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("k:p");
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.repeat("k:p", 1114111);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String[] stringArray0 = new String[5];
      byte byte0 = (byte)0;
      int int0 = 15;
      char char0 = 'k';
      int int1 = 118;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'k', 0, 118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("U+%K{p9/6 6b<U.f|R!", 23, '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals("U+%K{p9/6 6b<U.f|R!****", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("U+%K{p9/6 6b<U.f|R!****", 23);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("U+%K{p9/6 6b<U.f|R!****", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "U+%K{p9/6 6b<U.f|R!", "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String string0 = StringUtils.repeat("B87M", "B87M", 1636);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.isAlphanumeric(string0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '*', 11, 11);
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, ')', Integer.MAX_VALUE, (-2472));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", 12);
      assertEquals("            ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center(" ", 12, "            ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("            ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "            ", 'T');
      assertEquals(0, int0);
      
      String string2 = StringUtils.repeat('T', 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "            ";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) charBuffer0);
      assertTrue(boolean0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      String string0 = StringUtils.replacePattern("Method `", "Method `", "Method `");
      assertEquals("Method `", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Method `", (CharSequence) "Method `");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      long[] longArray0 = new long[17];
      longArray0[0] = (long) 11;
      longArray0[1] = (long) 11;
      longArray0[2] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      String string0 = StringUtils.join(longArray0, '\"', 0, 11);
      assertEquals("11\"11\"-1\"0\"0\"-1\"-1\"0\"0\"0\"0", string0);
      assertEquals(17, longArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("11\"11\"-1\"0\"0\"-1\"-1\"0\"0\"0\"0");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "FO^2hK_aw`6=F7z", (CharSequence) "11\"11\"-1\"0\"0\"-1\"-1\"0\"0\"0\"0", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "=M");
      assertNotNull(charBuffer0);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("=M", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "=M");
      assertTrue(boolean0);
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("=M", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      int int0 = 34;
      String string0 = StringUtils.repeat('\'', 34);
      assertEquals("''''''''''''''''''''''''''''''''''", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "''''''''''''''''''''''''''''''''''";
      stringArray0[1] = "HE";
      stringArray0[2] = "''''''''''''''''''''''''''''''''''";
      stringArray0[3] = "''''''''''''''''''''''''''''''''''";
      stringArray0[4] = "''''''''''''''''''''''''''''''''''";
      stringArray0[5] = "''''''''''''''''''''''''''''''''''";
      stringArray0[6] = "''''''''''''''''''''''''''''''''''";
      stringArray0[7] = "''''''''''''''''''''''''''''''''''";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("''''''''''''''''''''''''''''''''''", string1);
      assertEquals(8, stringArray0.length);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "''''''''''''''''''''''''''''''''''", 1, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.endsWithAny("HE", stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("Locale must not be null", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "''''''''''''''''''''''''''''''''''", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\''}, charArray0);
      assertEquals(4, charArray0.length);
      
      String string3 = "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("''''''''''''''''''''''''''''''''''", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", 99, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 131
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'B';
      intArray0[1] = (int) 'B';
      intArray0[2] = (int) 'B';
      intArray0[3] = 6;
      String string0 = StringUtils.join(intArray0, 'u', 66, 66);
      assertEquals("", string0);
      assertArrayEquals(new int[] {66, 66, 66, 6}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "...", (CharSequence) "<14*O`UPZe ^vt< \\Z");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertEquals("\u0000@", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)64}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\u0000@", (int) (byte)64);
      assertEquals(1, int0);
      
      String string1 = StringUtils.repeat("StdIoExtension is active but no %s annotation was found.", 738);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("\u0000@", 392, (int) (byte)7);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\u0000@", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("vuzr9]3|=", "vuzr9]3|=", "vuzr9]3|=");
      assertEquals("vuzr9]3|=|=", string0);
      assertNotNull(string0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "vuzr9]3|=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String string0 = "{6]3#c~ufBAljJ,{;";
      String string1 = StringUtils.mid(" ", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.rightPad("{6]3#c~ufBAljJ,{;", 32767);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      String string0 = "ww";
      String string1 = StringUtils.stripStart("ww", "ww");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "org.junitpioneer.jupiter.IssueExtension";
      String string3 = StringUtils.uncapitalize("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string3);
      assertNotNull(string3);
      
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.repeat("{/}SkKG!yzHA)!1(", "ok6d2|}D6mrifoa", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = StringUtils.stripStart("...", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Strings must not be null6-o={<t`TMm", "...", 20, 29);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...ust not be null6-o={<t`TMm", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, '\u0011');
      assertEquals("0.0", string0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      String string1 = StringUtils.join(byteArray0, '\u0011', (int) (byte)5, 11);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0\u00115\u00115\u00110\u00110\u00110", string1);
      assertEquals(19, byteArray0.length);
      assertNotNull(string1);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      String string2 = StringUtils.lowerCase("0.0", locale0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0.0", string3);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("No arguments sources were found for @CartesianTest", "K?Nb 'd?wcj9t2O", "?[m@o:#j8");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String string0 = StringUtils.stripStart("B8&`<*p`h5i9ll`!:~b-", "wn>F(n)&");
      assertEquals("B8&`<*p`h5i9ll`!:~b-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.:;?u_~!n_", "zx!kLkbqf", 29, 20);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zx!kLkbqf tzx!kLkbqf", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("Strings must not be null6-o={<t`TMm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("f\"'", "f$dTa6~=");
      assertEquals("f\"'", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("+h");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)7;
      String string2 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\u0000&&\uFFFD]\u0007", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)38, (byte) (-14), (byte)93, (byte)7}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "f\"'", (-3821));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat("\u0000&&\uFFFD]\u0007", 3597);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("f\"'", 8192, '{');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate((String) null, (int) (byte)0, 48);
      assertNull(string5);
      
      String string6 = StringUtils.unwrap("ylYaylYa", '{');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("ylYaylYa", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chop(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Strings must ndt b1 nulr", 'r');
      assertEquals("ings must ndt b1 nulrSt", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("Array and element cannot both be null", "Array and element cannot both be null", "$#c&*fb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", 12);
      assertEquals("            ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center(" ", 12, "            ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("            ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "            ", 'T');
      assertEquals(0, int0);
      
      String string2 = StringUtils.repeat('T', 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "            ";
      objectArray0[2] = (Object) "            ";
      objectArray0[4] = (Object) " ";
      String string3 = StringUtils.join(objectArray0, '\\', 0, 12);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\\            \\            \\\\ \\\\\\\\\\\\\\", string3);
      assertEquals(23, objectArray0.length);
      assertNotNull(string3);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 12;
      floatArray0[1] = (float) 12;
      floatArray0[2] = (float) '\\';
      floatArray0[3] = (float) '\\';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '\\', 0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("0&`k'[L+6", "0&`k'[L+6", "0&`k'[L+6");
      assertEquals("0&`k'[L+6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("FO^2hK_aw`6=F7z", "0&`k'[L+6");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FO^2hK_aw`6=F7z", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-61);
      int int0 = StringUtils.lastIndexOf((CharSequence) "FO^2hK_aw`6=F7z", 2033);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat("0&`k'[L+6", 1814);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.normalizeSpace(string2);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '/';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '/', 47, 2147483645);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String string0 = StringUtils.stripEnd(">v7 ", ">v7 ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(">v7 ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4542);
      String string1 = StringUtils.substringAfterLast("", 2);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      String string2 = StringUtils.lowerCase("", locale0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("]", "]");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("]", "]", 2);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rotate("KmoUt70Oh2 n\"'=", 10);
      assertEquals("70Oh2 n\"'=KmoUt", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlpha("..");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = '+';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "]", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'a', '+'}, charArray0);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.unwrap("+}}fx0);n5MPM", '+');
      assertFalse(string1.equals((Object)string0));
      assertEquals("+}}fx0);n5MPM", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "+}}fx0);n5MPM", (CharSequence) "+}}fx0);n5MPM", 10);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "", (int) (short)1);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) " ", (CharSequence) " ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)4578;
      shortArray0[1] = (short) (-32);
      shortArray0[2] = (short)43;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1861);
      shortArray0[5] = (short) (-3734);
      shortArray0[6] = (short)3;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '\"', (int) (short) (-32), (int) (short)43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.overlay("SA{4?y", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", (-32768), (-32768));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProviderSA{4?y", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[25];
      intArray0[0] = (int) 'w';
      intArray0[1] = (int) 'w';
      intArray0[2] = (-32768);
      intArray0[3] = (-32768);
      intArray0[4] = (int) 'w';
      intArray0[5] = (int) 'w';
      intArray0[6] = (-32768);
      intArray0[7] = 127;
      intArray0[8] = (int) 'w';
      String string1 = StringUtils.join(intArray0, 'i', 5, 21);
      assertFalse(string1.equals((Object)string0));
      assertEquals("119i-32768i127i119i0i0i0i0i0i0i0i0i0i0i0i0", string1);
      assertEquals(25, intArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("!(cg%,?DUx", "!");
      assertEquals("(cg%,?DUx", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("!(cg%,?DUx", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("!(cg%,?DUx", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("doesn't contain any substring.", "s");
      assertEquals("tring.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("doesn't contain any substring.", 13, "b>>e-O%EMw(%\"@JO_");
      assertFalse(string1.equals((Object)string0));
      assertEquals("doesn't contain any substring.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("s");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad(")C>|dP", 13, ';');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(";;;;;;;)C>|dP", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "nnjmO'o![u8Zb.x6M", 963);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.containsWhitespace("doesn't contain any substring.");
      assertTrue(boolean0);
      
      String string5 = StringUtils.strip("doesn't contain any substring.");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("doesn't contain any substring.", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      String string0 = StringUtils.difference("doesn't contain any substring.", "doesn't contain any substring.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase(" @StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" @sTDiO DEFINED NO INPUT, SO sYSTEM.IN IS STILL IN PLACE AND NO sTDiN PARAMETER CAN BE PROVIDED. iF YOU WANT TO DEFINE EMPTY INPUT, USE `@sTDiO(\"\")`.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", (-5114), ';');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween(" @sTDiO DEFINED NO INPUT, SO sYSTEM.IN IS STILL IN PLACE AND NO sTDiN PARAMETER CAN BE PROVIDED. iF YOU WANT TO DEFINE EMPTY INPUT, USE `@sTDiO(\"\")`.", "T ", "K");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " @StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string3 = StringUtils.unwrap("T ", "K");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("T ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBefore("doesn't contain any substring.", "");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertEquals(188, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = Locale.getISOCountries();
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray1);
      assertEquals(250, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = Locale.getISOLanguages();
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(188, stringArray3.length);
      assertNotNull(stringArray3);
      
      Locale locale1 = Locale.KOREA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      
      String string5 = locale0.getDisplayCountry(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("\uC77C\uBCF8", string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("JP", locale2.getCountry());
      
      String string6 = locale0.getDisplayVariant();
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", string6);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotNull(string6);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      
      int int1 = StringUtils.getFuzzyDistance("", "T ", locale0);
      assertFalse(int1 == int0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(0, int1);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      
      double double0 = StringUtils.getJaroWinklerDistance("doesn't contain any substring.", "T ");
      assertEquals(0.51, double0, 0.01);
      
      String string7 = StringUtils.getDigits("wD}=E87A%Y'99*O%D");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("8799", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.uncapitalize("K");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertEquals("k", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.defaultString("The character must not be null", "T ");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertEquals("The character must not be null", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.trimToNull(" @sTDiO DEFINED NO INPUT, SO sYSTEM.IN IS STILL IN PLACE AND NO sTDiN PARAMETER CAN BE PROVIDED. iF YOU WANT TO DEFINE EMPTY INPUT, USE `@sTDiO(\"\")`.");
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertEquals("@sTDiO DEFINED NO INPUT, SO sYSTEM.IN IS STILL IN PLACE AND NO sTDiN PARAMETER CAN BE PROVIDED. iF YOU WANT TO DEFINE EMPTY INPUT, USE `@sTDiO(\"\")`.", string10);
      assertNotNull(string10);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("", stringArray1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(boolean2);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(188, stringArray1.length);
      
      String string11 = StringUtils.stripStart(" @sTDiO DEFINED NO INPUT, SO sYSTEM.IN IS STILL IN PLACE AND NO sTDiN PARAMETER CAN BE PROVIDED. iF YOU WANT TO DEFINE EMPTY INPUT, USE `@sTDiO(\"\")`.", "9N??/$@v");
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertEquals(" @sTDiO DEFINED NO INPUT, SO sYSTEM.IN IS STILL IN PLACE AND NO sTDiN PARAMETER CAN BE PROVIDED. iF YOU WANT TO DEFINE EMPTY INPUT, USE `@sTDiO(\"\")`.", string11);
      assertNotNull(string11);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("N%!n5^_t]Pi0)H:*CEK", "doesn't contain any substring.", 3356, (-475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 31
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      String string0 = StringUtils.stripEnd("~`';#VHQiARe_i", "~`';#VHQiARe_i");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("s/&[B", 2228, 'Y');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "b)?$^_H10rp|A`/W0u";
      objectArray0[2] = (Object) "b)?$^_H10rp|A`/W0u";
      objectArray0[3] = (Object) "b)?$^_H10rp|A`/W0u";
      objectArray0[4] = (Object) "~`';#VHQiARe_i";
      objectArray0[5] = (Object) "~`';#VHQiARe_i";
      String string2 = StringUtils.join(objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6, objectArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("java.lang.Object@559fe4c1b)?$^_H10rp|A`/W0ub)?$^_H10rp|A`/W0ub)?$^_H10rp|A`/W0u~`';#VHQiARe_i~`';#VHQiARe_i");
      assertFalse(boolean0);
      
      String string3 = StringUtils.center("~`';#VHQiARe_i", 3397);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll(string1, "HW]", "^U47?&^C");
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap("Y,t#|7; bm5", 'Y');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Y,t#|7; bm5", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = StringUtils.unwrap(">4", '>');
      assertEquals(">4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      String string0 = StringUtils.stripEnd("RW", "+~pM_1*4rSSaH1XP/31");
      assertEquals("RW", string0);
      assertNotNull(string0);
      
      String string1 = "@x";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@x", "RW");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad("b)?$^_H10rp|A`/W0u", 5919, '.');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.center("RW", 5919);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Cannot clear and set the following entries at the same time: ", 67);
      assertEquals("annot clear and set the following entries at the same time: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '(', 3271, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      String string0 = StringUtils.stripEnd("#", "#");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("#", 3400, '\u0013');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("b)?$^_H10rp|A`/W0u", 3400);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase(string1, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("b)?$^_H10rp|A`/W0u", '\u0013');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("b)?$^_H10rp|A`/W0u", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      StringUtils.repeat('z', 3400);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "f.|RV'W");
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("f.|RV'W", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "\r", "#");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.uncapitalize(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "f.|RV'W", 777);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      int[] intArray0 = new int[10];
      String string0 = StringUtils.join(intArray0, '!');
      assertEquals("0!0!0!0!0!0!0!0!0!0", string0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("0!0!0!0!0!0!0!0!0!0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare((String) null, "", true);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'T';
      charArray0[2] = '[';
      charArray0[3] = 'Y';
      charArray0[4] = 'k';
      charArray0[5] = 'p';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "v", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'~', 'T', '[', 'Y', 'k', 'p'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("v", "v");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.leftPad("!o[`", 1061, "`");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, stringArray0.length);
      
      boolean boolean3 = StringUtils.isMixedCase(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("Don't clear/set the same entry more than once.");
      assertEquals("DON'T CLEAR/SET THE SAME ENTRY MORE THAN ONCE.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Don't clear/set the same entry more than once.");
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("DON'T CLEAR/SET THE SAME ENTRY MORE THAN ONCE.");
      assertEquals(46, intArray0.length);
      assertNotNull(intArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      byte[] byteArray0 = StringUtils.getBytes("Don't clear/set the same entry more than once.", charset0);
      assertEquals(46, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      ByteBuffer byteBuffer0 = charset0.encode("NH&MsJ:3<");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      assertEquals(9, byteBuffer0.limit());
      
      String string1 = StringUtils.repeat("IX", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("IX", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      String string0 = StringUtils.repeat("G+R9C\"~u)0c", "d3,S", 1);
      assertEquals("G+R9C\"~u)0c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '\\';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) '5';
      floatArray0[3] = (float) (-471);
      floatArray0[4] = (float) '\\';
      floatArray0[5] = (float) (-471);
      floatArray0[1] = (float) '\\';
      floatArray0[8] = (float) (-471);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '5', 2248, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid(" ", (-1), 1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) " ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      String string1 = StringUtils.stripToNull(" ");
      assertNull(string1);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      String string2 = StringUtils.abbreviate("Execution of '%s' took [%d] ms.", "NH&MsJ:3<", 2358, 2358);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Execution of '%s' took [%d] ms.", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(" ", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("Execution of '%s' took [%d] ms.", "Execution of '%s' took [%d] ms.");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric(" ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "Execution of '%s' took [%d] ms.", (CharSequence[]) stringArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.removeEnd("U~*J:danv3n{4^;L/", " ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("U~*J:danv3n{4^;L/", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = StringUtils.splitByWholeSeparator("XVj\"D74W7',&5{", "XVj\"D74W7',&5{", 32);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(">4", '>');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string1 = StringUtils.substringBeforeLast(">4", "             ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(">4", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeFirst("[ NzH+{", "%agUdVR");
      assertEquals("[ NzH+{", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "|tX:Hf~Ng1x;aP";
      stringArray0[3] = null;
      stringArray0[4] = "[ NzH+{";
      stringArray0[5] = "[ NzH+{";
      stringArray0[6] = "t(ia";
      stringArray0[4] = "[ NzH+{";
      stringArray0[8] = "[ NzH+{";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("|tX:Hf~Ng1x;aP", string2);
      assertEquals(9, stringArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
      
      String string3 = StringUtils.substring("%agUdVR", 0, 14);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("%agUdVR", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("t(ia", 38, 2712);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("t(ia", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("{displayName}");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("{displayName}", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, stringArray0.length);
      
      String string6 = StringUtils.stripStart(" vs iGy(@v+6>.#p vs iGy(@v+6>.#piGy(@v+6>.#p", (String) null);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("vs iGy(@v+6>.#p vs iGy(@v+6>.#piGy(@v+6>.#p", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.toRootUpperCase(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Charset.forName("$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // $
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 13, "zrY9AV@ziPWkk=nx");
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9AV@ziPWkk", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("zrY9AV@ziPWkk=nx");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("zrY9AV@ziPWkk=n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad(")C>|dP", 2882, '=');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string3, ")C>|dP", 226);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsWhitespace("%s %s.");
      assertTrue(boolean0);
      
      String string5 = StringUtils.substring(string3, (-1572), (-1185));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("===================================================================================================================================================================================================================================================================================================================================================================================================", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      String string0 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+V", 2881, 'Q');
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, "p{InCombiningDiacriticalMarks}+V", (int) 'Q');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'm');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.5726704524732562);
      String string0 = StringUtils.removeStart("q!,fZH4&%!", "org.juntpioneer.jupiter.ReportEntryExtesion");
      assertEquals("q!,fZH4&%!", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.leftPad("org.juntpioneer.jupiter.ReportEntryExtesion", 32767, "q!,fZH4&%!");
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.remove("[ NzH+{", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertEquals("[ NzH+{", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.center("6-o={<t`TMm", (-1753));
      assertFalse(string4.equals((Object)string2));
      assertEquals("6-o={<t`TMm", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("[ NzH+{", (String) null);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("[ NzH+{", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "B#", true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, "/iLY");
      assertEquals("/iLY", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("/iLY", "/iLY");
      assertTrue(string1.equals((Object)string0));
      assertEquals("/iLY", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("/iLY");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("/iLY");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.removeAll((String) null, "/iLY");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.toRootUpperCase("/iLY");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("/ILY", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String string0 = StringUtils.repeat("Ya", 3401);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("v");
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 108;
      doubleArray0[3] = (double) 108;
      doubleArray0[4] = (double) '(';
      doubleArray0[5] = 1194.668143484066;
      String string1 = StringUtils.join(doubleArray0, '(', 3401, 108);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new double[] {1.0, (-1.0), 108.0, 108.0, 40.0, 1194.668143484066}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Ya");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)109;
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("wn.");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replace("NP^FP@z|.Z%", "wn.", "wn.");
      assertEquals("NP^FP@z|.Z%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("NP^FP@z|.Z%", "H", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NP^FP@z|.Z%H", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Minimum abbreviation width is %d", "NP^FP@z|.Z%");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (int) (byte)109);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = 'F';
      charArray0[2] = ')';
      charArray0[3] = 'M';
      charArray0[4] = '6';
      charArray0[5] = 'Z';
      charArray0[6] = 'z';
      charArray0[7] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'b', 'F', ')', 'M', '6', 'Z', 'z', '<'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(8, charBuffer0.length());
      assertEquals("bF)M6Zz<", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      // Undeclared exception!
      try { 
        StringUtils.indexOf((CharSequence) charBuffer0, (-2843), 108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[1];
      longArray0[0] = (-3191L);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'y', 5997, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "%agUdVR";
      objectArray0[1] = objectArray0[0];
      objectArray0[4] = (Object) "%agUdVR";
      objectArray0[5] = (Object) "%agUdVR";
      objectArray0[7] = (Object) "%agUdVR";
      objectArray0[8] = (Object) "%agUdVR";
      String string0 = StringUtils.join(objectArray0, '1');
      assertEquals("%agUdVR1%agUdVR111%agUdVR1%agUdVR11%agUdVR1%agUdVR", string0);
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '1', 5, 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "\r", 65536);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
      
      String string0 = "";
      // Undeclared exception!
      StringUtils.repeat("\r", "\r", 65536);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Strings must not Qe null", "Strings must not Qe null");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("Strings must not Qe null", stringArray0);
      assertEquals(24, int0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Strings must not Qe null", 105);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEachRepeatedly("P", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("P", string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String string0 = StringUtils.rightPad("h", 8200, 'o');
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("h");
      assertFalse(string1.equals((Object)string0));
      assertEquals("h", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Expected exception %s was not thrown.");
      assertEquals("Expectedexception%swasnotthrown.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Expected exception %s was not thrown.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("Expected exception %s was not thrown.", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Expected exception %s was not thrown.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("UIYz+i.wWKvH ,", "Expected exception %s was not thrown.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("UIYz+i.wWKvH ,", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("UIYz+i.wWKvH ,", "xPpocZg%9", "...");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("UIYz+i.wWKvH ,", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("offset cannot be negative>O\"hNHZH)[hku");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Expected exception %s was not thrown.", (CharSequence) "Expected exception %s was not thrown.", 0);
      assertEquals(0, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("Expected exception %s was not thrown.", (String) null);
      assertEquals(37, byteArray0.length);
      assertNotNull(byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-66);
      floatArray0[4] = (float) 10;
      floatArray0[5] = (float) 'E';
      floatArray0[6] = (float) 'E';
      String string6 = StringUtils.join(floatArray0, '!', 128, 4);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-66.0F), 10.0F, 69.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[8] = 'O';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'O'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O");
      assertFalse(string1.equals((Object)string0));
      assertEquals("O", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("O", "O");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      int int0 = StringUtils.lastOrdinalIndexOf("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O", "O", 2);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isMixedCase("kV ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.lastIndexOfAny("kV ", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "O", (CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O", 2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean2 = StringUtils.startsWithAny("O", charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      
      double double0 = StringUtils.getJaroWinklerDistance("*Wi93f 2((g?^", "zrY9AV@ziPWyk=n~x");
      assertEquals(0.26, double0, 0.01);
      
      String string0 = StringUtils.rotate((String) null, 3248);
      assertNull(string0);
      
      String string1 = StringUtils.substringBefore("*Wi93f 2((g?^", "HoxD'd=rx&q(BX+");
      assertEquals("*Wi93f 2((g?^", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zrY9AV@ziPWyk=n~x";
      stringArray0[1] = "HoxD'd=rx&q(BX+";
      stringArray0[2] = ", cV;dCVz+EQfO";
      stringArray0[3] = "*Wi93f 2((g?^";
      stringArray0[4] = null;
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("*Wi93f 2((g?^", "BXtl", true);
      assertEquals((-56), int0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String[] stringArray0 = new String[5];
      stringArray0[2] = "w{A <zC8%n)dk";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("w{A <zC8%n)dk", string0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[1], stringArray0[4]);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(5, stringArray0.length);
      
      int int0 = 95;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "KNw(P'&2k8I_t&$y=px", 2, 95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.params.FloatRange", "*Wi93f 2((g?^", 2);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceOnce((String) null, "zrY9AV@ziPWyk=n~x", "*Wi93f 2((g?^");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils9Nj~x6", (-692));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.repeat("@o0h~`S?<t+F({*11", 1224);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank(" must be static.", "org.apache.commons.lang3.StringUtils9Nj~x6");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" must be static.", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.StringUtils9Nj~x6"));
      
      boolean boolean0 = linkedList0.add((Object) ">=N;~CuPbex~");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.StringUtils9Nj~x6"));
      assertTrue(linkedList0.contains(">=N;~CuPbex~"));
      
      boolean boolean1 = linkedList0.add((Object) charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.StringUtils9Nj~x6"));
      assertTrue(linkedList0.contains(""));
      
      String string3 = StringUtils.appendIfMissing(" must be static.", "offset cannot be negative", charSequenceArray0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" must be static.", string3);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("we");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("qub[`&l-w+i", "qub[`&l-w+i", "H972k2e9Z)mR");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("H972k2e9Z)m", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">=N;~CuPbex~", (CharSequence) "we", 10);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = " must be static.";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils9Nj~x6";
      stringArray0[2] = "RrZU n@>vZC}b1";
      stringArray0[3] = "offset cannot be negative";
      stringArray0[4] = string1;
      stringArray0[5] = " must be static.";
      stringArray0[6] = "@o0h~`S?<t+F({*11";
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals(" must be static.", string6);
      assertEquals(7, stringArray0.length);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.startsWithAny("@o0h~`S?<t+F({*11", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      
      String string7 = StringUtils.substringBefore(";y3W", " must be static.");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals(";y3W", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.replaceChars(">v7 ", '\u001D', '\u001D');
      assertEquals(">v7 ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("6LM]TP\"A%.>e_QK", "6LM]TP\"A%.>e_QK");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("b)?$^_H10rp|A`/W0u");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad(" vs ", 3397, '\u001D');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(">v7 ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.getDigits("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll(" vs ", "", ">v7 ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(">v7  >v7 v>v7 s>v7  >v7 ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap(" vs ", '\u001D');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" vs ", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 3397;
      floatArray0[1] = (float) '\u001D';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 3397;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) '\u001D';
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) '\u001D';
      floatArray0[8] = (float) '\u001D';
      String string6 = StringUtils.substringAfter(">v7  >v7 v>v7 s>v7  >v7 ", "");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals(">v7  >v7 v>v7 s>v7  >v7 ", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      String string0 = StringUtils.stripEnd(";h~_q_", "Object varargs must not be null");
      assertEquals(";h~_q_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Object varargs must not be null", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.toRootLowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) ";h~_q_";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[6] = (CharSequence) "Object varargs must not be null";
      int int0 = StringUtils.lastIndexOfAny(";h~_q_", charSequenceArray0);
      assertEquals(6, int0);
      assertEquals(7, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[1], 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "\n", 0);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string1 = StringUtils.substringBetween("$", "\n");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      int int1 = StringUtils.compare((String) null, "\n");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.chop("09`su~^y-bCqo");
      assertFalse(string2.equals((Object)string0));
      assertEquals("09`su~^y-bCq", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[4], (-245), Integer.MAX_VALUE);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare((String) null, "B_", true);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Nz");
      assertEquals("Nz", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Nz");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Nz";
      stringArray0[1] = "<aT|@y";
      stringArray0[2] = "Nz";
      stringArray0[3] = "Nz";
      stringArray0[4] = "Nz";
      stringArray0[5] = "Nz";
      stringArray0[6] = "Nz";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Nz", string1);
      assertEquals(7, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("Nz");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("nz", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("ko^>SMgq;Wus*-b", (-1387));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "<aT|@y", (-1387), (-1387));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBefore("Can't disable based on arguments, because method %s had no parameters.", "<aT|@y");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Can't disable based on arguments, because method %s had no parameters.", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "Nz", (CharSequence) "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.substringBetween("Nz", "<aT|@y");
      assertNull(string5);
      
      String string6 = StringUtils.chop("Nz");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("N", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeEnd("", "Can't disable based on arguments, because method %s had no parameters.");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("Nz"));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("Nz"));
      
      String string8 = StringUtils.join(iterator0, "Illegal range. The step cannot be zero.");
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      String string9 = StringUtils.rightPad("Nz", 4, "Nz");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertEquals("NzNz", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{E", "");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad(".=8", 6, ".=8");
      assertEquals(".=8.=8", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[3] = 1167.474;
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "\n", 0);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) "\n");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.chop("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlpha("\n");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllUpperCase("");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string2 = StringUtils.mid("", 0, 2194);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "%";
      stringArray0[3] = "";
      stringArray0[4] = "\n";
      stringArray0[5] = "";
      stringArray0[6] = "\n";
      stringArray0[7] = "\n";
      stringArray0[8] = "\n";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("%", string3);
      assertEquals(9, stringArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "ww", supplier0);
      assertEquals("ww", charSequence0);
      assertNotNull(charSequence0);
      
      String string0 = StringUtils.rightPad("07N~}Search and Replace array lengths don't mtch: ", 8192, '6');
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("", "07N~}Search and Replace array lengths don't mtch: ");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1865);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[0];
      String string0 = StringUtils.center((String) null, 65, 'J');
      assertNull(string0);
      
      String string1 = StringUtils.remove((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chomp("07N~}Search and Replace array lengths don't match: ");
      assertEquals("07N~}Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[0];
      String string3 = StringUtils.stripStart((String) null, "empty display name.");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) "empty display name.";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "empty display name.";
      charSequenceArray0[7] = (CharSequence) string0;
      String string4 = StringUtils.prependIfMissingIgnoreCase("t be negative", "07N~}Search and Replace array lengths don't match: ", charSequenceArray0);
      assertFalse(string4.equals((Object)string2));
      assertEquals("07N~}Search and Replace array lengths don't match: t be negative", string4);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string5 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string5);
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "07N~}Search and Replace array lengths don't match: ";
      charSequenceArray1[2] = (CharSequence) "07N~}Search and Replace array lengths don't match: ";
      charSequenceArray1[3] = (CharSequence) "8r!50Cob(Omdx#$S&MqbAY";
      charSequenceArray1[4] = (CharSequence) null;
      charSequenceArray1[5] = (CharSequence) "07N~}Search and Replace array lengths don't match: t be negative";
      charSequenceArray1[6] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(7, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1268);
      shortArray0[1] = (short)101;
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 35);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replace("AT$[mhD7kJ&hUUlL", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertEquals("AT$[mhD7kJ&hUUlL", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replacePattern("", "Method `Stream<? extends Arguments> ", "JiyenYx1r+yA8V:)5");
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("x<<N@|Rwa,O/6$", " ", "^Z6P>L3");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "0.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)25;
      String string2 = StringUtils.leftPad("", 3873, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("Cannot get the toString of a null object", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", (int) (byte) (-74), '%');
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray1 = StringUtils.substringsBetween("Cannot get the toString of a null object", "", "zp");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("\n", "\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.rightPad("", 32767, 'J');
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(321);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "|tX:Hf~Ng1x;aP";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("|tX:Hf~Ng1x;aP", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("1PR}+A3nU!3lv'k*58q", "1PR}+A3nU!3lv'k*58q");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring(">v@FZk[qClJ0hI?~eK", 98, (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, 98, 1446);
      assertNull(string2);
      
      String string3 = StringUtils.uncapitalize("|tX:Hf~Ng1x;aP");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("|tX:Hf~Ng1x;aP", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.stripStart(" dlJN#k-", "|tX:Hf~Ng1x;aP");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" dlJN#k-", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "\"CM*,/d*ZB(KVhu");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("\"CM*,/d*ZB(KVhu").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertEquals("\"CM*,/d*ZB(KVhu", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase("\"CM*,/d*ZB(KVhu");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("\"CM*,/d*ZB(KVhu");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "jj", "jj");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      String string0 = StringUtils.substringBefore("q!,fZH4&%!", "q!,fZH4&%!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("q!,fZH4&%!", "", 92);
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      String string2 = StringUtils.replace("q!,fZH4&%!", "D", "T&~5@=\u0006|g");
      assertFalse(string2.equals((Object)string0));
      assertEquals("q!,fZH4&%!", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("q!,fZH4&%!");
      assertTrue(boolean0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.left("o+Jwm{yp", (-159));
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = null;
      String string1 = StringUtils.overlay("c^Zw5!x", "o+Jwm{yp", 136, (-159));
      assertFalse(string1.equals((Object)string0));
      assertEquals("o+Jwm{yp", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "o+Jwm{yp";
      String string2 = StringUtils.replaceOnce("", "o+Jwm{yp", "!%%w/v-.K'VgF3=");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      String string3 = StringUtils.replaceChars("c^Zw5!x", '\'', 'd');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("c^Zw5!x", string3);
      assertNotNull(string3);
      
      charSequenceArray0[6] = (CharSequence) "c^Zw5!x";
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils9Nj~x6", (-692));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.removeEnd("offset cannot be negative", ">O\"hNHZH)[hku");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst(">O\"hNHZH)[hku", "W%$$pg<We@F4", "gyMT5(~Xa8(t9");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">O\"hNHZH)[hku", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(">O\"hNHZH)[hku", charSequenceArray0);
      assertEquals(13, int0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsWhitespace("we");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBefore("Search and Replace array lengths don't match: ", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '`';
      boolean boolean1 = StringUtils.containsNone((CharSequence) ">O\"hNHZH)[hku", charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'>', '`'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric("offset cannot be negative");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '>';
      longArray0[1] = (long) 13;
      longArray0[2] = (long) '`';
      longArray0[3] = (long) '>';
      longArray0[4] = (long) '`';
      longArray0[5] = (long) '>';
      longArray0[6] = (long) '`';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '!', 0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.join((Object[]) stringArray0, '-');
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceEach("org.apache.commons.lang3.ArrayUtils", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.ArrayUtils", stringArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "K[4yU]^usI?RiXq${Q");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.rightPad("", (-1), "@CartesianProductTest not found.{}@CartesianProductTest not found.{}@CartesianProductTest not found.{}@CartesianProductTest not found.{}@CartesianProductTest not found.{}{}");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.repeat("...", 107);
      assertEquals(".................................................................................................................................................................................................................................................................................................................................", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("...", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "7Py(S+'#iJ3=04D";
      String string3 = StringUtils.overlay("7Py(S+'#iJ3=04D", "Strings must not be null6-o={<t`TMm", 20, 18);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7Py(S+'#iJ3=04DStrings must not be null6-o={<t`TMm", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Strings must not be null6-o={<t`TMm", "7Py(S+'#iJ3=04D", 20, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 31
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      String string0 = StringUtils.capitalize("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("", 3025);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "c@9T";
      String string2 = StringUtils.replaceAll("", "<R;Y!2cs8K|&K<\"!2w@Kty.", "c@9T");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("c@9T", "Minimum abbreviation width is %d");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "offset cannot be negative", "V");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "n&<DJKlwlI#'L&vO");
      assertNull(stringArray0);
      
      String string0 = StringUtils.removeFirst((String) null, ", ");
      assertNull(string0);
      
      String string1 = StringUtils.capitalize("t'C!gzg3PvsYhV>a(\"");
      assertEquals("T'C!gzg3PvsYhV>a(\"", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, (String) null, "Classpath resource [");
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("", 1000, "/");
      assertFalse(string3.equals((Object)string1));
      assertEqualsstring3);
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("n&<DJKlwlI#'L&vO", supplier0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("n&<DJKlwlI#'L&vO", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripToNull("8[$f8=tM");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("8[$f8=tM", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "8[$f8=tM", (CharSequence) "", 1000);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("]B8&`<*p`h5i9", "ww", 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Strings must not be null6-o={<t`TMm", "7Py(S+'#iJ3=04D", 52, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 31
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("] does not exist", "] does not exist", "] does not exist");
      assertEquals("] does not exist", string0);
      assertNotNull(string0);
      
      String string1 = "PW@a&,*?t\\";
      String string2 = "r8SaXmL#pBy~+v[,";
      String string3 = StringUtils.chomp("r8SaXmL#pBy~+v[,");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("r8SaXmL#pBy~+v[,", string3);
      assertNotNull(string3);
      
      char char0 = '*';
      String string4 = StringUtils.rightPad("] does not exist", 1650, '*');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("PW@a&,*?t");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("PW@a&,*?t", 1650, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("k0E");
      assertTrue(boolean0);
      
      String string0 = StringUtils.removeStart("k0E", "");
      assertEquals("k0E", string0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String[] stringArray0 = new String[1];
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("'$$cca642UWP6be9.", 284, "0Y__73L$~2%JGaR\"7");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'$$cca642UWP6be9.0Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("\n");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("R=YS;)Wmi]g*39]2Eo", 5458, '4');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlpha("eQ*>XLLqH(]9");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)67;
      shortArray0[1] = (short) (-306);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'M', 0, 3191);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2932);
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-2810);
      String string0 = StringUtils.join(shortArray0, '?');
      assertEquals("-2932?13?-2810", string0);
      assertArrayEquals(new short[] {(short) (-2932), (short)13, (short) (-2810)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("#", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("-2932?13?-2810", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("vuzr9]3|=", "vuzr9]3|=", "vuzr9]3|=");
      assertEquals("vuzr9]3|=|=", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "vuzr9]3|=|=", (CharSequence) "vuzr9]3|=|=");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("vuzr9]3|=|=");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("^GuOD:F)'t`gZLndxw@55/B!", "cV;dCVz+EQfOStrings must not be null", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '';
      charArray0[3] = 't';
      charArray0[4] = '2';
      charArray0[5] = 'I';
      charArray0[6] = '7';
      charArray0[7] = '=';
      String string2 = StringUtils.join(charArray0, '=', 0, 2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}=}", string2);
      assertArrayEquals(new char[] {'}', '}', '', 't', '2', 'I', '7', '='}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("}=}");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.substringBetween(" vs ", " vs ", " vs ");
      assertNull(string0);
      
      String string1 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string1);
      
      String string2 = "9";
      String string3 = StringUtils.remove("9", (String) null);
      assertTrue(string3.equals((Object)string2));
      assertEquals("9", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("9");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("9", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("cV;dCVz+EQfO", (-1753));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("cV;dCVz+EQfO", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", " ;HfLNE5o", (-3251), 38);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Search and Replace array leng ;HfLNE5o", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.strip("S8RZU6");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("S8RZU6", string7);
      assertNotNull(string7);
      
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "S8RZU6";
      objectArray0[2] = (Object) "9";
      objectArray0[3] = (Object) "9";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '9', (-1753), 353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1753
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'a');
      assertEquals("", string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "0.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviate((String) null, "M<=.q}5T[n+bkKd{:PNnU6t", 6, 0);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("0.0", "M<=.q}5T[n+bkKd{:PNnU6t");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isNumeric("M<=.q}5T[n+bkKd{:PNnU6t");
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string4 = StringUtils.wrap("", '&');
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited("", '%');
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null", Integer.MAX_VALUE);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Strings must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = 'u';
      charArray0[2] = 'k';
      charArray0[3] = ':';
      charArray0[4] = 'D';
      charArray0[5] = 'T';
      charArray0[6] = 'b';
      charArray0[7] = 'h';
      charArray0[8] = '5';
      String string0 = StringUtils.join(charArray0, 'D');
      assertEquals("CDuDkD:DDDTDbDhD5", string0);
      assertArrayEquals(new char[] {'C', 'u', 'k', ':', 'D', 'T', 'b', 'h', '5'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.JAPAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      
      boolean boolean0 = locale1.hasExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(boolean0);
      assertNotSame(locale1, locale0);
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(locale1));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) vector0, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(list0.contains(locale1));
      assertFalse(vector0.contains(locale1));
      
      String string1 = locale0.getDisplayScript(locale1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      
      Locale locale2 = (Locale)locale0.clone();
      assertTrue(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotNull(locale2);
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("CDuDkD:DDDTDbDhD5", "CDuDkD:DDDTDbDhD5", locale0);
      assertTrue(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(49, int0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.wrapIfMissing("", 'y');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("cV;dCVz+EQfOStrings must not be null", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("=zx@gyV@N", ",&|P@jp", "Minimum abbreviation width is %d");
      assertNull(stringArray0);
      
      String string0 = StringUtils.uncapitalize("cV;dCVz+EQfO");
      assertEquals("cV;dCVz+EQfO", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "cV;dCVz+EQfO", (CharSequence) "=zx@gyV@N");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "cV;dCVz+EQfO", (CharSequence) "=zx@gyV@N");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int2 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", (CharSequence) " ");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, int2);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String string0 = StringUtils.removePattern("Y&*0m`P", "Y&*0m`P");
      assertEquals("Y&*0m`P", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`P";
      String string1 = StringUtils.repeat('b', 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'b';
      // Undeclared exception!
      StringUtils.indexOfAnyBut((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart(" ", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) " ", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length(" ");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string2 = StringUtils.leftPad((String) null, (int) (byte) (-74), (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter("q4", "S*.glsH@gq9\u0005");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("S*.glsH@gq9\u0005");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("S*.glsH@gq9\u0005", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "l&eLsLx_.r_6");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("l&eLsLx_.r_6", 'V');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Vl&eLsLx_.r_6V", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, "AJ_Oc^AgJo9'$\"", 717, (-1446));
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "AJ_Oc^AgJo9'$\"";
      charSequenceArray0[1] = (CharSequence) "AJ_Oc^AgJo9'$\"";
      charSequenceArray0[2] = (CharSequence) "AJ_Oc^AgJo9'$\"";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "AJ_Oc^AgJo9'$\"";
      String string1 = StringUtils.prependIfMissing("", "AJ_Oc^AgJo9'$\"", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("AJ_Oc^AgJo9'$\"");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[0], (CharSequence) "AJ_Oc^AgJo9'$\"");
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "", charSequenceArray0[1]);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.swapCase("AJ_Oc^AgJo9'$\"");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("aj_oC^aGjO9'$\"", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("Locale must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("locale must not be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("Y:011LLc^aStopwatchExtensionY:011LLc^aStopwatchExtensionStopwatchExtension", 717);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("#", supplier0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("#", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 56);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("|qG/Kn* *Y7pM&OIr", "W", 56, 7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("|qG/Kn*W", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "W";
      charSequenceArray0[1] = (CharSequence) "vuzr9]3|=";
      charSequenceArray0[2] = (CharSequence) "|qG/Kn* *Y7pM&OIr";
      charSequenceArray0[3] = (CharSequence) "|qG/Kn* *Y7pM&OIr";
      int int0 = StringUtils.indexOfAny((CharSequence) "|qG/Kn*W", charSequenceArray0);
      assertEquals(7, int0);
      assertEquals(4, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "|qG/Kn* *Y7pM&OIr", 2418, 7);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '9', 3, (-1653));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(" ");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(" ", " ", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "~-ihzXH#>", (int) (short)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1865);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1PR}+A3nU!3lv'k*58q";
      String string0 = StringUtils.stripStart("1PR}+A3nU!3lv'k*58q", "1PR}+A3nU!3lv'k*58q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = StringUtils.overlay("", "", 2, 1865);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("1PR}+A3nU!3lv'k*58q", 2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(6, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("{WC:_Y4u]m+*H7!= ", "3\\dLWd*^y'");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("{WC:_Y4u]m+*H7!= ", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "3\\dLWd*^y'", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "vuzr9]3|=";
      String string1 = StringUtils.join((Object[]) charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vuzr9]3|=", string1);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "vuzr9]3|=";
      charSequenceArray0[3] = (CharSequence) "{6]3#c~ufBAljJ,{;";
      charSequenceArray0[4] = (CharSequence) "{6]3#c~ufBAljJ,{;";
      charSequenceArray0[5] = (CharSequence) "%s %s.";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[4], "t]`m2l`n=}i0dKWh");
      assertEquals(2, int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.appendIfMissing("", "{6]3#c~ufBAljJ,{;", charSequenceArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("{6]3#c~ufBAljJ,{;");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("63", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "{6]3#c~ufBAljJ,{;", (CharSequence) "t]`m2l`n=}i0dKWh", 2);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.defaultIfBlank("", "Threshold must not be negative");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("Search and Replace array lengths don't match: ", (-3476), (-3476));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.substring("\n", (-1411), (-1411));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.chomp("n");
      assertEquals("n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("The type must not be null", "Parameter of type %s must reference an Enum type", (-3208));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(21, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("............................................................................................................................................................................................................................................................................................................................................................OW/IH\"LFGovW_C", "%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("............................................................................................................................................................................................................................................................................................................................................................OW/IH\"LFGovW_C", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "ucZLx_}/`fw{ymP");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("\u0000", "\u0000");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\u0000";
      charSequenceArray0[1] = (CharSequence) "\u0000";
      String string1 = StringUtils.repeat('\"', 2639);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace("\u0000");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.rightPad("\u0000", 2639, '\"');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("\u0000", "\u0000");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\u0000";
      charSequenceArray0[1] = (CharSequence) "\u0000";
      charSequenceArray0[3] = (CharSequence) "\u0000";
      String string1 = "we";
      String string2 = StringUtils.removeEnd("Object varargs must not be null", "we");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("Object varargs must not be null", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("Object varargs must not be null");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.substringBefore("\u0000", "\u0000");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Object varargs must not be null", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 24.34665;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      // Undeclared exception!
      StringUtils.join(doubleArray0, '^', (-1932735280), 2189);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '^';
      charArray0[2] = 'I';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Y:01xHL!L1^", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'5', '^', 'I'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("0.0}0.0}1167.474}0.0");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("5xFY#AbQH<Ij8>bU.M", 0);
      assertEquals("5xFY#AbQH<Ij8>bU.M", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      StringUtils.join(objectArray0, "Y-bNxk)k}u", (-1932735280), 35);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)66;
      String string0 = "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      String string1 = StringUtils.replace("1z0QJAaR|6j2N", "org.junitpioneer.jupiter.DefaultTimeZoneExtension", "1z0QJAaR|6j2N");
      assertFalse(string1.equals((Object)string0));
      assertEquals("1z0QJAaR|6j2N", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("1z0QJAaR|6j2N", "1z0QJAaR|6j2N", "@o0h~`S?<t+F({*11Strings must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("@o0h~`S?<t+F({*11Strings must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("1z0QJAaR|6j2N", "a", 5252);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) string3, "1z0QJAaR|6j2N");
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "%agUdVR";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "[ NzH+{";
      objectArray0[3] = (Object) "%agUdVR";
      objectArray0[4] = (Object) "%agUdVR";
      objectArray0[5] = (Object) "%agUdVR";
      objectArray0[6] = (Object) "%agUdVR";
      objectArray0[7] = (Object) "%agUdVR";
      objectArray0[8] = (Object) "%agUdVR";
      String string0 = StringUtils.join(objectArray0, '1');
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) null, "[ NzH+{");
      assertNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("[ NzH+{");
      assertFalse(string2.equals((Object)string0));
      assertEquals("[ NZH+{", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("[ NzH+{", "%agUdVR1java.lang.Object@301e8c891[ NzH+{1%agUdVR1%agUdVR1%agUdVR1%agUdVR1%agUdVR1%agUdVR");
      assertEquals(0.69, double0, 0.01);
      
      String string3 = StringUtils.removeIgnoreCase("%agUdVR", "\" should have a parent context.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%agUdVR", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "[ NZH+{", (CharSequence) "%agUdVR");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.chop(": ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(":", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceAll("#", "%agUdVR", "Search and Replace array lengths don't match: p{InCombiningDiacriticalMarks}+Search and Replace array lengths don't match: p{InCombiningDiacriticalMarks}+Search and Replace array lengths don't match: p{InCombiningDiacriticalMarks}+Search and Replace array lengths don't match: p{InCombiningDiacriticalMarks}+Search and Replace array lengths don't match: p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("#", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "%agUdVR", (CharSequence) "%agUdVR", 1114083);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "%agUdVR1java.lang.Object@301e8c891[ NzH+{1%agUdVR1%agUdVR1%agUdVR1%agUdVR1%agUdVR1%agUdVR", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-14);
      String string0 = StringUtils.join(byteArray0, 'k', (-2159), (-2159));
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-14)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("C<W|=!I[^wf_$N:`", 4271);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "C<W|=!I[^wf_$N:`", (CharSequence) "");
      assertEquals(16, int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2159);
      intArray0[1] = (int) (byte) (-85);
      intArray0[2] = (int) (byte) (-14);
      intArray0[3] = (int) (byte) (-14);
      intArray0[4] = (-2159);
      intArray0[5] = (int) (byte) (-14);
      intArray0[6] = (-2159);
      intArray0[7] = 4271;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '8', (-2159), 4271);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2159
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String string0 = StringUtils.replaceChars(">v7 ", '\u001D', '\u001D');
      assertEquals(">v7 ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("6LM]TP\"A%.>e_QK", "6LM]TP\"A%.>e_QK");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("b)?$^_H10rp|A`/W0u");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad(" vs ", 3397, '\u001D');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(">v7 ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.getDigits("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll(" vs ", "", ">v7 ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(">v7  >v7 v>v7 s>v7  >v7 ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap(" vs ", '\u001D');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" vs ", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 3397;
      floatArray0[1] = (float) '\u001D';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 3397;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) '\u001D';
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) '\u001D';
      floatArray0[8] = (float) '\u001D';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '\u001D', 1, 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)109;
      String string0 = StringUtils.join(byteArray0, 'y');
      assertEquals("109y109y109y109y109y109y109", string0);
      assertArrayEquals(new byte[] {(byte)109, (byte)109, (byte)109, (byte)109, (byte)109, (byte)109, (byte)109}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "109y109y109y109y109y109y109";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[4], (String) null);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", "Irx1");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replacePattern((String) null, "{/;j}RR cOSK", "cV;dCVz+EQfO6v+3iK<Kh`8$ +Ub");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("'$$cca642UWP6be9.", 284, "0Y__73L$~2%JGaR\"7");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'$$cca642UWP6be9.0Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = 'Z';
      charArray0[2] = '}';
      charArray0[3] = '*';
      charArray0[4] = 'E';
      charArray0[5] = '9';
      charArray0[6] = 'a';
      int int0 = StringUtils.indexOfAny((CharSequence) "'$$cca642UWP6be9.", charArray0);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'`', 'Z', '}', '*', 'E', '9', 'a'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("'$$cca642UWP6be9.0Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%JGaR\"70Y__73L$~2%");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("'$$cca642UWP6be9.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((long[]) null, '9', (-1), 394);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase(" ", stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, stringArray0.length);
      
      boolean boolean3 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("3+JP1/&|&+Zu+g3rT");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("^S=9}o9T}", "-e$ 4");
      assertEquals("^S=9}o9T}", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is th input of another", 46, 23);
      assertFalse(string2.equals((Object)string1));
      assertEquals("... - output of one ...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)35;
      shortArray0[1] = (short) (-1302);
      shortArray0[2] = (short)54;
      shortArray0[3] = (short)10;
      shortArray0[4] = (short)76;
      String string4 = StringUtils.join(shortArray0, '\\', 122, (int) (short)35);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertArrayEquals(new short[] {(short)35, (short) (-1302), (short)54, (short)10, (short)76}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "^S=9}o9T}", (-1049));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = StringUtils.ordinalIndexOf("^S=9}o9T}", (CharSequence) null, (short)54);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String string0 = StringUtils.substringBetween("G7h}Irh2'P$I!k'", "b+f5G0bp{InCombiningDiacriticalMarks}+", "b+f5G0bp{InCombiningDiacriticalMarks}+");
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("b+f5G0bp{InCombiningDiacriticalMarks}+", (CharSequence) null, 108);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "0.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray1 = StringUtils.getBytes("", charset0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeFirst("[ NzH+{", "%agUdVR");
      assertEquals("[ NzH+{", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "|tX:Hf~Ng1x;aP";
      stringArray0[3] = null;
      stringArray0[4] = "[ NzH+{";
      stringArray0[5] = "[ NzH+{";
      stringArray0[6] = "t(ia";
      stringArray0[7] = "[ NzH+{";
      stringArray0[8] = "[ NzH+{";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("|tX:Hf~Ng1x;aP", string2);
      assertEquals(9, stringArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("[ NzH+{", string0);
      assertFalse(boolean0);
      
      String string3 = StringUtils.substring("%agUdVR", 0, 14);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("%agUdVR", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("t(ia", 38, 2712);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("t(ia", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("{displayName}");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("{displayName}", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, stringArray0.length);
      
      String string6 = StringUtils.stripStart(" vs iGy(@v+6>.#p vs iGy(@v+6>.#piGy(@v+6>.#p", (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("vs iGy(@v+6>.#p vs iGy(@v+6>.#piGy(@v+6>.#p", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'H', (int) (short)108, (-2022));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      String string0 = StringUtils.overlay("A5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a", "e loop is the input of another", (-2000), 11);
      assertEquals("e loop is the input of anotherF+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "e loop is the input of another";
      charSequenceArray0[1] = (CharSequence) "e loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "e loop is the input of another7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a";
      charSequenceArray0[3] = (CharSequence) "A5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a";
      charSequenceArray0[4] = (CharSequence) "A5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a";
      String string1 = StringUtils.join((short[]) null, 'K', (-2000), 50);
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissing("6v+3iK<Kh`8$ +Ub", charSequenceArray0[0], charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("6v+3iK<Kh`8$ +Ube loop is the input of another", string2);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[3], (CharSequence) "6v+3iK<Kh`8$ +Ube loop is the input of another", (-2000));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[3]);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      int int2 = StringUtils.ordinalIndexOf("6v+3iK<Kh`8$ +Ub", charSequenceArray0[1], 34);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      boolean boolean1 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.removeAll("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      boolean boolean2 = stack0.add((Object) charSequenceArray0[0]);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(""));
      
      boolean boolean3 = stack0.add((Object) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals("[null, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      boolean boolean4 = stack0.add((Object) locale_Category0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(10, stack0.capacity());
      assertEquals(3, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[null, null, FORMAT]", stack0.toString());
      assertFalse(stack0.contains(""));
      
      boolean boolean5 = stack0.add((Object) null);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(4, stack0.size());
      assertEquals("[null, null, FORMAT, null]", stack0.toString());
      assertFalse(stack0.contains(""));
      
      String string1 = StringUtils.join((List<?>) stack0, 's', (-3588), (-3588));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(4, stack0.size());
      assertEquals("[null, null, FORMAT, null]", stack0.toString());
      assertFalse(stack0.contains((-3588)));
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      String string2 = StringUtils.upperCase("", locale0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      String string3 = StringUtils.capitalize("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean6 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[1], charSequenceArray0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6);
      assertEquals(5, charSequenceArray0.length);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 'T';
      charArray0[6] = 'Q';
      charArray0[7] = 's';
      charArray0[8] = 's';
      boolean boolean7 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7);
      assertArrayEquals(new char[] {'s', 's', 's', 's', 's', 'T', 'Q', 's', 's'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.removeAll((String) null, "3(}fVCi{W`gl&wZS[L");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "3(}fVCi{W`gl&wZS[L", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("()` not found in ", "()` not found in ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) null, "()` not found in ", (-1), 1);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.remove("", "Object varargs must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Object varargs must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinWith("|/-EkbAU", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("OdW+0WAdzr|@");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "OdW+0WAdzr|@", 65);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      String string0 = StringUtils.stripEnd("u`", (String) null);
      assertEquals("u`", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, "A 1b[M&akZ4?");
      assertNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "u`", (CharSequence) "u`");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("u`", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = null;
      int int0 = StringUtils.lastIndexOfAny("H|EI)", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String[] stringArray0 = StringUtils.substringsBetween("yl>d9h", (String) null, "yl>d9h");
      assertNull(stringArray0);
      
      char[] charArray0 = null;
      int int1 = StringUtils.indexOfAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "H|EI)", (CharSequence) "H|EI)");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("S]_ 'YDGC?");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '|', (-1), 68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.overlay("A5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a", "e loop is the input of another", (-2000), 11);
      assertEquals("e loop is the input of anotherF+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "e loop is the input of another";
      charSequenceArray0[1] = (CharSequence) "e loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "e loop is the input of another7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a";
      charSequenceArray0[3] = (CharSequence) "A5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a";
      charSequenceArray0[4] = (CharSequence) "A5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a";
      int int0 = StringUtils.indexOfAny((CharSequence) "A5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"aA5,koQdxm7F+@hKx\"a,koQdxm7F+@hKx\"a", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2000);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'w', 0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[1];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashSet<String> hashSet0 = new HashSet<String>(3224);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string2 = "L=";
      String string3 = StringUtils.stripStart((String) null, "L=");
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.split((String) null, '0');
      assertNull(stringArray1);
      
      String string4 = "...";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        charset0.encode((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(188, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 218);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.repeat("...", 116);
      assertEquals("............................................................................................................................................................................................................................................................................................................................................................", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "...";
      String string1 = StringUtils.replaceEach("...", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("............................................................................................................................................................................................................................................................................................................................................................", "...");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("n4xEa5Q`CQvd(#x>v", "...", stringArray0[0]);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("n4xEa5Q`CQvd(#x>v", string3);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "n4xEa5Q`CQvd(#x>v", (CharSequence) stringArray0[0], (-187));
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.length("...");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String string4 = StringUtils.wrapIfMissing("...", "...");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("\n", 1114111);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\n", string5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      String string6 = StringUtils.upperCase(stringArray0[0], locale0);
      assertEquals(2, stringArray0.length);
      assertNull(string6);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("..."));
      
      // Undeclared exception!
      try { 
        linkedList0.subList(2183, 958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 958
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'H';
      charArray0[2] = 'f';
      charArray0[3] = 'm';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'m', 'H', 'f', 'm'}, charArray0);
      assertEquals(4, charArray0.length);
      
      String string0 = StringUtils.unwrap("\n", 'm');
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = "O";
      String string2 = StringUtils.remove("O", 'f');
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("O", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("\n", "O", 90, 90);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\n", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String string5 = "";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("", "[Kta:QDQgdoNeK$ZY");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // [Kta:QDQgdoNeK$ZY
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String string0 = StringUtils.unwrap("\r", 'i');
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1865);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1PR}+A3nU!3lv'k*58q";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      boolean boolean0 = StringUtils.isAlpha(":b1>CwAHQyLl`B]olS>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(":b1>CwAHQyLl`B]olS>");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.leftPad("(.kwqa`]-{l-fK&L", 2010);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("SroY0F", ":b1>CwAHQyLl`B]olS>");
      assertFalse(string1.equals((Object)string0));
      assertEquals("roY0F", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", "AZ*G`HDm+$:T+M\fM", 1865);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isMixedCase(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", "[ NzH+{");
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("%agUdVR");
      assertEquals("%agUdVR", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("%agUdVR", 3204, 'M');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string2;
      charSequenceArray0[1] = (CharSequence) string2;
      charSequenceArray0[2] = (CharSequence) "%agUdVR";
      charSequenceArray0[3] = (CharSequence) "%agUdVR";
      String string4 = StringUtils.join((Object[]) charSequenceArray0, '\u0082');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string4);
      
      charSequenceArray0[5] = (CharSequence) string4;
      charSequenceArray0[6] = (CharSequence) "[ NzH+{";
      charSequenceArray0[7] = (CharSequence) string2;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string5 = StringUtils.chop("%agUdVR");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("%agUdV", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAny((CharSequence) string2, charSequenceArray0);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      String string0 = StringUtils.truncate("SA{4?y{6]3#c~ufBAljJ,{;", 110, 110);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("!j0", 3397, '~');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      String string2 = StringUtils.getDigits(" vs ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToEmpty(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("", '#');
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.stripStart("-.4O?rig>~5f.", "");
      assertEquals("-.4O?rig>~5f.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("-.4O?rig>~5f.");
      assertEquals(13, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("OMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uMk{ J0u", "", "ANa42?NEs*(7>,xm2}lvy?)=xM_>7f");
      assertFalse(string1.equals((Object)string0));
      assertEquals("OMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uMk{ J0u", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("-.4O?rig>~5f.", (-1319), " ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("-.4O?rig>~5f.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle(" ", "offset cannot be negative", 1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("\"_DgtKU3M$lAF]\"\"_DgtKU3M$lAF]\"", "p\"3mcy");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\"_DgtKU3M$lAF]\"\"_DgtKU3M$lAF]\"", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("ANa42?NEs*(7>,xm2}lvy?)=xM_>7f", "OMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uOMk{ J0uMk{ J0u");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("ANa42?NEs*(7>,xm2}lvy?)=xM_>7f", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Strings must not be null", 'r');
      assertEquals("ings must not be nullrSt", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ings must not be nullrSt", "Strings must not be null", 25);
      assertEquals(25, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils9Nj~x6", "", 30, 2862);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils9Nj~x6", string3);
      assertNotNull(string3);
      
      String string4 = "CartesianTest can not have an empty display name.";
      String string5 = StringUtils.strip("CartesianTest can not have an empty display name.");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("CartesianTest can not have an empty display name.", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'r', 5, 961);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=n~x", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("%s %s.", "{6]3#c~ufBAljJ,{;", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%s %s.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-125);
      shortArray0[2] = (short) (-39);
      shortArray0[3] = (short)4420;
      String string3 = StringUtils.join(shortArray0, 'K', 1857, 50);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertArrayEquals(new short[] {(short)0, (short) (-125), (short) (-39), (short)4420}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "%s %s.";
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.appendIfMissing("vuzr9]3|=", "", charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("vuzr9]3|=", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "%s %s.", charSequenceArray0[1], 5691);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("%s %s.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.ordinalIndexOf("", charSequenceArray0[0], 1114111);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String string0 = StringUtils.removePattern("Y&*0m`P", "Y&*0m`P");
      assertEquals("Y&*0m`P", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`P";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y&*0m`P";
      stringArray0[1] = "Y&*0m`P";
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.chop("Y&*0m`P");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("org.apache.commons.lang3.CharUtils", "", 0, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("Y&*0m`");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("Y&*0m`", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("org.apache.commons.lang3.CharUtils");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharUtil", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      StringUtils.leftPad("?", 65536, '4');
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.removePattern("%s %s.", "zrY9AV@ziPWkk=nx");
      assertEquals("%s %s.", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.removeStart((String) null, "%s %s.");
      assertNull(string2);
      
      String string3 = StringUtils.repeat((String) null, "zrY9AV@ziPWkk=nx", 65536);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.leftPad("?", 65536, '4');
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("hV$", 'v');
      assertEquals("hV$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("e loop is the input of another", 'v');
      assertFalse(string1.equals((Object)string0));
      assertEquals("e loop is the input of another", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "e loop is the input of another";
      charSequenceArray0[1] = (CharSequence) "hV$";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.leftPad((String) null, 35, 'v');
      assertNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cV;dCVz+EQfOStrings must not be null";
      stringArray0[1] = "cV;dCVz+EQfOStrings must not be null";
      String string3 = StringUtils.replaceEachRepeatedly("hV$", stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("hV$", string3);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "\"CM*,/d*ZB(KVhu");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("\"CM*,/d*ZB(KVhu").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertEquals("\"CM*,/d*ZB(KVhu", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase("\"CM*,/d*ZB(KVhu");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("ame.");
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("ame.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("ame.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("ame", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlpha("ame.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("ame.", "\"CM*,/d*ZB(KVhu");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\"CM*,/d*ZB(KVhu";
      charSequenceArray0[1] = (CharSequence) "ame";
      charSequenceArray0[2] = (CharSequence) "\"CM*,/d*ZB(KVhu";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "ame";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      String string3 = StringUtils.defaultString((String) null, "WM");
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("WM", string3);
      assertNotNull(string3);
      
      charSequenceArray0[7] = (CharSequence) "WM";
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      String string4 = StringUtils.trimToNull("ame.");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("ame.", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("*f0M'3>iec7f77U?", "7");
      assertEquals("7*f0M'3>iec7f77U?7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("*f0M'3>iec7f77U?", (-3706), 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*f0M'3>iec7f77U?", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("b)?$^_H10rp|A`/W0u");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "Execution of '%s' took [%d] ms.");
      assertFalse(boolean0);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String string0 = StringUtils.center("%o{N1(%hZ~urHy", (-1986), 'M');
      assertEquals("%o{N1(%hZ~urHy", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("%o{N1(%hZ~urHy", (-1986));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Hy%o{N1(%hZ~ur", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Hy%o{N1(%hZ~ur";
      objectArray0[1] = (Object) "%o{N1(%hZ~urHy";
      objectArray0[2] = (Object) ":e7j`Gt/XgI'${";
      objectArray0[3] = (Object) "Hy%o{N1(%hZ~ur";
      objectArray0[4] = (Object) "%o{N1(%hZ~urHy";
      String string2 = StringUtils.join(objectArray0, "R#m_qb*kmue:pCOda-", 798, 798);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(5, objectArray0.length);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Hy%o{N1(%hZ~ur", '~');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfterLast("java.lang.Object@664c9b463java.lang.Object@3164767a3r~7 2X+#%2k*<5+F^", "%B'n=lN");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("%B'n=lN", (String) null, "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("%B'n=lN", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "java.lang.Object@664c9b463java.lang.Object@3164767a3r~7 2X+#%2k*<5+F^", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "jj", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "zrY9AV@ziPWkk=nx");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx", (-1934));
      assertEquals(17, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBefore("z]|4$", "zrY9AV@ziPWkk=nx");
      assertFalse(string1.equals((Object)string0));
      assertEquals("z]|4$", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("z]|4$");
      assertArrayEquals(new int[] {122, 93, 124, 52, 36}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.abbreviate("AvXQV6G6", 61);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("AvXQV6G6", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "AvXQV6G6", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("z]|4$", "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.replace("zrY9AV@ziPWkk=nx", "CartesianProductTest can not have a non-empty display name.", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("zrY9AV@ziPWkk=nx", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isMixedCase("kV ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.substringsBetween("CartesianProductTest can not have a non-empty display name.", "kV ", "CartesianProductTest can not have a non-empty display name.");
      assertNull(stringArray1);
      
      int int2 = StringUtils.compareIgnoreCase("annotated with ", "annotated with ", true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("\u0000", "\u0000");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u0000";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\u0000";
      stringArray1[1] = "\u0000";
      stringArray1[2] = "\u0000";
      stringArray1[3] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray1[4] = "\u0000";
      stringArray1[5] = "\u0000";
      stringArray1[6] = "~Z]-F%&G5A e~";
      stringArray1[7] = "\u0000";
      stringArray1[8] = "\u0000";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("\u0000", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.center("%agUdVR", 3204, 'J');
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("[ NzH+{", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertFalse(string3.equals((Object)string2));
      assertEquals("[ NzH+{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp(string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.center("6-o={<t`TMm", (-1753));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("6-o={<t`TMm", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("[ NzH+{", string4);
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("[ NzH+{", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3204;
      doubleArray0[1] = (-1619.06514788);
      doubleArray0[2] = (double) 3204;
      doubleArray0[3] = (double) 3204;
      doubleArray0[4] = (double) 'J';
      doubleArray0[5] = (double) (-1753);
      doubleArray0[6] = (double) (-1753);
      String string6 = StringUtils.join(doubleArray0, 'J');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("3204.0J-1619.06514788J3204.0J3204.0J74.0J-1753.0J-1753.0", string6);
      assertArrayEquals(new double[] {3204.0, (-1619.06514788), 3204.0, 3204.0, 74.0, (-1753.0), (-1753.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "%agUdVR", (CharSequence) "3204.0J-1619.06514788J3204.0J3204.0J74.0J-1753.0J-1753.0");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("6-o={<t`TMm", (CharSequence) null);
      assertFalse(boolean0);
      
      String string7 = StringUtils.replace("org.junitpioneer.jupiter.StdIoExtension", "TB?7eTB?7e", "org.junitpioneer.jupiter.params.Range", 0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.containsWhitespace("org.junitpioneer.jupiter.StdIoExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = "^\"0hLD\\upQ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(string8, stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String string0 = StringUtils.chomp("FM%");
      assertEquals("FM%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, 1169);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("hc:|xSuWEY5Lnr");
      assertTrue(boolean0);
      
      int int0 = StringUtils.length("V");
      assertEquals(1, int0);
      
      String string2 = StringUtils.right("2}lvy?)=xM_>7f", 2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("7f", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.difference((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.stripToEmpty((String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (-205.018F);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (-1302.6F);
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 1169;
      String string5 = StringUtils.join(floatArray0, 'q', 794, 1);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertArrayEquals(new float[] {2.0F, (-205.018F), 1.0F, (-1302.6F), 1.0F, 2.0F, 1169.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.difference("hc:|xSuWEY5Lnr", (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("hc:|xSuWEY5Lnr", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "", (int) (short)1);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("\r", "", 110, (-375));
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 882);
      assertNull(string0);
      
      String string1 = StringUtils.stripStart("QOY2$s", (String) null);
      assertEquals("QOY2$s", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replacePattern("ANa42?NEs*(7>,xm", "'lBo20nMn~Yt", "QOY2$s");
      assertFalse(string2.equals((Object)string1));
      assertEquals("ANa42?NEs*(7>,xm", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad((String) null, 1242, ';');
      assertNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("xTx");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("-.4O?rig>~5f.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-.4O?rig>~5f.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("", "Search and Replace array lengths don't match: ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("-.4O?rig>~5f.");
      assertEquals(13, int0);
      
      String string3 = StringUtils.right(")`gZLndxw@55/B!", 14);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.difference("", ")`gZLndxw@55/B!");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToEmpty("");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ")`gZLndxw@55/B!", (CharSequence) "", 1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string6 = StringUtils.difference("", " ");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals(" ", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      objectArray0[1] = (Object) "Y&*0m`";
      objectArray0[2] = (Object) "Y&*0m`";
      String string1 = StringUtils.removeEndIgnoreCase((String) null, "Y&*0m`P");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("dvx8B", '^');
      assertFalse(string2.equals((Object)string0));
      assertEquals("^dvx8B^", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Y&*0m`", 47, 't');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Y&*0m`tttttttttttttttttttttttttttttttttttttttt", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "Y&*0m`", 't');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '^';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = '';
      charArray0[6] = '^';
      charArray0[7] = 't';
      charArray0[8] = '^';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 't', 0, 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("7Py(S+'#iJ3=04D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = ">05!k";
      String string1 = StringUtils.substringAfterLast(">05!k", ">05!k");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "!";
      stringArray0[2] = ">05!k";
      stringArray0[3] = "";
      stringArray0[4] = "!";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("!", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', (int) 'D', 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", (String) null);
      assertEquals("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", ';');
      assertFalse(string2.equals((Object)string1));
      assertEquals(";r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^;", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^";
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean1 = StringUtils.contains((CharSequence) ";r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^;", charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.leftPad(";r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^;", (-2684));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(";r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^;", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      String string1 = StringUtils.removeIgnoreCase("m`ul%2S$WW_|re,\"H ", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("m`ul%2S$WW_|re,\"H ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "^;8iO";
      stringArray0[2] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[3] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[5] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[6] = "";
      stringArray0[7] = "^;8iO";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("^;8iO", string2);
      assertEquals(8, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("", 'A');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("m`ul%2S$WW_|re,\"H ", 'A');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.removeEndIgnoreCase(" ", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("]", "]");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "]", (CharSequence) "]", (-2245));
      assertEquals(0, int0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(""));
      
      String string2 = StringUtils.substringAfterLast("", 7);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", "Te");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 'F';
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 108;
      doubleArray0[7] = (double) 'F';
      String string4 = StringUtils.join(doubleArray0, 'F', 0, 7);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("7.0F0.0F7.0F0.0F70.0F-1.0F108.0", string4);
      assertArrayEquals(new double[] {7.0, 0.0, 7.0, 0.0, 70.0, (-1.0), 108.0, 70.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("", "StdIo_System_In");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      String string0 = StringUtils.unwrap("", '>');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'K', (int) 'K', 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", (String) null);
      assertEquals("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", ';');
      assertFalse(string2.equals((Object)string1));
      assertEquals(";r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^;", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^";
      charSequenceArray0[1] = (CharSequence) "r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) ";r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^;";
      String string3 = StringUtils.unwrap((String) null, 'K');
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween("d#rN|\"%=?>NuC@>5b<", "d#rN|\"%=?>NuC@>5b<", "r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("\uFFFD", string1);
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("iGy(@v+6>.#p");
      assertEquals("iGy(@v+6>.#p", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("T)A", "L'2)w3q7t8q[hpBGk", false);
      assertEquals(8, int0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "iGy(@v+6>.#p", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string1 = StringUtils.join((double[]) null, '7', 723, 16);
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("iGy(@v+6>.#p", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertEquals("iGy(@v+6>.#p", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "iGy(@v+6>.#p", 16);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)9;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("4\t", string3);
      assertArrayEquals(new byte[] {(byte)52, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("null comparator", (-1775), ' ');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("null comparator", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAllUpperCase("null comparator");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      String string0 = StringUtils.removeStart("TB?7e", "TB?7e");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Y&*0m`P", (CharSequence) "Y&*0m`P");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Y&*0m`P");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Y&*0m`P", "B-VNK[~5,o%3ceN");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`P", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "B-VNK[~5,o%3ceN", (CharSequence) "Y&*0m`P", (-2245));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "TB?7e";
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("Y&*0m`P"));
      
      String string2 = StringUtils.substringAfterLast("2}lvy?)=xM_>7f", (-1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", "No instructions to disable");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2245);
      int int2 = StringUtils.indexOf((CharSequence) "Y&*0m`P", (-1), 160);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.substringAfterLast((String) null, 11);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Wq)fb$^?gnvu]5gIs", " F<Q88~", 9);
      assertEquals("W F<Q88~s", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, "P7+PO0zybc\r");
      assertEquals("P7+PO0zybc\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("P7+PO0zybc\r", "P7+PO0zybc\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("P7+PO0zybc\r", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "P7+PO0zybc\r", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("@CartesianProductTest not found.", "h9,AL%1i'.$c4M31!s1", (-2113));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Z~]&", (CharSequence) "", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", 331);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank(">=N;~CuPbex~", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(">=N;~CuPbex~", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      boolean boolean0 = linkedList0.add((Object) "");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(">=N;~CuPbex~"));
      assertTrue(linkedList0.contains(""));
      
      String string3 = StringUtils.appendIfMissing("", "", stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("", ">=N;~CuPbex~", "\n");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">=N;~CuPbex~", (CharSequence) "", 10);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.equalsAny("present", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "Duplicate enum constant name(s) found in ");
      assertEquals("", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", 2867);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.chop("9%$");
      assertEquals("9%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("mc _ly;4ax}|~5FfO", "V{8Z[.6m'9;$b5Vy&}");
      assertFalse(string1.equals((Object)string0));
      assertEquals("mc _ly;4ax}|~5FfO", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeFirst("Timeout for vintage @Test must be positive.", "Timeout for vintage @Test must be positive.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.chop("Search and Replace array lengths don't match: ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Search and Replace array lengths don't match:", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("Timeout for vintage @Test must be positive.", "9%$");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.compareIgnoreCase("Search and Replace array lengths don't match: ", "V{8Z[.6m'9;$b5Vy&}", false);
      assertFalse(int1 == int0);
      assertEquals((-3), int1);
      
      String string5 = StringUtils.joinWith("Timeout for vintage @Test must be positive.", stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("SearchTimeout for vintage @Test must be positive.andTimeout for vintage @Test must be positive.ReplaceTimeout for vintage @Test must be positive.arrayTimeout for vintage @Test must be positive.lengthsTimeout for vintage @Test must be positive.don'tTimeout for vintage @Test must be positive.match:Timeout for vintage @Test must be positive.", string5);
      assertEquals(8, stringArray0.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("SearchTimeout for vintage @Test must be positive.andTimeout for vintage @Test must be positive.ReplaceTimeout for vintage @Test must be positive.arrayTimeout for vintage @Test must be positive.lengthsTimeout for vintage @Test must be positive.don'tTimeout for vintage @Test must be positive.match:Timeout for vintage @Test must be positive.", "C]<3+`jNAkA;!B)");
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.substringsBetween("$*Y-GoUvKvzo7QX</", "HHpR5G", " or any enclosing class.");
      assertNull(stringArray1);
      
      String string7 = StringUtils.defaultIfBlank(" )~KrRf@V4uL~n}", "/|k]]yG}^h6-;E");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals(" )~KrRf@V4uL~n}", string7);
      assertNotNull(string7);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null, "$*Y-GoUvKvzo7QX</");
      assertNull(stringArray2);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("SearchTimeout for vintage @Test must be positive.andTimeout for vintage @Test must be positive.ReplaceTimeout for vintage @Test must be positive.arrayTimeout for vintage @Test must be positive.lengthsTimeout for vintage @Test must be positive.don'tTimeout for vintage @Test must be positive.match:Timeout for vintage @Test must be positive.", "9%$");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "V{8Z[.6m'9;$b5Vy&}");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.rightPad(" )~KrRf@V4uL~n}", 25, " )~KrRf@V4uL~n}");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals(" )~KrRf@V4uL~n} )~KrRf@V4", string8);
      assertNotNull(string8);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 25;
      longArray0[1] = (long) (-3);
      longArray0[2] = 0L;
      longArray0[3] = (-2466L);
      longArray0[4] = (long) (-3);
      longArray0[5] = (-2959L);
      String string9 = StringUtils.join(longArray0, 'I', 25, (-3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertEquals("", string9);
      assertArrayEquals(new long[] {25L, (-3L), 0L, (-2466L), (-3L), (-2959L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("-89y-107y109k~", "Strings must not be null", "]>/Szj1T29#<Mh,,B");
      assertEquals("-89y-107y109k~", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-89y-107y109k~", "idv=TGm");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("]>/Szj1T29#<Mh,,B", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]>/Szj1T29#<Mh,,B", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#", "Aborting to protect against StackOverflowError - output of one loop is the input of another3e/c!{@kaM", "idv=TGm");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("[**h$m4itHdJ/}L;", 24, "Illegal range. The step cannot be zero.");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("[**h$m4itHdJ/}L;Illegal ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("Index: ", "-89y-107y109k~", 2899);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Index: ", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      String string0 = StringUtils.difference("=M", "=M");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "=M", "=M");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Expected exception %s was not thrown.");
      assertEquals("Expectedexception%swasnotthrown.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Expected exception %s was not thrown.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("Expected exception %s was not thrown.", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Expected exception %s was not thrown.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("UIYz+i.wWKvH ,", "Expected exception %s was not thrown.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("UIYz+i.wWKvH ,", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "UIYz+i.wWKvH ,", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("UIYz+i.wWKvH ,", "UIYz+i.wWKvH ,", 1351);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.replace("", "kV ", "CartesianProductTest can not have a non-empty display name.");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "P!/nkciv");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "zrY9AV@ziPWkk=nx";
      charSequenceArray0[1] = (CharSequence) "zrY9AV@ziPWkk=nx";
      charSequenceArray0[2] = (CharSequence) "zrY9AV@ziPWkk=nx";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "zrY9AV@ziPWkk=nx";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween("6nORUN$", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.stripToNull("]");
      assertEquals("]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Strings mut ndt b1 nulr");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "}E4@,mc&");
      assertEquals("}E4@,mc&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      String string0 = StringUtils.chomp("FM%");
      assertEquals("FM%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", 766);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd((String) null, "FM%");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("q*D6pC'O2xV9N.)tUN@", "<x',Hg.mQ", (-1565));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hc:|xSuWEY5Lnr";
      stringArray0[1] = "`W>p";
      stringArray0[2] = "FM%";
      stringArray0[3] = "Gx6S2pyh";
      stringArray0[4] = "q*D6pC'O2xV9N.)tUN@";
      stringArray0[5] = null;
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("hc:|xSuWEY5Lnr", string4);
      assertEquals(6, stringArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("Strings must", "hc:|xSuWEY5Lnr");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Strings must", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = "\r";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = "Q`fj6:n TkL;a|ksm5]";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "Q`fj6:n TkL;a|ksm5]", 128, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = "";
      String string2 = StringUtils.center("", (-711), 'V');
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = "Search and Replace array lengths don't match: ";
      String string4 = "{.%#";
      String string5 = StringUtils.rotate("{.%#", 108);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("{.%#", string5);
      assertNotNull(string5);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "{.%#";
      objectArray0[1] = (Object) "{.%#";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ":e7j`Gt/XgI'${", Integer.MIN_VALUE, (-129));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      String string0 = StringUtils.chomp("FM%");
      assertEquals("FM%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, 1169);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("hc:|xSuWEY5Lnr");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("V", "tHb)|6!}|<<7YWrY", (-2210));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("FM%");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "FM%";
      stringArray0[1] = null;
      String string3 = StringUtils.normalizeSpace("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string3);
      assertNotNull(string3);
      
      String string4 = "\\u";
      String string5 = StringUtils.substring(string4, 49, (-647));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("dkwEg", "#;Xj$%ln-d{f9C}q{)", (-2268));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 19
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, "-89y-107y109k~", (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "'qVb2&>xrd{");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("'22;Q9T0RB", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("'22;Q9T0RB", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceChars("'22;Q9T0RB", "3e/c!{@kaM", "er");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("'22;Q9T0RB", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.repeat("{.%#", 640);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("{.%#"));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("K|&o<\"!2wKt.7+PO0kybc,r", "M-4sp-j@{ir");
      assertFalse(string1.equals((Object)string0));
      assertEquals("K|&o<\"!2wKt.7+PO0kybc,r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, '^');
      assertNull(string2);
      
      String string3 = StringUtils.rightPad(" (Kp-[pG?", 47, 't');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" (Kp-[pG?tttttttttttttttttttttttttttttttttttttt", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '^');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.removeStart("TB?7e>|", "TB?7e>|");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Y&*0m`P", (CharSequence) "Y&*0m`P");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Y&*0m`P");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Y&*0m`P", "B-VNK[~5,o%3ceN");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`P", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "B-VNK[~5,o%3ceN", (CharSequence) "Y&*0m`P", (-2245));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "TB?7e>|";
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("Y&*0m`P"));
      
      String string2 = StringUtils.substringAfterLast("2}lvy?)=xM_>7f", (-1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", "No instructions to disable");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2245);
      doubleArray0[4] = (double) (-2245);
      doubleArray0[5] = (double) (-2245);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-2245);
      doubleArray0[8] = (double) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'F', 7, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "...");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("NH&MsJ:3<");
      assertEquals(9, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("NH&MsJ:3<", "NH&MsJ:3<");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = '|';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'V', 'R', 'R', '|'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace("NH&MsJ:3<");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.leftPad("", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[23];
      charSequenceArray0[0] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[1] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[2] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[3] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[4] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[5] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[6] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[7] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      String string0 = StringUtils.appendIfMissingIgnoreCase("cV;dCVz+EQfOStrings must not be null", "cV;dCVz+EQfOStrings must not be null", charSequenceArray0);
      assertEquals("cV;dCVz+EQfOStrings must not be null", string0);
      assertEquals(23, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("cV;dCVz+EQfOStrings must not be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "cV;dCVz+EQfOStrings must not be null", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(23, charSequenceArray0.length);
      
      String string1 = StringUtils.defaultIfEmpty("cV;dCVz+EQfOStrings must not be null", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("cV;dCVz+EQfOStrings must not be null", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string2 = StringUtils.normalizeSpace("cV;dCVz+EQfOStrings must not be null");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("cV;dCVz+EQfOStrings must not be null", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      String string3 = locale0.getDisplayScript();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      String string4 = locale0.getDisplayScript();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      String string5 = locale0.getDisplayName();
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Italian", string5);
      assertNotNull(string5);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      String string6 = locale0.getScript();
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      int int1 = StringUtils.getFuzzyDistance("cV;dCVz+EQfOStrings must not be null", "K|&K<\"!2w@Kty.<R;Y!2cs8", locale0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      String string7 = StringUtils.strip((String) null, "K|&K<\"!2w@Kty.<R;Y!2cs8");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 590, 590);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.getDigits("valuQ ust not be empty");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-4529), (-4529));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("valuQ ust not be empty", 3954, ":Tjk<_Y6gUDE]mds");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultIfEmpty("n", "$");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("n", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ":Tjk<_Y6gUDE]mds";
      stringArray0[2] = "P[u";
      stringArray0[3] = "valuQ ust not be empty";
      stringArray0[4] = ":Tjk<_Y6gUDE]mds";
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.firstNonBlank(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substring((String) null, 434, 4);
      assertNull(string4);
      
      String string5 = StringUtils.remove("org.junitpioneer.jupiter.EnvironmentVariableExtension", 'l');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.EnvironmentVariabeExtension", string5);
      assertNotNull(string5);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      String string0 = StringUtils.substring("Parameter of type %s must reference an Enum type", (-128), 101);
      assertEquals("Parameter of type %s must reference an Enum type", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Parameter of type %s must reference an Enum type", "Parameter of type %s must reference an Enum type");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertFalse(string1.equals((Object)string0));
      assertEquals("O", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("O", "O");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "O";
      charSequenceArray0[1] = (CharSequence) "O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      charSequenceArray0[2] = (CharSequence) "O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      charSequenceArray0[3] = (CharSequence) "O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      charSequenceArray0[4] = (CharSequence) "O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      charSequenceArray0[5] = (CharSequence) "O";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "O";
      stringArray0[1] = "O";
      stringArray0[2] = "w{A <zC8%n)dk";
      stringArray0[3] = "O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      stringArray0[4] = "O";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("O", string2);
      assertEquals(5, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", "u){-", 2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[1], "u){-");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "KNw(P'&2k8I_t&$y=px", 2, 95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.truncate("MKs#1R8$Q7=2U", 13, 13);
      assertEquals("U", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("U", supplier0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("U", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'R';
      charArray0[2] = 'p';
      charArray0[3] = 'V';
      charArray0[4] = 'p';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "U", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'V', 'R', 'p', 'V', 'p'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace("U");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.leftPad("U", 109);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                                            U", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("U", 221);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isEmpty("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllUpperCase("MKs#1R8$Q7=2U");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.removeStart("cV;dCVz+EQfO", "cV;dCVz+EQfO");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Y&*0m`P", (CharSequence) "Y&*0m`P");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Y&*0m`P");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Y&*0m`P", "B-VNK[~5,o%3ceN");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`P", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "B-VNK[~5,o%3ceN", (CharSequence) "Y&*0m`P", (-2245));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "cV;dCVz+EQfO";
      charSequenceArray0[1] = (CharSequence) "cV;dCVz+EQfO";
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "cV;dCVz+EQfO");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.repeat('Q', (-1607));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.indexOf((CharSequence) "cV;dCVz+EQfO", (-688), (-688));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.replaceChars(">v7 ", '\u0013', '\u0013');
      assertEquals(">v7 ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("6LM]TP\"A%.>e_QK", "6LM]TP\"A%.>e_QK");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("b)?$^_H10rp|A`/W0u");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad(" vs ", 3397, '\u0013');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(">v7 ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.getDigits("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll(" vs ", "", ">v7 ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(">v7  >v7 v>v7 s>v7  >v7 ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap(" vs ", '\u0013');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" vs ", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ">v7 ", (CharSequence) string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("+", (String) null, 5341);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashSet<String> hashSet0 = new HashSet<String>(3224);
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("+"));
      
      String string2 = StringUtils.join((Iterable<?>) hashSet0, "$8?,./Td.jP\"");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(string1));
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = "maxWit+ cannot be negative";
      String[] stringArray0 = StringUtils.split("3+JP1/&|&+Zu+g3rT");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripEnd("^S=9}o9T}", "-ie$ <4m");
      assertFalse(string2.equals((Object)string1));
      assertEquals("^S=9}o9T}", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", 46, 23);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("... - output of one ...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("olV\bvX-K", (-2070), "~nL");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("olV\bvX-K", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "^S=9}o9T}";
      stringArray1[1] = null;
      stringArray1[2] = "olV\bvX-K";
      stringArray1[3] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray1[4] = "Supplied value must be a valid byte literal between -128 and 127: [";
      stringArray1[5] = "ExceptionWasThrown";
      stringArray1[6] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("^S=9}o9T}", stringArray1, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 80;
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 1);
      assertEquals("earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      
      String[] stringArray0 = StringUtils.split("6-o={<t`TMm");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.capitalize("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Org.junitpioneer.jupiter.DisableIfTestFailsExtension", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceAll((String) null, "org.junitpioneer.jupiter.DisableIfTestFailsExtension", "6-o={<t`TMm");
      assertNull(string3);
      
      String string4 = StringUtils.center("earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", (-1863), "X,");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#llx+P", (CharSequence) "earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 1114083);
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "...");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("NH&MsJ:3<");
      assertEquals(9, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("NH&MsJ:3<", "NH&MsJ:3<");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = '|';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'V', 'R', 'R', '|'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace("NH&MsJ:3<");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      StringUtils.leftPad("", 65536);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.leftPad("k:p", 8192, '^');
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(string0, string0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.getDigits("value must not be empty");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-4529), (-4529));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("value must not be empty", 3954, ":Tjk<_Y6gUDE]mds");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultIfEmpty("n", "$");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing(string1, '%');
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-96);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '%', (int) (byte) (-54), (int) (byte)66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -54
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A";
      stringArray0[1] = "Y:01xHL!L1^amX2Vuvuzr9]3|=";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.leftPad("NyF5PVL_s0![", (-787));
      assertEquals("NyF5PVL_s0![", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("\n", '>');
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.split("NyF5PVL_s0![", "3d~,7#{+>+tyF", (-787));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "A", 9, (-787));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("A", 609);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("A", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("_J", "\n", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("\n_J", string5);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(2, stringArray2.length);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNumericSpace("\n_J");
      assertFalse(boolean0);
      
      String string6 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 545);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEqualsearch and Replace array lengths don't match: ", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("cV;dCVz+EQfOStrings must not be null", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      String string0 = StringUtils.stripStart("=zx@gyV@N", "-.4O?rig>~5f.");
      assertEquals("=zx@gyV@N", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "MKs#1R8$Q7=2U", (CharSequence) null, 128);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.joinWith("-.4O?rig>~5f.", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.", string2);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAllLowerCase("x66_It");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("cV;dCVz+EQfOStrings must not be null", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      String string0 = StringUtils.stripStart("=zx@gyV@N", "-.4O?rig>~5f.");
      assertEquals("=zx@gyV@N", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "MKs#1R8$Q7=2U", (CharSequence) null, 128);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.joinWith("-.4O?rig>~5f.", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.-.4O?rig>~5f.", string1);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("x66_It");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'j');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      String string0 = "vuzr9]3|=";
      String string1 = StringUtils.replaceIgnoreCase("vuzr9]3|=", (String) null, (String) null, (-3));
      assertTrue(string1.equals((Object)string0));
      assertEquals("vuzr9]3|=", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "vuzr9]3|=", (String) null);
      assertFalse(boolean0);
      
      String string2 = "60uBv)(T=T~9 W1p_`";
      String string3 = StringUtils.unwrap("\n", "60uBv)(T=T~9 W1p_`");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-2391L);
      longArray0[1] = (-2969L);
      longArray0[2] = (long) (-1844);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '!', (-1091), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1091
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.unwrap("!", "!");
      assertEquals("!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.abbreviate("x`]P 3*>GdOQV~3v", "", 1069, 1069);
      assertEquals("x`]P 3*>GdOQV~3v", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      StringWriter stringWriter0 = new StringWriter(1475);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Strings must not be null", (CharSequence) "FM%");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) hashSet0);
      assertNotNull(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      Locale locale1 = Locale.lookup(arrayList0, list0);
      assertNull(locale1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      String string1 = StringUtils.lowerCase("Strings must not be null", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("strings must not be null", string1);
      assertNotNull(string1);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      String string2 = StringUtils.overlay("", "FM%", (-1229), (-1229));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("FM%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Strings must not be null", "", 1037);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Strings must not be null", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "FM%", (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils", "", 1037);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "e loop is the input of another", (CharSequence) "e loop is the input of another", (-1986));
      assertEquals(0, int0);
      
      String string0 = StringUtils.center("e loop is the input of another", (-1986), "0.0}1167.474}0.0}0.0");
      assertEquals("e loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("0.0}1167.474}0.0}0.0", 'D');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0}1167.474}0.0}0.0", string2);
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "e loop is the input of another";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "e loop is the input of another";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "e loop is the input of another";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "0.0}1167.474}0.0}0.0";
      objectArray0[8] = object0;
      String string3 = StringUtils.join(objectArray0, 's');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(9, objectArray0.length);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0.0}1167.474}0.0}0.0";
      stringArray0[1] = "e loop is the input of anothersse loop is the input of anothersse loop is the input of anothersss0.0}1167.474}0.0}0.0sjava.lang.Object@7daa1458";
      stringArray0[2] = "0.0}1167.474}0.0}0.0";
      stringArray0[3] = "0.0}1167.474}0.0}0.0";
      stringArray0[4] = "";
      stringArray0[5] = "0.0}1167.474}0.0}0.0";
      stringArray0[6] = "";
      stringArray0[7] = "e loop is the input of anothersse loop is the input of anothersse loop is the input of anothersss0.0}1167.474}0.0}0.0sjava.lang.Object@7daa1458";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("0.0}1167.474}0.0}0.0", string4);
      assertEquals(8, stringArray0.length);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, " n~5\"F");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replaceChars("", 'K', 'K');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      String string0 = StringUtils.abbreviateMiddle("^7c<C*A(%h#oA^M", "6d   3zi?4MaPd{", 13);
      assertEquals("^7c<C*A(%h#oA^M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string1);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^7c<C*A(%h#oA^M", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat('<', 8192);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 107, 1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "h");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("qa6<G m5FGn7<_", "p{InCombiningDiacriticalMarks}+", (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("{}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Locale must not be null", "3Db{M8ld");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "vuzr9]3|=");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeAll("3Db{M8ld", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("3Db{M8ld", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("~\"4!nF:", 28, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~\"4!nF:                     ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("vuzr9]3|=", 28);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("~\"4!nF:");
      assertTrue(boolean0);
      
      String string4 = StringUtils.substringBeforeLast("", "");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string5 = locale1.getDisplayScript(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string6 = locale0.getDisplayLanguage();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Italian", string6);
      assertNotSame(locale0, locale1);
      assertNotNull(string6);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string7 = locale0.getDisplayName(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("Italian", string7);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string7);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string8 = locale0.getDisplayCountry(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string8);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string9 = locale0.toLanguageTag();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertEquals("it", string9);
      assertNotSame(locale0, locale1);
      assertNotNull(string9);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string10 = locale0.getDisplayName(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertEquals("Italian", string10);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string10);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string11 = StringUtils.upperCase("3Db{M8ld", locale0);
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("3DB{M8LD", string11);
      assertNotSame(locale0, locale1);
      assertNotNull(string11);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string12 = StringUtils.substringAfterLast("l\"A@0j", (-1));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string6));
      assertTrue(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string10));
      assertEquals("", string12);
      assertNotNull(string12);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string13 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "", ")");
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string5));
      assertEquals("p{InCombiningDiacriticalMarks}+", string13);
      assertNotNull(string13);
      
      String string14 = StringUtils.left("org.junitpioneer.jupiter.CartesianProductTestExtension", (-795));
      assertTrue(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string1));
      assertEquals("", string14);
      assertNotNull(string14);
      
      String string15 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string6));
      assertTrue(string15.equals((Object)string14));
      assertTrue(string15.equals((Object)string0));
      assertTrue(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string7));
      assertTrue(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string10));
      assertTrue(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string9));
      assertTrue(string15.equals((Object)string5));
      assertEquals("", string15);
      assertEquals(0, stringArray0.length);
      assertNotNull(string15);
      
      String string16 = StringUtils.remove("", '\'');
      assertFalse(string16.equals((Object)string2));
      assertTrue(string16.equals((Object)string3));
      assertTrue(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string1));
      assertTrue(string16.equals((Object)string8));
      assertTrue(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string6));
      assertTrue(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string9));
      assertTrue(string16.equals((Object)string12));
      assertTrue(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string10));
      assertTrue(string16.equals((Object)string14));
      assertEquals("", string16);
      assertNotNull(string16);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) '}';
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.chop(" vs ");
      assertEquals(" vs", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, '}', 1831, (-3544));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 1831);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter("|!fyw`4nAW", 38);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("", "cV;dCVz+EQfOStrings must not be null", " vs");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeAll("UI^Qh}W}?T(Y2Mw92J", "UI^Qh}W}?T(Y2Mw92J");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 18
         // UI^Qh}W}?T(Y2Mw92J
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{6]3#c~ufBAljJ,{;", (String) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, (-1934));
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, (String) null, "$~$g ");
      assertNull(stringArray1);
      
      String string3 = StringUtils.rotate((String) null, (-1031));
      assertNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.wrap("$~$g ", 'm');
      assertEquals("m$~$g m", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      int int0 = 76;
      String string0 = StringUtils.leftPad((String) null, 76);
      assertNull(string0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.substringAfter("Strings must not be null", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\\u{6]3#c~ufBAljJ,{;";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst(string2, "@CartesianProductTest not found.{}@CartesianProductTest not found.{}@CartesianProductTest not found.{}@CartesianProductTest not found.{}@CartesianProductTest not found.{}{}");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 31
         // @CartesianProductTest not found.{}@CartesianProductTest not found.{}@CartesianProductTest not found.{}@CartesianProductTest not found.{}@CartesianProductTest not found.{}{}
         //                                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      Object[] objectArray0 = new Object[4];
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (CharSequence) "FlqQkBJ4m]o");
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string0 = StringUtils.leftPad("QqCIGXX", (-1));
      assertEquals("QqCIGXX", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, (-2989), "Strings must not be null");
      assertNull(string1);
      
      String string2 = StringUtils.mid((String) null, (-1), (-1));
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter((String) null, "org.junitpioneer.jupiter.CartesianEnumArgumentsProvider");
      assertNull(string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)32;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '%', 86, (int) (byte)102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.stripStart("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "H,4g_PfO{`QSJ:");
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String string0 = StringUtils.repeat("{.%#", 640);
      assertNotNull(string0);
      
      String string1 = null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("{.%#"));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("{.%#");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha(string0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.countMatches((CharSequence) "{.%#", '<');
      assertEquals(0, int0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "{.%#", (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 13;
      String string1 = StringUtils.truncate("Rh}XD", 98, 13);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "org.apache.commons.lang3.ArrayUtils";
      String string3 = StringUtils.mid("org.apache.commons.lang3.ArrayUtils", 4, 127);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("apache.commons.lang3.ArrayUtils", string3);
      assertNotNull(string3);
      
      String string4 = "j";
      int int1 = 4;
      String string5 = "...";
      String string6 = StringUtils.center("Strings must not be null", 214, "...");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("...............................................................................................Strings must not be null...............................................................................................", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.US;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(locale0));
      
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String string0 = StringUtils.rotate("<{|u2r?MUqa[", 26);
      assertEquals("a[<{|u2r?MUq", string0);
      assertNotNull(string0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.push(locale_Category0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category0));
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category0));
      
      UnaryOperator<Locale.Category> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      Function<Object, Locale.Category> function0 = (Function<Object, Locale.Category>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      assertNotNull(function1);
      
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      assertSame(unaryOperator2, unaryOperator1);
      assertNotNull(unaryOperator2);
      
      Function<Object, Locale.Category> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Locale.Category>) function0);
      assertFalse(function2.equals((Object)function0));
      assertSame(unaryOperator1, unaryOperator2);
      assertNotNull(function2);
      
      Function<Locale.Category, Locale.Category> function3 = unaryOperator0.andThen((Function<? super Locale.Category, ? extends Locale.Category>) function2);
      assertFalse(function2.equals((Object)function0));
      assertSame(unaryOperator1, unaryOperator2);
      assertNotNull(function3);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category0));
      
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains(locale_Category0));
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, 'B');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<{|u2r?MUqa[";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "<{|u2r?MUqa[");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.center("A", 1, "A");
      assertEquals("A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("H`z", 108, "H`z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("H`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`zH`z", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("A", "eVn`h+]<0yHU30s", false);
      assertEquals((-4), int0);
      
      String string2 = StringUtils.join((float[]) null, 'q');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Y:01xHL!L1^amX2Vuvuzr9]3|=";
      stringArray0[1] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.leftPad("Y:01xHL!L1^amX2Vuvuzr9]3|=", (-787));
      assertEquals("Y:01xHL!L1^amX2Vuvuzr9]3|=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("\n", '>');
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.split(stringArray0[1], "NyF5PVL_s0![", 12);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNull(stringArray2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("NyF5PVL_s0![");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("org.apache.commons.lg3.StringUtils", "' is no valid ISO-8601 string.", stringArray0[1], 12);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lg3.StringUtils", string2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissing("org.apache.commons.lg3.StringUtils", "Y:01xHL!L1^amX2Vuvuzr9]3|=", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lg3.StringUtilsY:01xHL!L1^amX2Vuvuzr9]3|=", string3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Y:01xHL!L1^amX2Vuvuzr9]3|=", (CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("\r", (String) null);
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "offset cannot be negative";
      stringArray0[1] = "offset cannot be negative";
      String string0 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.center("z6(\"CEeR*{\"", 108, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJz6(\"CEeR*{\"JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJz6(\"CEeR*{\"JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "z6(\"CEeR*{\"", "NJSjK\"Z/b,Qs*i:X!");
      assertFalse(boolean0);
      
      String string3 = StringUtils.unwrap("vuzr9]3|=", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJz6(\"CEeR*{\"JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
      assertFalse(string3.equals((Object)string1));
      assertEquals("vuzr9]3|=", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, 3204);
      assertNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("...", (String) null, " ");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, 5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.chop("NJSjK\"Z/b,Qs*i:X!");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("NJSjK\"Z/b,Qs*i:X", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAlpha("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJz6(\"CEeR*{\"JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.countMatches((CharSequence) " ", (CharSequence) "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJz6(\"CEeR*{\"JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      String string0 = StringUtils.replaceChars(">v7 ", '\u0013', '\u0013');
      assertEquals(">v7 ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(">v7 ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split(">v7 ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("H/}X>w+b#", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("H/}X>w+b#", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" vs ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.abbreviate("H/}X>w+b#", (-2342), 4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("H...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize(" vs ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("\n", 65, "\n");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string4);
      assertNotNull(string4);
      
      String string5 = "Supplied value must be a valid byte literal between -128 and 127: [";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "H/}X>w+b#";
      stringArray1[1] = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      stringArray1[2] = "\n";
      stringArray1[3] = "maxWit+ cannot be negative";
      stringArray1[4] = "maxWit+ cannot be negative";
      stringArray1[5] = " vs ";
      stringArray1[6] = "H/}X>w+b#";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("3IYe:", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, "-89y-107y109k~", (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.rotate((String) null, (-937));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, (-381));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.defaultString(" or any enclosing class.", " or any enclosing class.");
      assertEquals(" or any enclosing class.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("vhBB`#aTrS/}$09C/v", "vhBB`#aTrS/}$09C/v", (int) (byte)99);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) string1, "=|?PJYDUxrMUnF");
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashSet<String> hashSet0 = new HashSet<String>((byte)99);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(" or any enclosing class."));
      
      boolean boolean2 = hashSet0.add((String) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.contains(" or any enclosing class."));
      
      boolean boolean3 = hashSet0.add((String) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.contains(" or any enclosing class."));
      
      boolean boolean4 = hashSet0.add(" or any enclosing class.");
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.contains("=|?PJYDUxrMUnF"));
      assertTrue(hashSet0.contains(string0));
      
      String string2 = StringUtils.join((Iterable<?>) hashSet0, "Bv1NTGTt");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Bv1NTGTt or any enclosing class.", string2);
      assertNotNull(string2);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.contains(string2));
      assertTrue(hashSet0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.rotate("<{|u2r?MUqa[", 26);
      assertEquals("a[<{|u2r?MUq", string0);
      assertNotNull(string0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      linkedList0.push(locale_Category1);
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(locale_Category0));
      assertTrue(linkedList0.contains(locale_Category1));
      
      boolean boolean0 = linkedList0.add(locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertTrue(boolean0);
      assertNotSame(locale_Category0, locale_Category1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category1));
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(2, objectArray0.length);
      assertNotNull(objectArray0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category1));
      
      UnaryOperator<Locale.Category> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      Function<Object, Locale.Category> function0 = (Function<Object, Locale.Category>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      assertNotNull(function1);
      
      Function<Object, Locale.Category> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Locale.Category>) function0);
      assertFalse(function2.equals((Object)function0));
      assertNotNull(function2);
      
      Function<Locale.Category, Locale.Category> function3 = unaryOperator0.andThen((Function<? super Locale.Category, ? extends Locale.Category>) function2);
      assertFalse(function2.equals((Object)function0));
      assertNotNull(function3);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category1));
      
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(2, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains(locale_Category1));
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "<{|u2r?MUqa[");
      assertFalse(string1.equals((Object)string0));
      assertEquals("DISPLAY<{|u2r?MUqa[FORMAT", string1);
      assertNotNull(string1);
      assertEquals(2, linkedList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(linkedList0.contains(locale_Category1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("X", supplier0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("X", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "<{|u2r?MUqa[", (CharSequence) "X");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale_Category0));
      
      linkedList0.push(locale_Category0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category0));
      
      boolean boolean0 = linkedList0.add(locale_Category0);
      assertTrue(boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category0));
      
      UnaryOperator<Locale.Category> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(2, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "z$+R=PO(wdi[tpHp");
      assertEquals("DISPLAYz$+R=PO(wdi[tpHpDISPLAY", string0);
      assertNotNull(string0);
      assertEquals(2, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains(locale_Category0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "z$+R=PO(wdi[tpHp", (CharSequence) "z$+R=PO(wdi[tpHp");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "2eTsk1/w#x(/.");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rotate("3!/wUq@Gi:O^~", 17);
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals(":O^~3!/wUq@Gi", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[0], (String) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.uncapitalize("U9'*UD9<");
      assertFalse(string1.equals((Object)string0));
      assertEquals("u9'*UD9<", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("r~7 2X+#%2k*<5+F^");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("r~7 2X+#%2k*<5+F^", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap(" has no clone method", "zrY9AV@ziPWkk=nx");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" has no clone method", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase("zrY9AV@ziPWkk=nx", " has no clone method");
      assertEquals(90, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase(" has no clone method");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center(" has no clone method", 2138);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isBlank(" has no clone method");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'M';
      charArray0[2] = '4';
      charArray0[2] = '4';
      charArray0[4] = '4';
      charArray0[5] = ']';
      charArray0[6] = '4';
      String string4 = StringUtils.join(charArray0, '4');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("44M444\u0000444]44", string4);
      assertArrayEquals(new char[] {'4', 'M', '4', '\u0000', '4', ']', '4'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.equalsAny("{6]3#c~ufBAljJ,{;", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String string0 = StringUtils.wrap("org.apache.commons.lang3.exception.CloneFailedException", ':');
      assertEquals(":org.apache.commons.lang3.exception.CloneFailedException:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(":org.apache.commons.lang3.exception.CloneFailedException:");
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize(":org.apache.commons.lang3.exception.CloneFailedException:");
      assertTrue(string1.equals((Object)string0));
      assertEquals(":org.apache.commons.lang3.exception.CloneFailedException:", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ':';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ":org.apache.commons.lang3.exception.CloneFailedException:";
      String string2 = StringUtils.join(objectArray0, 'D');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(":org.apache.commons.lang3.exception.CloneFailedException:", string2);
      assertEquals(1, objectArray0.length);
      assertNotNull(string2);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(":org.apache.commons.lang3.exception.CloneFailedException:"));
      
      boolean boolean1 = priorityQueue0.add("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(priorityQueue0.contains(":org.apache.commons.lang3.exception.CloneFailedException:"));
      
      boolean boolean2 = priorityQueue0.remove((Object) ":org.apache.commons.lang3.exception.CloneFailedException:");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(priorityQueue0.contains(":org.apache.commons.lang3.exception.CloneFailedException:"));
      
      Vector<String> vector0 = new Vector<String>(priorityQueue0);
      assertNotNull(vector0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[p{InCombiningDiacriticalMarks}+]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertTrue(priorityQueue0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(priorityQueue0.contains(":org.apache.commons.lang3.exception.CloneFailedException:"));
      assertFalse(vector0.contains(":org.apache.commons.lang3.exception.CloneFailedException:"));
      assertTrue(vector0.contains("p{InCombiningDiacriticalMarks}+"));
      
      String string3 = StringUtils.join((Iterable<?>) vector0, ':');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[p{InCombiningDiacriticalMarks}+]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertTrue(priorityQueue0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(priorityQueue0.contains(":org.apache.commons.lang3.exception.CloneFailedException:"));
      assertFalse(vector0.contains(":org.apache.commons.lang3.exception.CloneFailedException:"));
      assertTrue(vector0.contains("p{InCombiningDiacriticalMarks}+"));
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3238, 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat((String) null, (String) null, 5341);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", (String) null);
      assertEquals("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", ';');
      assertFalse(string3.equals((Object)string2));
      assertEquals(";r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^;", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^";
      charSequenceArray0[2] = (CharSequence) null;
      String string4 = StringUtils.substringAfterLast(";r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^;", 5341);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isEmpty("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[1], (-3138), (-3138));
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y&*0m`P";
      String string1 = StringUtils.right("vy", 37);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vy", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "vy", "Y&*0m`");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("/<bWY)'QlM-rX", "Y&*0m`", 37);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.join(objectArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Y&*0m`", string2);
      assertEquals(7, objectArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("Y&*0m`P", "Y&*0m`");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Y&*0m`P", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("Y&*0m`P", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "~@+f");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.replaceEach("6%G<J#8i1", stringArray2, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("6%G<J#8i1", string4);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray2.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 322);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      String string1 = StringUtils.join(objectArray0, '^');
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, objectArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@2ee265a9^java.lang.Object@403e1ad8^^^^^^";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "java.lang.Object@2ee265a9^java.lang.Object@403e1ad8^^^^^^";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(5, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.rightPad("", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[4], 284);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("FM%");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FM%", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Strings must not be null", 1190, "q*D6pC'O2xV9N.)tUN@");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("hc:|xSuWEY5Lnr", 1190);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = '?';
      charArray0[2] = 'J';
      charArray0[3] = '$';
      charArray0[4] = 'C';
      charArray0[5] = '7';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      charArray0[8] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "FM%", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'$', '?', 'J', '$', 'C', '7', 'C', 'C', '$'}, charArray0);
      assertEquals(9, charArray0.length);
      
      String string4 = StringUtils.wrap("The character must not be null", '7');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("7The character must not be null7", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.substringBeforeLast((String) null, "Strings must not be null");
      assertNull(string5);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '$');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("FM%");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FM%", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Strings must not be null", 1190, "q*D6pC'O2xV9N.)tUN@");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("hc:|xSuWEY5Lnr", 1190);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "FM%";
      stringArray0[1] = "FM%";
      stringArray0[2] = "=v ~ZKsD<jm&";
      stringArray0[3] = " does not have data element at ";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("FM%", string4);
      assertEquals(4, stringArray0.length);
      assertNotNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string3, charArray0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{6]3#c~ufBAljJ,{;", "6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6!XIoo_~QHl,}`dA(Z");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{6]3#c~ufBAljJ,{;", "{6]3#c~ufBAljJ,{;", 1432);
      assertEquals(18, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
      assertEquals(18, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(")", "org.apache.commons.lang3.StringUtils9Nj~x6", 2862, 3228);
      assertFalse(string1.equals((Object)string0));
      assertEquals(")", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEnd("lm)UY/Xue {", "~B#2r^rB=l7@y9uZ|/C");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("lm)UY/Xue {", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compare("_Tv5ACan't disable based on arguments, because method %s had no parameters.", (String) null, true);
      assertEquals(1, int0);
      
      String string4 = StringUtils.appendIfMissing((String) null, ")", stringArray0);
      assertEquals(18, stringArray0.length);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(18, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.defaultString("org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      objectArray0[1] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      objectArray0[2] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      objectArray0[3] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      String string1 = StringUtils.join(objectArray0, "org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange", string1);
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange");
      assertEquals(0.76, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (CharSequence) "FlqQkBJ4m]o");
      assertEquals(1, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.chop("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRang", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      int int1 = StringUtils.compare("org.junitpioneer.jupiter.json.AbstractJsonArgumentsProviderYH.A0d.GU", "org.junitpioneer.jupiter.json.AbstractJsonArgumentsProviderYH.A0d.GU", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rotate("KtX7MZjw0?}!9C", 1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("CKtX7MZjw0?}!9", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissing("org.junitpioneer.jupiter.json.AbstractJsonArgumentsProviderYH.A0d.GU", "CKtX7MZjw0?}!9", charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.json.AbstractJsonArgumentsProviderYH.A0d.GUCKtX7MZjw0?}!9", string4);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNumeric(charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      String string0 = StringUtils.chomp("6l*=w!&c^X@6nc0J)c");
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("1(");
      assertFalse(string1.equals((Object)string0));
      assertEquals("1(", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("zrY9AV@ziPWkk=nx", "]A;Og", "6l*=w!&c^X@6nc0J)c");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("zrY9lV@ziPWkk=nx", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "1(";
      objectArray0[1] = (Object) "6l*=w!&c^X@6nc0J)c";
      objectArray0[2] = (Object) "6l*=w!&c^X@6nc0J)c";
      objectArray0[3] = (Object) "#`7$+.g%r";
      objectArray0[4] = (Object) "]A;Og";
      String string3 = StringUtils.join(objectArray0, "3~+L6", (-989), (-2169));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(5, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("1(", (-638));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join(objectArray0, '(', (-638), (-2169));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertEquals(5, objectArray0.length);
      assertNotNull(string5);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '.';
      charArray0[2] = '(';
      charArray0[3] = '(';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'(', '.', '(', '('}, charArray0);
      assertEquals(4, charArray0.length);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string7 = StringUtils.leftPad("{[0-9]+}", (-2169));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("{[0-9]+}", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.removeStart("", "#`7$+.g%r");
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = StringUtils.defaultString("iTiXQI<R=~");
      assertEquals("iTiXQI<R=~", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "iTiXQI<R=~";
      charSequenceArray0[1] = (CharSequence) "iTiXQI<R=~";
      charSequenceArray0[2] = (CharSequence) "iTiXQI<R=~";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[1], "t]`m2l`n=}i0dKWh");
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.appendIfMissing("^$ F)L,Q\"c,yA", charSequenceArray0[2], charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("^$ F)L,Q\"c,yAiTiXQI<R=~", string1);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("AW-");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "^$ F)L,Q\"c,yA", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = StringUtils.left("", 67);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("<yq");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<yq", string1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = '7';
      charArray0[2] = '$';
      charArray0[3] = 'g';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '$';
      charArray0[7] = 'C';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "BY4PV3O4p", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'Y', '7', '$', 'g', '7', '7', '$', 'C'}, charArray0);
      assertEquals(8, charArray0.length);
      
      String string2 = StringUtils.wrap("", 'R');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAllLowerCase("<yq");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 1);
      assertEquals("earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("{index}", "z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{index}", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("{$E<gdgw}/7~rZd%y:#", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{$E<gdgw}/7~rZd%y:#", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("{index}", 1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", (-2227));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNotEmpty("=KFDRO6tjrO:<");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "=KFDRO6tjrO:<", (CharSequence) "{$E<gdgw}/7~rZd%y:#", (-2408));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("jj", stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("", 3025);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "");
      assertEquals(32, int0);
      
      String string2 = StringUtils.repeat('h', 127);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'P');
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "r~7 2X+#%2k*<5+F^");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfAny("Y:01xHL!L1^amX2Vu", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Y:01xHL!L1^amX2Vu", (CharSequence) "Y:01xHL!L1^amX2Vu", (-3570));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.join((double[]) null, '!', (-1), (-1962));
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited((String) null, '9');
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "or", 30);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = StringUtils.chop("P");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5341);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, 62);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat((String) null, "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", (-1112));
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("O");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.truncate("X/0U", 4, 4);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("~gMENever disable parameterized test method itself=9UN1y.mfhLb@L:3+2u`Rf]v", "X/0U");
      assertFalse(string1.equals((Object)string0));
      assertEquals("X/0U~gMENever disable parameterized test method itself=9UN1y.mfhLb@L:3+2u`Rf]vX/0U", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.difference("nQ", (String) null);
      assertEquals("nQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "nQ", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, "P7+PO0zybc\r");
      assertEquals("P7+PO0zybc\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("P7+PO0zybc\r", "P7+PO0zybc\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("P7+PO0zybc\r", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("P7+PO0zybc\r");
      assertFalse(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("P7+PO0zybc\r"));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains("P7+PO0zybc\r"));
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, "P7+PO0zybc\r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains("P7+PO0zybc\r"));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "P7+PO0zybc\r", 2501);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("P7+PO0zybc\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.center((String) null, 16, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.difference("b(Omdx#$S&MqbAY8r!50Co", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("b(Omdx#$S&MqbAY8r!50Co", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("", "P7+PO0zybc\r", "b(Omdx#$S&MqbAY8r!50Co");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string4));
      assertTrue(charSequence0.equals((Object)string2));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      String string6 = StringUtils.substringBetween("@Y5t2)wPR?k$vaj", ",F702N");
      assertNull(string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "b(Omdx#$S&MqbAY8r!50Co", (-1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chop("{;");
      assertEquals("{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("X( 59k3g$e");
      assertFalse(boolean0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(" ", 'E');
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) " ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Nwz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("m[mZ4_Z?*${tYThe `dat` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove 4he annotation.The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceEachRepeatedly("m[mZ4_Z?*${tYThe `dat` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove 4he annotation.The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", (String[]) null, (String[]) null);
      assertEquals("m[mZ4_Z?*${tYThe `dat` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove 4he annotation.The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-107);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-107);
      objectArray0[1] = (Object) (byte) (-107);
      objectArray0[2] = (Object) (byte) (-107);
      objectArray0[3] = (Object) (byte) (-107);
      String string0 = StringUtils.removeEndIgnoreCase("h/t/}{D5R3", (String) null);
      assertEquals("h/t/}{D5R3", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "StdIoExtension is active but neither System.out or System.in are getting redirected.";
      boolean boolean0 = StringUtils.isAlphaSpace("h/t/}{D5R3");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("Can't disable based on arguments, because method %s had no parameters.", (int) (byte) (-107), 48);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Can't disable based on arguments, because met...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      String string0 = StringUtils.chomp("6b@jgi2:0Y,^'ode@");
      assertEquals("6b@jgi2:0Y,^'ode@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("i<Do:*p4p4yD+z1%<8|");
      assertFalse(string1.equals((Object)string0));
      assertEquals("I<Do:*p4p4yD+z1%<8|", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("I<Do:*p4p4yD+z1%<8|", "6b@jgi2:0Y,^'ode@", "#`7$+.g%r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("I<D%*p4p4yD+z1%<8|", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "I<Do:*p4p4yD+z1%<8|", (CharSequence) "I<D%*p4p4yD+z1%<8|");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "6b@jgi2:0Y,^'ode@", (CharSequence) "6b@jgi2:0Y,^'ode@", 11);
      assertEquals(0, int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "or";
      objectArray0[2] = (Object) "6b@jgi2:0Y,^'ode@";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "6b@jgi2:0Y,^'ode@";
      objectArray0[5] = (Object) "I<D%*p4p4yD+z1%<8|";
      objectArray0[6] = (Object) "6b@jgi2:0Y,^'ode@";
      objectArray0[7] = (Object) "I<D%*p4p4yD+z1%<8|";
      objectArray0[8] = (Object) "i<Do:*p4p4yD+z1%<8|";
      String string3 = StringUtils.join(objectArray0, "vZ;RA@;MLSKT", 0, 9);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("P7+PO0zybc\rP7+PO0zybc\r", 545);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("P7+PO0zybc\rP7+PO0zybc\r", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "6b@jgi2:0Y,^'ode@", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNumericSpace("i<Do:*p4p4yD+z1%<8|");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.leftPad("*", (-1105));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("*", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "!!", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("-.4O?rig>~5f.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-.4O?rig>~5f.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("", "Search and Replace array lengths don't match: ");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("-.4O?rig>~5f.");
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String string3 = StringUtils.right(")`gZLndxw@55/B!", 14);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "`gZLndxw@55/B!";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String string4 = StringUtils.difference("", ")`gZLndxw@55/B!");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "0.0", (CharSequence) "", 32);
      assertEquals(3, int0);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.truncate("", 2449);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("", (-108));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string4 = StringUtils.upperCase("Annotation has invalid index [%s], should be less than %s", locale0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("ANNOTATION HAS INVALID INDEX [%S], SHOULD BE LESS THAN %S", string4);
      assertNotNull(string4);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string5 = StringUtils.replaceChars("", "|*c", "Annotation has invalid index [%s], should be less than %s");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("0.0", string6);
      assertEquals(1, stringArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.defaultString("org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      objectArray0[1] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      objectArray0[2] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      objectArray0[3] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      String string1 = StringUtils.join(objectArray0, "org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange", string1);
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange");
      assertEquals(0.76, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (CharSequence) "FlqQkBJ4m]o");
      assertEquals(1, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.chop("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRang", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '\\';
      String string3 = StringUtils.join(charArray0, '\\');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("6\\\\", string3);
      assertArrayEquals(new char[] {'6', '\\'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissing("FlqQkBJ4m]o", charSequenceArray0[1], charSequenceArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("FlqQkBJ4m]oorg.junitpioneer.jupiter.params.ShortRange", string4);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("q[");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "6\\", (CharSequence) "org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRang", 10);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.params.ShortRange", (CharSequence) "org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string6 = StringUtils.strip("FlqQkBJ4m]o", "FlqQkBJ4m]oorg.junitpioneer.jupiter.params.ShortRange");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "C9#y=.", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("mg*M", " ", 67, 441);
      assertFalse(string1.equals((Object)string0));
      assertEquals("mg*M", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "mg*M";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "mg*M";
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) "mg*M";
      objectArray0[6] = (Object) " ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '\\', 441, (-2147483632));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("xx", "xx", "orP7+PO0zybc\r");
      assertEquals("orP7+PO0zybc\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("orP7+PO0zybc\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("orp7+po0zybc\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("Xq[m%+", 7);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Xq[m%+Xq[m%+Xq[m%+Xq[m%+Xq[m%+Xq[m%+Xq[m%+", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "orP7+PO0zybc\r";
      charSequenceArray0[1] = (CharSequence) "orp7+po0zybc\r";
      charSequenceArray0[2] = (CharSequence) "Xq[m%+";
      charSequenceArray0[3] = (CharSequence) "xx";
      charSequenceArray0[4] = (CharSequence) "Xq[m%+";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Xq[m%+", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("Xq[m%+", "Xq[m%+");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Xq[m%+Xq[m%+Xq[m%+Xq[m%+Xq[m%+Xq[m%+Xq[m%+", (CharSequence) "orP7+PO0zybc\r");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat('|', 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i");
      assertEquals("i", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "i", (CharSequence) "i");
      assertEquals(1, int0);
      
      int int1 = StringUtils.ordinalIndexOf("i", "i", 1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '!');
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, ']', (-19), (-19));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("SgoWgJ=],W#bxAq", "SgoWgJ=],W#bxAq", 2);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultIfBlank("s2Q", "SgoWgJ=],W#bxAq");
      assertEquals("s2Q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = "FM%";
      String string2 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '[';
      // Undeclared exception!
      try { 
        StringUtils.unwrap("Strings must not be null", "Strings must not be null");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "7#P|Hy7!1)[]'X,GZv", " vs ");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "7#P|Hy7!1)[]'X,GZv", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string0 = StringUtils.toRootLowerCase(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace(" vs ");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAlpha(" vs ");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(",", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "7#P|Hy7!1)[]'X,GZv", (CharSequence) charBuffer0);
      assertEquals(14, int0);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(",", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1865);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1PR}+A3nU!3lv'k*58q";
      stringArray0[1] = "`]L so{&r`M~>";
      String string0 = "|tX:Hf~Ng1x;aP";
      UnaryOperator<Locale.Category> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      vector0.replaceAll(unaryOperator0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.remove((Object) "1PR}+A3nU!3lv'k*58q");
      assertFalse(boolean0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Vector<String> vector1 = new Vector<String>();
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertFalse(vector1.contains("1PR}+A3nU!3lv'k*58q"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector1, '`', 50, 105);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 105
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'n', 102, 507);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 507
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("org.junitpioneer.vintage.TimeoutExtension", "P7+PO0zybc\r");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("or", "P7+PO0zybc\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("P7+PO0zybc\rorP7+PO0zybc\r", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("P7+PO0zybc\rorP7+PO0zybc\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("5#m");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.chop("5#m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("5#", string2);
      assertNotNull(string2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(3397);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3397, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(3397, charBuffer0.limit());
      assertEquals(3397, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3397, charBuffer0.capacity());
      
      boolean boolean1 = StringUtils.isAlphaSpace(charBuffer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3397, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(3397, charBuffer0.limit());
      assertEquals(3397, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3397, charBuffer0.capacity());
      
      String string3 = StringUtils.swapCase("GEI+gO( 6u69k");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("gei+Go( 6U69K", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Co1Ta+e.+YU$m0A", "");
      assertEquals("Co1Ta+e.+YU$m0A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      String string1 = StringUtils.wrap("", "m`ul%2S$WW_|re,\"H ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.stripStart("J{iMc'K^eE", "^;8iO");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("J{iMc'K^eE", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Locale must not be null", 38);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length("m`ul%2S$WW_|re,\"H ");
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "h?VosgNX&LSR=%[");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.removeStart((String) null, "J{iMc'K^eE");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      String string0 = StringUtils.chomp("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("i<Do:*p4p4yD+z1%<8|");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(15, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.chop("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be nul", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("X( 59k3g$e", "0.0}1167.474}0.0}0.0", 3397);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("X( 59k3g$e", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("X( 59k3g$e");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.swapCase("0.0}1167.474}0.0}0.0");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0.0}1167.474}0.0}0.0", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.replace("", "}oV@9T", "", 10);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      String string1 = StringUtils.upperCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "}oV@9T", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.leftPad("Method `", 10, "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("  Method `", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("Method `", (String) null);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents(":");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(":", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "Method `";
      String string5 = StringUtils.prependIfMissing("0.0-0.0-0.0-0.0", "0.0-0.0-0.0-0.0", charSequenceArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("0.0-0.0-0.0-0.0", string5);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string5);
      
      int int1 = StringUtils.compareIgnoreCase("8r!50Cob(Omdx#$S&MqbAY", "[%(K#y+yoDe*");
      assertFalse(int1 == int0);
      assertEquals((-35), int1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '}';
      String string6 = StringUtils.join(longArray0, 'w');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("125", string6);
      assertArrayEquals(new long[] {125L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" vs ", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y&*0m`P";
      stringArray0[1] = "\r";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`P", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2058.19615549282);
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = (double) 'Q';
      doubleArray0[3] = 2014.986689576;
      doubleArray0[4] = (-2058.19615549282);
      doubleArray0[5] = (-2058.19615549282);
      doubleArray0[6] = (-2058.19615549282);
      doubleArray0[7] = (double) 'Q';
      String string2 = StringUtils.join(doubleArray0, 'u');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-2058.19615549282u81.0u81.0u2014.986689576u-2058.19615549282u-2058.19615549282u-2058.19615549282u81.0", string2);
      assertArrayEquals(new double[] {(-2058.19615549282), 81.0, 81.0, 2014.986689576, (-2058.19615549282), (-2058.19615549282), (-2058.19615549282), 81.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
      
      String string3 = StringUtils.join(doubleArray0, 's');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("-2058.19615549282s81.0s81.0s2014.986689576s-2058.19615549282s-2058.19615549282s-2058.19615549282s81.0", string3);
      assertArrayEquals(new double[] {(-2058.19615549282), 81.0, 81.0, 2014.986689576, (-2058.19615549282), (-2058.19615549282), (-2058.19615549282), 81.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "-2058.19615549282s81.0s81.0s2014.986689576s-2058.19615549282s-2058.19615549282s-2058.19615549282s81.0", (CharSequence) "-2058.19615549282u81.0u81.0u2014.986689576u-2058.19615549282u-2058.19615549282u-2058.19615549282u81.0");
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string4 = StringUtils.leftPad("Y&*0m`", (-32768), (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Y&*0m`", string4);
      assertNotNull(string4);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(string2));
      
      String string5 = StringUtils.stripToNull("-2058.19615549282u81.0u81.0u2014.986689576u-2058.19615549282u-2058.19615549282u-2058.19615549282u81.0");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("-2058.19615549282u81.0u81.0u2014.986689576u-2058.19615549282u-2058.19615549282u-2058.19615549282u81.0", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "-2058.19615549282u81.0u81.0u2014.986689576u-2058.19615549282u-2058.19615549282u-2058.19615549282u81.0", (CharSequence) "-2058.19615549282s81.0s81.0s2014.986689576s-2058.19615549282s-2058.19615549282s-2058.19615549282s81.0");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(")GaoubL`#2");
      assertEquals(")GaoubL`#2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst(")GaoubL`#2", "No arguments sources were found for @CartesianTest", "}'p`");
      assertTrue(string1.equals((Object)string0));
      assertEquals(")GaoubL`#2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "}'p`", (CharSequence) ")GaoubL`#2");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("No arguments sources were found for @CartesianTest", ")GaoubL`#2");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.compareIgnoreCase("LK= k3*|L_u", "No arguments sources were found for @CartesianTest");
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("LK= k3*|L_u");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank(")GaoubL`#2");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(")");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.remove(",S(", 'K');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",S(", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, "<R;Y!2cs8");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)109;
      String string0 = StringUtils.join(byteArray0, 'y');
      assertEquals("0y-94y109", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-94), (byte)109}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "0y-94y109";
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat('u', 3364);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace((String) null, string1, "0,Q/]>d4OH7C'@7", (int) (byte)109);
      assertFalse(string1.equals((Object)string0));
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NH&MsJ:3<", '}');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("NH&MsJ:3<", " ", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " ";
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast(" ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(set0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("NH&MsJ:3<"));
      
      String string2 = StringUtils.stripStart("}#;J'ZYkmNOe|Xr", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}#;J'ZYkmNOe|Xr", string2);
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("NH&MsJ:3<"));
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", " ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.uncapitalize("s3_6wZ!@1%");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("s3_6wZ!@1%", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, (-1), "&@y#EJp{f&gE*R_v");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "7Py(S+'#iJ3=04D", "7Py(S+'#iJ3=04D");
      assertEquals(0, int0);
      
      String string0 = StringUtils.rightPad((String) null, 48, "wCUEF1s");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, '%');
      assertEquals("0.0", string0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(15, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.stripStart("Locale must not be null", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("Locale must not be null");
      assertFalse(int1 == int0);
      assertEquals(23, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "*n7D,hFtC50CW");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Locale must not be null", (CharSequence) "0.0");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("*n7D,hFtC50CW", supplier0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("*n7D,hFtC50CW", string2);
      assertNotNull(string2);
      
      String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.removeAll("Method `", "Method `");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Method `", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = StringUtils.chomp("6b@jgi2:0Y,^'ode@");
      assertEquals("6b@jgi2:0Y,^'ode@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("i<Do:*p4p4yD+z1%<8|");
      assertFalse(string1.equals((Object)string0));
      assertEquals("I<Do:*p4p4yD+z1%<8|", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("I<Do:*p4p4yD+z1%<8|", "6b@jgi2:0Y,^'ode@", "#`7$+.g%r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("I<D%*p4p4yD+z1%<8|", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "I<Do:*p4p4yD+z1%<8|", (CharSequence) "I<D%*p4p4yD+z1%<8|");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "6b@jgi2:0Y,^'ode@", (CharSequence) "6b@jgi2:0Y,^'ode@", 11);
      assertEquals(0, int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(11, comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("6b@jgi2:0Y,^'ode@"));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = StringUtils.isAsciiPrintable("i<Do:*p4p4yD+z1%<8|");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.repeat((String) null, "s1G+'", 11);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAllUpperCase("6b@jgi2:0Y,^'ode@");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "I<D%*p4p4yD+z1%<8|", "Gky)`|!)BpYTD`OAJb");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.substringsBetween("`06=m&pr*l!mQa#jx", "6b@jgi2:0Y,^'ode@", "U");
      assertNull(stringArray0);
      
      String string4 = StringUtils.substringAfterLast("=KFDRO6tjrO:<", 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isNotEmpty((CharSequence) null);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "6b@jgi2:0Y,^'ode@", (CharSequence) "U", 3976);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String string0 = StringUtils.capitalize("vuzr9]3|=");
      assertEquals("Vuzr9]3|=", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Vuzr9]3|=", (CharSequence) "Vuzr9]3|=");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Vuzr9]3|=", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Vuzr9]3|=", (CharSequence) "vuzr9]3|=");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.defaultString("org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      objectArray0[1] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      objectArray0[2] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      objectArray0[3] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      String string1 = StringUtils.join(objectArray0, "org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange", string1);
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange");
      assertEquals(0.76, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (CharSequence) "FlqQkBJ4m]o");
      assertEquals(1, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.chop("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRange");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRang", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '\\';
      String string3 = StringUtils.join(charArray0, '\\');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("6\\\\", string3);
      assertArrayEquals(new char[] {'6', '\\'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string3);
      
      double double1 = StringUtils.getJaroWinklerDistance("org.junitpioneer.jupiter.params.ShortRange", "6\\");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String string4 = StringUtils.normalizeSpace("\n");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3333;
      shortArray0[1] = (short)3147;
      shortArray0[2] = (short)3312;
      shortArray0[3] = (short)3308;
      String string0 = StringUtils.join(shortArray0, '&', (int) (short)3308, 31);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)3333, (short)3147, (short)3312, (short)3308}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (int) (short)3333);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Metthod `", 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 3204, 'r');
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("?");
      assertFalse(string1.equals((Object)string0));
      assertEquals("?", string1);
      assertNotNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("org.apache.commons.lang3.StringUtils"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("org.apache.commons.lang3.StringUtils"));
      
      String string2 = StringUtils.join(iterator0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("org.apache.commons.lang3.StringUtils"));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "?", 575);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("b(Omdx#$S&MqbAY8r!50Co");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.center("org.apache.commons.lang3.StringUtils", 127, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                             org.apache.commons.lang3.StringUtils                                              ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("                                             org.apache.commons.lang3.StringUtils                                              ", "org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "                                             org.apache.commons.lang3.StringUtils                                              ", (CharSequence) null);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("                                             org.apache.commons.lang3.StringUtils                                              ", charSequence0);
      assertNotNull(charSequence0);
      
      String string5 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", "@>*`");
      assertNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "                                             org.apache.commons.lang3.StringUtils                                              ", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", (String) null, 3224);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("e5a\"v%rBOa)ec&");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      String string0 = StringUtils.join(doubleArray0, '5', 3224, (-640));
      assertEquals("", string0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("", "\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string1));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.wrap("org.apache.commons.lang3.exception.CloneFailedException", ':');
      assertEquals(":org.apache.commons.lang3.exception.CloneFailedException:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(":org.apache.commons.lang3.exception.CloneFailedException:");
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize("O");
      assertFalse(string1.equals((Object)string0));
      assertEquals("o", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string2 = StringUtils.prependIfMissingIgnoreCase("o", "org.apache.commons.lang3.exception.CloneFailedException", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedExceptiono", string2);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.exception.CloneFailedExceptiono";
      charSequenceArray0[1] = (CharSequence) "o";
      charSequenceArray0[2] = (CharSequence) "o";
      String string3 = StringUtils.normalizeSpace("4e.tX{YLc!%Q]LU;");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("4e.tX{YLc!%Q]LU;", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "4e.tX{YLc!%Q]LU;";
      charSequenceArray0[4] = (CharSequence) "o";
      charSequenceArray0[5] = (CharSequence) ":org.apache.commons.lang3.exception.CloneFailedException:";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.repeat("Vs$X}0", (String) null, (-3480));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "\r");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.rotate("p{InCombiningDiacriticalMarks}+", 31);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast("6b@jgi2:0Y,^'ode@6b@jgi2:0Y,^'ode@", "4e.tX{YLc!%Q]LU;");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(":org.apache.commons.lang3.exception.CloneFailedException:"));
      
      String string7 = StringUtils.join((List<?>) stack0, '*', 1090, 31);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(":org.apache.commons.lang3.exception.CloneFailedException:"));
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 108, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("xF>/", 108, "Thresold must not bngatve");
      assertEquals("xF>/Thresold must not bngatveThresold must not bngatveThresold must not bngatveThresold must not bngatveThre", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("hc:|xSuWEY5Lnr", 108);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap(string2, "=v ~ZKsD<jm&");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "xF>/Thresold must not bngatveThresold must not bngatveThresold must not bngatveThresold must not bngatveThre";
      stringArray0[1] = "w{A <zC8%n)dk";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("xF>/Thresold must not bngatveThresold must not bngatveThresold must not bngatveThresold must not bngatveThre", string4);
      assertEquals(2, stringArray0.length);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split("Thresold must not bngatve", (String) null, 2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string3, "");
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween((String) null, (String) null, "0.0}1167.474}0.0}0.0");
      assertNull(string1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ';', (-2056), 679);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2056
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("6b@jgi2:0Y,^'ode@", "6b@jgi2:0Y,^'ode@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("bF^#[L~Binkr", "bF^#[L~Binkr", 1114111);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bF^#[L~Binkr", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "bF^#[L~Binkr";
      charSequenceArray0[3] = (CharSequence) "bF^#[L~Binkr";
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "", 54, 54);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '#');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfterLast(":e7j`Gt/XgI'${", "g-7gG[Yh_/lJ");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", "`06=m&pr*l!mQa#jx", "9*H{vLw");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Sech nd Rewce y engths don't vtch: ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "9*H{vLw", (CharSequence) "bF^#[L~Binkr");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("iGy(@v+6>.#p");
      assertEquals("iGy(@v+6>.#p", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripStart(">yYe00YQ!Hs\"", "iGy(@v+6>.#p");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ye00YQ!Hs\"", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "T)A", (CharSequence) "L'2)w3q7t8q[hpBGk", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.length("L'2)w3q7t8q[hpBGk");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(17, int2);
      
      String string2 = StringUtils.truncate("-.4O?rig>~5f.", 8192);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-.4O?rig>~5f.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("T)A", (-1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(")AT", string3);
      assertNotNull(string3);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("T)A"));
      
      boolean boolean0 = stack0.add("Ye00YQ!Hs\"");
      assertTrue(boolean0);
      assertEquals("[Ye00YQ!Hs\"]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains("T)A"));
      assertTrue(stack0.contains("Ye00YQ!Hs\""));
      
      String string4 = StringUtils.join((Iterable<?>) stack0, "L'2)w3q7t8q[hpBGk");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Ye00YQ!Hs\"", string4);
      assertNotNull(string4);
      assertEquals("[Ye00YQ!Hs\"]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains("T)A"));
      assertTrue(stack0.contains("Ye00YQ!Hs\""));
      
      int int3 = StringUtils.lastOrdinalIndexOf("T)A", "iGy(@v+6>.#p", 8192);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String string0 = "maxWit+ cannot be negative";
      String[] stringArray0 = StringUtils.split("maxWit+ cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("maxWit+ cannot be negative");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("maxWit+ cannot be negative", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 67);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("vuzr9]3|=");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("maxWit+ cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("maxWit+ cannot be negative", "vuzr9]3|=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWit+ cannot be negative", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("maxWit+ cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate("maxWit+ cannot be negative", (-2342), 67);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWit+ cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("vuzr9]3|=");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("vuzr9]3|=", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("vuzr9]3|=", (-1337), "vuzr9]3|=");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("vuzr9]3|=", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Supplied value must be a valid byte literal between -128 and 127: [", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("maxWit+ cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("maxWit+ cannot be negative");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("maxWit+ cannot be negative", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = "maxWit+ cannot be negative";
      String[] stringArray0 = StringUtils.split("maxWit+ cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("maxWit+ cannot be negative");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Supplied value must be a valid byte literal between -128 and 127: [", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("{9vSPr~{KZ", "idv=TGm", "-89y-107y109k~");
      assertEquals("{9vSPr~{KZ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("{9vSPr~{KZ");
      assertEquals(10, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.junitpioneer.jupiter.params.IntRange", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = ' ';
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(""));
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = arrayList0.add(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(boolean0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(object2));
      assertFalse(arrayList0.contains(""));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("-89y-107y109k~");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((List<?>) arrayList0, "{9vSPr~{KZ", 32, 9);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(object2));
      assertFalse(arrayList0.contains(""));
      
      String string3 = StringUtils.normalizeSpace("");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-1645), ';');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3238, 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat((String) null, (String) null, 5341);
      assertNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = '#';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'D', '#'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.leftPad((String) null, 25);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "0.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)97;
      String string3 = StringUtils.leftPad("0.0", 37, "Object varargs must not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Object varargs must not be nullObj0.0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.stripToEmpty("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Object varargs must not be null", (CharSequence) "", (int) (byte)97);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(31, int2);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = StringUtils.upperCase("nd8&z<*p`5i9", locale0);
      assertEquals("ND8&Z<*P`5I9", string0);
      assertNotNull(string0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      int[] intArray0 = StringUtils.toCodePoints("ND8&Z<*P`5I9");
      assertEquals(12, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("-.4O?rig>~5f.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-.4O?rig>~5f.", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 879);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.truncate("", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("", 1114111);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      String string4 = StringUtils.upperCase("P+MH<6YE,Bgyro@nB", locale0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("P+MH<6YE,BGYRO@NB", string4);
      assertNotNull(string4);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", 331);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank(">=N;~CuPbex~", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(">=N;~CuPbex~", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      boolean boolean0 = linkedList0.add((Object) "");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains(331));
      
      Object object0 = linkedList0.pollFirst();
      assertTrue(object0.equals((Object)string0));
      assertTrue(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string2));
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "m>s8,/}(", (-625), 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -625
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=n~x", " vs ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle(" vs ", "{6]3#c~ufBAljJ,{;", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-125);
      shortArray0[2] = (short) (-39);
      shortArray0[3] = (short)4420;
      String string3 = StringUtils.join(shortArray0, 'K', 1857, 50);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertArrayEquals(new short[] {(short)0, (short) (-125), (short) (-39), (short)4420}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" vs "));
      
      Object object0 = linkedList0.pollFirst();
      assertNull(object0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" vs "));
      
      String string4 = StringUtils.join((List<?>) linkedList0, "vuzr9]3|=", 50, (-3775));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" vs "));
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "e loop is the input of another", (CharSequence) "e loop is the input of another", (-1986));
      assertEquals(0, int0);
      
      String string0 = "";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      int int1 = (-2328);
      String string2 = StringUtils.join((List<?>) linkedList0, "", 0, (-2328));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = arrayList0.add(object0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains(object0));
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, '$');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'P';
      // Undeclared exception!
      try { 
        StringUtils.repeat("{KwA]z", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("%o{N1(%hZ~urHy", stringArray0, stringArray0);
      assertEquals("%o{N1(%hZ~urHy", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Strings must not be null", "uVAi&D");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Strings must not be null", '5');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.leftPad("P7+PO0zybc\rP7+PO0zybc\r", (-2394), '}');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("P7+PO0zybc\rP7+PO0zybc\r", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("Strings must not be null", "YH.A0d.GU", 64);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.joinWith("<R;Y!2cs8", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Strings must not be null", string3);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Strings must not be null", string4);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(1, stringArray1.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart("-.4O?rig>~5f.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-.4O?rig>~5f.", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 879);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.joinWith("", charSequenceArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("-.4O?rig>~5f.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("IyHnE{ry.YEy&Q`_");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("IyHnE{ry.YEy&Q`_", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 250
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("\uFFFD", string0);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\uFFFD";
      stringArray0[1] = "\uFFFD";
      stringArray0[2] = "\uFFFD";
      stringArray0[3] = "\uFFFD";
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\uFFFD";
      stringArray1[1] = "\uFFFD";
      stringArray1[2] = "\uFFFD";
      stringArray1[3] = "\uFFFD";
      stringArray1[4] = "\uFFFD";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\uFFFD", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, "-89y-107y109k~", (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", (String) null, "'qVb2&>xrd{");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("'22;Q9T0RB", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("'22;Q9T0RB", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripAccents((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 0, (-504));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "\n", 0);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[0], "\n");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.uncapitalize("\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("\n", "\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOf((CharSequence) "\n", 625, 11);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.center("', has a length less than 2", 707, (String) null);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                    ', has a length less than 2                                                                                                                                                                                                                                                                                                                                                    ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("iGy(@v+6>.#p");
      assertEquals("iGy(@v+6>.#p", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("T)A", "L'2)w3q7t8q[hpBGk", false);
      assertEquals(8, int0);
      
      String string1 = StringUtils.truncate((String) null, 0, 110);
      assertNull(string1);
      
      String string2 = StringUtils.left("iGy(@v+6>.#p", (-986));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("7#P|Hy7!1)[]'X,GZv");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.leftPad("rMJ", (-986));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("rMJ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("7#P|Hy7!1)[]'X,GZv", "SroY0F");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("7#P|Hy7!1)[]'X,GZv", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("rMJ", (String) null, 3500);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("rMJ", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isMixedCase("rMJ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String string0 = StringUtils.removeStart("Strings must not be null", "cV;dCVz+EQfO");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Y&*0m`P");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("Y&*0m`P", (-1), "Y:01xHL!L1^");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`P", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("Y&*0m`P", "K|&K<\"!2w@Kty.<R;Y!2cs8");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("K|&K<\"!2w@Kty.<R;Y!2cs8", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("Y:01xHL!L1^", ";KCRuAZh+?Wk$n6x");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Y:01xHL!L1^", string3);
      assertNotNull(string3);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "Y:01xHL!L1^", (CharSequence) "Y:01xHL!L1^");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string3));
      assertEquals("Y:01xHL!L1^", charSequence0);
      assertNotNull(charSequence0);
      
      String string4 = StringUtils.substringBetween("F4h", "cV;dCVz+EQfO");
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      charSequenceArray0[1] = (CharSequence) "Y&*0m`P";
      charSequenceArray0[2] = (CharSequence) "Y&*0m`P";
      charSequenceArray0[3] = (CharSequence) "Strings must not be null";
      charSequenceArray0[4] = (CharSequence) "K|&K<\"!2w@Kty.<R;Y!2cs8";
      charSequenceArray0[5] = (CharSequence) "F4h";
      charSequenceArray0[6] = (CharSequence) "Y:01xHL!L1^";
      charSequenceArray0[7] = (CharSequence) "Y:01xHL!L1^";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("SjnC}.d", "IJFyM`ks `z?'R", "...", (-3));
      assertFalse(string1.equals((Object)string0));
      assertEquals("SjnC}.d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("MJ#x4Q~}g8ui-As");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("MJ#x4Q~}g8ui-As", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("r~7 2X+#%2k*<5+F^", 1);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("r~7 2X+#%2k*<5+F^", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split((String) null, "v{IacnBlv|Cy2t$");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("&qww*C|7om(1", (String) null);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase("?yXW;0", "MJ#x4Q~}g8ui-As");
      assertEquals((-46), int0);
      
      String string4 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("r~7 2X+#%2k*<5+F^", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      String string0 = StringUtils.chop("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.");
      assertEquals("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been";
      charSequenceArray0[1] = (CharSequence) "%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(92, int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      objectArray0[1] = (Object) "Y&*0m`";
      objectArray0[2] = (Object) "Y&*0m`";
      objectArray0[3] = (Object) "Y&*0m`P";
      objectArray0[4] = (Object) "Y&*0m`P";
      objectArray0[5] = (Object) "Y&*0m`P";
      objectArray0[6] = (Object) "Y&*0m`";
      String string1 = StringUtils.join(objectArray0, "Y&*0m`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`", string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`", "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`");
      assertEquals(1.0, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`", (CharSequence) "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.remove("=*M1)(16$:U#Hk58q,", "OIiQwI<");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("=*M1)(16$:U#Hk58q,", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "5tk", (CharSequence) "5tk");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("5tk", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.substringBetween(">jw@0rg;", "Y&*0m`P");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`";
      charSequenceArray0[1] = (CharSequence) "Y&*0m`";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("OdW+0WAdzr|@");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny("OdW+0WAdzr|@", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      String string0 = StringUtils.removeStart("Strings must not be null", "cV;dCVz+EQfO");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", (CharSequence) "Y&*0m`P");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Y&*0m`P");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Y&*0m`P", "B-VNK[~5,o%3ceN");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`P", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "B-VNK[~5,o%3ceN", (CharSequence) "Strings must not be null", (-2245));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "cV;dCVz+EQfO";
      charSequenceArray0[1] = (CharSequence) "cV;dCVz+EQfO";
      charSequenceArray0[2] = (CharSequence) "Y&*0m`P";
      charSequenceArray0[3] = (CharSequence) "cV;dCVz+EQfO";
      boolean boolean1 = StringUtils.startsWithAny("Y&*0m`P", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "...", 160);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("?G4[Ky&gG/", " has no clone method");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("?G4[Ky&gG/", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("...", "SKC})_ux|i");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("SKC})_ux|i", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "SKC})_ux|i";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "?G4[Ky&gG/";
      charSequenceArray0[4] = (CharSequence) " has no clone method";
      charSequenceArray0[5] = (CharSequence) "SKC})_ux|i";
      int int0 = StringUtils.lastIndexOfAny("SKC})_ux|i", charSequenceArray0);
      assertEquals(11, int0);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("?G4[Ky&gG/", "...", "`06=m&pr*l!mQa#jx");
      assertNull(stringArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      int int1 = StringUtils.indexOfAny(charSequenceArray0[3], charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'c', ' ', ' '}, charArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(3, charArray0.length);
      
      String string4 = StringUtils.capitalize("");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "`06=m&pr*l!mQa#jx", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "hYnGF-1dj9A";
      stringArray0[2] = "";
      stringArray0[3] = "96DqOVo0\"zNjbmZ+&X";
      stringArray0[4] = "Q-";
      stringArray0[5] = "PyV*m`,(=8]e";
      stringArray0[6] = "8r!50Co";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertEquals(7, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", (-330));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("8r!50Co", "8r!50Co");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("8r!50Co", "b(Omdx#$S&MqbAY");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("b(Omdx#$S&MqbAY8r!50Cob(Omdx#$S&MqbAY", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(15, stringArray1.length);
      assertNotNull(stringArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '%';
      doubleArray0[1] = 1132.44019104558;
      doubleArray0[2] = (double) '%';
      String string2 = StringUtils.join(doubleArray0, '7');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("37.071132.44019104558737.0", string2);
      assertArrayEquals(new double[] {37.0, 1132.44019104558, 37.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, (-4));
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string1));
      
      String string3 = StringUtils.rightPad("", (-1), 'x');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.defaultString("P", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("P", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "\r", (-4));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad((String) null, Integer.MAX_VALUE, "Search and Replace array lengths don't match: ");
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "'$$cca642UWP6be9.", (CharSequence) null, 16);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[4] = (CharSequence) "'$$cca642UWP6be9.";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "'$$cca642UWP6be9.";
      String string3 = StringUtils.wrapIfMissing("\r", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      charSequenceArray0[7] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "\r", charSequenceArray0[3]);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(8, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, (-196), 2148);
      assertNull(string4);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("Search and Replace array lengths don't match: "));
      
      int int2 = StringUtils.indexOfIgnoreCase(charSequenceArray0[7], charSequenceArray0[3]);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String string0 = StringUtils.repeat("f$+kXOD)1yW", 13);
      assertEquals("f$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yW", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("XQqCIGX", 13);
      assertFalse(string1.equals((Object)string0));
      assertEquals("QqCIGXX", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("m>s8,/}(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "f$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yW", (CharSequence) "m>s8,/}(");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("m>s8,/}(", "qxti!xuXNB8kS;", 13);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.stripAccents("Gzy@C+KjE^U-");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Gzy@C+KjE^U-", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "qxti!xuXNB8kS;", (CharSequence) "Gzy@C+KjE^U-", 999);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("QqCIGXX", "Gzy@C+KjE^U-");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.chomp("Gzy@C+KjE^U-");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Gzy@C+KjE^U-", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.split("Tj6d?");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray1, "N<R;Y!2cs8");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray3.length);
      assertNotNull(stringArray3);
      
      String string4 = StringUtils.abbreviate("XQqCIGX", "m>s8,/}(", 7, 319);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("XQqCIGX", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissing("U#$`p|}f0L%f!d", "f$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yW", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("f$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWU#$`p|}f0L%f!d", string5);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray3);
      assertEquals(1, stringArray2.length);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.endsWithAny("f$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yW", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray3);
      assertEquals(1, stringArray2.length);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("m>s8,/}(", string6);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray3);
      assertEquals(1, stringArray0.length);
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)11;
      try { 
        StringUtils.toString(byteArray0, "f$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWf$+kXOD)1yWU#$`p|}f0L%f!d");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Locale must not be null");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-650.0F);
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-650.0", string1);
      assertArrayEquals(new float[] {(-650.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("-650.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "-650.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("-650.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "-650.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      String string3 = StringUtils.substringAfter("", "");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("", "-650.0", 0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeIgnoreCase("(*", "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("(*", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (-859));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.stripToNull("S:9tz]");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("S:9tz]", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("-650.0");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      
      boolean boolean4 = StringUtils.isAllLowerCase(charBuffer0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 284);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 284;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      String string1 = StringUtils.replaceAll((String) null, "<R;Y!2cs8K|&K<\"!2w@Kty.", "=96IlF");
      assertNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ")'nCKVP!uJ", (CharSequence) "", 98);
      assertFalse(int1 == int0);
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.replace("n^]sct36Q&p", "maxWith cannot be negative", "maxWith cannot be negative", 21);
      assertEquals("n^]sct36Q&p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-819.63006);
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = (double) '}';
      doubleArray0[3] = (-2058.19615549282);
      doubleArray0[4] = (double) 'Q';
      String string1 = StringUtils.join(doubleArray0, 'Q');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-819.63006Q81.0Q125.0Q-2058.19615549282Q81.0", string1);
      assertArrayEquals(new double[] {(-819.63006), 81.0, 125.0, (-2058.19615549282), 81.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "n^]sct36Q&p", (CharSequence) "n^]sct36Q&p", 1123);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isWhitespace("maxWith cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(string1));
      
      String string2 = StringUtils.rightPad(" ", (-1235), '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("maxWith cannot be negative", "N<R;Y!2cs8", "java.lang.Object@664c9b463java.lang.Object@3164767a3r~7 2X+#%2k*<5+F^", 3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.stripEnd("i> ", "i> ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("b)?$^_H10rp|A`/W0u");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad(" vs ", 3397, '\u0013');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.getDigits("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceAll(" vs ", "", "i> ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("i>  i> vi> si>  i> ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap(" vs ", '\u0013');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" vs ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string5 = StringUtils.join((Iterable<?>) null, "%c&)x^f]0v vb");
      assertNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "i> ", (CharSequence) " vs ");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string0 = StringUtils.join((Iterable<?>) serviceLoader0, "BiYaLFstCfZ$?d<");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "BiYaLFstCfZ$?d<", (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("BiYaLFstCfZ$?d<", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "";
      String string2 = StringUtils.right("", 3025);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      ArrayList<Object> arrayList0 = new ArrayList<Object>(841);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(3025));
      
      String string3 = StringUtils.join((Iterable<?>) arrayList0, "");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(3025));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      // Undeclared exception!
      try { 
        charBuffer0.put(11, 'v');
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("&z0UQ}p{", "\r", (-2346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.substringBetween("offset cannot be negative", "UW\u0000lk3==7B**Jt`q", "offset cannot be negative");
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("UW\u0000lk3==7B**Jt`q");
      assertEquals("UW\u0000lk3==7B**Jt`q", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center((String) null, 55, 'J');
      assertNull(string2);
      
      String string3 = StringUtils.stripToNull("The Character must not be null");
      assertFalse(string3.equals((Object)string1));
      assertEquals("The Character must not be null", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "offset cannot be negative", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '\u0082');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\u0082\u0082\u0082\u0082\u0082\u0082", string4);
      assertEquals(7, stringArray0.length);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(7, stringArray0.length);
      
      String string5 = StringUtils.chop("6-o={<t`TMmY:01xHL!L1^amX2Vu");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("6-o={<t`TMmY:01xHL!L1^amX2V", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate((String) null, "UW\u0000lk3==7B**Jt`q", 55, 3);
      assertNull(string6);
      
      String string7 = StringUtils.strip("N");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("N", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, ';');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 56);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("vuzr9]3|=", "vuzr9]3|=");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.wrapIfMissing("vuzr9]3|=", "org.junitpioneer.jupiter.DisabledUntilECtensio_");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DisabledUntilECtensio_vuzr9]3|=org.junitpioneer.jupiter.DisabledUntilECtensio_", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, 56);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "vuzr9]3|=", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(10, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String string0 = StringUtils.chomp("6b@jgi2:0Y,^'ode@");
      assertEquals("6b@jgi2:0Y,^'ode@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("bF^#[L~Binkr", "bF^#[L~Binkr", 1114111);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bF^#[L~Binkr", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "6b@jgi2:0Y,^'ode@";
      charSequenceArray0[1] = (CharSequence) "6b@jgi2:0Y,^'ode@";
      charSequenceArray0[2] = (CharSequence) "bF^#[L~Binkr";
      charSequenceArray0[3] = (CharSequence) "bF^#[L~Binkr";
      charSequenceArray0[4] = (CharSequence) "6b@jgi2:0Y,^'ode@";
      charSequenceArray0[5] = (CharSequence) "bF^#[L~Binkr";
      charSequenceArray0[6] = (CharSequence) "bF^#[L~Binkr";
      charSequenceArray0[7] = (CharSequence) "bF^#[L~Binkr";
      String string2 = StringUtils.prependIfMissingIgnoreCase("6b@jgi2:0Y,^'ode@", "bF^#[L~Binkr", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("6b@jgi2:0Y,^'ode@", string2);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("6b@jgi2:0Y,^'ode@", "&qww*C|7om(1`06=m&pr*l!mQa#jx", 1114111, 1114111);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("6b@jgi2:0Y,^'ode@", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((long[]) null, 'L', (-1), 1114111);
      assertNull(string4);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[2], 8, 76);
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string5 = StringUtils.substringAfterLast("#?", 32);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[3], charSequenceArray0[3]);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String string0 = StringUtils.remove("6-o={<t`TMm", "6-o={<t`TMm");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("Y:01xHL!L1^amX2Vu", "6-o={<t`TMm");
      assertFalse(string1.equals((Object)string0));
      assertEquals("6-o={<t`TMmY:01xHL!L1^amX2Vu6-o={<t`TMm", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty("", "cV;dCVz+EQfO");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("cV;dCVz+EQfO", string2);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string3 = StringUtils.normalizeSpace("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      String string4 = locale0.getDisplayScript();
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale locale1 = Locale.UK;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string5 = locale1.getDisplayScript();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string6 = locale1.getDisplayName();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("English (United Kingdom)", string6);
      assertNotSame(locale1, locale0);
      assertNotNull(string6);
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string7 = locale1.getScript();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotSame(locale1, locale0);
      assertNotNull(string7);
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(0, int0);
      assertNotSame(locale1, locale0);
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      String string8 = StringUtils.strip("DHZi", "");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("DHZi", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[2] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[3] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[4] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[5] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[6] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[7] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      String string0 = StringUtils.appendIfMissingIgnoreCase("cV;dCVz+EQfOStrings must not be null", "cV;dCVz+EQfOStrings must not be null", charSequenceArray0);
      assertEquals("cV;dCVz+EQfOStrings must not be null", string0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("cV;dCVz+EQfOStrings must not be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "cV;dCVz+EQfOStrings must not be null", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.center("The Character must not be null", 0, "D.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Character must not be null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[1] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[2] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[3] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[4] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[5] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[6] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      charSequenceArray0[7] = (CharSequence) "cV;dCVz+EQfOStrings must not be null";
      String string0 = StringUtils.appendIfMissingIgnoreCase("cV;dCVz+EQfOStrings must not be null", "cV;dCVz+EQfOStrings must not be null", charSequenceArray0);
      assertEquals("cV;dCVz+EQfOStrings must not be null", string0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("cV;dCVz+EQfOStrings must not be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "cV;dCVz+EQfOStrings must not be null", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.defaultIfEmpty("K|&K<\"!2w@Kty.<R;Y!2cs8", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("K|&K<\"!2w@Kty.<R;Y!2cs8", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string2 = StringUtils.normalizeSpace("K|&K<\"!2w@Kty.<R;Y!2cs8");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("K|&K<\"!2w@Kty.<R;Y!2cs8", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string3 = locale0.getDisplayScript();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string4 = locale0.getDisplayScript();
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string5 = locale0.getDisplayName();
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Italian", string5);
      assertNotNull(string5);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string6 = locale0.getScript();
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      int int1 = StringUtils.getFuzzyDistance("K|&K<\"!2w@Kty.<R;Y!2cs8", "K|&K<\"!2w@Kty.<R;Y!2cs8", locale0);
      assertFalse(int1 == int0);
      assertEquals(67, int1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string7 = StringUtils.strip((String) null, "K|&K<\"!2w@Kty.<R;Y!2cs8");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String string0 = StringUtils.removeStart("Search and Replace array lengths don't match: ", "Could not resolve parameter of type %s.");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.repeat("=^", 322);
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Strings must ndt b1 nulr", 'r');
      assertEquals("ings must ndt b1 nulrSt", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Strings must ndt b1 nulr", "ings must ndt b1 nulrSt");
      assertEquals(0.79, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Nz", 'i');
      assertEquals("iNzi", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "iNzi", 'i');
      assertEquals(2, int0);
      
      String string1 = StringUtils.wrap("iNzi", 'i');
      assertFalse(string1.equals((Object)string0));
      assertEquals("iiNzii", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("maxWit+ cannot be negative", "maxWit+ cannot be negative");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "maxWit+ cannot be negative", (CharSequence) null, (-1639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("o=z)3", "o=z)3", "o=z)3");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // o=z)3
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "\"CM*,/d*ZB(KVhu");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("\"CM*,/d*ZB(KVhu").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertEquals("\"CM*,/d*ZB(KVhu", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase("\"CM*,/d*ZB(KVhu");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("ame.");
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("ame.", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNotBlank("\"CM*,/d*ZB(KVhu");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.repeat("\"CM*,/d*ZB(KVhu", (-284));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      StringWriter stringWriter0 = new StringWriter(321);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) hashSet0);
      assertNotNull(list0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      Locale locale1 = Locale.lookup(arrayList0, list0);
      assertNull(locale1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      String string3 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string3);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "ame.");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\"CM*,/d*ZB(KVhu", (String) null, (-561));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ww";
      boolean boolean0 = StringUtils.isMixedCase("ww");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("ww", "ww", "ww");
      assertNull(stringArray1);
      
      String string0 = StringUtils.join((Object[]) null, (String) null, 5, Integer.MAX_VALUE);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      Locale locale1 = new Locale("lm)UY/Xue {~B#2r^rB=l7@y9uZ|/C", "bP");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("lm)uy/xue {~b#2r^rb=l7@y9uz|/c_BP", locale1.toString());
      assertEquals("BP", locale1.getCountry());
      assertEquals("lm)uy/xue {~b#2r^rb=l7@y9uz|/c", locale1.getLanguage());
      
      String string0 = locale0.getDisplayName(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("Italian", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("lm)uy/xue {~b#2r^rb=l7@y9uz|/c_BP", locale1.toString());
      assertEquals("BP", locale1.getCountry());
      assertEquals("lm)uy/xue {~b#2r^rb=l7@y9uz|/c", locale1.getLanguage());
      
      Locale locale2 = Locale.GERMAN;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      
      String string1 = locale0.getDisplayName(locale2);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Italienisch", string1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(string1);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      
      Locale locale3 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertSame(locale3, locale0);
      assertNotNull(locale3);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("it", locale3.toString());
      assertEquals("ita", locale3.getISO3Language());
      
      String string2 = StringUtils.lowerCase((String) null, locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNull(string2);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      String string3 = StringUtils.replaceChars((String) null, "NYoW\"*%w:FFKWS", "NYoW\"*%w:FFKWS");
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, "0VAh^f$Rg_&V]0,>U[4", 5253, 5253);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Locale must not be null", "vuzr9]3|=", "X!&~D");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = 's';
      charArray0[5] = 'Z';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "X!&~D", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'z', 'z', '/', '/', 's', 'Z'}, charArray0);
      assertEquals(6, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "vuzr9]3|=";
      charSequenceArray0[2] = (CharSequence) "Locale must not be null";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "X!&~D";
      charSequenceArray0[5] = (CharSequence) "X!&~D";
      charSequenceArray0[6] = (CharSequence) "vuzr9]3|=";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBeforeLast("Ymtz0`k", "Ymtz0`k");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'z';
      longArray0[1] = (long) 'Z';
      longArray0[2] = (long) 'z';
      longArray0[3] = (long) 'Z';
      longArray0[4] = (long) 'Z';
      longArray0[5] = (long) 's';
      longArray0[6] = 3985L;
      String string2 = StringUtils.join(longArray0, 'y', 160, 160);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertArrayEquals(new long[] {122L, 90L, 122L, 90L, 90L, 115L, 3985L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.endsWith("", "");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((Object) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = stack0.add((Object) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[null, ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertTrue(stack0.contains(""));
      
      Stream<Object> stream0 = stack0.stream();
      assertNotNull(stream0);
      assertEquals("[null, ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertTrue(stack0.contains(""));
      
      boolean boolean2 = stack0.add((Object) "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null, , ]", stack0.toString());
      assertEquals(3, stack0.size());
      assertTrue(stack0.contains(""));
      
      boolean boolean3 = stack0.remove((Object) stream0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null, , ]", stack0.toString());
      assertEquals(3, stack0.size());
      assertTrue(stack0.contains(""));
      
      stack0.setSize(1956);
      assertFalse(stack0.isEmpty());
      assertEquals(1956, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1956, stack0.size());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(1956));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.isEmpty());
      assertEquals(1956, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1956, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(1956));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Y');
      assertNotNull(string0);
      assertFalse(stack0.isEmpty());
      assertEquals(1956, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1956, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(1956));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("KQQal|", (String) null, "", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("KQQal|", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (int) 'Y';
      int int0 = StringUtils.indexOfAny((CharSequence) "", "KQQal|");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rotate("Locale must not be null", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ocale must not be nullL", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("Locale must not be null", supplier0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      charSequenceArray0[1] = (CharSequence) "KQQal|";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "KQQal|";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string4 = StringUtils.chomp("Locale must not be null", (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Locale must not be null", string4);
      assertNotNull(string4);
      
      charSequenceArray0[6] = (CharSequence) "Locale must not be null";
      charSequenceArray0[7] = (CharSequence) "Locale must not be null";
      boolean boolean4 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals(8, charSequenceArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1956;
      longArray0[1] = (long) 1956;
      longArray0[2] = (long) 89;
      longArray0[3] = (-2114L);
      String string5 = StringUtils.join(longArray0, 'Y');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("1956Y1956Y89Y-2114", string5);
      assertArrayEquals(new long[] {1956L, 1956L, 89L, (-2114L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((Object) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Stream<Object> stream0 = stack0.stream();
      assertNotNull(stream0);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = stack0.add((Object) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[null, ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      
      boolean boolean2 = stack0.remove((Object) stream0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("[null, ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      
      stack0.setSize(1956);
      assertFalse(stack0.isEmpty());
      assertEquals(1956, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1956, stack0.size());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(1956));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.isEmpty());
      assertEquals(1956, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1956, stack0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(1956));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Y');
      assertNotNull(string0);
      assertFalse(stack0.isEmpty());
      assertEquals(1956, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1956, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(1956));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("KQQal|", (String) null, "", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("KQQal|", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (int) 'Y';
      int int0 = StringUtils.indexOfAny((CharSequence) "", "KQQal|");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rotate("Locale must not be null", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ocale must not be nullL", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("Locale must not be null", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "KQQal|";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string4 = StringUtils.chomp("Locale must not be null", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("Locale must not be null", string4);
      assertNotNull(string4);
      
      charSequenceArray0[6] = (CharSequence) "Locale must not be null";
      charSequenceArray0[7] = (CharSequence) "Locale must not be null";
      boolean boolean3 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1956;
      longArray0[1] = (long) 1956;
      String string5 = StringUtils.join(longArray0, 'Y');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("1956Y1956Y0Y0", string5);
      assertArrayEquals(new long[] {1956L, 1956L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int1 = StringUtils.compare(" ", " ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.leftPad("offset cannot be negative", 54);
      assertEquals("                             offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("M2uB|Zju32E");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("M2uB|Zju32", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("M2uB|Zju32", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("M2uB|Zju32", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "                             offset cannot be negative", (CharSequence) "M2uB|Zju32", (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 54;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) '{';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (-3777.06F);
      floatArray0[7] = (float) '{';
      String string4 = StringUtils.join(floatArray0, 'V', 23, 13);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertArrayEquals(new float[] {54.0F, (-1.0F), 123.0F, (-1.0F), (-1.0F), (-1.0F), (-3777.06F), 123.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("offset cannot be negative", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.normalizeSpace(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("", (String) null, 5341);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", 106);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }";
      charSequenceArray0[1] = (CharSequence) "Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }";
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.replaceOnceIgnoreCase("", "Value must not be empty", "...");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 5341);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Could not resolve parameter of type %s.", (String) null);
      assertEquals("Could not resolve parameter of type %s.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, 19);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      String string0 = "6b@jgi2:0Y,^'ode@";
      String string1 = StringUtils.chomp("6b@jgi2:0Y,^'ode@");
      assertTrue(string1.equals((Object)string0));
      assertEquals("6b@jgi2:0Y,^'ode@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("6b@jgi2:0Y,^'ode@", "6b@jgi2:0Y,^'ode@", 1114111);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("6b@jgi2:0Y,^'ode@", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)12;
      Object[] objectArray0 = null;
      String string3 = "8";
      String string4 = StringUtils.join((Object[]) null, "8");
      assertNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("6b@jgi2:0Y,^'ode@", "8");
      assertEquals(0.0, double0, 0.01);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "@h%#;s6@-5*+YZt", supplier0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("@h%#;s6@-5*+YZt", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "@h%#;s6@-5*+YZt", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.chop("6b@jgi2:0Y,^'ode@6b@jgi2:0Y,^'ode@");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("6b@jgi2:0Y,^'ode@", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String string0 = StringUtils.removeStart("V", "p{InCombiningDiacriticalMarks}+");
      assertEquals("V", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("V");
      assertTrue(boolean0);
      
      String string1 = StringUtils.uncapitalize("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Strings must not bepnull");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compare("p{InCombiningDiacriticalMarks}+", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", 2159);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 2159);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart("Nz", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Nz", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("b)?$^_H10rp|A`/W0u");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("b)?$^_H10rp|A`/W0u", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny("b)?$^_H10rp|A`/W0u", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '[';
      charArray0[2] = 'h';
      String string2 = StringUtils.chomp("FM%");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("FM%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center(" does not have data element at ", (-142));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" does not have data element at ", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("C%", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.center("org.apache.commons.lang3.StringUtils9Nj~x6", 1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils9Nj~x6", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Strings must not be null", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string2));
      
      // Undeclared exception!
      try { 
        Charset.forName("Strings must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Strings must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertEquals(188, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.mid("R*k/7oe;)*K", (-12), (-12));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "R*k/7oe;)*K", (CharSequence) "", (-12));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 67);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("...", 11, "vuzr9]3|=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vuzr...vuzr", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("vuzr9]3|=", (-544), 11);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("vuzr9]3|=", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("vuzr9]3|=");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("vuzr9]3|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("XI==Fwks,wM>R}^'b|g", "Y:01xHLL1^a", "vuzr9]3|");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("XI==Fwks,wM>R}^'b|g", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("XI==Fwks,wM>R}^'b|g", "XI==Fwks,wM>R}^'b|g");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("vuzr9]3|=", (-4150));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[2] = (CharSequence) "Y:01xHLL1^a";
      charSequenceArray0[3] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("...", charSequenceArray0);
      assertEquals(3, int0);
      assertEquals(4, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "vuzr9]3|", 774);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.replaceChars("StopwatchExtension", "vuzr9]3|=", "XI==Fwks,wM>R}^'b|g");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("StopwatchExtension", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.mid("XI==Fwks,wM>R}^'b|g", 67, (-232));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vuzr9]3|=", "vuzr9]3|=");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "vuzr9]3|=", (CharSequence) "vuzr9]3|=");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.endsWithAny("vuzr9]3|=", stringArray0);
      assertTrue(boolean0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("@", (String) null, false);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string0 = StringUtils.replaceIgnoreCase("@", "ErE*BX", (String) null, 2672);
      assertEquals("@", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "@";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "@";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "@";
      charSequenceArray0[7] = (CharSequence) "@";
      boolean boolean0 = StringUtils.endsWithAny("@", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.center((String) null, (-5769), "P8t)mJ9 J+");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Method `");
      assertEquals("Method `", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Method `", (CharSequence) "Method `");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      short[] shortArray0 = new short[0];
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      String string0 = StringUtils.repeat((String) null, "sW;", (-2643));
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "sW;");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      objectArray0[1] = (Object) "Y&*0m`";
      objectArray0[2] = (Object) "Y&*0m`";
      objectArray0[3] = (Object) "Y&*0m`P";
      objectArray0[4] = (Object) "Y&*0m`P";
      objectArray0[5] = (Object) "Y&*0m`P";
      objectArray0[6] = (Object) "Y&*0m`";
      String string1 = StringUtils.join(objectArray0, "Y&*0m`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`", string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`", "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`");
      assertEquals(1.0, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`", (CharSequence) "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chop("vu4]w");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vu4]", string2);
      assertNotNull(string2);
      
      double double1 = StringUtils.getJaroWinklerDistance("vu4]w", "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.39, double1, 0.01);
      
      String string3 = StringUtils.normalizeSpace(")[CK{z");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(")[CK{z", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ")[CK{z", (CharSequence) "Y&*0m`");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "ArsBC>x}x3", Integer.MAX_VALUE, 23);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "ArsBC>x}x3";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "ArsBC>x}x3";
      charSequenceArray0[3] = (CharSequence) "ArsBC>x}x3";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "ArsBC>x}x3";
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'T');
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "ArsBC>x}x3";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.indexOfAny((CharSequence) "p{In", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)109;
      String string0 = StringUtils.join(byteArray0, 'y');
      assertEquals("0y-107y109", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-107), (byte)109}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "0y-107y109";
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat('u', 3364);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("0,Q/]>d4OH7C'7", (String) null, 16, 911);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0,Q/]>d4OH7C'7", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("U", 8, (String) null);
      assertEquals("U       ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("AjjJ3");
      assertFalse(string2.equals((Object)string1));
      assertEquals("AjjJ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad((String) null, 10, 'Q');
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("U", "AjjJ3", 226);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("U", string4);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsWhitespace("U       ");
      assertTrue(boolean0);
      
      String string5 = StringUtils.strip("Locale must not be null");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Locale must not be null", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNumeric("U");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "rDC", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertNotNull(object6);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Could not find parameter named %s in test %s", 'Y');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceFirst(" ", "Y:01xHL!L1^", ";3r+y");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator(" ", "", 100);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.countMatches((CharSequence) "]Knn4p", 'k');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.center("e loop is the input of another", 3295, 'V');
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("Search and Replace array lengths don't match: ", 2970);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rray lengths don't match: Search and Replace a", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Search and Replace array lengths don't match: ";
      String string2 = StringUtils.join(objectArray0, "e loop is the input of another", 3295, (-1986));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(1, objectArray0.length);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) ":e7j`Gt/XgI'${";
      charSequenceArray0[2] = (CharSequence) "rray lengths don't match: Search and Replace a";
      charSequenceArray0[3] = (CharSequence) ":e7j`Gt/XgI'${";
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.right("(", 5);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("(", string3);
      assertNotNull(string3);
      
      charSequenceArray0[5] = (CharSequence) "(";
      int int0 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("...", charset0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)46}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("offset cannot be negative", charset0);
      assertEquals(25, byteArray0.length);
      assertNotNull(byteArray0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      String string0 = StringUtils.replaceIgnoreCase("vuzr9]3|=", (String) null, (String) null, (-3));
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.center("6-o={<t`TMm", 1);
      assertFalse(string2.equals((Object)string0));
      assertEquals("6-o={<t`TMm", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("v{IacnBlv|Cy2t$", " ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("e8Ff3tHoCq#L= ", "vuzr9]3|=");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase("0*5^ln>", "6wvIT");
      assertEquals((-6), int0);
      
      String string3 = StringUtils.defaultString(" ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "6-o={<t`TMm", (CharSequence) " ");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substringBetween("D:Z}NWf((;$dy3", "<R;Y!2cs8K|&K<\"!2w@Kty.", "v{IacnBlv|Cy2t$");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      String[] stringArray0 = StringUtils.split("0xUFK&Kuso2{O/e0=w");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripStart("0xUFK&Kuso2{O/e0=w", "0xUFK&Kuso2{O/e0=w");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.DefaultLocaleExtension", 'm');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.replaceFirst("Locale must not be null", "org.junitpioneer.jupiter.DefaultLocaleExtension", "kpjU");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("/PkrG?!", "", (int) (byte) (-89));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string2 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.DefaultLocaleExtension", (-3845));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'H');
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "u4gWi8`", (CharSequence) "Locale must not be null");
      assertFalse(int1 == int0);
      assertEquals(22, int1);
      
      String string3 = StringUtils.left("0xUFK&Kuso2{O/e0=w", 22);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0xUFK&Kuso2{O/e0=w", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.join((List<?>) stack0, '[', 507, 507);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains('['));
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String string0 = StringUtils.defaultString("iTiXQI<R=~");
      assertEquals("iTiXQI<R=~", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "iTiXQI<R=~";
      charSequenceArray0[1] = (CharSequence) "iTiXQI<R=~";
      charSequenceArray0[2] = (CharSequence) "iTiXQI<R=~";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[1], "t]`m2l`n=}i0dKWh");
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.rotate("Search and Replace array lengths don't match: ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("Search and Replace array lengths don't match: ", "iTiXQI<R=~");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("Search and Replace array lengths don't match: "));
      
      String string3 = StringUtils.join((List<?>) stack0, '*', 53, 53);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains('*'));
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-89);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte) (-89);
      objectArray0[3] = (Object) (byte) (-89);
      objectArray0[4] = (Object) (byte) (-89);
      objectArray0[5] = (Object) (byte) (-89);
      String string0 = null;
      String string1 = StringUtils.join(objectArray0, (String) null);
      assertEquals(6, objectArray0.length);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("-89java.lang.Object@42c15d02-89-89-89-89", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("R|");
      assertEquals("r|", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("R|", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      String string0 = StringUtils.replaceIgnoreCase("", "%s requires that either `contains` or `matches` is set.", "vBJ9ki#&qY APtG:%}", (-340));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, '\'');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("vBJ9ki#&qY APtG:%}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vBJ9ki#&qY APtG:%}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center(" H1^#rP", 1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" H1^#rP", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "KQQal|";
      stringArray0[1] = " H1^#rP";
      stringArray0[2] = null;
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("v{AWYd}lg'p", (String) null);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.compareIgnoreCase("", "$^1/E");
      assertEquals((-5), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("KQQal|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.removePattern("%s %s.", "zrY9AV@ziPWkk=nx");
      assertEquals("%s %s.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "%s %s.", "{6]3#c~ufBAljJ,{;");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap(" has no clone method", "zrY9AV@ziPWkk=nx");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" has no clone method", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" has no clone method", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween(" has no clone method", "%s %s.", " has no clone method");
      assertNull(stringArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = 'c';
      charArray0[2] = 'J';
      charArray0[1] = 'l';
      int int1 = StringUtils.indexOfAny((CharSequence) "{6]3#c~ufBAljJ,{;", charArray0);
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      assertArrayEquals(new char[] {' ', 'l', 'J', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = StringUtils.isNumeric("zrY9V@ziPWkk=nx");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) " has no clone method", (CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "A");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "A", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceAll("", "", "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 'z';
      charArray0[2] = '/';
      charArray0[3] = '/';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'s', 'z', '/', '/'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      String string0 = StringUtils.center("i<Do:*p4p4yD+z1%<8|", (-3168));
      assertEquals("i<Do:*p4p4yD+z1%<8|", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(15, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.compareIgnoreCase("K|&K<\"!2w@Kty.", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase("i<Do:*p4p4yD+z1%<8|");
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(17, stringArray3.length);
      assertNotNull(stringArray3);
      
      String string1 = StringUtils.remove("i<Do:*p4p4yD+z1%<8|", 's');
      assertTrue(string1.equals((Object)string0));
      assertEquals("i<Do:*p4p4yD+z1%<8|", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("<R;Y!2cs8", "N");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("N<R;Y!2cs8N", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase((CharSequence) null, "i<Do:*p4p4yD+z1%<8|");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean3 = StringUtils.containsAny((CharSequence) "<R;Y!2cs8", charSequenceArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Strings must not be null");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("Strings must not be null", "Strings must not be null", "Strings must not be null");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '*';
      charArray0[2] = 'D';
      charArray0[3] = 'O';
      charArray0[4] = '#';
      charArray0[5] = '\'';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r~7 2X+#%2k*<5+F^", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'7', '*', 'D', 'O', '#', '\''}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string1 = StringUtils.unwrap("Locale must not be null", '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("Threshold must not be negative", "Threshold must not be negative", "null/empty items");
      assertNull(string1);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      
      String string2 = StringUtils.SPACE;
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumericSpace(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("null/empty items", 160, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("{9vSPr~{KZ", "idv=TGm", "-89y-107y109k~");
      assertEquals("{9vSPr~{KZ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("{9vSPr~{KZ");
      assertEquals(10, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.junitpioneer.jupiter.params.IntRange", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = ' ';
      charArray0[2] = 'z';
      charArray0[3] = '|';
      charArray0[4] = '#';
      charArray0[5] = 'V';
      charArray0[6] = 'S';
      charArray0[7] = '(';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "{9vSPr~{KZ", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'R', ' ', 'z', '|', '#', 'V', 'S', '('}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.leftPad("{9vSPr~{KZ", (-1276));
      assertTrue(string2.equals((Object)string0));
      assertEquals("{9vSPr~{KZ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(":");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ww";
      stringArray0[1] = "ww";
      stringArray0[2] = "ww";
      String string0 = StringUtils.replaceEach("ww", stringArray0, stringArray0);
      assertEquals("ww", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("ww", "ww");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("e:qYIwc%A\"s*q)?_[yp");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("E:qYIwc%A\"s*q)?_[yp", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("e:qYIwc%A\"s*q)?_[yp", "s7!", "GMT");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("e:qYIwc%A\"s*q)?_[yp", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceChars("ww", "ww", "Node ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("NN", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split("L#mM=;9$ 8_:(-K", "px`;", (-415));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.removeStartIgnoreCase("e:qYIwc%A\"s*q)?_[yp", "px`;");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("e:qYIwc%A\"s*q)?_[yp", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      String[] stringArray2 = StringUtils.substringsBetween("i<Do:*p4p4yD+z1%<8|", "nM9w$? w#&'M73", "2");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "___42uG<3ZERtH", "FTi'?52yV~");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("<14*O`UPZe e^t< \\Z", "<14*O`UPZe e^t< \\Z", "...");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeFirst("[ NzH+{", "%agUdVR");
      assertEquals("[ NzH+{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("%agUdVR", 3204, 'J');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("[ NzH+{", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("[ NzH+{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.center("6-o={<t`TMm", (-1753));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("6-o={<t`TMm", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("[ NzH+{", string4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("[ NzH+{", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.defaultString("6-o={<t`TMm");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("6-o={<t`TMm", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("Locale must not be null0:0:0", "Locale must not be null0:0:0");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(" ");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Locale must not be null0:0:0", " ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ", " ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("'$$cca642UWP6be9.", 284, "\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'$$cca642UWP6be9.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars(" ", "s?'#quC,nd", "The Array must not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "s?'#quC,nd", (CharSequence) " ", 284);
      assertEquals(10, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "The Array must not be null", (CharSequence) "The Array must not be null");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.rotate("*1-Xi;#'", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("*1-Xi;#'", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.wrap("vuzr9]3|=", "vuzr9]3|=");
      assertEquals("vuzr9]3|=vuzr9]3|=vuzr9]3|=", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "vuzr9]3|=vuzr9]3|=vuzr9]3|=", (CharSequence) "vuzr9]3|=");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'X', (-218), 49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", 91);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("eBH(aY)", "UIYz+i.wWKvH ,");
      assertFalse(string1.equals((Object)string0));
      assertEquals("eBH(aY)", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfBlank("Aborting to protect against StackOverfl{wError - output of one loop is the input of anotherY:01xHL!L1^amX2Vu", (Supplier<String>) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverfl{wError - output of one loop is the input of anotherY:01xHL!L1^amX2Vu", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("eBH(aY)", 91);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("eBH(aY)", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[22];
      longArray0[0] = (long) 91;
      longArray0[1] = (long) 91;
      longArray0[0] = (long) 91;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      String string4 = StringUtils.join(longArray0, 'm', 91, 1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(22, longArray0.length);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "UIYz+i.wWKvH ,", (-204), 128);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("eBH(aY)", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.left("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-2933));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "UIYz+i.wWKvH ,", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("UIYz+i.wWKvH ,"));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertFalse(treeSet0.contains("UIYz+i.wWKvH ,"));
      assertFalse(navigableSet0.contains("UIYz+i.wWKvH ,"));
      
      String string7 = StringUtils.join((Iterable<?>) navigableSet0, 'O');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertFalse(treeSet0.contains("UIYz+i.wWKvH ,"));
      assertFalse(navigableSet0.contains("UIYz+i.wWKvH ,"));
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String string0 = StringUtils.removeStart("=M", "=M");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "=M", (CharSequence) "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "k0E", (CharSequence) "k0E", (-2032));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{6]3#c~ufBAljJ,{;", "6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6!XIoo_~QHl,}`dA(Z");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{6]3#c~ufBAljJ,{;", "{6]3#c~ufBAljJ,{;", 1432);
      assertEquals(18, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string1);
      assertEquals(18, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate(")", "org.apache.commons.lang3.StringUtils9Nj~x6", 2862, 3228);
      assertFalse(string2.equals((Object)string1));
      assertEquals(")", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip((String) null);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '(', 5, 119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3238, 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat((String) null, (String) null, 5341);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", (String) null);
      assertEquals("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("...", "", 5341, 5341);
      assertFalse(string3.equals((Object)string2));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("<");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("<", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("N<R;Y!2cs8", 3701, 3701);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.mid("]", 21, 21);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 21);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 1);
      assertEquals("earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("{index}", "z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{index}", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("{$E<gdgw}/7~rZd%y:#", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{$E<gdgw}/7~rZd%y:#", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("{index}", 1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("{", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'm';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", "earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", "z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.countMatches((CharSequence) "Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", (CharSequence) "{index}");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("PW@a&,*?t");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("", "w2dMH+M1xK+<R;Y!2cs8");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.prependIfMissingIgnoreCase("dL 6F*9", "", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("dL 6F*9", string3);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", "r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "j", (CharSequence) "j");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 284);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", " ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.remove(" ", '{');
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", 'D');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.compare("", "", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.compare(" ", "p{InCombiningDiacriticalMarks}+");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-80), int2);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String[] stringArray0 = new String[5];
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'K';
      charArray0[5] = '%';
      String string0 = StringUtils.replacePattern("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", " vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("d>) )N", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("d>) )N", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("d>) )N", 901);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("d>) )N", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("d>) )N", stringArray0);
      assertEquals((-1), int0);
      assertEquals(5, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "d>) )N", (CharSequence) "", 3);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string3 = StringUtils.join(iterator0, '%');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, 224);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      String string0 = StringUtils.removeAll("Method `", "Method `");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5326);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat((String) null, (String) null, 5326);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, 3224);
      assertNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "File must not be null or blank";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "File must not be null or blank";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      String string4 = StringUtils.prependIfMissing("File must not be null or blank", (CharSequence) null, charSequenceArray0);
      assertEquals("File must not be null or blank", string4);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.swapCase("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("@dEFAULTlOCALE NOT CONFIGURED CORRECTLY. wHEN NOT USING A LANGUAGE TAG, SPECIFY EITHERLANGUAGE, OR LANGUAGE AND COUNTRY, OR LANGUAGE AND COUNTRY AND VARIANT.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.left((String) null, 8192);
      assertNull(string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 8192;
      floatArray0[2] = (float) 8192;
      floatArray0[3] = (float) 8192;
      floatArray0[4] = (float) 8192;
      String string3 = StringUtils.abbreviate((String) null, "@dEFAULTlOCALE NOT CONFIGURED CORRECTLY. wHEN NOT USING A LANGUAGE TAG, SPECIFY EITHERLANGUAGE, OR LANGUAGE AND COUNTRY, OR LANGUAGE AND COUNTRY AND VARIANT.", (int) ':');
      assertNull(string3);
      
      String[] stringArray0 = new String[7];
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.join(objectArray0, '-');
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEndIgnoreCase(" ", "-java.lang.Object@7d5761a-----");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("<7e^iMi*y\"%+s;J", 'T');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("T<7e^iMi*y\"%+s;JT", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("T<7e^iMi*y\"%+s;JT", "_mAR-((L>eQl");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("T<7e^iMi*y\"%+s;JT", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'W');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "..", "..");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("4v&v5n]#");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.rightPad("4v&v5n]#", (-1772), 'M');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4v&v5n]#", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("4v&v5n]#");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviate("zrY9AV@ziPWkk=nx", 76, 40);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("zrY9AV@ziPWkk=nx", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("zrY9AV@ziPWkk=nx");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("zrY9AV@ziPWkk=nx", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("}p8b@gNJvF!x[P<k(");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(16, stringArray2.length);
      assertNotNull(stringArray2);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "zrY9V@ziPWkk=nx", (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String string0 = StringUtils.swapCase("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("@dEFAULTlOCALE NOT CONFIGURED CORRECTLY. wHEN NOT USING A LANGUAGE TAG, SPECIFY EITHERLANGUAGE, OR LANGUAGE AND COUNTRY, OR LANGUAGE AND COUNTRY AND VARIANT.", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      int int0 = 31;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rotate("Y:01xHL!L1^amX2Vu", 0);
      assertEquals("Y:01xHL!L1^amX2Vu", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "Minimum abbreviation width is %d");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) null, 527);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String string0 = "Execution of '%s' took [%d] ms.";
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "Execution of '%s' took [%d] ms.", 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, ')', 35, 154);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String string0 = "vuzr9]3|=";
      String string1 = " vs ";
      int int0 = 3;
      char char0 = 'm';
      int int1 = 1299;
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      char char1 = 'X';
      int int2 = 1907;
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'X', 1299, 1907);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1299
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*UxxB? *UxxB? ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "*UxxB? *UxxB? ", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*UxxB? *UxxB? ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "maxWit+ cannot be negative", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("M|w");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "M|w", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      String string0 = StringUtils.center("H|EI)", (-1986), 'D');
      assertEquals("H|EI)", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("H|EI)", (-1986));
      assertFalse(string1.equals((Object)string0));
      assertEquals("|EI)H", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "H|EI)";
      charSequenceArray0[1] = (CharSequence) "|EI)H";
      String string2 = StringUtils.join((Object[]) charSequenceArray0, ":e7j`Gt/XgI'${", 54, 54);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "e loop is the input of another";
      charSequenceArray0[4] = (CharSequence) "|EI)H";
      int int0 = StringUtils.indexOfAny((CharSequence) "H|EI)", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("=M", "=M", "=M");
      assertEquals("=M", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "=M", (CharSequence) "=M");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("=M", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("=M", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5326);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("vu4]w", "vu4]w");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.normalizeSpace("oro281");
      assertEquals("oro281", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("oro281", 3224);
      assertFalse(string3.equals((Object)string2));
      assertEquals("81oro2", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "81oro2");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.stripToEmpty("oro281");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("oro281", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "ww", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap(" has no clone method", "zrY9AV@ziPWkk=nx");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" has no clone method", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" has no clone method", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("\r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("0.0}1167.474}0.0}0.0", "\r");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.capitalize("\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll("\r", "e loop is the input of another", ")'nCKVP!uJ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "0.0}1167.474}0.0}0.0", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeFirst("[ NzH+{", "%agUdVR");
      assertEquals("[ NzH+{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("%agUdVR", 3204, 'J');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("%agUdVR", 1386, "org.junitpioneer.jupiter.ReportEntryExtension");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("%b8'r(D", 3204, 3204);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("%b8'r(D", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("~v");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("~", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replacePattern("%agUdVR", "Class %s not found, referenced in method %s", "%agUdVR");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("%agUdVR", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.remove("~", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("~", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.right("%b8'r(D", (-544));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) ")";
      charSequenceArray0[1] = (CharSequence) string3;
      String string9 = StringUtils.trimToEmpty((String) null);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertEquals("", string9);
      assertNotNull(string9);
      
      charSequenceArray0[2] = (CharSequence) "";
      double[] doubleArray0 = new double[0];
      String string10 = StringUtils.join(doubleArray0, '*');
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertEquals("", string10);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string10);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) string2;
      charSequenceArray0[5] = (CharSequence) "Class %s not found, referenced in method %s";
      int int0 = StringUtils.lastIndexOfAny("%b8'r(D", charSequenceArray0);
      assertEquals(8, int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "~v", 5);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(5, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'c');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("\u0000");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "\u0000";
      String string2 = StringUtils.removeEnd("Object varargs must not be null", "Te");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("Object varargs must not be null", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("Object varargs must not be null");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((double[]) null, '~', (-1), (-2384));
      assertNull(string0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Sa9<|o4VViy:sC(", "FM%");
      assertEquals("Sa9<|o4VViy:sC(", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("{9vSPr~{KZ", "S]_ 'YDGC?");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{9vSPr~{KZ", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "Sa9<|o4VViy:sC(", (CharSequence) "Sa9<|o4VViy:sC(");
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Sa9<|o4VViy:sC(", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("Sa9<|o4VViy:sC(", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("Sa9<|o4VViy:sC(", "MPrsK%-3XK:1 &D=", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '[';
      charArray0[3] = '?';
      charArray0[4] = '[';
      charArray0[5] = '?';
      int int1 = StringUtils.indexOfAny((CharSequence) "S]_ 'YDGC?", charArray0);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      assertArrayEquals(new char[] {'?', '?', '[', '?', '[', '?'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("yl>d9h");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("{9vSPr~{KZ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      longArray0[3] = (long) '?';
      String string2 = StringUtils.join(longArray0, 'j', 1394, 9);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertArrayEquals(new long[] {63L, 63L, 0L, 63L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("yl>d9h", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "S]_ 'YDGC?", (CharSequence) "{9vSPr~{KZ");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 373);
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringAfterLast("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", (short)1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((double[]) null, '/', 16, 16);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)125;
      String string2 = StringUtils.join(byteArray0, 's', Integer.MAX_VALUE, (int) (byte)127);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)10, (byte)127, (byte)125}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '7', (int) (byte) (-111), (int) (byte) (-111));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = '7';
      charArray0[2] = 'E';
      charArray0[3] = '/';
      charArray0[4] = 's';
      charArray0[5] = '/';
      charArray0[6] = '7';
      charArray0[7] = '7';
      charArray0[8] = 's';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'s', '7', 'E', '/', 's', '/', '7', '7', 's'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "", 16);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.replace((String) null, "", "");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, "P7+PO0zybc\r");
      assertEquals("P7+PO0zybc\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("P7+PO0zybc\r", "P7+PO0zybc\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("P7+PO0zybc\r", string1);
      assertNotNull(string1);
      
      String string2 = "0.0}1167.474}0.0}0.0";
      String string3 = StringUtils.center("...", (-4150), "0.0}1167.474}0.0}0.0");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("", (-544), (-15));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("P7+PO0zybc\r");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("P7+PO0zybc", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("Object varargs must not be null", ")", "P7+PO0zybc\r");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')'
         // )
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.removeStart("=M", "=M");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("=M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("SA{4?y");
      assertEquals("SA{4?Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("SA{4?y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("\"_DgtKU3$$8AF]\"");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"_DgtKU3$$8AF]\"", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "\"_DgtKU3$$8AF]\"", 642, (-857));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[3] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      String string4 = StringUtils.right((String) null, 15);
      assertNull(string4);
      
      charSequenceArray0[7] = (CharSequence) null;
      String string5 = StringUtils.substringAfterLast("", (String) null);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (String) null);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.rotate("", 15);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y&*0m`P";
      stringArray0[1] = "\r";
      stringArray0[2] = "Y&*0m`P";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`P", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("9Nj~x6");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("9NJ~X6", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "Y&*0m`P");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad((String) null, (-1), (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfter("9Nj~x6", "h8@R}f/xgd(_dT?0");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("Y&*0m`");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Y&*0m`", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissing("org.apache.commons.lang3.StringUtils", "Y&*0m`", stringArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Y&*0m`org.apache.commons.lang3.StringUtils", string6);
      assertEquals(4, stringArray0.length);
      assertNotNull(string6);
      
      int int1 = StringUtils.compareIgnoreCase("9Nj~x6", "maxWith cannot be negative");
      assertFalse(int1 == int0);
      assertEquals((-52), int1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '?';
      String string7 = StringUtils.join(longArray0, '{');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("-1{63", string7);
      assertArrayEquals(new long[] {(-1L), 63L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfterLast("jMK3gbZd", 5);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.replaceChars("9NJ~X6", "org.apache.commons.lang3.StringUtils", (String) null);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string2));
      assertEquals("9NJ~X6", string9);
      assertNotNull(string9);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "Y&*0m`P");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("%s was not annotated with %s or %s but should have been.", "\r", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%s was not annotated with %s or %s but should have been.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("%s was not annotated with %s or %s but should have been.");
      assertFalse(boolean0);
      
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("6-o={<t`TMm", "6-o={<t`TMm");
      assertEquals("6-o={<t`TMm", string0);
      assertNotNull(string0);
      
      String string1 = "Y:01xHL!L1^amX2Vu";
      String string2 = StringUtils.wrapIfMissing("Y:01xHL!L1^amX2Vu", "6-o={<t`TMm");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6-o={<t`TMmY:01xHL!L1^amX2Vu6-o={<t`TMm", string2);
      assertNotNull(string2);
      
      int int0 = 5;
      String string3 = "!K<nPO%Gm|e\" c0[h6";
      String string4 = StringUtils.removeEnd("", "6-o={<t`TMm");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("y';", (-399), 5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("y';", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("!K<nPO%Gm|e\" c0[h6");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("!K<nPO%Gm|e\" c0[h", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("6-o={<t`TMmY:01xHL!L1^amX2Vu6-o={<t`TMm", "6-o={<t`TMm", "^af.5<<h,5n~h{@");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // 6-o={<t`TMm
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 284);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 284;
      floatArray0[1] = (float) (-1);
      String string1 = StringUtils.join((Object[]) stringArray0, '^');
      assertFalse(string1.equals((Object)string0));
      assertEquals("^", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, stringArray0.length);
      
      int int2 = StringUtils.lastIndexOfAny("<R;Y!2cs8w2dMH+M1xK+", stringArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(20, int2);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.rightPad("^", (-1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("^", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "<R;Y!2cs8w2dMH+M1xK+", (CharSequence) "^", 581);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("T*r!s`");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "T*r!s`", (CharSequence) "T*r!s`");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substring("T*r!s`", (-1), (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid(" ", (-1), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, " ", 8);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '[';
      String string1 = StringUtils.swapCase("QKE[MUzk>2Evxx|v");
      assertFalse(string1.equals((Object)string0));
      assertEquals("qke[muZK>2eVXX|V", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("_Tv5ACan't disable based on arguments, because method %s had no parameters.", "Z*8y|g3dd", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("_Tv5ACan't disable based on arguments, because method %s had no parameters.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("ame.", 'a', ' ');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" me.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("ame.");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ame.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("!|RwsgfsvF", (-1554), 56);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("!|RwsgfsvF", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "QKE[MUzk>2Evxx|v";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "Z*8y|g3dd";
      charSequenceArray0[3] = (CharSequence) "!|RwsgfsvF";
      charSequenceArray0[4] = (CharSequence) "_Tv5ACan't disable based on arguments, because method %s had no parameters.";
      charSequenceArray0[5] = (CharSequence) "FM%";
      charSequenceArray0[6] = (CharSequence) "QKE[MUzk>2Evxx|v";
      charSequenceArray0[7] = (CharSequence) "QKE[MUzk>2Evxx|v";
      charSequenceArray0[8] = (CharSequence) "Strings must not be null";
      String string6 = StringUtils.prependIfMissingIgnoreCase("QKE[MUzk>2Evxx|v", "!|RwsgfsvF", charSequenceArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("QKE[MUzk>2Evxx|v", string6);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat('[', 56);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      String string0 = StringUtils.rotate("i", (-2448));
      assertEquals("i", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "r~7 2X+#%2k*<5+F^");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfAny("Y:01xHL!L1^amX2Vu", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Y:01xHL!L1^amX2Vu", (CharSequence) "Y:01xHL!L1^amX2Vu", (-3570));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.overlay((String) null, "\r", 563, 426);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("J", "r~7 2X+#%2k*<5+F^", "rfJ9;WEjEx");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`P";
      String[] stringArray0 = new String[5];
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.replacePattern("Y&*0m`", "Y&*0m`", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Y&*0m`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("Y&*0m`", "6-o={<t`TMmY:01xHL!L1^amX2Vu");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Y&*0m`", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("Y&*0m`", (-2953));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase("Y&*0m`", "Y&*0m`");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Y&*0m`", (CharSequence) "Y&*0m`", 4);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.removeStart("B0ORRvHGG=", "B0ORRvHGG=");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("P7+PO0zybc\rP7+PO0zybc\r", "P7+PO0zybc\rP7+PO0zybc\r");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.removePattern("%s %s.", "zrY9AV@ziPWkk=nx");
      assertEquals("%s %s.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "%s %s.", "{6]3#c~ufBAljJ,{;");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap(" has no clone method", "zrY9AV@ziPWkk=nx");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" has no clone method", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" has no clone method", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween(" has no clone method", "%s %s.", " has no clone method");
      assertNull(stringArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = 'c';
      charArray0[2] = 'J';
      charArray0[3] = 'l';
      int int1 = StringUtils.indexOfAny((CharSequence) "{6]3#c~ufBAljJ,{;", charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertArrayEquals(new char[] {' ', 'c', 'J', 'l'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("maxWit+ cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("vM>3{7[wQo`", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vM>3{7[wQo`", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.right("*(;7d]Wc$<", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("=VNqJVXQ)J@ss,", "", 9);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.rightPad((String) null, 0);
      assertNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("File must not be null or blank", (CharSequence) null, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("File must not be null or blank", string3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("=VNqJVXQ)J@ss,", "Search and Replace aray lengths don'tmatch: ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("=VNqJVXQ)J@ss,", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter(" ", (-3332));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) '}';
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("k~", supplier0);
      assertEquals("k~", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("Threshold must not be negative", 0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "C@U%Xh&k+`#K&N*c!");
      assertTrue(boolean0);
      
      String string3 = StringUtils.capitalize("^kwK5z");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("^kwK5z", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll("PRky", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("PRky", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "PRky", (-135));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      int[] intArray0 = new int[1];
      String string0 = StringUtils.join(intArray0, '3');
      assertEquals("0", string0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("zrY9V@ziPWkk=nx", ")", 122, 122);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("NKO<o");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("NKO<o", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '~', 119, (-2211));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(2, stringArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("_Tv5A", "Can't disable based on arguments, because method %s had no parameters.");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("_Tv5A", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.compare("_Tv5A", "V'_+'C43]l[D<[e", true);
      assertEquals(9, int0);
      
      String string6 = StringUtils.appendIfMissing("t`3S>PtXk=k", "", stringArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("t`3S>PtXk=k", string6);
      assertEquals(2, stringArray0.length);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isNumeric("zrY9V@ziPWkk=nx");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "_Tv5A", (CharSequence[]) stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      String string0 = "6b@jgi2:0Y,^'ode@";
      String string1 = StringUtils.chomp("6b@jgi2:0Y,^'ode@");
      assertTrue(string1.equals((Object)string0));
      assertEquals("6b@jgi2:0Y,^'ode@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("i<Do:*p4p4yD+z1%<8|");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("I<Do:*p4p4yD+z1%<8|", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("I<Do:*p4p4yD+z1%<8|", "Locale must not be null", "#`7$+.g%r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("I<D`:*p4p4yD+z1%<8|", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "I<Do:*p4p4yD+z1%<8|", (CharSequence) "I<D`:*p4p4yD+z1%<8|");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Locale must not be null", (CharSequence) "6b@jgi2:0Y,^'ode@", 11);
      assertEquals((-1), int0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(11, comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(string2));
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = linkedList1.retainAll(linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      Collection<Locale> collection0 = null;
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String string0 = StringUtils.stripStart("Search and Replace array lengths don't match: ", "QtFFaQtFFa");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "QtFFaQtFFa", 76);
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "G7h}Irh2'P$I!k'", "nwMWfHn`(e2_F0(::]o");
      assertEquals(8, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "G7h}Irh2'P$I!k'", (CharSequence) "nwMWfHn`(e2_F0(::]o", 9);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", (int) (short)1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'E');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("jj", "jj", (String) null);
      assertEquals("jj", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.center("#", 19, 'Y');
      assertEquals("YYYYYYYYY#YYYYYYYYY", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("#", (CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'C';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'V';
      charArray0[5] = 'W';
      charArray0[6] = 'Y';
      charArray0[7] = 'd';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "YYYYYYYYY#YYYYYYYYY", charArray0);
      assertEquals(9, int0);
      assertArrayEquals(new char[] {'d', 'C', 'Y', 'Y', 'V', 'W', 'Y', 'd'}, charArray0);
      assertEquals(8, charArray0.length);
      
      String string5 = StringUtils.center("Y:01xHL!L1^amX2Vu", 122, "5tk");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5Y:01xHL!L1^amX2Vu5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5tk5t", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "5tk", (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string5));
      assertEquals("5tk", charSequence0);
      assertNotNull(charSequence0);
      
      charSequenceArray0[2] = (CharSequence) "5tk";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      String string6 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string6);
      
      charSequenceArray0[6] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String string0 = StringUtils.getDigits("{dEU*7n\"W:u&BRNf");
      assertEquals("7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("'@;&x2", "'@;&x2");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripEnd("'@;&x2", "'@;&x2");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("'@;&x2");
      assertFalse(boolean0);
      
      String string1 = StringUtils.overlay("$WjZo%F#", (String) null, 3240, 54);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$WjZo%F#", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "$WjZo%F#", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.overlay("@StdIo define", "yt`!>Il!f/I", 56, (-32768));
      assertEquals("yt`!>Il!f/I", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "vuzr9]3|=";
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[5] = object2;
      objectArray0[6] = object0;
      String string0 = StringUtils.join(objectArray0, '-');
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another0.0}-187.41091492}1167.474}0.0", 15, 15);
      assertNull(string1);
      
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', (int) 'D', 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", (String) null);
      assertEquals("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^", ';');
      assertFalse(string2.equals((Object)string1));
      assertEquals(";r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^;", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "r~7 2X+#%2k*<5+F^r~7 2X+#%2k*<5+F^";
      charSequenceArray0[2] = (CharSequence) null;
      String[] stringArray0 = StringUtils.split("QQ{^^]<pS", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.strip((String) null, (String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "QQ{^^]<pS");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringAfter((String) null, 408);
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("offset cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("offset cannot be negative", (String) null, 3397, (-1610612734));
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("w", stringArray0);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("offset cannot be negative", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "offset cannot be negative", (CharSequence[]) stringArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.removeEnd("X6.xei W;{;.", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X6.xei W;{;.", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 19, 'Y');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.truncate((String) null, 2328);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'C';
      charArray0[2] = 'Y';
      charArray0[3] = '+';
      charArray0[4] = 'V';
      charArray0[5] = 'W';
      charArray0[6] = 'Y';
      charArray0[7] = 'd';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'d', 'C', 'Y', '+', 'V', 'W', 'Y', 'd'}, charArray0);
      assertEquals(8, charArray0.length);
      
      String string5 = StringUtils.center("Y:01xHL!L1^amX2Vu", 4, "5tk");
      assertFalse(string5.equals((Object)string2));
      assertEquals("Y:01xHL!L1^amX2Vu", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)109;
      String string0 = StringUtils.join(byteArray0, 'y');
      assertEquals("0y-107y109", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-107), (byte)109}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "0y-107y109";
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat('u', 3364);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("0,Q/]>d4OH7C'7", (String) null, 16, 911);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0,Q/]>d4OH7C'7", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", 'y');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringAfterLast(" ", "0y-107y109");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0,Q/]>d4OH7C'7", (CharSequence) " ");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "k0E", (CharSequence) "k0E");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(15, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.stripStart("Locale must not be null", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", 'm');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.replaceFirst("Locale must not be null", "u4gWi8`", "X7&");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("]Knn4p", "", (-3845));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int0 = StringUtils.countMatches((CharSequence) "]Knn4p", '<');
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.left("", (-3845));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("]Knn4p");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[2] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[3] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[4] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[5] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[6] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[8] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      
      int int1 = StringUtils.compareIgnoreCase("p{InCombiningDiacriticalMarks}+", "org.junitpioneer.jupiter.DisableIfTestFailsExtension", true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string0 = StringUtils.join((float[]) null, 'B');
      assertNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = '9';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = '9';
      charArray0[7] = 'B';
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[3], charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'B', 'B', '9', 'B', 'B', 'B', '9', 'B'}, charArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substring("Minimum abbreviation width with offset is %d", (-4823), (-4823));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", 708);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.upperCase((String) null);
      assertNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.leftPad("9Nj~x6", 3125, "Y:01xHL!L1^");
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter((String) null, "9Nj~x6");
      assertNull(string4);
      
      String string5 = StringUtils.stripAccents("");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize("jH!GM,cen29YQ");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("JH!GM,cen29YQ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.prependIfMissing((String) null, "JH!GM,cen29YQ", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string7);
      
      int int2 = StringUtils.compareIgnoreCase((String) null, "CartesianProductTest can only take exactly one type of arguments source.");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '{';
      longArray0[1] = (long) '{';
      longArray0[2] = (long) (-1);
      longArray0[3] = 1L;
      longArray0[4] = (long) '{';
      longArray0[5] = (long) (-1);
      String string8 = StringUtils.join(longArray0, '?');
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("123?123?-1?1?123?-1", string8);
      assertArrayEquals(new long[] {123L, 123L, (-1L), 1L, 123L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.getIfBlank((String) null, (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Stream<Object> stream0 = stack0.stream();
      assertNotNull(stream0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Spliterator<Object> spliterator0 = stack0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add((Object) "");
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      
      boolean boolean1 = stack0.remove((Object) stream0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(stack0.contains(""));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Y');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains('Y'));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.center("", (int) 'Y', 'Y');
      assertFalse(string1.equals((Object)string0));
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3513;
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'Y';
      intArray0[3] = 3513;
      intArray0[4] = (int) 'Y';
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = 'E';
      charArray0[2] = 'S';
      charArray0[3] = 'Z';
      charArray0[4] = 'S';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'Z', 'E', 'S', 'Z', 'S'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-25);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'Y', (int) (byte)2, (int) (byte)35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "<7e^iMi*y\"%+s;J", 10, 2343);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Expected exception %s was not thrown.");
      assertEquals("Expectedexception%swasnotthrown.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Expected exception %s was not thrown.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "Expected exception %s was not thrown.", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("UIYz+i.wWKvH ,", "");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("", "hFD]y!Gl4cumP2yx", "6-o={<t`TMm");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "hFD]y!Gl4cumP2yx", 3);
      assertFalse(boolean0);
      
      String string6 = StringUtils.lowerCase("");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string7 = StringUtils.join((Object[]) charSequenceArray0, 'C');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("CCC", string7);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string7);
      
      charSequenceArray0[3] = (CharSequence) "CCC";
      String string8 = StringUtils.prependIfMissingIgnoreCase("6-o={<t`TMm", "hFD]y!Gl4cumP2yx", charSequenceArray0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertEquals("6-o={<t`TMm", string8);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string8);
      
      String string9 = StringUtils.strip((String) null, "K@Kk@l9\"");
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.substringBefore("X", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String string0 = StringUtils.substring("0yv]eMX&;>Uv>sK", (-1099));
      assertEquals("0yv]eMX&;>Uv>sK", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("0yv]eMX&;>Uv>sK");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0yv]eMX&;>Uv>sK", "0yv]eMX&;>Uv>sK");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, '');
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Ir1", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = StringUtils.stripEnd("K", "K");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("K", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("K", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      String string0 = StringUtils.chomp("6b@jgi2:0Y,^'ode@");
      assertEquals("6b@jgi2:0Y,^'ode@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeFirst("Threshold must not be negative", "6b@jgi2:0Y,^'ode@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("org.apache.commons.lang3.StringUtils", 3204, 'r');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("?");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("?", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("", "6b@jgi2:0Y,^'ode@", "org.apache.commons.lang3.StringUtils", 3204);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("...", 3481);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("...", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[3] = (CharSequence) "?";
      String string7 = StringUtils.remove("6b@jgi2:0Y,^'ode@", 'x');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("6b@jgi2:0Y,^'ode@", string7);
      assertNotNull(string7);
      
      charSequenceArray0[4] = (CharSequence) "6b@jgi2:0Y,^'ode@";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ";
      int int0 = StringUtils.lastIndexOfAny("...", charSequenceArray0);
      assertEquals(3, int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Execution of '%s' took [%d] ms.", charSequenceArray0[3], 3204);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("zrY9AV@ziPWkk=nx", (String) null, "", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9AV@ziPWkk=nx", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      String string2 = StringUtils.join(intArray0, 'X');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1X1X1X1X1X1", string2);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.center("", 1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Threshold must not be negative", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("DISABLED_KEY", " ", (CharSequence[]) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" DISABLED_KEY", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '[';
      charArray0[2] = 'h';
      String string1 = StringUtils.chop("FM%");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FM", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("FM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("k3z\"EB", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String string0 = "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.substringAfter("Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", 5242);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "", 5242);
      assertEquals(108, int0);
      
      String string2 = "DISABLED_KEY";
      long[] longArray0 = new long[0];
      char char0 = 'd';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'd', 255, 5242);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      String string0 = StringUtils.unwrap("w`_O3r)", '$');
      assertEquals("w`_O3r)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = StringUtils.unwrap("tWD=EC'|GP", '\u0000');
      assertEquals("tWD=EC'|GP", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Strings must not be null", 'r');
      assertEquals("ings must not be nullrSt", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.unwrap("e loop is the input of another", 'r');
      assertFalse(string1.equals((Object)string0));
      assertEquals("e loop is the input of another", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "e loop is the input of another";
      charSequenceArray0[1] = (CharSequence) "Strings must not be null";
      charSequenceArray0[2] = (CharSequence) "Strings must not be null";
      charSequenceArray0[3] = (CharSequence) "ings must not be nullrSt";
      charSequenceArray0[4] = (CharSequence) "Strings must not be null";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.leftPad("e loop is the input of another", 35, 'r');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("rrrrre loop is the input of another", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e loop is the input of another";
      stringArray0[1] = "ings must not be nullrSt";
      stringArray0[2] = "e loop is the input of another";
      stringArray0[3] = "ings must not be nullrSt";
      stringArray0[4] = "rrrrre loop is the input of another";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("e loop is the input of another", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Supplied value must be a valid byte literal between -128 and 127: [f", 48, 48);
      assertEquals("...a valid byte literal between -128 and 127: [f", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("...a valid byte literal between -128 and 127: [f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 67);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("vuzr9]3|=");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("maxWit+ cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("maxWit+ cannot be negative", 3397, '*');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("maxWit+ cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate(string1, 3397, 67);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...****************************************************************", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("vuzr9]3|=");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("vuzr9]3|=", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.junitpioneer.jupiter.params.IntRange", 15, 15);
      assertEquals("...r.jupiter...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(" ", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "0.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      String string3 = StringUtils.right("(", 4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("(", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isBlank("0.0");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.join((char[]) null, '+');
      assertNull(string4);
      
      boolean boolean3 = StringUtils.equalsAny("(", stringArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      char[] charArray0 = new char[19];
      String string0 = StringUtils.join(charArray0, '\u0000');
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(19, charArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("', has a length less than 2", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{6]3#c~ufBAljJ,{;", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "%s %s.", 8);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("", "%(ybI%tk*Y0F3KM&wd=");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("{6]3#c~ufBAljJ,{;", stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split(" has no clone method");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("m", " has no clone method");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.replace("Minimum abbreviation width is %d", "%(ybI%tk*Y0F3KM&wd=", " vs ", (-1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToEmpty("m)");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("m)", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'F';
      charArray0[2] = '#';
      charArray0[3] = 'Y';
      charArray0[4] = '>';
      charArray0[5] = 'Q';
      String string6 = StringUtils.join(charArray0, 'Y');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("VYFY#YYY>YQ", string6);
      assertArrayEquals(new char[] {'V', 'F', '#', 'Y', '>', 'Q'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "FO^2h_aw`6=F7kz", (CharSequence) "4", 603);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "J", 3, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) '}';
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.right("Minimum abbreviation width is %d", 70);
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Minimum abbreviation width is %d", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.rightPad("k~", 151, "0S:n8");
      assertFalse(string2.equals((Object)string1));
      assertEquals("k~0S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n80S:n", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "0.0}1167.474}0.0}0.0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 70;
      floatArray0[1] = (float) '}';
      String string4 = StringUtils.join(floatArray0, '');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("70.0125.0", string4);
      assertArrayEquals(new float[] {70.0F, 125.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEndIgnoreCase((String) null, "Minimum abbreviation width is %d");
      assertNull(string5);
      
      String string6 = StringUtils.repeat('', 70);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "0.0}1167.474}0.0}0.0", 10);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.strip("p{InCombiningDiacriticalMarks}+");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("p{InCombiningDiacriticalMarks}+", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 10, 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", (-1), 160);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertEquals("p{InCombiningDiacriticalMarks}+", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      String string0 = StringUtils.chomp("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("i<Do:*p4p4yD+z1%<8|", (-3168));
      assertFalse(string1.equals((Object)string0));
      assertEquals("i<Do:*p4p4yD+z1%<8|", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(15, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.compareIgnoreCase("K|&K<\"!2w@Kty.", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase("Y:01xHL!L1^amX2Vuorg.apache.commons.lang3.StringUtils");
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(23, stringArray3.length);
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 56);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-58);
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\uFFFD\uFFFD", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-51), (byte) (-58)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string1);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\u0000\uFFFD\uFFFD";
      stringArray0[1] = "\u0000\uFFFD\uFFFD";
      stringArray0[2] = "|AWRyg.k@t";
      stringArray0[3] = "vuzr9]3|=";
      stringArray0[4] = "\u0000\uFFFD\uFFFD";
      stringArray0[5] = "vuzr9]3|=";
      stringArray0[6] = "empty";
      stringArray0[7] = "vuzr9]3|=";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "vuzr9]3|=");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.normalizeSpace("\u0000\uFFFD\uFFFD");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\uFFFD\uFFFD", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("...", "a");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "...");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("...", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "...");
      assertTrue(boolean0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("...", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("..", "..");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("{:", (String) null);
      assertEquals("{:", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("{:"));
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      boolean boolean0 = stack0.add((Object) locale_Category0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[DISPLAY]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains("{:"));
      
      String string1 = StringUtils.join((List<?>) stack0, 'Z', (int) 'Z', (int) 'Z');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[DISPLAY]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains("{:"));
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      String[] stringArray0 = new String[5];
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("org.junitpioneer.jupiter.CartesianProductTestExtension", "~}}qmJ5;^w>qZ!S");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.CartesianProductTestExtension", "Invalid exceptionStatus");
      assertEquals(0, int0);
      
      String string3 = StringUtils.reverse("Y&*0m`P");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("P`m0*&Y", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Y&*0m`", (CharSequence[]) stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, stringArray0.length);
      
      String string4 = StringUtils.repeat(' ', 563);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEqualsstring4);
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("Y&*0m`", "P`m0*&Y", 0, 0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("P`m0*&YY&*0m`", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = StringUtils.center("wG&lok!DVpXP!?#N", (int) (short)1, "wG&lok!DVpXP!?#N");
      assertEquals("wG&lok!DVpXP!?#N", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("wG&lok!DVpXP!?#N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Strings must not be null", 'r');
      assertEquals("ings must not be nullrSt", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ings must not be nullrSt", "Strings must not be null", 25);
      assertEquals(25, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Strings must not be null", "ings must not be nullrSt");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "ings must not be nullrSt");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("zrY9V@ziPWkk=nx", ")", 122, 122);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("zrY9V@ziPWkk=nx", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("{6]3#c~ufBAljJ,{;", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("zrY9AV@ziPWkk=nx", ")");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ")", (CharSequence) ")");
      assertEquals(0, int0);
      
      String string3 = StringUtils.repeat('m', 57);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      objectArray0[1] = (Object) "Y&*0m`";
      objectArray0[2] = (Object) "Y&*0m`";
      objectArray0[3] = (Object) "Y&*0m`P";
      String string1 = StringUtils.stripToNull("Y:01xHL!L1^amX2Vu");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y:01xHL!L1^amX2Vu", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "ame.";
      charSequenceArray0[1] = (CharSequence) "Y&*0m`";
      charSequenceArray0[2] = (CharSequence) "Y:01xHL!L1^amX2Vu";
      charSequenceArray0[3] = (CharSequence) "Y:01xHL!L1^amX2Vu";
      charSequenceArray0[4] = (CharSequence) "Y:01xHL!L1^amX2Vu";
      charSequenceArray0[5] = (CharSequence) "Y:01xHL!L1^amX2Vu";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat((String) null, (-278));
      assertNull(string2);
      
      StringWriter stringWriter0 = new StringWriter(3);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      boolean boolean1 = StringUtils.contains((CharSequence) stringBuffer0, charSequenceArray0[3]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string3 = StringUtils.lowerCase("\n", locale0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      assertNotNull(string3);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("b)?$^_H10rp|A`/W0ub)?$^_H10rp|A`/W0u", (-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot get the toString of a null object ");
      assertEquals("Cannot get the toString of a null object", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", (String) null, 3224);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("e5a\"v%rBOa)ec&");
      assertFalse(boolean0);
      
      String string0 = StringUtils.joinWith("org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      String string1 = StringUtils.join(iterator0, "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string1));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.StringUtils", 127);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 2400, 11);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("%");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.rightPad("Strings must not be null", (-1), '-');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Strings must not be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("org.apache.commons.lang3.StringUtils", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.compare(" ", "");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("(", 'Y');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceFirst("r~7 2X+#%2k*<5+F^", "Comparator should not be null.", "(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("r~7 2X+#%2k*<5+F^", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Could not find parameter named %s in test %s", "(");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.countMatches((CharSequence) "Could not find parameter named %s in test %s", 'r');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", ',');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny(" vs ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripEnd("6LM]TP\"A%.>e_QK", " vs ");
      assertEquals("6LM]TP\"A%.>e_QK", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" vs ", "~B#2r^rB=l7@y9uZ|/C", 21);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(" vs ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("45T!.?`ZSGe", '|');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.replaceFirst((String) null, "6LM]TP\"A%.>e_QK", "<<oq08af|g'");
      assertNull(string1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("...", "ArsBC>x}x3", 21);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '|');
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "ArsBC>x}x3";
      charSequenceArray0[3] = (CharSequence) "<<oq08af|g'";
      String string2 = StringUtils.abbreviate("O4CTjkO>lc%=mT1", 21);
      assertFalse(string2.equals((Object)string0));
      assertEquals("O4CTjkO>lc%=mT1", string2);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "O4CTjkO>lc%=mT1";
      charSequenceArray0[5] = (CharSequence) "~B#2r^rB=l7@y9uZ|/C";
      String string3 = StringUtils.prependIfMissing("&TgFyT<$7pe-GzMEvl:", "6LM]TP\"A%.>e_QK", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("6LM]TP\"A%.>e_QK&TgFyT<$7pe-GzMEvl:", string3);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object4));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object4));
      assertNotNull(object8);
      
      objectArray0[8] = object8;
      String string0 = StringUtils.join(objectArray0, 'u', 100, 100);
      assertEquals("", string0);
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("45T!.?`ZSGe", 'u');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("7|}K[3J-VCl4IdbKJ", '|');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.replaceFirst(" ", (String) null, "u4gWi8`");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("]Knn4p", "null/empty items", 100);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.countMatches((CharSequence) "45T!.?`ZSGe", '<');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(15, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.stripStart("Locale must not be null", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("Locale must not be null");
      assertFalse(int1 == int0);
      assertEquals(23, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = new byte[0];
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string3);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "*n7D,hFtC50CW");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "@3 ;u", 56);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "offset cannot be negative";
      stringArray0[1] = "VhX&t;prNyYGB.v+";
      stringArray0[2] = "org.junitpioneer.vintage.TimeoutExtension";
      int int0 = StringUtils.indexOf((CharSequence) "offset cannot be negative", (CharSequence) "VhX&t;prNyYGB.v+", 1);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.substringAfter("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("VhX&t;prNyYGB.v+", "VhX&t;prNyYGB.v+", (int) (byte) (-58));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (-2464));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.stripToNull("S:9tz]");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("S:9tz]", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("VhX&t;prNyYGB.v+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.indexOf((CharSequence) "offset cannot be negative", (int) (byte) (-58), (-1));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Expected exception %s was not thrown.");
      assertEquals("Expectedexception%swasnotthrown.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Expected exception %s was not thrown.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("Expected exception %s was not thrown.", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Expected exception %s was not thrown.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("UIYz+i.wWKvH ,", "Expected exception %s was not thrown.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("UIYz+i.wWKvH ,", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("", "hFD]y!Gl4cumP2yx", "6-o={<t`TMm");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "hFD]y!Gl4cumP2yx", 3);
      assertFalse(boolean0);
      
      String string6 = StringUtils.lowerCase("");
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.split(";8j?5.DlS5UEl<=#9Yh");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "k0E", "");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '%', (-3065), 1448);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3065
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)109;
      String string0 = StringUtils.join(byteArray0, 'y');
      assertEquals("-89y-107y109", string0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-107), (byte)109}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "-89y-107y109";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("-89y-107y109", "k~");
      assertTrue(string1.equals((Object)string0));
      assertEquals("-89y-107y109", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "-89y-107y109";
      charSequenceArray1[1] = (CharSequence) "-89y-107y109";
      String string2 = StringUtils.remove("-89y-107y109", "-89y-107y109");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray1[2] = (CharSequence) "";
      charSequenceArray1[3] = (CharSequence) "-89y-107y109";
      String string3 = StringUtils.replaceIgnoreCase("ame.", "ame.", "Arguments cannot both be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Arguments cannot both be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("-89y-107y109", 'l', 'y');
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("-89y-107y109", string4);
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'l', (int) (byte)109, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 56);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("vuzr9]3|=");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("vuzr9]3|=", "vuzr9]3|=");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      String string0 = StringUtils.truncate(",/r9", 400);
      assertEquals(",/r9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(",/r9", ",/r9");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '+';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ",/r9", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'d', '+'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 106);
      assertEquals("upiter.cartesian.CartesianFactoryArgumentsProvider", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      String string0 = StringUtils.remove("6-o={<t`TMm", "6-o={<t`TMm");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("Y:01xHL!L1^amX2Vu", "6-o={<t`TMm");
      assertFalse(string1.equals((Object)string0));
      assertEquals("6-o={<t`TMmY:01xHL!L1^amX2Vu6-o={<t`TMm", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 5, "0.0}1167.474}0.0}0.0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0.0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("y';", (-399), 5);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("y';", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "0.0.0", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '[';
      charArray0[2] = 'h';
      charArray0[3] = 'k';
      charArray0[4] = 'Z';
      charArray0[5] = 'S';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "FM%", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'?', '[', 'h', 'k', 'Z', 'S'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" vs ", "7#A[(u7K%T'/>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", 2, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.replace("KTSxq0>A[", "}oV@9T", "KTSxq0>A[", 10);
      assertEquals("KTSxq0>A[", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("KTSxq0>A[");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 81.6;
      doubleArray0[1] = 81.6;
      doubleArray0[2] = (double) 56;
      String string1 = StringUtils.join(doubleArray0, 'X');
      assertFalse(string1.equals((Object)string0));
      assertEquals("81.6X81.6X56.0", string1);
      assertArrayEquals(new double[] {81.6, 81.6, 56.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("org.junitpioneer.jupiter.params.ShortRange", "{[0-9]+}");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {[0-9]+}
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.removeAll("/3", "/3");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[2] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[5] = (CharSequence) "";
      String string1 = StringUtils.stripToNull("ame.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ame.", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "ame.";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.stripAccents("ame.");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("ame.", string2);
      assertNotNull(string2);
      
      String string3 = " ";
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) " ";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      String string4 = StringUtils.substringBetween("ame.", "HWct2XkR4T7oU");
      assertNull(string4);
      
      charSequenceArray1[3] = (CharSequence) null;
      charSequenceArray1[4] = (CharSequence) "ame.";
      charSequenceArray1[5] = (CharSequence) "ame.";
      String string5 = StringUtils.prependIfMissing(" ", " ", charSequenceArray1);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(" ", string5);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
      assertNotNull(string5);
      
      int int1 = StringUtils.compareIgnoreCase("ame.", "ame.");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      String string6 = StringUtils.join(longArray0, 'R');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("1R0R0", string6);
      assertArrayEquals(new long[] {1L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray1[2], (CharSequence) "1R0R0", (-2128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.stripStart("'W^2KcvMxog+8)3iy", (String) null);
      assertEquals("'W^2KcvMxog+8)3iy", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("'W^2KcvMxog+8)3iy");
      assertTrue(string1.equals((Object)string0));
      assertEquals("'W^2KcvMxog+8)3iy", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("Strings must not be null", stringArray0[0], "'W^2KcvMxog+8)3iy");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("", "Strings must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceChars("'W^2KcvMxog+8)3iy", "8w'd&scwNC", "'W^2KcvMxog+8)3iy");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("^W^2KvvMxog+')3iy", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split("CartesianTest can not have an empty display name.,/r9", "", (-415));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "%s %s.", ";bTe'oOQDnZD");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase("zrY9AV@ziPWkk=nx", (String) null, "zrY9AV@ziPWkk=nx", 1);
      assertEquals("zrY9AV@ziPWkk=nx", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'X';
      intArray0[1] = 1;
      intArray0[2] = (int) 'X';
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1225;
      String string1 = StringUtils.join(intArray0, 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals("88L1L88L1L1L1225", string1);
      assertArrayEquals(new int[] {88, 1, 88, 1, 1, 1225}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("org.junitpioneer.jupiter.RetryingTestExtension");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.RetryingTestExtension", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("vuzr9]3|=", (-3107));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("vuzr9]3|=", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("N", "qO)sQ@.R `{g-9$f:x");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "org.junitpioneer.jupiter.RetryingTestExtension");
      assertNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase("#er", "XFpeT3P29");
      assertEquals((-85), int0);
      
      String string4 = StringUtils.defaultString(",g&rKv?^");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(",g&rKv?^", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("...");
      assertEquals("...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("', has a length less than 2", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{6]3#c~ufBAljJ,{;", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "%s %s.", 8);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("", "%(ybI%tk*Y0F3KM&wd=");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("{6]3#c~ufBAljJ,{;", stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split(" has no clone method");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("m", " has no clone method");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.capitalize("\"SgR3m^");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\"SgR3m^", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("Minimum abbreviation width is %d", "%(ybI%tk*Y0F3KM&wd=", " vs ", (-1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Minimum abbreviation width is %d", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripToEmpty("m)");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("m)", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}-187.41091492}1167.474}0.0", string0);
      assertArrayEquals(new double[] {0.0, (-187.41091492), 1167.474, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) '}';
      intArray0[2] = (int) '}';
      intArray0[3] = (int) 'X';
      intArray0[4] = 0;
      String string1 = StringUtils.join(intArray0, 'J');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0J125J125J88J0", string1);
      assertArrayEquals(new int[] {0, 125, 125, 88, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("0Ma:=Wn4O9", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0Ma:=Wn4O9", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "0J125J125J88J0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("0J125J125J88J0", "DISABLED_KEY");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase("Parameter has to be annotated with ", (String) null);
      assertEquals(1, int0);
      
      String string4 = StringUtils.defaultString((String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBefore("T5Gj@_o-", (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("T5Gj@_o-", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 108, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("xF>/", 108, (String) null);
      assertEquals("xF>/                                                                                                        ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("eVn`h+]<0yHU30s", (String) null, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 13, "");
      assertEquals("             ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("             ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rotate("Zj]$5MX-", (-803));
      assertEquals("$5MX-Zj]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = StringUtils.repeat('i', (-1431));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Stream<Object> stream0 = stack0.stream();
      assertNotNull(stream0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Spliterator<Object> spliterator0 = stack0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Object) "");
      assertTrue(boolean0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      
      boolean boolean1 = stack0.remove((Object) stream0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(stack0.contains(""));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Y');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains('Y'));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("KQQal|", (String) null, "", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("KQQal|", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'Y';
      intArray0[3] = 1;
      intArray0[4] = (int) 'Y';
      String string2 = StringUtils.join(intArray0, 'Y');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1Y89Y89Y1Y89", string2);
      assertArrayEquals(new int[] {1, 89, 89, 1, 89}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("KQQal|");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("KQQal|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("", (-142));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "");
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.compareIgnoreCase("WSe<", "k9D-?/YLIZ7$U8");
      assertEquals(12, int0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isBlank("WSe<");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.repeat('-', Integer.MIN_VALUE);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")w";
      stringArray0[1] = ")w";
      stringArray0[0] = ")w";
      String string0 = StringUtils.replaceEach(")w", stringArray0, stringArray0);
      assertEquals(")w", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart(")w", ")w");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("e:qYIwc%A\"s*q)?_[yp");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("E:qYIwc%A\"s*q)?_[yp", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("e:qYIwc%A\"s*q)?_[yp", "s7!", "GMT");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("e:qYIwc%A\"s*q)?_[yp", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceChars(stringArray0[2], ")w", "Node ");
      assertEquals(3, stringArray0.length);
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.split("L#mM=;9$ 8_:(-K", "px`;", (-415));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.removeStartIgnoreCase("e:qYIwc%A\"s*q)?_[yp", "px`;");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("e:qYIwc%A\"s*q)?_[yp", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("L1^amX2Vu", 1652);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "ww";
      String string0 = StringUtils.replaceEach("ww", stringArray0, stringArray0);
      assertEquals("ww", string0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart(stringArray0[0], stringArray0[0]);
      assertEquals(6, stringArray0.length);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "org.junitpioneer.jupiter.IssueExtension");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.substring("=_4hly<^U\u0007%5\u0001xk", 56);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "xiST9\"72H_Vx";
      stringArray0[1] = "";
      stringArray0[2] = "Classpath resource [";
      stringArray0[3] = "L!L1^amX2Vu";
      String[] stringArray1 = linkedList0.toArray(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("L!L1^amX2Vu"));
      
      boolean boolean0 = linkedList0.add("$^Q7&sMT");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      assertFalse(linkedList0.contains("L!L1^amX2Vu"));
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      assertFalse(linkedList0.contains("L!L1^amX2Vu"));
      assertFalse(list0.contains("L!L1^amX2Vu"));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      assertFalse(linkedList0.contains("L!L1^amX2Vu"));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Z');
      assertEquals("$^Q7&sMT", string0);
      assertNotNull(string0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains(string0));
      assertFalse(linkedList0.contains("L!L1^amX2Vu"));
      
      String string1 = linkedList0.set(0, "$^Q7&sMT");
      assertEquals("$^Q7&sMT", string1);
      assertNotNull(string1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string1));
      assertFalse(linkedList0.contains("L!L1^amX2Vu"));
      
      String[] stringArray2 = new String[1];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "$^Q7&sMT";
      String[] stringArray3 = StringUtils.stripAll(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray2.length);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "$^Q7&sMT", (CharSequence) "$^Q7&sMT");
      assertEquals(0, int0);
      
      boolean boolean1 = linkedList0.add("$^Q7&sMT");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      assertFalse(linkedList0.contains("xiST9\"72H_Vx"));
      
      String string2 = StringUtils.toRootUpperCase("$^Q7&sMT");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$^Q7&SMT", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("$^Q7&sMT", 759);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("$^Q7&sMT", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfAny("$^Q7&sMT", stringArray3);
      assertTrue(int1 == int0);
      assertFalse(stringArray2.equals((Object)stringArray3));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(0, int1);
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray2.length);
      assertEquals(1, stringArray3.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "$^Q7&SMT", (CharSequence) "$^Q7&sMT", 0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string4 = StringUtils.strip("Threshold must not be negative");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      
      String string5 = StringUtils.lowerCase("/zFzGb(", locale0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("/zfzgb(", string5);
      assertNotNull(string5);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      
      boolean boolean2 = StringUtils.isNotBlank("/zfzgb(");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Search and Replace array lengths don't match: ";
      String string0 = StringUtils.join(objectArray0, "e loop is the input of another", 3295, (-2000));
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) ":e7j`Gt/XgI'${";
      charSequenceArray0[1] = (CharSequence) ":e7j`Gt/XgI'${";
      charSequenceArray0[3] = (CharSequence) ":e7j`Gt/XgI'${";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.repeat("(", (-2000));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.isBlank(charSequenceArray0[5]);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      String string2 = StringUtils.join(charArray0, '\u0000');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("4\u0000\u0000", string2);
      assertArrayEquals(new char[] {'4', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("Search and Replace array lengths don't match: ", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y&*0m`";
      stringArray0[1] = " vs ";
      String string1 = StringUtils.abbreviateMiddle("%o{N1(%hZ~urHy", "iVZMv ls", 8);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%o{N1(%hZ~urHy", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("i5yhyJG: Lze8USFOr:", "%o{N1(%hZ~urHy");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("i5yhyJG: Lze8USFOr:", string2);
      assertNotNull(string2);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(8));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(8));
      
      String string3 = StringUtils.join((List<?>) linkedList0, "Y&*0m`", 0, (-224));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("", " vs ", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" vs ", string4);
      assertEquals(5, stringArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.endsWithAny("]", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String string0 = "09";
      String string1 = "_?fNkS;0^t)c^H\\*Ww";
      String string2 = StringUtils.substringBefore("09", "_?fNkS;0^t)c^H*Ww");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("09", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "09", (CharSequence) "_?fNkS;0^t)c^H*Ww", (-731));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Strings mut ndt b1 nulr", (CharSequence) "Strings mut ndt b1 nulr", (-305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("0.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "0.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-51);
      String string3 = StringUtils.leftPad("0.0", 37, "Object varargs must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Object varargs must not be nullObj0.0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.trimToEmpty("<R;Y!2cs8");
      assertEquals("<R;Y!2cs8", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "<R;Y!2cs8";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-708.6696172);
      doubleArray0[1] = (-1629.00406111921);
      doubleArray0[2] = 1857.0;
      String string1 = StringUtils.join(doubleArray0, '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-708.6696172}-1629.00406111921}1857.0", string1);
      assertArrayEquals(new double[] {(-708.6696172), (-1629.00406111921), 1857.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e5a\"v%rBOa)ec&", "<R;Y!2cs8", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("-708.6696172}-1629.00406111921}1857.0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.joinWith("<R;Y!2cs8", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("e5a\"v%rBOa)ec&", string2);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "e5a\"v%rBOa)ec&", (CharSequence) "e5a\"v%rBOa)ec&");
      assertEquals(0, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("-708.6696172}-1629.00406111921}1857.0"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("-708.6696172}-1629.00406111921}1857.0"));
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("-708.6696172}-1629.00406111921}1857.0"));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 2039);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("<R;Y!2cs8", (-3153), 626);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", 580);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "&", "&");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-650.0F);
      String string0 = StringUtils.join(floatArray0, '%');
      assertEquals("-650.0", string0);
      assertArrayEquals(new float[] {(-650.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("-650.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "-650.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("-650.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripStart("", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-51);
      String string2 = StringUtils.leftPad("-650.0", 37, "Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Object varargs must not be null-650.0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.valueOf((char[]) null);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.replaceChars("", "Supplied value must be a valid byte literal between -32768 and 32767: [", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String string0 = StringUtils.replaceChars("yF={", 'D', 'D');
      assertEquals("yF={", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "yF={", (CharSequence) "yF={", (-1720));
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("yF={");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("yF={", 'D');
      assertFalse(string1.equals((Object)string0));
      assertEquals("DyF={D", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "DyF={D";
      charSequenceArray0[1] = (CharSequence) "DyF={D";
      charSequenceArray0[2] = (CharSequence) "DyF={D";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = "'+m~TtC}.71+F)u+\\u*";
      String string3 = StringUtils.abbreviateMiddle("yF={", string2, 54);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("yF={", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("yF={", "yF={", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("'+m~", string4);
      assertNotNull(string4);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string5 = StringUtils.join((List<?>) arrayList0, string2, 0, (-1720));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("'+m~", "'+m~", charSequenceArray0);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("'+m~", string6);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissing("#", "", charSequenceArray0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("#", string7);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string7);
      
      String string8 = StringUtils.uncapitalize("");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("[(X<9d-5YAcl[k,4^l");
      assertEquals("[(x<9d-5yacl[k,4^l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("[(x<9d-5yacl[k,4^l", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(x<9d-5yacl[k,4^l", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("[(X<9d-5YAcl[k,4^l", "[(x<9d-5yacl[k,4^l", 1);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "[(X<9d-5YAcl[k,4^l", (CharSequence) "[(x<9d-5yacl[k,4^l");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("[(X<9d-5YAcl[k,4^l"));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'c';
      charArray0[2] = ';';
      charArray0[3] = 'h';
      charArray0[4] = '$';
      charArray0[5] = 'h';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"c;h$h", string2);
      assertArrayEquals(new char[] {'\"', 'c', ';', 'h', '$', 'h'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("\"c;h$h");
      assertArrayEquals(new int[] {34, 99, 59, 104, 36, 104}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("hFD]y!Gl4cumP2yx", (String) null, "6-o={<t`TMm");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("hFD]y!Gl4cumP2yx", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\"c;h$h", (-1));
      assertFalse(boolean0);
      
      String string4 = StringUtils.truncate("[(x<9d-5yacl[k,4^l", 108, 52);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("6-o={<t`TMm");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.swapCase("Display name '%s' %s");
      assertEquals("dISPLAY NAME '%S' %S", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("dISPLAY NAME '%S' %S", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("dISPLAY NAME '%S' %S", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 108, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("xF>/", 108, "Threshold must not be negative");
      assertEquals("xF>/Threshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("hc:|xSuWEY5Lnr", 108);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap(string2, "=v ~ZKsD<jm&");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "xF>/Threshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must";
      stringArray0[1] = "w{A <zC8%n)dk";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("xF>/Threshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must", string4);
      assertEquals(2, stringArray0.length);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "xF>/", 2);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("Threshold must not be negative");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(10, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String string0 = ",vsK";
      String string1 = StringUtils.replaceChars(",vsK", '&', '&');
      assertTrue(string1.equals((Object)string0));
      assertEquals(",vsK", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWithAny(",vsK", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = "~B#2r^rB=l7@y9uZ|/C";
      int int0 = 21;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(",vsK", "~B#2r^rB=l7@y9uZ|/C", 21);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(",vsK");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = "Yy:}7H{ysrG:{%`n;uJ";
      try { 
        StringUtils.getBytes(",vsK", "Yy:}7H{ysrG:{%`n;uJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, 'Y', 'K');
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("0#RkgzI.,ke9*~AsNI", "Exactly one type of input must be provided in the @");
      assertFalse(string2.equals((Object)string0));
      assertEquals("0#RkgzI.,ke9*~AsNI", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = "<R;Y!2cs8";
      char char0 = 'g';
      String string1 = StringUtils.replaceChars((String) null, '&', 'g');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("[ NzH+{[ NzH+{", "VT9#IqD~Erl5)");
      assertFalse(string2.equals((Object)string0));
      assertEquals("[ NzH+{[ NzH+{", string2);
      assertNotNull(string2);
      
      String string3 = "~B#2r^rB=l7@y9uZ|/C";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<R;Y!2cs8", "~B#2r^rB=l7@y9uZ|/C", 8192);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertNotNull(charBuffer0);
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(21, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(charBuffer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(21, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      
      try { 
        StringUtils.getBytes("Yy:}7H{ysrG:{%`n;uJ", "[ NzH+{[ NzH+{");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("p_&jE", "p_|j$", locale0);
      assertEquals(4, int0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[1] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}1167.474}0.0}0.0", string0);
      assertArrayEquals(new double[] {0.0, 1167.474, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0.0}1167.474}0.0}0.0", (CharSequence) "0.0}1167.474}0.0}0.0", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("_/FE&Q:R@-4 U?u8'B", "0.0}1167.474}0.0}0.0", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("_/FE&Q:R@-4 U?u8'B");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "0.0}1167.474}0.0}0.0", (CharSequence) "0.0}1167.474}0.0}0.0");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      int int2 = StringUtils.getFuzzyDistance("\r", "0.0}1167.474}0.0}0.0", locale0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      String[] stringArray1 = StringUtils.substringsBetween("Duplicate enum constant name(s) found in ", "Duplicate enum constant name(s) found in ", "");
      assertNull(stringArray1);
      
      String string1 = StringUtils.remove("?9.bkQ;(('aJ", "-e");
      assertFalse(string1.equals((Object)string0));
      assertEquals("?9.bkQ;(('aJ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("-e", "0.0}1167.474}0.0}0.0");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0}1167.474}0.0}0.0", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "?9.bkQ;(('aJ", (CharSequence) "?9.bkQ;(('aJ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad("Threshold must not be negative", 2684, "e$~2vm");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("&I4JS0FFi=@\"", supplier0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("&I4JS0FFi=@\"", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "?9.bkQ;(('aJ", "0.0}1167.474}0.0}0.0");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.join((List<?>) null, "Could not provide arguments because of exception.", 0, 1922);
      assertNull(string5);
      
      String string6 = StringUtils.joinWith("0.0}1167.474}0.0}0.0", stringArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("_/FE&Q:R@-4 U?u8'B", string6);
      assertEquals(1, stringArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull(" ");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) " ";
      String string2 = StringUtils.wrap(" ", "^;8iO");
      assertFalse(string2.equals((Object)string0));
      assertEquals("^;8iO ^;8iO", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = "^;8iO";
      stringArray0[2] = "^;8iO ^;8iO";
      stringArray0[3] = " ";
      stringArray0[4] = null;
      stringArray0[5] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[6] = null;
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("^;8iO", string3);
      assertEquals(7, stringArray0.length);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, string1, (-2935));
      assertNull(stringArray1);
      
      String string4 = StringUtils.unwrap("}", string1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("}", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfAny("^;8iO", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.split("0d;Sy4L");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.unwrap("]", (String) null);
      assertEquals("]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Strings must not be null");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("_ 5Kc&cqm)&%Zi`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("_ 5Kc&cqm)&%Zi`", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "_ 5Kc&cqm)&%Zi`", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      String string2 = StringUtils.strip("");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.overlay((String) null, "wwww", 2, 2);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "_ 5Kc&cqm)&%Zi`", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 1);
      assertEquals("earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("{index}", "z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{index}", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("{$E<gdgw}/7~rZd%y:#", supplier0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{$E<gdgw}/7~rZd%y:#", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("{index}", 1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('m', 128);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay((String) null, "{$E<gdgw}/7~rZd%y:#", 1, 64);
      assertNull(string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ')', (-2017), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2017
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.trimToEmpty("<R;Y!2cs8");
      assertEquals("<R;Y!2cs8", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-708.6696172);
      doubleArray0[1] = (-1629.00406111921);
      doubleArray0[2] = 1857.0;
      String string1 = StringUtils.join(doubleArray0, '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-708.6696172}-1629.00406111921}1857.0", string1);
      assertArrayEquals(new double[] {(-708.6696172), (-1629.00406111921), 1857.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-708.6696172}-1629.00406111921}1857.0", "<R;Y!2cs8");
      assertEquals(3, int0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      charSequenceArray1[1] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      String string2 = StringUtils.reverse("<R;Y!2cs8");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8sc2!Y;R<", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "<R;Y!2cs8", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '}';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'U', 96, 1733);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 96
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) 'I';
      String string0 = StringUtils.substringAfter("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`. ", 73);
      assertEquals("o defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`. ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("p{InCombiningDiacriticalMarks}+V", "\"<-Fc*0");
      assertNull(string1);
      
      String string2 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+V", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+V", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      int int0 = 3224;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", (String) null, 3224);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("e5a\"v%rBOa)ec&");
      assertFalse(boolean0);
      
      String string0 = StringUtils.joinWith("org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      
      String string1 = StringUtils.join(iterator0, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.StringUtils", 127);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = 2400;
      int int3 = 11;
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Cannot clear and set the following entries at the same time: ", 3905);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("iGy(@v+6>.#p");
      assertEquals("iGy(@v+6>.#p", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("T)A", "L'2)w3q7t8q[hpBGk", false);
      assertEquals(8, int0);
      
      String string1 = StringUtils.truncate((String) null, 0, 110);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter("L'2)w3q7t8q[hpBGk", 110);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string3 = StringUtils.join(shortArray0, 'y');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0", string3);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("iGy(@v+6>.#p");
      assertFalse(boolean0);
      
      String string4 = StringUtils.normalizeSpace("/i) Xf~BovU4");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/i) Xf~BovU4", string4);
      assertNotNull(string4);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'y';
      floatArray0[2] = (float) 'y';
      floatArray0[3] = (-1595.9147F);
      floatArray0[4] = (float) 110;
      floatArray0[5] = (float) 110;
      String string5 = StringUtils.join(floatArray0, 'D');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("0.0D121.0D121.0D-1595.9147D110.0D110.0", string5);
      assertArrayEquals(new float[] {0.0F, 121.0F, 121.0F, (-1595.9147F), 110.0F, 110.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "/i) Xf~BovU4", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("StdIoExtension is active but no %s annotation was found.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NH&MsJ:3<", '}');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("NH&MsJ:3<", " ", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " ";
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast(" ", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.remove(":b1>CwAHQyLl`B]olS>", '\"');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(":b1>CwAHQyLl`B]olS>", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(set0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(" "));
      
      String string4 = StringUtils.wrap((String) null, ";gG'L{}lX");
      assertNull(string4);
      
      int int1 = StringUtils.compare("Object varargs must not be null", "Classpath resource [");
      assertFalse(int1 == int0);
      assertEquals(12, int1);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      String string2 = StringUtils.wrap((String) null, "^;8iO");
      assertNull(string2);
      
      String[] stringArray0 = new String[24];
      charSequenceArray0[1] = (CharSequence) null;
      stringArray0[1] = "^;8iO";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[6] = "^;8iO";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("^;8iO", string3);
      assertEquals(24, stringArray0.length);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "^;8iO", (-2935));
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("l[&^z");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(5, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[5], charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.remove((String) null, 'i');
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("m`ul%2S$WW_|re,\"H ", 1436, 'i');
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase((String) null, ">", "^;8iO", (-3334));
      assertNull(string6);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) string0;
      charSequenceArray1[1] = (CharSequence) null;
      charSequenceArray1[2] = (CharSequence) "^;8iO";
      charSequenceArray1[3] = (CharSequence) null;
      charSequenceArray1[4] = (CharSequence) "^;8iO";
      charSequenceArray1[5] = (CharSequence) "^;8iO";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = StringUtils.rotate("", 35);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 35;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '3', (-337), 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -337
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 1);
      assertEquals("earch and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("{index}", "z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{index}", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("{$E<gdgw}/7~rZd%y:#", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{$E<gdgw}/7~rZd%y:#", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("{index}", 1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("{", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'm';
      String string4 = StringUtils.join(longArray0, 'U', 1733, 128);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertArrayEquals(new long[] {109L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("/E@I 0vMwV^T");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("/E@I 0vMwV^T", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'u', 1957, 2367);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1957
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'N');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, '6');
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "7v}0F67e'RXCt4";
      charSequenceArray0[2] = (CharSequence) "7v}0F67e'RXCt4";
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      String string0 = StringUtils.prependIfMissingIgnoreCase("7v}0F67e'RXCt4", "7v}0F67e'RXCt4", charSequenceArray0);
      assertEquals("7v}0F67e'RXCt4", string0);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isMixedCase("7v}0F67e'RXCt4");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("7v}0F67e'RXCt4"));
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      boolean boolean2 = arrayList0.add((Object) charSequenceArray0[4]);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains("7v}0F67e'RXCt4"));
      
      String string1 = StringUtils.join((List<?>) arrayList0, "7v}0F67e'RXCt4", 24, 24);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains("7v}0F67e'RXCt4"));
      
      String string2 = StringUtils.join((Iterator<?>) null, 'i');
      assertNull(string2);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("Aborting to protect against StackOverflowError - output of one loop is the input of anotherY:01xHL!L1^amX2Vu");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string3 = StringUtils.join((List<?>) arrayList0, "", Integer.MAX_VALUE, 24);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains("7v}0F67e'RXCt4"));
      
      String string4 = StringUtils.join(byteArray0, 'i');
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) ":BFPT";
      charSequenceArray0[1] = (CharSequence) ":BFPT";
      charSequenceArray0[2] = (CharSequence) ":BFPT";
      charSequenceArray0[3] = (CharSequence) ":BFPT";
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("Ak?yv<%,8!:^e#[");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ak?yv<%,8!:^e#[", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("9U7TK", "'W^2KcvMxog+8)3iy", "CartesianTest can not have an empty display name.,/r9");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9U7TK", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceChars("9U7TK", "...", "hHHoJm2F}L<Nw4G/F");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("9U7TK", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split("9U7TK", "Ak?yv<%,8!:^e#[", 16);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("vuzr9]3=", "vuzr9]3=", "vuzr9]3=");
      assertEquals("vuzr9]3=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("vuzr9]3=", "vuzr9]3=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat((String) null, ":QY", 8192);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y&*0m`";
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'm';
      charArray0[2] = 'B';
      charArray0[3] = '5';
      charArray0[4] = 'K';
      charArray0[5] = '%';
      String string1 = StringUtils.join(charArray0, 'H', 1299, 1299);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new char[] {'^', 'm', 'B', '5', 'K', '%'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.remove("\"LStY+_/2d;,A", '9');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\"LStY+_/2d;,A", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("jz}jmwJLZnb.zR", 'K');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("jz}jmwJLZnb.zR", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("Y&*0m`");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("y&*0M`", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(" vs ", '%', '^');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" vs ", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "jz}jmwJLZnb.zR", 3, 1299);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.repeat((String) null, "\"LStY+_/2d;,A", 3);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.join(objectArray0, '-');
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEndIgnoreCase(" ", "-java.lang.Object@4b5ed7f-----");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("<7e^iMi*y\"%+s;J", 'T');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("T<7e^iMi*y\"%+s;JT", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("f", "f", (-1793));
      assertEquals("f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("OdW+0WAdzr|@");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 284);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 284;
      floatArray0[1] = (float) (-1);
      String string1 = StringUtils.join((Object[]) stringArray0, '^');
      assertFalse(string1.equals((Object)string0));
      assertEquals("^", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("(z>}Vw3r9Z*");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(z>}Vw3r9Z*", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("S:9tz]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.leftPad("QqCIGXX", 284);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("                                                                                                                                                                                                                                                                                     QqCIGXX", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("EP2RN<Y=,", 676, "^");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEqualsstring4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Z3p1#CwrkJ]\"Acv,#c#", (String) null);
      assertEquals("Z3p1#CwrkJ]\"Acv,#c#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.stripEnd(")jp7:", ")jp7:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(")jp7:", ")jp7:");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ")jp7:", (CharSequence) ")jp7:", 93);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviateMiddle((String) null, "t not be null", 2051);
      assertNull(string1);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "t not be null";
      charSequenceArray0[3] = (CharSequence) ")jp7:";
      charSequenceArray0[4] = (CharSequence) "t not be null";
      charSequenceArray0[5] = (CharSequence) "t not be null";
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.join(stringArray0);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isEmpty(charSequenceArray0[6]);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("t not be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.replaceChars("t not be null", (String) null, "t not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("t not be null", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 93;
      longArray0[1] = (long) 93;
      longArray0[2] = (long) 2051;
      String string4 = StringUtils.join(longArray0, 'N');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("93N93N2051", string4);
      assertArrayEquals(new long[] {93L, 93L, 2051L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-650.0F);
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-650.0", string1);
      assertArrayEquals(new float[] {(-650.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("-650.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "-650.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("-650.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "-650.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      String string3 = StringUtils.substringAfter("", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("", "-650.0", 0);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeIgnoreCase("(*", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("(*", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (-859));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.stripToNull("S:9tz]");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("S:9tz]", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("-650.0");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "\r";
      int int0 = StringUtils.compare("\r", "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("o&C>L[Y");
      assertEquals("o&c>l[y", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("[(X<9d-5YAcl[k,4^l");
      assertEquals("[(x<9d-5yacl[k,4^l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("[(x<9d-5yacl[k,4^l", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(x<9d-5yacl[k,4^l", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("[(X<9d-5YAcl[k,4^l", "[(x<9d-5yacl[k,4^l", 1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrap("", " ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.compare("::K<vXGs[pi", "[(X<9d-5YAcl[k,4^l");
      assertFalse(int1 == int0);
      assertEquals((-33), int1);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("$>N\"%+MIoD}c");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("$>N\"%+MIoD}c", "$>N\"%+MIoD}c");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("$>N\"%+MIoD}c");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.wrap("j*)}o6", 'i');
      assertEquals("ij*)}o6i", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.isAlpha("ij*)}o6i");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Array and element cannot both be null");
      assertEquals("Array and element cannot both be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Array and element cannot both be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("St,ings us5 noK be Qull");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("present");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("\r", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2058.19615549282);
      String string0 = StringUtils.stripEnd("...", "Execution of '%s' took [%d] ms.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Execution of '%s' took [%d] ms.", 3481);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Execution of '%s' took [%d] ms.", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.lastIndexOfAny("...", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "}oV@9T", 3481);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" vs ", '&', '&');
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny(" vs ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("6LM]TP\"A%.>e_QK", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("6LM]TP\"A%.>e_QK", string1);
      assertNotNull(string1);
      
      String string2 = "~B#2r^rB=l7@y9uZ|/C";
      int int0 = 21;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" vs ", "~B#2r^rB=l7@y9uZ|/C", 21);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(" vs ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = "Yy:}7H{ysrG:{%`n;uJ";
      try { 
        StringUtils.getBytes(" vs ", "Yy:}7H{ysrG:{%`n;uJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("zrY9V@ziPWkk=nx", ")", 122, 122);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("{6]3#c~ufBAljJ,{;", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("zrY9AV@ziPWkk=nx", ")");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.startsWithAny(")", stringArray0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "zrY9AV@ziPWkk=nx";
      objectArray0[1] = object0;
      objectArray0[3] = (Object) "org.apache.commons.lang3.StringUtils";
      String string0 = StringUtils.join(objectArray0, '3');
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate("zrY9AV@ziPWkk=nx3java.lang.Object@1ec1094433org.apache.commons.lang3.StringUtils3", (String) null, 122, 122);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("9Nj~x6");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("9Nj~x6", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) null, '3', 5, 902);
      assertNull(string3);
      
      String string4 = StringUtils.removeEnd("org.apache.commons.lang3.StringUtils", "9Nj~x6");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.compare("*^8dKz", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      int int0 = StringUtils.compare("Method( `", (String) null, true);
      assertEquals(1, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}-187.41091492}1167.474}0.0", string0);
      assertArrayEquals(new double[] {0.0, (-187.41091492), 1167.474, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0", 0);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("Qq,NSU0mtN* ", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Qq,NSU0mtN* ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("Qq,NSU0mtN* ", (-1863));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1733;
      longArray0[1] = (long) 'U';
      String string3 = StringUtils.join(longArray0, 'U', 128, 17);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertArrayEquals(new long[] {1733L, 85L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("\n", (-1533));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("Vek]vt");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vek]vt", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left((String) null, (-1771));
      assertNull(string2);
      
      String string3 = StringUtils.join((float[]) null, ':', 8192, (-2780));
      assertNull(string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = string2;
      stringArray0[7] = "Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ";
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((float[]) null, 'M', (-3419), (-3419));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.";
      String string1 = StringUtils.removeFirst("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 3204, 'r');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.replace(string2, (String) null, "EGrDCh.#", 3204);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string4, (char[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = null;
      String string5 = StringUtils.prependIfMissingIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2, (CharSequence[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int0 = StringUtils.countMatches((CharSequence) string5, (CharSequence) string5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(1, int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string4));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "vuzr9]3|=", (CharSequence) "l");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("Y&*0m`P", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("fNAFlGO\"GsZu2rW5XX");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("Y&*0m`");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.stripStart("TO", "Locale must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("TO", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "fNAFlGO\"GsZu2rW5XX", (CharSequence) "fNAFlGO\"GsZu2rW5XX", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("Locale must not be null");
      assertFalse(int1 == int0);
      assertEquals(23, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "h?VosgNX&LSR=%[");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Y&*0m`P", (CharSequence) "Y&*0m`");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, int2);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      String string0 = StringUtils.difference("\n", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String string0 = StringUtils.difference("Locale must not be null", "Locale must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      String string1 = StringUtils.difference((String) null, "?,p");
      assertFalse(string1.equals((Object)string0));
      assertEquals("?,p", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("?", "?,p", 26);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("?", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String string0 = StringUtils.trimToNull("U~*J:danv3n{4^;L/ ");
      assertEquals("U~*J:danv3n{4^;L/", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "U~*J:danv3n{4^;L/", (CharSequence) "U~*J:danv3n{4^;L/ ");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[1] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}1167.474}0.0}0.0", string0);
      assertArrayEquals(new double[] {0.0, 1167.474, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0.0}1167.474}0.0}0.0", (CharSequence) "0.0}1167.474}0.0}0.0", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("_/FE&Q:R@-4 U?u8'B", "0.0}1167.474}0.0}0.0", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("_/FE&Q:R@-4 U?u8'B");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "0.0}1167.474}0.0}0.0", (CharSequence) "0.0}1167.474}0.0}0.0");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray1 = StringUtils.substringsBetween("Duplicate enum constant name(s) found in ", "Duplicate enum constant name(s) found in ", "");
      assertNull(stringArray1);
      
      String string1 = StringUtils.remove("?9.bkQ;(('aJ", "-e");
      assertFalse(string1.equals((Object)string0));
      assertEquals("?9.bkQ;(('aJ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("-e", "0.0}1167.474}0.0}0.0");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0}1167.474}0.0}0.0", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "?9.bkQ;(('aJ", (CharSequence) "?9.bkQ;(('aJ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad("Threshold must not be negative", 2684, "e$~2vm");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("&I4JS0FFi=@\"", supplier0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("&I4JS0FFi=@\"", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "?9.bkQ;(('aJ", "0.0}1167.474}0.0}0.0");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.join((List<?>) null, "Could not provide arguments because of exception.", 0, 1922);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("", "ExceptionWasThrown", (CharSequence[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ExceptionWasThrown", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'D', 5326, 4258);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("oro281", "Duplicate enum constant name(s) found in ", 5326);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Duplicate enum constant name(s) found in ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Duplicate enum constant name(s) found in ", "bSQ2jJV(:+2FG");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.overlay((String) null, (String) null, (-1), (-1));
      assertNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string2 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals("", string2);
      assertEquals(3, objectArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string3);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(locale0));
      
      ArrayDeque<Locale> arrayDeque1 = arrayDeque0.clone();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque0.contains(locale0));
      assertFalse(arrayDeque1.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) arrayDeque1, locale_FilteringMode0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(list0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains(locale0));
      assertFalse(arrayDeque1.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      
      String string4 = StringUtils.lowerCase("Invalid exceptionStatus", locale0);
      assertFalse(string4.equals((Object)string2));
      assertEquals("invalid exceptionstatus", string4);
      assertSame(locale0, locale1);
      assertNotNull(string4);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      String string5 = StringUtils.defaultString((String) null);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Invalid exceptionStatus");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("vuzr9]3|=", "vuzr9]3|=", "vuzr9]3|=");
      assertEquals("vuzr9]3|=|=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((long[]) null, '1');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("vuzr9]3|=|=");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "vuzr9]3|=";
      charSequenceArray0[1] = (CharSequence) "vuzr9]3|=|=";
      charSequenceArray0[2] = (CharSequence) "vuzr9]3|=";
      charSequenceArray0[3] = (CharSequence) "vuzr9]3|=";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "vuzr9]3|=", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[1], charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'1', '1', '1', '1', '1', '1', '1', '1'}, charArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(8, charArray0.length);
      
      String string2 = StringUtils.abbreviate((String) null, (String) null, 156, 1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String string0 = StringUtils.capitalize("vuzr9]3|=p{InCombiningDiacriticalMarks}+");
      assertEquals("Vuzr9]3|=p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("vuzr9]3|=p{InCombiningDiacriticalMarks}+", "Vuzr9]3|=p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is %d", "R*k/7oe;)*K", charSequenceArray0);
      assertEquals("Minimum abbreviation width is %d", string0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (long) '+';
      String string0 = StringUtils.join(longArray0, '+');
      assertEquals("0+43+0", string0);
      assertArrayEquals(new long[] {0L, 43L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Execution of '%s' took [%d] ms.");
      assertEquals("Execution of '%s' took [%d] ms.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("f.|RV'W");
      assertEquals("f.|RV'W", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst("No arguments sources were found for @CartesianTest", "f.|RV'W", "No arguments sources were found for @CartesianTest");
      assertFalse(string1.equals((Object)string0));
      assertEquals("No arguments sources were No arguments sources were found for @CartesianTestund for @CartesianTest", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "No arguments sources were No arguments sources were found for @CartesianTestund for @CartesianTest";
      objectArray0[1] = (Object) "No arguments sources were No arguments sources were found for @CartesianTestund for @CartesianTest";
      objectArray0[2] = object0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "No arguments sources were found for @CartesianTest";
      stringArray0[1] = "No arguments sources were No arguments sources were found for @CartesianTestund for @CartesianTest";
      stringArray0[2] = "}'p`";
      stringArray0[4] = "No arguments sources were No arguments sources were found for @CartesianTestund for @CartesianTest";
      stringArray0[6] = "f.|RV'W";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("No arguments sources were found for @CartesianTest", string2);
      assertEquals(7, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("No arguments sources were found for @CartesianTest");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NO ARGUMENTS SOURCES WERE FOUND FOR @CARTESIANTEST", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "No arguments sources were found for @CartesianTest", (CharSequence) "No arguments sources were No arguments sources were found for @CartesianTestund for @CartesianTest");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.leftPad("No arguments sources were found for @CartesianTest", 12, "org.apache.commons.lang3.StringUtils");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("No arguments sources were found for @CartesianTest", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string5 = StringUtils.substringAfter("2IPbg3", "No arguments sources were found for @CartesianTest");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "f.|RV'W";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[3] = (CharSequence) "No arguments sources were found for @CartesianTest";
      charSequenceArray0[4] = (CharSequence) "f.|RV'W";
      charSequenceArray0[5] = (CharSequence) "f.|RV'W";
      charSequenceArray0[6] = (CharSequence) "NO ARGUMENTS SOURCES WERE FOUND FOR @CARTESIANTEST";
      String string6 = StringUtils.stripAccents("No arguments sources were No arguments sources were found for @CartesianTestund for @CartesianTest");
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("No arguments sources were No arguments sources were found for @CartesianTestund for @CartesianTest", string6);
      assertNotNull(string6);
      
      charSequenceArray0[7] = (CharSequence) "No arguments sources were No arguments sources were found for @CartesianTestund for @CartesianTest";
      charSequenceArray0[8] = (CharSequence) "f.|RV'W";
      String string7 = StringUtils.prependIfMissing("L1^amX2Vu", "f.|RV'W", charSequenceArray0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("L1^amX2Vu", string7);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string7);
      
      int int1 = StringUtils.compareIgnoreCase("L1^amX2Vu", "a-q-q437p");
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 12;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      String string8 = StringUtils.join(longArray0, '?');
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals("-1?12?-1?-1?-1", string8);
      assertArrayEquals(new long[] {(-1L), 12L, (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Object varargs must not be null", "Object varargs must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("Y&*0m`P", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("Y&*0m`P", "Y&*0m`", "fNAFlGO\"GsZu2rW5XX");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("Y&*0m`");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("Ew8VW-mq;+B*|D}3", "fNAFlGO\"GsZu2rW5XX");
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(2, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int0 = StringUtils.compareIgnoreCase("@DefaultLocale can only be used with language tag if language, country, and variant are not setorg.apache.commons.lang3.Charsets", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-33), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Y&*0m`P");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isBlank("Ew8VW-mq;+B*|D}3");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray4 = StringUtils.splitByCharacterTypeCamelCase("fNAFlGO\"GsZu2rW5XX");
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray2);
      assertEquals(12, stringArray4.length);
      assertNotNull(stringArray4);
      
      String string1 = StringUtils.remove((String) null, 'f');
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "3e/c!{@kaM");
      assertFalse(string2.equals((Object)string0));
      assertEquals("3e/c!{@kaMAborting to protect against StackOverflowError - output of one loop is the input of another3e/c!{@kaM", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-2160);
      shortArray0[2] = (short)1777;
      shortArray0[3] = (short)1378;
      String string1 = StringUtils.join(shortArray0, '}', 128, (int) (short)0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new short[] {(short)0, (short) (-2160), (short)1777, (short)1378}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}-187.41091492}1167.474}0.0", string0);
      assertArrayEquals(new double[] {0.0, (-187.41091492), 1167.474, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(":BFPT", "0.0}-187.41091492}1167.474}0.0", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace(":BFPT");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("0.0}-187.41091492}1167.474}0.0"));
      
      boolean boolean1 = stack0.add("6");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[6]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains("0.0}-187.41091492}1167.474}0.0"));
      assertTrue(stack0.contains("6"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[6]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains("0.0}-187.41091492}1167.474}0.0"));
      assertTrue(stack0.contains("6"));
      
      String string1 = StringUtils.join(iterator0, "0.0}-187.41091492}1167.474}0.0");
      assertFalse(string1.equals((Object)string0));
      assertEquals("6", string1);
      assertNotNull(string1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[6]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains("0.0}-187.41091492}1167.474}0.0"));
      assertTrue(stack0.contains("6"));
      
      String string2 = StringUtils.rightPad("", 1, 'P');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("P", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) ":BFPT");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'b');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(":BFPT", string3);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "a", (CharSequence) "a");
      assertEquals(0, int0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, "a");
      assertEquals("FORMAT", string0);
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      boolean boolean0 = linkedList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "DISABLED_KEY");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      String string0 = StringUtils.swapCase("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("@dEFAULTlOCALE NOT CONFIGURED CORRECTLY. wHEN NOT USING A LANGUAGE TAG, SPECIFY EITHERLANGUAGE, OR LANGUAGE AND COUNTRY, OR LANGUAGE AND COUNTRY AND VARIANT.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.left((String) null, 8192);
      assertNull(string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 8192;
      floatArray0[2] = (float) 8192;
      floatArray0[3] = (float) 8192;
      floatArray0[4] = (float) 8192;
      String string3 = StringUtils.join(floatArray0, ':', 8192, (-2418));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertArrayEquals(new float[] {8192.0F, 8192.0F, 8192.0F, 8192.0F, 8192.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(7, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", (CharSequence) null, (-2418));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "\r");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) null, 11);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("=_4hly<^U\u0007%5\u0001xk", "=_4hly<^U\u0007%5\u0001xk", 2);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.uncapitalize("=_4hly<^U\u0007%5\u0001xk");
      assertEquals("=_4hly<^U\u0007%5\u0001xk", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.repeat("vuzr9]3|=", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, "qP");
      assertNull(string1);
      
      String[] stringArray0 = new String[14];
      stringArray0[0] = "qP";
      stringArray0[1] = null;
      stringArray0[2] = "uzcg>(>A+ZpWde ,#";
      stringArray0[3] = "";
      stringArray0[4] = "ve]";
      stringArray0[5] = "vuzr9]3|=";
      stringArray0[6] = "qP";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("qP", string2);
      assertEquals(14, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "=w", (-1017));
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("Ojx#");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(3, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Ojx#", "ve]", (-3491));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWith("qP", "ve]");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      // Undeclared exception!
      try { 
        Charset.forName("4`{&u?E>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 4`{&u?E>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "\n");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("\n", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\n", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("vuzr9]3|=", (String) null, "", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vuzr9]3|=", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      String string2 = StringUtils.join(intArray0, 'X');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1X1X1X1X1X1", string2);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.center("", 1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("vuzr9]3|=", "zrY9AV@ziPWkk=nx");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Threshold must not be negative", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.defaultString("Threshold must not be negative");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Threshold must not be negative", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("M@MuUZdgDLOn", stringArray0, stringArray0);
      assertEquals("M@MuUZdgDLOn", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("O", string0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("O", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("O", "O");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "O";
      charSequenceArray0[1] = (CharSequence) "O";
      charSequenceArray0[2] = (CharSequence) "O";
      charSequenceArray0[3] = (CharSequence) "O";
      charSequenceArray0[4] = (CharSequence) "O";
      charSequenceArray0[5] = (CharSequence) "O";
      String string2 = StringUtils.wrap("O", "^;8iO");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("^;8iOO^;8iO", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "O";
      stringArray0[1] = "^;8iO";
      stringArray0[2] = "^;8iOO^;8iO";
      stringArray0[3] = "O";
      stringArray0[4] = "O";
      stringArray0[5] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[6] = "O";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("O", string3);
      assertEquals(7, stringArray0.length);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "O", (-2935));
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("l[&^z");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(5, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[5], charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.remove("^;8iOO^;8iO", 'i');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("^;8OO^;8O", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("m`ul%2S$WW_|re,\"H ", 1436, 'i');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("O", ">", "^;8iO", (-3334));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("O", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "O";
      charSequenceArray1[1] = (CharSequence) "O";
      charSequenceArray1[2] = (CharSequence) string5;
      charSequenceArray1[3] = (CharSequence) "O";
      charSequenceArray1[4] = (CharSequence) "^;8iO";
      charSequenceArray1[5] = (CharSequence) "O";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("', has a length less than 2", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{6]3#c~ufBAljJ,{;", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "%s %s.", 8);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("", "%s %s.");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("{6]3#c~ufBAljJ,{;", stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split(" has no clone method");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("m", " has no clone method");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.capitalize("\"SgR3m^");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\"SgR3m^", string4);
      assertNotNull(string4);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String string5 = StringUtils.join(iterator0, '%');
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String string6 = StringUtils.defaultIfEmpty("H1iBNFJc0N|mZ", "Minimum abbreviation width with offset is %d");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("H1iBNFJc0N|mZ", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("iGy(@v+6>.#p");
      assertEquals("iGy(@v+6>.#p", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "iGy(@v+6>.#p";
      charSequenceArray0[1] = (CharSequence) "iGy(@v+6>.#p";
      charSequenceArray0[2] = (CharSequence) "iGy(@v+6>.#p";
      charSequenceArray0[3] = (CharSequence) "iGy(@v+6>.#p";
      charSequenceArray0[4] = (CharSequence) "iGy(@v+6>.#p";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "T)A";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "iGy(@v+6>.#p", "kR8P{k;e");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.reverse("O");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("O", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "kR8P{k;e", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.repeat('}', 563);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("iGy(@v+6>.#p", "iGy(@v+6>.#p", 563, 16);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("iGy(@v+6>.#piGy(@v+6>.#p", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("O", string0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("O", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("O", "O");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "O";
      charSequenceArray0[1] = (CharSequence) "O";
      charSequenceArray0[3] = (CharSequence) "O";
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'O', 5, 5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("Object varargs must not be null", "it}a[BaVJHrl$");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Object varargs must not be null", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compare("", (String) null, false);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.appendIfMissing("_Tv5ACan't disable based on arguments, because method %s had no parameters.", "it}a[BaVJHrl$", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("_Tv5ACan't disable based on arguments, because method %s had no parameters.it}a[BaVJHrl$", string4);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNumeric("_Tv5ACan't disable based on arguments, because method %s had no parameters.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.center("H|EI)", (-1986), 'D');
      assertEquals("H|EI)", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("H|EI)", (-1986));
      assertFalse(string1.equals((Object)string0));
      assertEquals("|EI)H", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "H|EI)";
      charSequenceArray0[1] = (CharSequence) "|EI)H";
      String string2 = StringUtils.join((Object[]) charSequenceArray0, ":e7j`Gt/XgI'${", 54, 54);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'D');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.substringAfterLast("|EI)H", "java.lang.Object@664c9b463java.lang.Object@3164767a3r~7 2X+#%2k*<5+F^");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("' is no valid ISO-8601 string.", "p{InCombiningDiacriticalMarks}+", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("'   vd SO-8601 .", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "'   vd SO-8601 .", (CharSequence) "");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "N", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "\n", 0);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[0], "\n");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.reverse(":BFPT");
      assertFalse(string1.equals((Object)string0));
      assertEquals("TPFB:", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat('}', 4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}}}}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("...", "Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 563, 4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("...Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("g(", '}');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithAny("}E4,m&", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      String string0 = StringUtils.stripEnd("...", "Execution of '%s' took [%d] ms.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Execution of '%s' took [%d] ms.", 3481);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Execution of '%s' took [%d] ms.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("}oV@9T", 2466);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[2] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[3] = (CharSequence) "";
      String string1 = StringUtils.stripEnd("", "/");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right(" ", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("", 0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)109;
      String string0 = StringUtils.join(byteArray0, 'y');
      assertEquals("-89y-107y109", string0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-107), (byte)109}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "-89y-107y109";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", "Irx1");
      assertEquals(3, int0);
      
      String string1 = StringUtils.rotate("", (-939));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("r~7 2X+#%2k*<5+F^", "r~7 2X+#%2k*<5+F^");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("J$]eySb#H9");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("j$]EYsB#h9", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("r~7 2X+#%2k*<5+F^", "9Me<V.", "");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("r~7 2X+#%2k*<5+F^", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("Another failed with one of the specified exceptions.", '3', 'r');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Another failed with one of the specified exceptions.", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String string0 = StringUtils.center("ebhG@?xlg ]#yGzen", 59, "Z<14*O`UPZe ^vt< \\Z");
      assertEquals("Z<14*O`UPZe ^vt< \\ZZ<ebhG@?xlg ]#yGzenZ<14*O`UPZe ^vt< \\ZZ<", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("Z<14*O`UPZe ^vt< \\ZebhG@?xlg ]#yGzenZ<14*O`UPZe ^vt< \\ZZ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("ebhG@?xlg ]#yGzen", "Z<14*O`UPZe ^vt< \\Z", 59);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-650.0F);
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-650.0", string1);
      assertArrayEquals(new float[] {(-650.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("-650.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "-650.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("-650.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "-650.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-51);
      String string3 = StringUtils.leftPad("-650.0", 37, "Object varargs must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Object varargs must not be null-650.0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      String string0 = StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", 91);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("eBH(aY)", "UIYz+i.wWKvH ,");
      assertFalse(string1.equals((Object)string0));
      assertEquals("eBH(aY)", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of anotherY:01xHL!L1^amX2Vu", (Supplier<String>) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherY:01xHL!L1^amX2Vu", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("eBH(aY)", 91);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("eBH(aY)", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 91;
      longArray0[1] = (long) 91;
      longArray0[0] = (long) 128;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      String string4 = StringUtils.join(longArray0, 'm', 91, 1);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertArrayEquals(new long[] {128L, 91L, 0L, 1L, 1L}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)3;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, ',', (int) (byte)3, 798);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String string0 = "Expected exception %s was not thrown.";
      String string1 = StringUtils.deleteWhitespace("Expected exception %s was not thrown.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expectedexception%swasnotthrown.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("Expected exception %s was not thrown.", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Expected exception %s was not thrown.", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)14;
      byte byte0 = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-62);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '+', (-3078), (int) (byte)14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3078
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", "Irx1");
      assertEquals("Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("K|&K<\"!2w@Kty.P7+PO0zybc\r", (String) null);
      assertEquals("K|&K<\"!2w@Kty.P7+PO0zybc\r", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.center("org.apache.commons.lang3.ArrayUtils", 14);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", 256, 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      int int0 = 32;
      String string1 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 32, '9');
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+9", string1);
      assertNotNull(string1);
      
      String string2 = "a4}";
      String string3 = StringUtils.removePattern("org.junitpioneer.jupiter.DisabledUntilExtension", "a4}");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.DisabledUntilExtension", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      String string4 = StringUtils.join(doubleArray0, '9');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("57.0932.0932.0", string4);
      assertArrayEquals(new double[] {57.0, 32.0, 32.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string5 = "&/' veT17h<|t~";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("&/' veT17h<|t~", "Minimum abbreviation width with offset is %d", 16, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 45
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = StringUtils.splitByWholeSeparator("XVj\"D74W7',&5{", "XVj\"D74W7',&5{", 32);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(">4", '>');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny("ww", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) ":BFPT";
      charSequenceArray0[1] = (CharSequence) ":BFPT";
      charSequenceArray0[2] = (CharSequence) ":BFPT";
      charSequenceArray0[3] = (CharSequence) ":BFPT";
      charSequenceArray0[4] = (CharSequence) ":BFPT";
      charSequenceArray0[5] = (CharSequence) ":BFPT";
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      String string0 = StringUtils.join(charArray0, '}', 52, 3);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) ":BFPT";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.remove(":BFPT", '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals(":BFPT", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(":BFPT", '}');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(":BFPT", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("/W9}^O Y%Rw%eJ|Nln");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("/w9}^o y%rW%Ej|nLN", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("-89y-107y109k~", '}', '}');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("-89y-107y109k~", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "-89y-107y109k~", 23, 3);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Strings must not be null", (-1376), (-1376));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Y:01xHL!L1^", "0.0}0.0}1167.474}0.0", "0.0}0.0}1167.474}0.0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = StringUtils.substringBetween("}f", "}f");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091);
      doubleArray0[2] = 1167.474;
      String string0 = StringUtils.remove("EtCuZ(R9|X6v", '>');
      assertEquals("EtCuZ(R9|X6v", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("eS*Ez~", "eS*Ez~", 45);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("EtCuZ(R9|X6v");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("Strings must not be null", "Aborting to protect against StackOverflowError - output of one loop is the input of anotherK[>", "EtCuZ(R9|X6v", 45);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing("%=", "3d~,7#{+>+tyF", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("%=3d~,7#{+>+tyF", string2);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("org.apache.commons.lang3.StringUtils9Nj~x6", "6HkC_,I", "A,yn>qZ3b8!", (int) (short)0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils9Nj~x6", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.StringUtils9Nj~x6", (CharSequence[]) stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "EtCuZ(R9|X6v", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Qf", "Qf", "Qf");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}-187.41091492}1167.474}0.0", string0);
      assertArrayEquals(new double[] {0.0, (-187.41091492), 1167.474, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(":BFPT", "0.0}-187.41091492}1167.474}0.0", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace(":BFPT");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("0.0}-187.41091492}1167.474}0.0"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("0.0}-187.41091492}1167.474}0.0"));
      
      String string1 = StringUtils.join(iterator0, ']');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("0.0}-187.41091492}1167.474}0.0"));
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("0.0}-187.41091492}1167.474}0.0", "org.apache.commons.lang3.StringUtils", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils0.0}-187.41091492}1167.474}0.0", string2);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("^M", "Exactly one type of input must be provided in the @");
      assertNull(string3);
      
      String string4 = StringUtils.replace("0SrmA(dA", "YslBQO", "0SrmA(dA", 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("0SrmA(dA", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("Class %s not found, referenced in method %s", "wmX8", "Class %s not found, referenced in method %s", 0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Class %s not found, referenced in method %s", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.truncate("pL+;8O", 8198);
      assertEquals("pL+;8O", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeFirst("[ NzH+{", "%agUdVR");
      assertEquals("[ NzH+{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("%agUdVR", 3204, 'J');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("[ NzH+{", "[ NzH+{");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, string2, 3204);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNull(stringArray0);
      
      String string4 = StringUtils.join((Object[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.unwrap("...", "[ NzH+{");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) null, 'J', 40, 34);
      assertNull(string6);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(""));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(""));
      
      String string7 = StringUtils.join(iterator0, "+dVA");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(""));
      
      String string8 = StringUtils.rightPad("x/O!@mF?NNmEpl", 34, 'c');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("x/O!@mF?NNmEplcccccccccccccccccccc", string8);
      assertNotNull(string8);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string9 = StringUtils.join((Object[]) null, 'q');
      assertNull(string9);
      
      String string10 = StringUtils.truncate("[ NzH+{", 34);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertEquals("[ NzH+{", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[2] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[5] = (CharSequence) "";
      String string1 = StringUtils.stripToNull("ame.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ame.", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "ame.";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat("\"_DgtKU3$$8AF]\"", (-278));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      StringWriter stringWriter0 = new StringWriter(321);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[6], charSequenceArray0[6]);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String string3 = StringUtils.lowerCase("ame.", locale0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("ame.", string3);
      assertNotNull(string3);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("Uw1}gP", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2482);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      String string0 = StringUtils.wrap(" ", 'a');
      assertEquals("a a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("O", string0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("O", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("O", "O");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "O";
      charSequenceArray0[1] = (CharSequence) "O";
      charSequenceArray0[2] = (CharSequence) "O";
      charSequenceArray0[3] = (CharSequence) "O";
      charSequenceArray0[4] = (CharSequence) "O";
      charSequenceArray0[5] = (CharSequence) "O";
      String string2 = StringUtils.wrap("O", "^;8iO");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("^;8iOO^;8iO", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "O";
      stringArray0[1] = "^;8iO";
      stringArray0[2] = "^;8iOO^;8iO";
      stringArray0[3] = "O";
      stringArray0[4] = "O";
      stringArray0[5] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[6] = "O";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("O", string3);
      assertEquals(7, stringArray0.length);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "O", (-2935));
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("l[&^z");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(5, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[5], charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceEachRepeatedly("p9", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertEquals("p9", string4);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(7, stringArray0.length);
      assertNotNull(string4);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("\r", "O");
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertEquals("", string5);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(7, stringArray0.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap("^;8iOO^;8iO", 'O');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("O^;8iOO^;8iOO", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "Strings must not be null", (-1513), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1513
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string0 = StringUtils.join(objectArray0, '-');
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains('-'));
      
      boolean boolean0 = treeSet0.add("-java.lang.Object@1344d1f6-----");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("-java.lang.Object@1344d1f6-----"));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(treeSet0.contains("-java.lang.Object@1344d1f6-----"));
      
      String string1 = StringUtils.join(iterator0, '-');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(treeSet0.contains("-java.lang.Object@1344d1f6-----"));
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("<7e^iMi*y\"%+s;J", "-java.lang.Object@1344d1f6-----", (CharSequence[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-java.lang.Object@1344d1f6-----";
      stringArray0[1] = "-java.lang.Object@1344d1f6-----";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("nz1]L\"KE\"pz", "e(gx}=4", (CharSequence[]) null);
      assertEquals("e(gx}=4nz1]L\"KE\"pz", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "e(gx}=4nz1]L\"KE\"pz", "e(gx}=4nz1]L\"KE\"pz");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.prependIfMissingIgnoreCase("X", "FO^2h_aw`6=F7kz", charSequenceArray0);
      assertEquals("FO^2h_aw`6=F7kzX", string0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '8');
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String string0 = StringUtils.removePattern("%s %s.", "zrY9AV@ziPWkk=nx");
      assertEquals("%s %s.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "%s %s.", "{6]3#c~ufBAljJ,{;");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap(" has no clone method", "zrY9AV@ziPWkk=nx");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" has no clone method", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" has no clone method", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("\r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y&*0m`";
      stringArray0[1] = " vs ";
      stringArray0[2] = "%o{N1(%hZ~urHy";
      stringArray0[3] = "Y&*0m`";
      stringArray0[4] = "Y&*0m`";
      String string1 = StringUtils.replaceEach("Y&*0m`", stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y&*0m`", string1);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("'W^2KcvMxog+8)3iy", "%o{N1(%hZ~urHy");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'W^2KcvMxog+8)3iy", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("CartesianTest can not have an empty display name.,/r9");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("CartesianTest can not have an empty display name.,/r9", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("Extension context \"", "", "\"u$p$`)c0EC,>l");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Extension context \"", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Y&*0m`");
      assertFalse(boolean0);
      
      String string5 = StringUtils.replaceChars("Y&*0m`", (String) null, "lrGw{e");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Y&*0m`", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.split("Y&*0m`", ",~E`@U@PqJWkr$ ", (-415));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.trimToEmpty((String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("%o{N1(%hZ~urHy", stringArray0, stringArray0);
      assertEquals("%o{N1(%hZ~urHy", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Strings must not be null", "uVAi&D");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("YH.A0d.GU");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("YH.A0d.GU", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("cV;dCVz+EQfO");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("CV;DCVZ+EQFO", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Strings must not be null");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceChars("cV;dCVz+EQfO", "8", "8");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("cV;dCVz+EQfO", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split("6-o={<t`TMmY:01xHLL1^amX2Vu", "\"u$p$`)c0EC,>l", (-415));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.repeat("CV;DCVZ+EQFO", (-415));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.toRootLowerCase("\r");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("\r", string6);
      assertNotNull(string6);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("OdW+0WAdzr|@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InCombinDiacriticalMarks}+", (String) null, "nd8&zh*o`5i9");
      assertEquals("p{InCombinDiacriticalMarks}+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("\"_DgtKU3$$8AF]\"", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("NP^FP@z|.Z%");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replace("NP^FP@z|.Z%", "", "WgV6Ek~8 8c#_r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("NP^FP@z|.Z%", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Charset.forName("!PHR{z3f,]v~K[*Xj");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // !PHR{z3f,]v~K[*Xj
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("N");
      assertEquals("n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "vA$ I";
      String string0 = StringUtils.appendIfMissingIgnoreCase("vA$ I", "jj", charSequenceArray0);
      assertEquals("vA$ I", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String string0 = StringUtils.repeat("", 322);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 322);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[2] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[5] = (CharSequence) "";
      String string1 = StringUtils.replaceFirst("", "\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat("\"_DgtKU3$$8AF]\"", (-278));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap((String) null, "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "Timeout for vintage @Test must be positive.";
      stringArray0[2] = null;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Timeout for vintage @Test must be positive.", string4);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("L1^amX2Vu", "0.0}1167.474}0.0}0.0", (-1724));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("-4`XPr");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(5, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[6], (CharSequence) null);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.strip("Minimum abbreviation width with offset is %d", "\n");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("\n"));
      
      String string1 = StringUtils.join((List<?>) arrayList0, "Minimum abbreviation width with offset is %d", 4, 4);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("Minimum abbreviation width with offset is %d"));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "\n";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = arrayList0.add(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(object1, object0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(object0));
      assertTrue(arrayList0.contains(object1));
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "";
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[6] = object2;
      objectArray0[7] = (Object) "Minimum abbreviation width with offset is %d";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "Yn-E", (-1494), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1494
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "n&<DJKlwlI#'L&vO");
      assertNull(stringArray0);
      
      String string0 = StringUtils.strip("n&<DJKlwlI#'L&vO", (String) null);
      assertEquals("n&<DJKlwlI#'L&vO", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("n&<DJKlwlI#'L&vO", (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ", ", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceEachRepeatedly("n&<DJKlwlI#'L&vO", (String[]) null, (String[]) null);
      assertTrue(string2.equals((Object)string0));
      assertEquals("n&<DJKlwlI#'L&vO", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.equalsAny("Minimum abbreviation width is %d", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.swapCase(",&QHB");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(",&qhb", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.trimToEmpty("<R;Y!2cs8");
      assertEquals("<R;Y!2cs8", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "<R;Y!2cs8";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-708.6696172);
      doubleArray0[1] = (-1629.00406111921);
      doubleArray0[2] = 1857.0;
      String string1 = StringUtils.join(doubleArray0, '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-708.6696172}-1629.00406111921}1857.0", string1);
      assertArrayEquals(new double[] {(-708.6696172), (-1629.00406111921), 1857.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-708.6696172}-1629.00406111921}1857.0", "<R;Y!2cs8");
      assertEquals(3, int0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      charSequenceArray1[1] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      String string2 = StringUtils.reverse("<R;Y!2cs8");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8sc2!Y;R<", string2);
      assertNotNull(string2);
      
      charSequenceArray1[2] = (CharSequence) "8sc2!Y;R<";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "<R;Y!2cs8", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      
      String string3 = StringUtils.chop("-708.6696172}-1629.00406111921}1857.0");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-708.6696172}-1629.00406111921}1857.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("...", "", 0, 3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) null);
      assertNull(string5);
      
      String string6 = StringUtils.abbreviateMiddle((String) null, "-708.6696172}-1629.00406111921}1857.", 13);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Execution of '%s' took [%d] ms.");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "lXv47*";
      stringArray0[1] = "]df]t&D(";
      stringArray0[2] = "6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6b@jgi2:0Y,^'ode@6!XIoo_~QHl,}`dA(Z6!XIoo_~QHl,}`dA(Z";
      stringArray0[3] = "2IPbg3";
      stringArray0[4] = "*b,oI";
      stringArray0[5] = ".7Z15*<!t4+;";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*b,oI");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-650.0F);
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-650.0", string1);
      assertArrayEquals(new float[] {(-650.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("-650.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "-650.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("-650.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "-650.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-51);
      byteArray0[8] = (byte)32;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\uFFFD\uFFFD\uFFFD?\u0000\u0000a\uFFFD ", string3);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-1), (byte) (-58), (byte)63, (byte)0, (byte)0, (byte)97, (byte) (-51), (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string3);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "empty");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      String string0 = StringUtils.stripEnd("!", "!");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip(";<EjV3lKa:I1?");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";<EjV3lKa:I1?", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank(";<EjV3lKa:I1?", supplier0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(";<EjV3lKa:I1?", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize("0.0}-187.41091492}1167.474}0.0");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("0.0}-187.41091492}1167.474}0.0", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase(";<EjV3lKa:I1?", "$0JQY$=|8>rC", "...");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(";<EjV3lKa:I1?", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.right("*(;7d]Wc$<", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("=VNqJVXQ)J@ss,", "", 9);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("*(;7d]Wc$<");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(10, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.indexOf((CharSequence) "*(;7d]Wc$<", (CharSequence) "=VNqJVXQ)J@ss,");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(")GaoubL`#2");
      assertEquals(")GaoubL`#2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst(")GaoubL`#2", "No arguments sources were found for @CartesianTest", "}'p`");
      assertTrue(string1.equals((Object)string0));
      assertEquals(")GaoubL`#2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat(")GaoubL`#2", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap(")GaoubL`#2", "ve]");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ve])GaoubL`#2ve]", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("0.0}-187.41091492}1167.474}0.0", (String) null, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("0.0}-187.41091492}1167.474}0.0");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(16, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(" vs ", " vs ", " vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", (String) null);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", (-2932));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace("SA{4?y");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.chop("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvide", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlpha("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvide", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.joinWith("\rThe `date` %s is after the current date %s", stringArray0);
      assertEquals("\rThe `date` %s is after the current date %s", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.trimToEmpty("<R;Y!2cs8");
      assertEquals("<R;Y!2cs8", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "<R;Y!2cs8";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-708.6696172);
      doubleArray0[1] = (-1629.00406111921);
      doubleArray0[2] = 1857.0;
      String string1 = StringUtils.join(doubleArray0, '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-708.6696172}-1629.00406111921}1857.0", string1);
      assertArrayEquals(new double[] {(-708.6696172), (-1629.00406111921), 1857.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e5a\"v%rBOa)ec&", "<R;Y!2cs8", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("-708.6696172}-1629.00406111921}1857.0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.joinWith("<R;Y!2cs8", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("e5a\"v%rBOa)ec&", string2);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "e5a\"v%rBOa)ec&", (CharSequence) "e5a\"v%rBOa)ec&");
      assertEquals(0, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      String string4 = StringUtils.rightPad((String) null, 4, '5');
      assertNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "-708.6696172}-1629.00406111921}1857.0", (CharSequence) "\n");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iterator0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string5 = StringUtils.join(objectArray0, 'P');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(2, objectArray0.length);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 97);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.replace("", "}oV@9T", "", 10);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceFirst("ukipZo[$oc>pRV[~`(x", "}oV@9T", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ukipZo[$oc>pRV[~`(x", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "ukipZo[$oc>pRV[~`(x");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "ukipZo[$oc>pRV[~`(x";
      objectArray0[1] = (Object) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are";
      objectArray0[2] = (Object) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are";
      objectArray0[3] = (Object) "ukipZo[$oc>pRV[~`(x";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "}oV@9T";
      String string2 = StringUtils.joinWith("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6, objectArray0.length);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "}oV@9T", (CharSequence) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("ukipZo[$oc>pRV[~`(x"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("ukipZo[$oc>pRV[~`(x"));
      
      String string3 = StringUtils.join(iterator0, "ukipZo[$oc>pRV[~`(x");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("ukipZo[$oc>pRV[~`(x"));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.truncate("ukipZo[$oc>pRV[~`(x@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both areukipZo[$oc>pRV[~`(x@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are}oV@9T", 127, 2400);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.rightPad((String) null, 3503, '-');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("No test failed with one of the specified exceptions (yet).", '>');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}-187.41091492}1167.474}0.0", string0);
      assertArrayEquals(new double[] {0.0, (-187.41091492), 1167.474, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0", 0);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "0.0}-187.41091492}1167.474}0.0";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[0], "0.0}-187.41091492}1167.474}0.0");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.reverse(":BFPT");
      assertFalse(string1.equals((Object)string0));
      assertEquals("TPFB:", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat('}', 4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}}}}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("...", "Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 563, 4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("...Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("g(", '}');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("$^Q7&sMT");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      assertFalse(list0.contains("$^Q7&sMT"));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Z');
      assertEquals("$^Q7&sMT", string0);
      assertNotNull(string0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains(string0));
      
      boolean boolean1 = linkedList0.add("$^Q7&sMT");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      String string1 = linkedList0.set(0, "3@5BBT");
      assertEquals("$^Q7&sMT", string1);
      assertNotNull(string1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "$^Q7&sMT", (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3@5BBT";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3@5BBT", (CharSequence) "3@5BBT");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = linkedList0.add("3@5BBT");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, linkedList0.size());
      assertTrue(linkedList0.contains("3@5BBT"));
      
      String string2 = StringUtils.toRootUpperCase("3@5BBT");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.right("$^Q7&sMT", 759);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("$^Q7&sMT", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOfAny("$^Q7&sMT", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3@5BBT", (CharSequence) "3@5BBT", 0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string0 = StringUtils.remove("", '}');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 'w');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(":BFPT");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(":bfpt", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 51, 51);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("iGy(@v+6>.#p");
      assertEquals("iGy(@v+6>.#p", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("T)A", "L'2)w3q7t8q[hpBGk", false);
      assertEquals(8, int0);
      
      String string1 = StringUtils.truncate((String) null, 0, 110);
      assertNull(string1);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string3 = StringUtils.join(shortArray0, 'y');
      assertFalse(string3.equals((Object)string0));
      assertEquals("0", string3);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("iGy(@v+6>.#p");
      assertFalse(boolean0);
      
      String string4 = StringUtils.normalizeSpace("/i) Xf~BovU4");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/i) Xf~BovU4", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("O", (String) null, (short)0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("O", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("HXL", 'y');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1120.1019653207;
      String string6 = StringUtils.join(doubleArray0, '&');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("0.0&1120.1019653207", string6);
      assertArrayEquals(new double[] {0.0, 1120.1019653207}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string6);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 7;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 16;
      intArray0[3] = (int) (short)0;
      String string7 = StringUtils.join(intArray0, 'y');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("7y0y16y0", string7);
      assertArrayEquals(new int[] {7, 0, 16, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultString((String) null);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#2k*5+F^");
      assertEquals("r~7 2X+#2k*5+F^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#2k*5+F^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap(" has no clone method", "9+$q\")6");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" has no clone method", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny(" has no clone method", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.abbreviate(" has no clone method", (-1), 16);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" has no clone...", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(" has no clone method", "9+$q\")6");
      assertEquals(0.0, double0, 0.01);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(" has no clone method"));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " has no clone method", charSequenceArray0[0], Integer.MAX_VALUE);
      assertFalse(int1 == int0);
      assertEquals(19, int1);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("$^Q7&sMT");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      assertFalse(list0.contains("$^Q7&sMT"));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      String string0 = StringUtils.left("iub>)3lZ<v,0", 321);
      assertEquals("iub>)3lZ<v,0", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlpha("iub>)3lZ<v,0");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "iub>)3lZ<v,0", "org.apache.commons.lang3.StringUtils9Nj~x6");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'V';
      charArray0[2] = 'U';
      charArray0[3] = 'n';
      charArray0[4] = '5';
      charArray0[5] = '$';
      boolean boolean3 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.StringUtils9Nj~x6", charArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'m', 'V', 'U', 'n', '5', '$'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[6] = 'y';
      charArray0[1] = 'y';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'y', '\u0000', '\u0000', '\u0000', '\u0000', 'y', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      String string0 = StringUtils.defaultString("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Nz", (CharSequence) "Nz", 4697);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 56);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("vuzr9]3|=");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "vuzr9]3|=", "7#P|Hy7!1)[]'X,GZv");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'q';
      charArray0[2] = 'w';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "vuzr9]3|=", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'', 'q', 'w'}, charArray0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.toRootLowerCase("7#P|Hy7!1)[]'X,GZv");
      assertFalse(string1.equals((Object)string0));
      assertEquals("7#p|hy7!1)[]'x,gzv", string1);
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("7#p|hy7!1)[]'x,gzv");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.wrap("vuzr9]3|=", "vuzr9]3|=");
      assertEquals("vuzr9]3|=vuzr9]3|=vuzr9]3|=", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "vuzr9]3|=", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null", "Strings must not be null", 77);
      assertEquals(25, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
      assertEquals(25, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("", "#llx+P", "#llx+P");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Strings must not be null", 10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("vuzr9]3|=", (String) null, "", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vuzr9]3|=", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)18;
      shortArray0[1] = (short) (-125);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)4420;
      String string3 = StringUtils.join(shortArray0, 'K', 1857, 50);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertArrayEquals(new short[] {(short)18, (short) (-125), (short)1, (short)4420}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "vuzr9]3|=";
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.appendIfMissing("vuzr9]3|=", (CharSequence) null, charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("vuzr9]3|=", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "", 10);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "=_4hly<^U\u0007%5\u0001xk", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String string0 = StringUtils.capitalize("Y:01xHLL1^a");
      assertEquals("Y:01xHLL1^a", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Y:01xHLL1^a", (CharSequence) "Y:01xHLL1^a");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("Y:01xHLL1^a", "Y:01xHLL1^a");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y:01xHLL1^a", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("Y:01xHLL1^a");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      byte[] byteArray0 = StringUtils.getBytes("CartesianTest can not have an empty display name.", charset0);
      assertEquals(49, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = "Y[~X]|j_i";
      String string1 = StringUtils.capitalize("Y[~X]|j_i");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y[~X]|j_i", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Y[~X]|j_i", (CharSequence) "Y[~X]|j_i");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Y[~X]|j_i", (CharSequence) "Y[~X]|j_i", 11);
      assertEquals(0, int0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(11, comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Y[~X]|j_i"));
      
      boolean boolean1 = linkedList0.retainAll(priorityQueue0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Y[~X]|j_i"));
      
      Collection<Locale> collection0 = null;
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 108);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      String string1 = StringUtils.wrap("", "m`ul%2S$WW_|re,\"H ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "^;8iO";
      stringArray0[2] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[3] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[3] = "";
      stringArray0[5] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[6] = "";
      stringArray0[7] = "^;8iO";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("^;8iO", string2);
      assertEquals(8, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("maxWith cannot be negbtive");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(9, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.removeEndIgnoreCase(" ", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("m`ul%2S$WW_|re,\"H ", 'F');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Fm`ul%2S$WW_|re,\"H F", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = StringUtils.capitalize("Y:01xHLL1^a");
      assertEquals("Y:01xHLL1^a", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Y:01xHLL1^a", (CharSequence) "Y:01xHLL1^a");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("Y:01xHLL1^a", "Y:01xHLL1^a");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y:01xHLL1^a", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("Y:01xHLL1^a");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Y:01xHLL1^a", 48);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("-*qbdXh{_*", (-1506), 4405);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.join((String[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'A', 96, 96);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "present", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = "[ NzH+{";
      String string1 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeFirst("[ NzH+{", "%agUdVR");
      assertTrue(string2.equals((Object)string0));
      assertEquals("[ NzH+{", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("%agUdVR", 3204, 'J');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("[ NzH+{", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("[ NzH+{", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "[ NzH+{", (String) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, string3, 3204);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertNull(stringArray0);
      
      String string5 = StringUtils.join((Object[]) null);
      assertNull(string5);
      
      String string6 = StringUtils.unwrap("...", "[ NzH+{");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("...", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) null, 'J', 40, 34);
      assertNull(string7);
      
      int[] intArray0 = StringUtils.toCodePoints("...");
      assertArrayEquals(new int[] {46, 46, 46}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      String string8 = StringUtils.replaceOnceIgnoreCase("+dVA", "[ NzH+{", "%agUdVR");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("+dVA", string8);
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "+dVA", (-1844));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("J<ABnY$B8W[fre xmg", (-26), (-3153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Strings must not be null", "Strings must not be null", 77);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "!", 52);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '1');
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, 8192);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = " ";
      stringArray0[1] = "Comparator should not be null.";
      stringArray0[2] = "Comparator should not be null.";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = ">ojXP.of/T%wEtorg.junitpioneer.jupiter.CartesianProductTestExtension";
      stringArray0[6] = "Comparator should not be null.";
      stringArray0[7] = "Comparator should not be null.";
      String string1 = StringUtils.replaceEach("Comparator should not be null.", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Comparator should not be null.", string1);
      assertEquals(8, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Comparator should not be null.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 284);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 284;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 284;
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", " ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.remove(" ", '{');
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("hF$Jlm1", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("hF$Jlm1", string2);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", "KTSxq0>A[");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", '{');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("{Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another{", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("b)?$^_H10rp|A`/W0u", stringArray0, stringArray0);
      assertEquals("b)?$^_H10rp|A`/W0u", string0);
      assertEquals(250, stringArray0.length);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "b)?$^_H10rp|A`/W0u");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("O", string0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("O", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("O", "O");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "O";
      charSequenceArray0[1] = (CharSequence) "O";
      charSequenceArray0[2] = (CharSequence) "O";
      charSequenceArray0[3] = (CharSequence) "O";
      charSequenceArray0[5] = (CharSequence) "O";
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'O';
      charArray1[1] = '-';
      charArray1[2] = 'j';
      charArray1[3] = 'O';
      charArray1[4] = 'O';
      charArray1[5] = '-';
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[5], charArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', '-', 'j', 'O', 'O', '-'}, charArray1);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      String string1 = StringUtils.wrap("", "m`ul%2S$WW_|re,\"H ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "^;8iO";
      stringArray0[2] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[3] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[4] = "";
      stringArray0[5] = "m`ul%2S$WW_|re,\"H ";
      stringArray0[6] = "";
      stringArray0[7] = "^;8iO";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("^;8iO", string2);
      assertEquals(8, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "^;8iO", 13);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("maxWith cannot be negative");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(9, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.removeEndIgnoreCase(" ", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProvider");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProvide", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProvide", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProvide", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5341);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("", (String) null, 5341);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.getDigits("");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("0Vn6V30R0&z@");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0Vn6V30R0&z@", string3);
      assertNotNull(string3);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashSet0);
      assertNotNull(linkedList0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(linkedList0.contains(""));
      
      String string4 = StringUtils.join((Iterable<?>) linkedList0, 'D');
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(linkedList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("N");
      assertTrue(boolean0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "N", (CharSequence) "N");
      assertEquals("N", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("\r", "\r", "\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("@CartesianProductTest not found.", "@CartesianProductTest not found.");
      assertEquals("@CartesianProductTest not found.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}-187.41091492}1167.474}0.0", string0);
      assertArrayEquals(new double[] {0.0, (-187.41091492), 1167.474, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(":BFPT", "0.0}-187.41091492}1167.474}0.0", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace(":BFPT");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("0.0}-187.41091492}1167.474}0.0", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0.0}-187.41091492}1167.474}0.0", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("k>pE=9|)/}7Cb", "4'lOaM<?wmO.!8%e ");
      assertFalse(int1 == int0);
      assertEquals(55, int1);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[2] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[5] = (CharSequence) "";
      String string1 = StringUtils.stripToNull("ame.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ame.", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "ame.";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat("\"_DgtKU3$$8AF]\"", (-278));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap((String) null, "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "Timeout for vintage @Test must be positive.";
      stringArray0[2] = null;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Timeout for vintage @Test must be positive.", string4);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("L1^amX2Vu", "0.0}1167.474}0.0}0.0", (-1724));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("-4`XPr");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(5, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String string0 = StringUtils.wrap("", "<n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = StringUtils.stripEnd(">NGAA%j,l?i61hWAQX7", ">NGAA%j,l?i61hWAQX7");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-32768), (-32768));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) ":BFPT";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string0 = StringUtils.remove("", '}');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 'w');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(":BFPT");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(":bfpt", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 51, 51);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 284);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 284;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "0fA", (-1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.isWhitespace("0fA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      
      String string1 = StringUtils.join(iterator0, " ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      
      String string2 = StringUtils.rightPad("", 0, 'P');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) " ");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.removeFirst("\n", "\r");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-124);
      String string4 = StringUtils.join(byteArray0, 'Z', 0, (int) (byte) (-124));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertArrayEquals(new byte[] {(byte)72, (byte) (-124)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap((String) null, 'g');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ww";
      stringArray0[1] = "ww";
      stringArray0[2] = "ww";
      String string0 = StringUtils.replaceEach("ww", stringArray0, stringArray0);
      assertEquals("ww", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("ww", "ww");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "CartesianProductTest can not have a non-empty display name.", 0, 0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      String string0 = StringUtils.substringBetween("L:2^", "L:2^", "L:2^");
      assertNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "L:2^");
      assertNotNull(charBuffer0);
      assertEquals(4, charBuffer0.length());
      assertEquals("L:2^", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      String string0 = StringUtils.upperCase("!");
      assertEquals("!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.removeFirst("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", 3204, 'J');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "";
      String string3 = StringUtils.join(objectArray0, 'D');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("DDDDD", string3);
      assertEquals(6, objectArray0.length);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "DDDDD";
      stringArray0[2] = "DDDDD";
      stringArray0[3] = string1;
      stringArray0[4] = null;
      stringArray0[5] = string1;
      stringArray0[6] = string1;
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("DDDDD", string4);
      assertEquals(7, stringArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase(stringArray0[5]);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(7, stringArray0.length);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals((-1), int0);
      assertEquals(7, stringArray0.length);
      
      String string6 = StringUtils.leftPad(" ", 78, string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ ", string6);
      assertEquals(7, stringArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("y>{RY2(Fq`.$y>{RY2(Fq`.$", "cUs5\"2PV[ju3Y1");
      assertEquals("y>{RY2(Fq`.$y>{RY2(Fq`.$", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("y>{RY2(Fq`.$y>{RY2(Fq`.$", "y>{RY2(Fq`.$y>{RY2(Fq`.$");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("EGt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("<14*O`UPZe ^vt< \\Z", "<14*O`UPZe ^vt< \\Z", "...");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "<14*O`UPZe ^vt< \\Z", "<14*O`UPZe ^vt< \\Z");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '/', 0, 39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "$^Q7&sMT";
      boolean boolean0 = linkedList0.add("$^Q7&sMT");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string0));
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList0.contains(string0));
      assertFalse(list0.contains(string0));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains(string0));
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'Z');
      assertTrue(string1.equals((Object)string0));
      assertEquals("$^Q7&sMT", string1);
      assertNotNull(string1);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(linkedList0.contains(string0));
      
      String string2 = linkedList0.set(0, "3@5BBT");
      assertTrue(string2.equals((Object)string0));
      assertEquals("$^Q7&sMT", string2);
      assertNotNull(string2);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      assertTrue(linkedList0.contains("3@5BBT"));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "$^Q7&sMT", (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$^Q7&sMT";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "$^Q7&sMT", (CharSequence) "$^Q7&sMT");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = linkedList0.add("$^Q7&sMT");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      String string3 = StringUtils.toRootUpperCase("3@5BBT");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'd', (-1690), 2553);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1690
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("maxWit+ cannote negative");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.right("Nk# 1|lKKr)", (-77));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.join((Object[]) stringArray0, '-');
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("07N~}Search and Replace array lengths don't mtch: v");
      assertFalse(string1.equals((Object)string0));
      assertEquals("07N~}Search and Replace array lengths don't mtch: ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("07N~}Search and Replace array lengths don't mtch: v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("z(Kg4Qnms9 l;Yf^#5", "z(Kg4Qnms9 l;Yf^#5", "z(Kg4Qnms9 l;Yf^#5");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 18
         // z(Kg4Qnms9 l;Yf^#5
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", (String) null, 3224);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("e5a\"v%rBOa)ec&");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.StringUtils", 127);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("b(Omdx#$S&MqbAY8r!50Co");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.center("\r", 15, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("       \r       ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("Object varargs must not be nullit}a[BaVJHrl$", "}a)BkvSx6]}9{%rT=");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}a)BkvSx6]}9{%rT=", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) " ", (CharSequence) "\n");
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("\n", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.substringBetween("6-o={<t`TMmY:01xHL!L1^amX2Vu", " ");
      assertNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 11;
      longArray0[1] = (long) 11;
      longArray0[2] = (-1L);
      longArray0[4] = (-1L);
      longArray0[6] = (-1L);
      String string0 = StringUtils.toRootUpperCase("Qjkss^d\"d+$w~v^p)");
      assertEquals("QJKSS^D\"D+$W~V^P)", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Qjkss^d\"d+$w~v^p)", "QJKSS^D\"D+$W~V^P)");
      assertEquals(0.65, double0, 0.01);
      
      String string1 = StringUtils.wrapIfMissing("Qjkss^d\"d+$w~v^p)", "Q");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Qjkss^d\"d+$w~v^p)Q", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 32, '9');
      assertEquals("p{InCombiningDiacriticalMarks}+9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("org.junitpioneer.jupiter.DisabledUntilExtension", "a4}");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DisabledUntilExtension", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("a4}", 32);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("a4}", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("a4}", "org.junitpioneer.jupiter.DisabledUntilExtension");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = '9';
      charArray0[2] = '+';
      charArray0[3] = 'd';
      charArray0[4] = 'V';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'d', '9', '+', 'd', 'V'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string3 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 4, "vuzr9]3|=");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String string0 = StringUtils.center("]gW=~]", 10, "]gW=~]");
      assertEquals("]g]gW=~]]g", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("6-o={<t`TMm", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("6-o={<t`TMm", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("Y:01xHL!L1^amX2Vu", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherY:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertNotNull(string1);
      
      int int0 = (-399);
      String string2 = StringUtils.center("", 5, "0.0}1167.474}0.0}0.0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0.0.0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("y';", (-399), 5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("y';", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("0.0}1167.474}0.0}0.0");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("0.0}1167.474}0.0}0.", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("Aborting to protect against StackOverflowError - output of one loop is the input of anotherY:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", "6-o={<t`TMm", "^af.5<<h,5n~h{@");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // 6-o={<t`TMm
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Expected exactly one annotation to provide an ArgumentSource, found %d.", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'j';
      String string1 = StringUtils.chomp("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("%s does not implement the CartesianAnnotationConsumer<T> interface.", 1674);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ":By 0jqb}4d#";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "uQF&PY/a";
      stringArray0[6] = "%s does not implement the CartesianAnnotationConsumer<T> interface.";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(":By 0jqb}4d#", "uQF&PY/a");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.compareIgnoreCase("%s does not implement the CartesianAnnotationConsumer<T> interface.", "maxWith cannot be negative");
      assertEquals((-72), int0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("maxWit+ cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'e');
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals("DISPLAYeFORMAT", string0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotNull(string0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      boolean boolean0 = StringUtils.isWhitespace("maxWit+ cannot be negative");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("/2PfK'4~IpP1k", 256);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Nz", "Could not resolve parameter of type %s.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ';', 100, 1767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Expected exception %s was not thrown.");
      assertEquals("Expectedexception%swasnotthrown.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Expected exception %s was not thrown.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, '', Integer.MAX_VALUE, 2649);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("N,agH", Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("N,agH", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("r)jQmlX^(v_mh~6");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("r)jQmlX^(v_mh~", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replacePattern("T#\"iI/+", "N,agH", (String) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("T#\"iI/+", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '\'', 10, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String string0 = StringUtils.left("FW:Ah", 4);
      assertEquals("FW:A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "FW:A");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("TC%.(:oQn*n-");
      assertEquals(12, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null", "Strings must not be null", 77);
      assertEquals(25, stringArray0.length);
      assertNotNull(stringArray0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("Strings must not be null"));
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap(" has no clone method", "zrY9AV@ziPWkk=nx");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" has no clone method", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'U', (-1934), (-1934));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("zrY9AV@ziPWkk=nx");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      String string0 = StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", 91);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("org.junitpioneer.jupiter.CartesianProductTestExtension", 91);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("", "i<Do:*p4p4yD+z1%<8|");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'm';
      charArray0[2] = 'i';
      charArray0[3] = '-';
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Pmi-", string3);
      assertArrayEquals(new char[] {'P', 'm', 'i', '-'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("eBH(aY)");
      assertArrayEquals(new int[] {101, 66, 72, 40, 97, 89, 41}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("", "-+6)'JH", "}xGSBA%ho8IWUf");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "-+6)'JH", 91);
      assertFalse(boolean0);
      
      String string5 = StringUtils.lowerCase("^a53'*EQ3");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("^a53'*eq3", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("hFD]y!Gl4cumP2yx");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String string0 = StringUtils.substringBefore("org.apache.commons.lang3.CharSequenceUtils", (String) null);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", 331);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank(">=N;~CuPbex~", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">=N;~CuPbex~", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(">=N;~CuPbex~"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.remove("p.k", 'Q');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("p.k", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", 2, "B8>7M");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("B8", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumeric("B8");
      assertTrue(boolean0);
      
      String string5 = StringUtils.defaultString("T?");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("T?", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      short[] shortArray0 = new short[2];
      String string0 = StringUtils.join(shortArray0, '<');
      assertEquals("0<0", string0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("0<0");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0<0", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      String string0 = StringUtils.leftPad("}E4@,mc&", (-2626), 'o');
      assertEquals("}E4@,mc&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String string0 = StringUtils.leftPad("x;?E\"eYaHD/EGMv", 35);
      assertEquals("                    x;?E\"eYaHD/EGMv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Strings must not be null");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Strings must not be null", "onhnQ& z5d$,1J4}");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 108, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("xF>/", 108, "Threshold must not be negative");
      assertEquals("xF>/Threshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("eVn`h+]<0yHU30s", (String) null, false);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((float[]) null, 'B');
      assertNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', 'B', 'B'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("xF>/", "xF>/");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("xF>/");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'B', 92, (int) (short)1957);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String string0 = StringUtils.strip("o*!}REV%vY:BT NQs");
      assertEquals("o*!}REV%vY:BT NQs", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)320;
      shortArray0[1] = (short)160;
      shortArray0[2] = (short)2637;
      shortArray0[3] = (short)256;
      shortArray0[4] = (short)1777;
      shortArray0[5] = (short)2242;
      shortArray0[6] = (short)2630;
      shortArray0[7] = (short) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'C', (-229), (int) (short)2242);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -229
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "hF@CMy<YA%w2;rQh/i", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[1] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}1167.474}0.0}0.0", string0);
      assertArrayEquals(new double[] {0.0, 1167.474, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0.0}1167.474}0.0}0.0", (CharSequence) "0.0}1167.474}0.0}0.0", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(":BFPT", "0.0}1167.474}0.0}0.0", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace(":BFPT");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "0.0}1167.474}0.0}0.0", (CharSequence) "0.0}1167.474}0.0}0.0");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray1 = StringUtils.substringsBetween("Duplicate enum constant name(s) found in ", "Duplicate enum constant name(s) found in ", "");
      assertNull(stringArray1);
      
      String string1 = StringUtils.remove("?9.bkQ;(('aJ", "-e");
      assertFalse(string1.equals((Object)string0));
      assertEquals("?9.bkQ;(('aJ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right(" ", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "?9.bkQ;(('aJ", (CharSequence) "?9.bkQ;(('aJ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad("Threshold must not be negative", 2684, "e$~2vm");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("&I4JS0FFi=@\"", supplier0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("&I4JS0FFi=@\"", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "?9.bkQ;(('aJ", "");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.join((List<?>) null, "Could not provide arguments because of exception.", 0, 1922);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "&'V%nE-].,", 1572, 1572);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("iGy(@v+6>.#p");
      assertEquals("iGy(@v+6>.#p", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("T)A", "L'2)w3q7t8q[hpBGk", false);
      assertEquals(8, int0);
      
      String string1 = StringUtils.truncate((String) null, 0, 110);
      assertNull(string1);
      
      String string2 = StringUtils.left("iGy(@v+6>.#p", (-986));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "7#P|Hy7!1)[]'X,GZv", (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("T)A");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "\"CM*,/d*ZB(KVhu");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("\"CM*,/d*ZB(KVhu").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertEquals("\"CM*,/d*ZB(KVhu", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase("\"CM*,/d*ZB(KVhu");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)0;
      String string1 = StringUtils.join(byteArray0, 'J', (int) (byte)94, (int) (byte)94);
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)94, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", "", true);
      assertEquals(131, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 'J';
      String string2 = StringUtils.join(longArray0, 'P', 0, (int) (byte)0);
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      assertArrayEquals(new long[] {74L, 74L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "(Je)h?2)");
      assertNull(stringArray0);
      
      String string3 = StringUtils.remove((String) null, "");
      assertNull(string3);
      
      String string4 = StringUtils.right((String) null, (byte)94);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.rightPad("\"/JR EuwM_", (int) (byte)94, "");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals("\"/JR EuwM_                                                                                    ", string5);
      assertNotNull(string5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("\"/JR EuwM_                                                                                   ").when(supplier1).get();
      String string6 = StringUtils.getIfEmpty("", supplier1);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("\"/JR EuwM_                                                                                   ", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "\"/JR EuwM_                                                                                   ", "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      String string7 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("\uFFFD^\u0000", string7);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)94, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string7);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.truncate("Duplicate enum constant name(s) found in ", 5341, 5341);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("Duplicate enum constant name(s) found in ", (-986));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.leftPad("rMJ", 1936);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart((String) null, "J_RK\"=x");
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, "Classpath resource [", 64);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isMixedCase("J_RK\"=x");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "vuzr9]3|=", (CharSequence) "vuzr9]3|=");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeIgnoreCase("Y:01xHL!L1^amX2Vu", ",Txs]jU&,u7.wqei");
      assertEquals("Y:01xHL!L1^amX2Vu", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterable<?>) null, 'v');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("Y:01xHL!L1^amX2Vu", "org.apache.commons.lang3.StringUtils");
      assertTrue(string2.equals((Object)string0));
      assertEquals("Y:01xHL!L1^amX2Vu", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("Y:01xHL!L1^amX2Vu", "vuzr9]3|=");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Y:01xHL!L1^amX2Vu", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isEmpty("j");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substringAfterLast("Locale must not be null", "k~");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.ordinalIndexOf("Locale must not be null", ",Txs]jU&,u7.wqei", (-358));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\'';
      int int2 = StringUtils.indexOfAny((CharSequence) "Y:01xHL!L1^amX2Vu", charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'\'', '\\', '\\', '\''}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 56);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "vuzr9]3|=", "7#P|Hy7!1)[]'X,GZv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Strings must not be null6-o={<t`TMm", "Strings must not be null6-o={<t`TMm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "vuzr9]3|=", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("_z3~ 1- ", (-1499));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("org.junitpioneer.jupiter.params.ShortRange", "k~");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("k~org.junitpioneer.jupiter.params.ShortRangek~", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8G}xNZ0?4U_X";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("8G}xNZ0?4U_X", string3);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Exception cloning Cloneable type ", "k~org.junitpioneer.jupiter.params.ShortRangek~", (-1460));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("\"_DgtKU3$$8AF]\"\"_DgtKU3$$8AF]\"");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(21, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.defaultIfEmpty("\"_DgtKU3$$8AF]\"\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"\"_DgtKU3$$8AF]\"");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\"_DgtKU3$$8AF]\"\"_DgtKU3$$8AF]\"", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 322);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.repeat("h", 8200);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) "h";
      charSequenceArray0[2] = (CharSequence) "h";
      charSequenceArray0[4] = (CharSequence) "h";
      charSequenceArray0[5] = (CharSequence) "h";
      charSequenceArray0[6] = (CharSequence) "h";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat((String) null, 1894);
      assertNull(string1);
      
      String string2 = StringUtils.wrap("org.junitpioneer.jupiter.params.ShortRange", "8G}xNZ0?4U_X");
      assertFalse(string2.equals((Object)string0));
      assertEquals("8G}xNZ0?4U_Xorg.junitpioneer.jupiter.params.ShortRange8G}xNZ0?4U_X", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.params.ShortRange", "A", (-198));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("\"_DgtKU3$$8AF]\"\"_DgtKU3$$8AF]\"");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(21, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      String string0 = StringUtils.leftPad("Extension context \"", 8, "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals("Extension context \"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String string0 = StringUtils.abbreviate("\"#ol@\"", 747, 64);
      assertEquals("\"#ol@\"", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("w!KT~h1", "\"#ol@\"");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("w!KT~h1", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart((String) null, "\"#ol@\"");
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "w!KT~h1", 33);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(188, stringArray0.length);
      
      String string3 = StringUtils.leftPad("w!KT~h1", 7, "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("w!KT~h1", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("'exn}]fd}");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("'exn}]fd}", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String string0 = StringUtils.leftPad("*f0M'3>iec7f77U?", 25, "7");
      assertEquals("777777777*f0M'3>iec7f77U?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.substringBetween("<14*O`UPZe ^vt< \\Z", "...", "...");
      assertNull(string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "...", 4228);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String string0 = StringUtils.swapCase("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("@dEFAULTlOCALE NOT CONFIGURED CORRECTLY. wHEN NOT USING A LANGUAGE TAG, SPECIFY EITHERLANGUAGE, OR LANGUAGE AND COUNTRY, OR LANGUAGE AND COUNTRY AND VARIANT.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.left((String) null, 8192);
      assertNull(string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 8192;
      floatArray0[2] = (float) 8192;
      floatArray0[3] = (float) 8192;
      floatArray0[4] = (float) 8192;
      String string3 = StringUtils.join(floatArray0, ':', 8192, (-2418));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertArrayEquals(new float[] {8192.0F, 8192.0F, 8192.0F, 8192.0F, 8192.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("");
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate((String) null, (String) null, Integer.MAX_VALUE, 2754);
      assertNull(string5);
      
      String string6 = StringUtils.strip("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("e5a\"v%rBOa)ec&");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("e5a\"v%rBOa)ec&"));
      
      boolean boolean1 = StringUtils.contains((CharSequence) " ", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("lZ<'~5Sl");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-67));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("?H*< *eqPd[?H@< *eqPd[", "?H*< *eqPd[?H@< *eqPd[", "?H*< *eqPd[?H@< *eqPd[");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '?' near index 0
         // ?H*< *eqPd[?H@< *eqPd[
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Stream<Object> stream0 = stack0.stream();
      assertNotNull(stream0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Object) "");
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      
      boolean boolean1 = stack0.remove((Object) stream0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(stack0.contains(""));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Y');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains('Y'));
      assertTrue(stack0.contains(""));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "", (-1677));
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.join((Object[]) stringArray1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'm', 31, (-1677));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceEach("u)'#d", stringArray1, stringArray1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("u)'#d", string4);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("u)'#d");
      assertArrayEquals(new int[] {117, 41, 39, 35, 100}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      UnaryOperator<Locale.Category> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      vector0.replaceAll(unaryOperator0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.remove((Object) "`]L so{&r`M~>");
      assertFalse(boolean0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Vector<String> vector1 = new Vector<String>();
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertFalse(vector1.contains("`]L so{&r`M~>"));
      
      String string0 = StringUtils.join((List<?>) vector1, 'i', 50, 50);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertFalse(vector1.contains(string0));
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "}oV@9T");
      assertNull(stringArray0);
      
      String string1 = StringUtils.substringAfterLast("org.apache.commons.lang3.exception.CloneFailedException", 7);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("qTNt", (String[]) null, (String[]) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("qTNt", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "qTNt", 1309, 50);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.stripStart("-||]*wgry5", "fj");
      assertEquals("-||]*wgry5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
      assertEquals(250, stringArray0.length);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "\"CM*,/d*ZB(KVhu");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)94;
      String string1 = StringUtils.join(byteArray0, 'J', (int) (byte)94, (int) (byte)94);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)94, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.abbreviate("W_Xj;", 40);
      assertFalse(string2.equals((Object)string1));
      assertEquals("W_Xj;", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("09", "Y*@lW dz#<\"");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("09", string3);
      assertNotNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((byte) (-111)));
      
      String string4 = StringUtils.join((List<?>) arrayList0, ",HtL'/H0*~JD", (int) (byte)94, 4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((byte)94));
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("Object varargs must not be null", "", charSequenceArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Object varargs must not be null", string5);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Y*@lW dz#<\"";
      stringArray0[1] = null;
      String string6 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      String string0 = StringUtils.chomp("Strings must not be null");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((double[]) null, 'S');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.chop("w\r");
      assertEquals("w", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("w\r", "w");
      assertEquals(0.85, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("mhcv(4y?_2!N", "<HvA}");
      assertEquals("mhcv(4y?_2!N", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2491.9866F);
      floatArray0[1] = 384.4269F;
      floatArray0[2] = 0.0F;
      String string1 = StringUtils.join(floatArray0, 'G');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2491.9866G384.4269G0.0", string1);
      assertArrayEquals(new float[] {(-2491.9866F), 384.4269F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "mhcv(4y?_2!N", "U6");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("U6", "mhcv(4y?_2!N");
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 384.4269F;
      doubleArray0[1] = (double) 384.4269F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1);
      String string2 = StringUtils.join(doubleArray0, 'G');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("384.4269104003906G384.4269104003906G0.0G0.0G-1.0", string2);
      assertArrayEquals(new double[] {384.4269104003906, 384.4269104003906, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("384.4269104003906G384.4269104003906G0.0G0.0G-1.0");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("384.4269104003906G384.4269104003906G0.0G0.0G-1.0", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("mhcv(4y?_2!N");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Aborting to protect against StackOverlowError - output of one loop is the input of another");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-650.0F);
      String string1 = StringUtils.join(floatArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-650.0", string1);
      assertArrayEquals(new float[] {(-650.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("-650.0", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "-650.0", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("-650.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "-650.0", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-51);
      byteArray0[8] = (byte)32;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\uFFFD\uFFFD\uFFFD?\u0000\u0000a\uFFFD ", string3);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-1), (byte) (-58), (byte)63, (byte)0, (byte)0, (byte)97, (byte) (-51), (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string3);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, '%');
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      String string0 = StringUtils.difference("=M", "=M");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("=M", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("h*_K-a{7-|i85tpWF/", 'S');
      assertEquals("h*_K-a{7-|i85tpWF/", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("h*_K-a{7-|i85tpWF/", "h*_K-a{7-|i85tpWF/", 16);
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.deleteWhitespace("DefaultLocale");
      assertFalse(string1.equals((Object)string0));
      assertEquals("DefaultLocale", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("K\"WHkT#}yq91@G`{,kT", (-3533));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("~ xj=@B*L1ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", "~ xj=@B*L1ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("\u0000");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "\u0000";
      charSequenceArray0[2] = (CharSequence) "\u0000";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "\u0000";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.abbreviate((String) null, 3009);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("\u0000"));
      
      arrayList0.ensureCapacity(54);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(3009));
      
      String string4 = StringUtils.join((List<?>) arrayList0, "\u0000", 3009, 15);
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(15));
      
      String string5 = StringUtils.center("Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", 3261, '\u0000');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Object varargs must not be null", (CharSequence) null, 2);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.j";
      stringArray0[1] = "Object varargs must not be null";
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.j", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("*", string0);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "A)Gd@Af)}Sqnlzj6");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 40);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rotate("A)Gd@Af)}Sqnlzj6", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(")Gd@Af)}Sqnlzj6A", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "*", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, '7');
      assertNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains('7'));
      
      String string2 = StringUtils.replace((String) null, "[ NzH+{[ NzH+{", "_q S!^_22h'UTC5.Pn*");
      assertNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, (CharSequence[]) null);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissing("Minimum abbreviation width with offset is %d", "[ NzH+{[ NzH+{", (CharSequence[]) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d[ NzH+{[ NzH+{", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">&MSmn(%)dr>#i";
      stringArray0[1] = ">&MSmn(%)dr>#i";
      stringArray0[2] = "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.";
      stringArray0[3] = "";
      stringArray0[4] = "org.junitpioneer.jupiter.RetryingTestExtension";
      stringArray0[5] = "*U5~~L-D,";
      stringArray0[6] = "";
      stringArray0[7] = "l'Dr{QY.1s/_vr-X";
      stringArray0[8] = ".wLk_PGDaX";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(">&MSmn(%)dr>#i", string0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(9, stringArray0.length);
      
      String string1 = StringUtils.substring("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", 0, 984);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("By+:Ruy%}=[E+Y'", 'l');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("By+:Ruy%}=[E+Y'", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("", 'l');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissing("l'Dr{QY.1s/_vr-X", "By+:Ruy%}=[E+Y'", stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("l'Dr{QY.1s/_vr-X", string4);
      assertEquals(9, stringArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.appendIfMissingIgnoreCase("auO=V z|*6s", "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertEquals("auO=V z|*6sY:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NH&MsJ:3<", '}');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("NH&MsJ:3<", " ", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " ";
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast(" ", (-773));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.remove(":b1>CwAHQyLl`B]olS>", '\"');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(":b1>CwAHQyLl`B]olS>", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(set0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("NH&MsJ:3<"));
      
      Locale.setDefault(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\u7FA9\u5927\u5229", string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      
      int int1 = StringUtils.getFuzzyDistance(":b1>CwAHQyLl`B]olS>", ":b1>CwAHQyLl`B]olS>", locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(int1 == int0);
      assertEquals(55, int1);
      assertNotSame(locale0, locale1);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      String[] stringArray2 = StringUtils.split("l", '}');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string5 = StringUtils.getDigits("");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center(":b1>CwAHQyLl`B]olS>", 1367, '@');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("9ZGTPtoS77~qtwSxj9", " ", stringArray1);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertEquals("9ZGTPtoS77~qtwSxj9 ", string7);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(1, stringArray1.length);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      String string0 = StringUtils.wrap("Object varargs must not be nullwe", "Object varargs must not be nullwe");
      assertEquals("Object varargs must not be nullweObject varargs must not be nullweObject varargs must not be nullwe", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Jr+]:7A{G\"~=dAF|", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}-187.41091492}1167.474}0.0", string0);
      assertArrayEquals(new double[] {0.0, (-187.41091492), 1167.474, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) ":BFPT";
      charSequenceArray0[1] = (CharSequence) ":BFPT";
      String string1 = StringUtils.rightPad("0.0}-187.41091492}1167.474}0.0", 0, '}');
      assertTrue(string1.equals((Object)string0));
      assertEquals("0.0}-187.41091492}1167.474}0.0", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "0.0}-187.41091492}1167.474}0.0";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[0], supplier0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals(":BFPT", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      
      charSequenceArray0[3] = (CharSequence) ":BFPT";
      charSequenceArray0[4] = (CharSequence) ":BFPT";
      charSequenceArray0[5] = (CharSequence) ":BFPT";
      charSequenceArray0[6] = (CharSequence) "0.0}-187.41091492}1167.474}0.0";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(7, charSequenceArray0.length);
      
      int int3 = 3009;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("w#lh_o", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Don");
      assertTrue(boolean0);
      
      String string0 = StringUtils.getIfEmpty("{[0-9]+}", (Supplier<String>) null);
      assertEquals("{[0-9]+}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, (String) null, 18, 11);
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeFirst("[ NzH+{", "%agUdVR");
      assertEquals("[ NzH+{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("%agUdVR", 3204, 'J');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string2;
      charSequenceArray0[1] = (CharSequence) string2;
      charSequenceArray0[2] = (CharSequence) "[ NzH+{";
      charSequenceArray0[3] = (CharSequence) "[ NzH+{";
      charSequenceArray0[4] = (CharSequence) null;
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'r');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string4);
      
      charSequenceArray0[5] = (CharSequence) string4;
      String[] stringArray0 = new String[2];
      stringArray0[0] = string2;
      stringArray0[1] = "%agUdVR";
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[4], charSequenceArray0[3]);
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string6 = StringUtils.leftPad(" ", (-982), stringArray0[0]);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals(" ", string6);
      assertEquals(2, stringArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-2457), (-2457));
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 30);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.rightPad("|SNT*2rn/", 7);
      assertEquals("|SNT*2rn/", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "|SNT*2rn/", 7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 668);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("p{InCombiningDiacriticalMarks}+", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("3IgR{", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '}';
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) '}';
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1167.474;
      doubleArray0[6] = (-187.41091492);
      String string0 = StringUtils.join(doubleArray0, 'x');
      assertEquals("125.0x-187.41091492x0.0x125.0x0.0x1167.474x-187.41091492", string0);
      assertArrayEquals(new double[] {125.0, (-187.41091492), 0.0, 125.0, 0.0, 1167.474, (-187.41091492)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, (-3850));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(")w=^o-qqP=", "%{AK'", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("%{AK'");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("U@yk=`J", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "%{AK'", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("%{AK'"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("%{AK'"));
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("%{AK'"));
      
      String string3 = StringUtils.rightPad("125.0x-187.41091492x0.0x125.0x0.0x1167.474x-187.41091492", (-300), 'l');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("125.0x-187.41091492x0.0x125.0x0.0x1167.474x-187.41091492", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "U@yk=`J", (CharSequence) null);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'l');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(")w=^o-qqP=", string4);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("<2lCWIZ)4M,FTw3K'|", "<2lCWIZ)4M,FTw3K'|");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6
         // <2lCWIZ)4M,FTw3K'|
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'K');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("\u0000", "\u0000");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "\u0000";
      charSequenceArray0[3] = (CharSequence) "\u0000";
      int int0 = StringUtils.lastOrdinalIndexOf("\u0000", "\u0000", 10);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isMixedCase("Object varargs must not be null");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.substringsBetween("kV ", " 6K]<", "...");
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.isMixedCase(charSequenceArray0[3]);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String string0 = StringUtils.repeat("{.%#", 640);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("{.%#"));
      
      String string1 = StringUtils.truncate(string0, 3007, 12);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left(string0, 99);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, ">jB!O`JK.id");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.repeat("{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%#{.%", (-1315));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("CYeRequired at least one of th following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.", "CYeRequired at least one of th following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.", "CYeRequired at least one of th following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, '\u0000');
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, "Z#oIuX_2}Y:9K9)");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[8] = '>';
      String string0 = StringUtils.removeFirst("org.juntpioneer.jupiter.ReportEntryExtesionorg.juntpiDneer.jupiter.ReportEntryExtesion", "org.juntpioneer.jupiter.ReportEntryExtesionorg.juntpiDneer.jupiter.ReportEntryExtesion");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string1 = StringUtils.right((String) null, 0);
      assertNull(string1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 0, 321);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "U~*J:danv3n{4^;L/ ", (CharSequence) "U~*J:danv3n{4^;L/ ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "O", 16);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase("O");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("...", "...", "*");
      assertNull(stringArray1);
      
      String string2 = StringUtils.uncapitalize("...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("O");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("o", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "m", "m");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("", 24);
      assertEquals("                        ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "                        ");
      assertEquals(0, int0);
      
      String string1 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "\"CM*,/d*ZB(KVhu");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)0;
      String string1 = StringUtils.join(byteArray0, 'J', (int) (byte)94, (int) (byte)94);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)94, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", "", true);
      assertEquals(131, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 'J';
      String string2 = StringUtils.join(longArray0, 'P', 0, (int) (byte)0);
      assertEquals("", string2);
      assertArrayEquals(new long[] {74L, 74L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "(Je)h?2)");
      assertNull(stringArray0);
      
      String string3 = StringUtils.remove((String) null, "");
      assertNull(string3);
      
      String string4 = StringUtils.right((String) null, (byte)94);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.rightPad("\"/JR EuwM_", (int) (byte)94, "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\"/JR EuwM_                                                                                    ", string5);
      assertNotNull(string5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      String string6 = StringUtils.getIfEmpty("", supplier1);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "\"/JR EuwM_                                                                                   ", "");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String string0 = "";
      String string1 = ".'F|wMrQwM)bE18<6\\p{InCmbiningDiacriticalMars}+";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", ".'F|wMrQwM)bE18<6p{InCmbiningDiacriticalMars}+");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 9
         // .'F|wMrQwM)bE18<6p{InCmbiningDiacriticalMars}+
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      String string0 = ">w4$EuYp4C({g7*7#q";
      // Undeclared exception!
      try { 
        StringUtils.removePattern(">w4$EuYp4C({g7*7#q", ">w4$EuYp4C({g7*7#q");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 10
         // >w4$EuYp4C({g7*7#q
         //           ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1865);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      boolean boolean0 = StringUtils.contains((CharSequence) stringBuffer0, (CharSequence) stringBuffer0);
      assertTrue(boolean0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("%agUdVR");
      assertEquals("%agUdVR", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("%agUdVR", 3204, 'J');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string2;
      charSequenceArray0[1] = (CharSequence) string2;
      charSequenceArray0[2] = (CharSequence) "%agUdVR";
      charSequenceArray0[3] = (CharSequence) "%agUdVR";
      charSequenceArray0[4] = (CharSequence) null;
      String string4 = StringUtils.replaceIgnoreCase("%agUdVR", "%agUdVR", "%agUdVR", (int) 'J');
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("%agUdVR", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("%agUdVR", 31, 114);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("%agUdVR");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.rightPad((String) null, 114, 'J');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.lowerCase("f.|RV'W");
      assertEquals("f.|rv'w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'M');
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEnd("fj", (String) null);
      assertEquals("fj", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'a');
      assertNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string1 = StringUtils.abbreviate("\n", 89);
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("\n");
      assertTrue(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeIgnoreCase("CartesianTest can not have an empty display name.", "CartesianTest can not have an empty display name.");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, '\'');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.chomp("CartesianTest can not have an empty display name.", ",/r9");
      assertFalse(string3.equals((Object)string1));
      assertEquals("CartesianTest can not have an empty display name.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("j", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("j", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isEmpty("CartesianTest can not have an empty display name.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.lowerCase("Locale must not be null");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("locale must not be null", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.ordinalIndexOf("locale must not be null", "locale must not be null", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\\';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      charArray0[8] = '\'';
      int int2 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'\'', '\'', '\\', '\'', '\'', '\'', '\'', '\'', '\''}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      String string0 = StringUtils.rightPad("org.apache.commons.lang3.StringUtils", 107, "org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtil", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null", "Strings must not be null", 65536);
      assertEquals(25, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
      assertEquals(25, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("Strings must not be null", "V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.rightPad("V", 65536, "");
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 16, "nQ~'>TG$lVR%E4|R$zB");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("nQ~'>TG$lVR%E4|R$zB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '1');
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, '1');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      String string0 = StringUtils.stripEnd("...", "Execution of '%s' took [%d] ms.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Execution of '%s' took [%d] ms.", 3481);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Execution of '%s' took [%d] ms.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("}oV@9T", 2466);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "}oV@9T", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.rightPad("Execution of '%s' took [%d] ms.", 0, "Execution of '%s' took [%d] ms.");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Execution of '%s' took [%d] ms.", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String string0 = StringUtils.rightPad("lP}y'TpBc8;D<Od_", (-57), "lP}y'TpBc8;D<Od_");
      assertEquals("lP}y'TpBc8;D<Od_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String string0 = StringUtils.center("vuzr9]3|=", 108, (String) null);
      assertEquals("                                                 vuzr9]3|=                                                  ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", 108, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("                                                 vuzr9]3|=                                                  ", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(stringArray0[0]);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(":_", ":_");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-2301));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string1 = StringUtils.removeIgnoreCase((String) null, "");
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)87;
      String string2 = StringUtils.join(byteArray0, 'K');
      assertFalse(string2.equals((Object)string0));
      assertEquals("-73K10K0K52K0K0K-66K125K87", string2);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)10, (byte)0, (byte)52, (byte)0, (byte)0, (byte) (-66), (byte)125, (byte)87}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String string0 = StringUtils.substringBefore("BiYaLFstCfZ$?d<", "X");
      assertEquals("BiYaLFstCfZ$?d<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("f\"'", "f$dTa6~=");
      assertEquals("f\"'", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("+h");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("f\"'", stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String string2 = StringUtils.join(floatArray0, 'K', 27, 27);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("zrY9V@ziPWkk=nx", ")", 122, 122);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((long[]) null, 'm', 3, 3);
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "zrY9V@ziPWkk=nx", 3, 11);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringAfterLast("", (-2027));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(")", "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String string0 = StringUtils.remove("Expected exception %s was not thrown.", "");
      assertEquals("Expected exception %s was not thrown.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("UIYz+i.wWKvH ,", "Expected exception %s was not thrown.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("UIYz+i.wWKvH ,", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("UIYz+i.wWKvH ,");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Expected exception %s was not thrown.", (CharSequence) "UIYz+i.wWKvH ,");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte)109;
      String string0 = StringUtils.join(byteArray0, 'y');
      assertEquals("-89y0y109y0y0y0y0y0y0y0", string0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)109, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "-89y0y109y0y0y0y0y0y0y0";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", "m");
      assertEquals(12, int0);
      
      String string1 = StringUtils.defaultString("\"_DgtKU3$$8AF]\"\"_DgtKU3$$8AF]\"");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"_DgtKU3$$8AF]\"\"_DgtKU3$$8AF]\"", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("-89y0y109y0y0y0y0y0y0y0", "-89y0y109y0y0y0y0y0y0y0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("/OX0on.");
      assertFalse(boolean0);
      
      String string0 = StringUtils.getIfBlank("x#dB ~P]JN11z1Ha<", (Supplier<String>) null);
      assertEquals("x#dB ~P]JN11z1Ha<", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "x#dB ~P]JN11z1Ha<", (CharSequence) "/OX0on.");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 't');
      assertEquals("", string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String string0 = StringUtils.remove("l4MbZHov-ELp", "l4MbZHov-ELp");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((double[]) null, '/', 16, 16);
      assertNull(string1);
      
      String string2 = StringUtils.substring((String) null, 16);
      assertNull(string2);
      
      String string3 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.right((String) null, (-349));
      assertNull(string5);
      
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 16);
      assertFalse(boolean0);
      
      String string6 = StringUtils.lowerCase("");
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.split("");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      String string0 = StringUtils.prependIfMissingIgnoreCase("\n", "\n", charSequenceArray0);
      assertEquals("\n", string0);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore("CartesianTest can not have an empty display name.,/r9", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("CartesianTest can not have an empty display name.,/r9", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "CartesianTest can not have an empty display name.,/r9", (-34));
      assertNull(stringArray0);
      
      String string3 = StringUtils.trim("\n");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)3;
      String string4 = StringUtils.join(byteArray0, 'g', 7, (-1930));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)38, (byte)13, (byte)127, (byte) (-1), (byte)3}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.right("\n", 26);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\n", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      String string0 = StringUtils.substringBefore("u]w", "u]w");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}-187.41091492}0.0}0.0", string0);
      assertArrayEquals(new double[] {0.0, (-187.41091492), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "0.0}-187.41091492}0.0}0.0";
      charSequenceArray0[1] = (CharSequence) "0.0}-187.41091492}0.0}0.0";
      charSequenceArray0[2] = (CharSequence) "0.0}-187.41091492}0.0}0.0";
      charSequenceArray0[3] = (CharSequence) "0.0}-187.41091492}0.0}0.0";
      charSequenceArray0[4] = (CharSequence) "0.0}-187.41091492}0.0}0.0";
      charSequenceArray0[5] = (CharSequence) "0.0}-187.41091492}0.0}0.0";
      charSequenceArray0[6] = (CharSequence) "0.0}-187.41091492}0.0}0.0";
      charSequenceArray0[7] = (CharSequence) "0.0}-187.41091492}0.0}0.0";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "0.0}-187.41091492}0.0}0.0", "0.0}-187.41091492}0.0}0.0");
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse("+Kx1M+HMd2w");
      assertFalse(string1.equals((Object)string0));
      assertEquals("w2dMH+M1xK+", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[1], charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.repeat('?', 563);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEqualsstring2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("+Kx1M+HMd2w
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????+Kx1M+HMd2w", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("<R;Y!2cs8", "w2dMH+M1xK+");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("w2dMH+M1xK+<R;Y!2cs8w2dMH+M1xK+", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringnteger.MIN_VALUE);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEqualsstring5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string6 = StringUtils.lowerCase("Strings must not be null", locale0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("strings must not be null", string6);
      assertNotNull(string6);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Cloneable type ");
      assertEquals("Cloneabletype", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Expected exception %s was not thrown.");
      assertEquals("Expectedexception%swasnotthrown.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Expected exception %s was not thrown.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("Expected exception %s was not thrown.", 0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("UIYz+i.wWKvH ,", "Expected exception %s was not thrown.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("UIYz+i.wWKvH ,", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("Expected exception %s was not thrown.", supplier0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Expected exception %s was not thrown.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.left("g]$>cZEi2iZ)Gyt~(@&", 128);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("g]$>cZEi2iZ)Gyt~(@&", string5);
      assertNotNull(string5);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 128;
      longArray0[1] = 1L;
      String string6 = StringUtils.join(longArray0, 'm', 128, 0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertArrayEquals(new long[] {128L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("K!X{O'=", "K!X{O'=", 8);
      assertEquals("K!X{O'=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      String string0 = StringUtils.stripStart("f", "");
      assertEquals("f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Cannot get the oString of a null object ", 'C');
      assertEquals("Cannot get the oString of a null object C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("i");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      String string0 = StringUtils.replaceChars("f=~q)K]>D4NOVcFkkIk", '|', '|');
      assertEquals("f=~q)K]>D4NOVcFkkIk", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("p{InCombiningDiacriticalMarks}+", ';');
      assertEquals(";p{InCombiningDiacriticalMarks}+;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = "@h%#;s6@-5*+YZt";
      try { 
        StringUtils.toString(byteArray0, "@h%#;s6@-5*+YZt");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("NFZVSVz~P-^", (-2119), (-2119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIp{InCombiningDiacriticalMarks}+V", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIp{InCombiningDiacriticalMarks}+V", 29, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 64
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '*', (-1186), (-1186));
      assertEquals("", string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-973.5031502087);
      String string0 = StringUtils.join(doubleArray0, '}', 0, 0);
      assertEquals("", string0);
      assertArrayEquals(new double[] {(-973.5031502087)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("", "\n");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, '7');
      assertNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('7'));
      
      arrayList0.trimToSize();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('7'));
      
      String string2 = StringUtils.join((List<?>) arrayList0, "", 9, 9);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      String[] stringArray0 = StringUtils.split("...", ",/r9");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "r~7 2X+#%2k*<5+F^");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rotate("Y:01xHL!L1^amX2Vu", 2466);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uY:01xHL!L1^amX2V", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 8192);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("K]:}c#o", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-650.0F);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripStart("-.4O?rig>~5f.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-.4O?rig>~5f.", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 879);
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.leftPad("", (int) (byte)0, "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.valueOf((char[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.truncate("", 0);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String string0 = StringUtils.swapCase("StdIoExtension is active but no %s annotation was found.");
      assertEquals("sTDiOeXTENSION IS ACTIVE BUT NO %S ANNOTATION WAS FOUND.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "sTDiOeXTENSION IS ACTIVE BUT NO %S ANNOTATION WAS FOUND.", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.trimToEmpty("<R;Y!2cs8");
      assertEquals("<R;Y!2cs8", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "<R;Y!2cs8";
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "<R;Y!2cs8", (CharSequence) "<R;Y!2cs8", 13);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[0], (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.reverse("$oo(]Mb!5TSw^O");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("O^wST5!bM](oo$", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) ":BFPT", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.repeat('D', 13);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("DDDDDDDDDDDDD", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("n_W|", "\n", (-956), 4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'n');
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[2] = (CharSequence) "i(vlVd";
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[2], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = StringUtils.overlay("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", (-32768), (-32768));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProviderorg.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "xw~Z_GoxTI", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "xw~Z_GoxTI", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("4SKsASiI_h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kmE", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("f.|RV'W");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) '}';
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("k~", "Du$-bVtB{");
      assertEquals("k~", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0, 0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      String string0 = StringUtils.left(">7K<CtCs<=Eet7H", 56);
      assertEquals(">7K<CtCs<=Eet7H", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(">7K<CtCs<=Eet7H");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ">7K<CtCs<=Eet7H", "~ <!L#lN,j<G`@G(w");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.overlay("1jVA>NP;l", (String) null, 56, (-1748));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAllUpperCase(">7K<CtCs<=Eet7H");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      String string0 = StringUtils.overlay("si*oi/ow+5Vg?@{4* ", "si*oi/ow+5Vg?@{4* ", 98, 98);
      assertEquals("si*oi/ow+5Vg?@{4* si*oi/ow+5Vg?@{4* ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String string0 = StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6]3#c~ufBAljJ,{;");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("zrY9V@ziPWkk=nx", ")", 122, 122);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("zrY9V@ziPWkk=nx", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("NKO<o");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NKO<o", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '~', 119, (-2211));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(2, stringArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("", "Can't disable based on arguments, because method %s had no parameters.");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.compare("", "V'_+'C43]l[D<[e", true);
      assertEquals((-15), int0);
      
      String string6 = StringUtils.appendIfMissing("t`3S>PtXk=k", "", stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("t`3S>PtXk=k", string6);
      assertEquals(2, stringArray0.length);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "m[mZ4_Z?*${tYThe `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", "K]:}#o");
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence[]) stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String string0 = StringUtils.reverse("]");
      assertEquals("]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("\r", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("1PO>$`t$(MTL", "\r", 0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("1PO>$`t$(MTL");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("b)?$^_H10rp|A`/W0u");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", stringArray0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid(" ", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissing("Y", "Y", stringArray0);
      assertEquals("Y", string0);
      assertEquals(188, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Y", (CharSequence) "Y");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      String string0 = StringUtils.swapCase("ExceptionWasThrown");
      assertEquals("eXCEPTIONwAStHROWN", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      Locale locale1 = Locale.US;
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String string0 = StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      assertEquals("r~7 2X+#%2k*<5+F^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeEndIgnoreCase("Mwdopr>OA{", "Mwdopr>OA{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("r~7 2X+#%2k*<5+F^");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("r~7 2X+#%2k*<5+F^", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "r~7 2X+#%2k*<5+F^", (CharSequence) "r~7 2X+#%2k*<5+F^");
      assertEquals(0, int0);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("_<wj'{I&8yLMS!", "Mwdopr>OA{", "r~7 2X+#%2k*<5+F^");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 121);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      String string0 = StringUtils.swapCase(".");
      assertEquals(".", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "vuzr9]3|=";
      String string0 = StringUtils.replaceEach("vuzr9]3|=", stringArray0, stringArray0);
      assertEquals("vuzr9]3|=", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "p> \"\tcJvbc@.a");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("OdW<+0WAdzr|@");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("OdW<+0WAdzr|@", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String string0 = StringUtils.replaceEach("%s does not implement the CartesianAnnotationConsumer<T> interface.", (String[]) null, (String[]) null);
      assertEquals("%s does not implement the CartesianAnnotationConsumer<T> interface.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("%s does not implement the CartesianAnnotationConsumer<T> interface.", "%s does not implement the CartesianAnnotationConsumer<T> interface.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.replaceEachRepeatedly("maxWith cannot be negative", stringArray0, stringArray0);
      assertEquals("maxWith cannot be negative", string0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ww";
      stringArray0[1] = "ww";
      stringArray0[2] = "ww";
      String string0 = StringUtils.replaceEach("ww", stringArray0, stringArray0);
      assertEquals("ww", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("ww", "ww");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("7LRo7nv=}a`");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7LRO7NV=}A`", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ww", (CharSequence) "ww", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      String string0 = StringUtils.wrap("", '&');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, '7');
      assertNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      String string2 = StringUtils.join((List<?>) arrayList0, "", 9, 9);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String string0 = StringUtils.repeat("Strings must not be null6-o={<t`TMm", 29);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Strings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      String string0 = StringUtils.repeat("0~%+f", (String) null, 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "=M=M=L{rb+#QZ8j{U`aN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "...", "...");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((byte[]) null, '{', 8, 8);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Ye");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat(" ", " ", (-493));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5326);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("oro281", (String) null, 5326);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha(string1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, "7#P|Hy7!1)[]'X,GZv");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.trimToEmpty("<R;Y!2cs8");
      assertEquals("<R;Y!2cs8", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "<R;Y!2cs8";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-708.6696172);
      doubleArray0[1] = (-1629.00406111921);
      doubleArray0[2] = 1857.0;
      String string1 = StringUtils.join(doubleArray0, '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-708.6696172}-1629.00406111921}1857.0", string1);
      assertArrayEquals(new double[] {(-708.6696172), (-1629.00406111921), 1857.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-708.6696172}-1629.00406111921}1857.0", "<R;Y!2cs8");
      assertEquals(3, int0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      charSequenceArray1[1] = (CharSequence) "-708.6696172}-1629.00406111921}1857.0";
      String string2 = StringUtils.reverse("<R;Y!2cs8");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8sc2!Y;R<", string2);
      assertNotNull(string2);
      
      charSequenceArray1[2] = (CharSequence) "8sc2!Y;R<";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "<R;Y!2cs8", charSequenceArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      
      String string3 = StringUtils.repeat(' ', 563);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEqualsstring3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("...", "", 0, 3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Nz", "Nz");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '1');
      assertEquals("", string0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("<Qv2O![[a", "<Qv2O![[a", "<Qv2O![[a");
      assertEquals("<Qv2O![[a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String string0 = StringUtils.unwrap("*UxxB? *UxxB? ", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertEquals("*UxxB? *UxxB? ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      String string0 = "}oV@9T";
      String string1 = StringUtils.replace("", "}oV@9T", "", 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceFirst("ukipZo[$oc>pRV[~`(x", "}oV@9T", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ukipZo[$oc>pRV[~`(x", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "ukipZo[$oc>pRV[~`(x");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'N';
      charArray0[2] = '\\';
      charArray0[3] = 'h';
      charArray0[4] = 'Z';
      charArray0[5] = '?';
      charArray0[6] = ']';
      charArray0[7] = '}';
      int int1 = StringUtils.indexOfAny((CharSequence) "ukipZo[$oc>pRV[~`(x", charArray0);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertArrayEquals(new char[] {'>', 'N', '\\', 'h', 'Z', '?', ']', '}'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, '<');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "}oV@9T");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "StdIo_Std_In", (CharSequence) "StdIo_Std_In");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("}f|^=^2", "}f|^=^2");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("}f|^=^2", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = StringUtils.substringAfterLast("54:UUV;Bg", ",b");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ",b", "54:UUV;Bg");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("54:UUV;Bg", "", 56);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join(objectArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("{6]3#c~ufBAljJ,{;", "', has a length less than 2");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{6]3#c~ufBAljJ,{;", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'U', 7, (-1934));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("U&4w.@u%`n");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("U&4w.@u%`n", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase(">v7 ", ">v7 ", (CharSequence[]) null);
      assertEquals(">v7 ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultString(" or any enclosing class.", " or any enclosing class.");
      assertEquals(" or any enclosing class.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("vhBB`#aTrS/}$09C/v", "vhBB`#aTrS/}$09C/v", (int) (byte)109);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) string1, "=|?PJYDUxrMUnF");
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashSet<String> hashSet0 = new HashSet<String>((byte)109);
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(string0));
      
      boolean boolean2 = hashSet0.add(" or any enclosing class.");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(string0));
      assertFalse(hashSet0.contains(string1));
      
      String string2 = StringUtils.join((Iterable<?>) hashSet0, "Bv1NTGTt");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" or any enclosing class.", string2);
      assertNotNull(string2);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(string0));
      assertFalse(hashSet0.contains("Bv1NTGTt"));
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'r');
      assertEquals("0.0r-1.0r-1.0r-1.0r0.0r0.0", string0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "0.0r-1.0r-1.0r-1.0r0.0r0.0";
      charSequenceArray0[5] = (CharSequence) null;
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, charSequenceArray0[4]);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'D', 3224, 5326);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("", (String) null, 5326);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.Method `Stream<? extends Arguments> x}\"Pw");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.Method `Stream<? extends Arguments> x}\"Pw", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("]");
      assertEquals("]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "7#P|Hy7!1)[]'X,GZv", (CharSequence) "7#P|Hy7!1)[]'X,GZv");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(")GaoubL`#2");
      assertEquals(")GaoubL`#2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst(")GaoubL`#2", "No arguments sources were found for @CartesianTest", "}'p`");
      assertTrue(string1.equals((Object)string0));
      assertEquals(")GaoubL`#2", string1);
      assertNotNull(string1);
      
      char char0 = 'K';
      int int0 = StringUtils.countMatches((CharSequence) "}'p`", (CharSequence) ")GaoubL`#2");
      assertEquals(0, int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("No arguments sources were found for @CartesianTest"));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      String string0 = StringUtils.replaceChars("yF={", 'D', 'D');
      assertEquals("yF={", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "yF={", (CharSequence) "yF={", (-1720));
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("yF={");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("yF={", 'D');
      assertFalse(string1.equals((Object)string0));
      assertEquals("DyF={D", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "DyF={D";
      charSequenceArray0[1] = (CharSequence) "DyF={D";
      charSequenceArray0[2] = (CharSequence) "DyF={D";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = "'+m~TtC}.71+F)u+\\u*";
      String string3 = StringUtils.abbreviateMiddle("yF={", string2, 54);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("yF={", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("DyF={D", "");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("DyF={D", string4);
      assertNotNull(string4);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string5 = StringUtils.join((List<?>) arrayList0, string2, 0, (-1720));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("DyF={D", "DyF={D", charSequenceArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertEquals("DyF={D", string6);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissing("#", "", charSequenceArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("#", string7);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string7);
      
      String string8 = StringUtils.uncapitalize("Locale must not be null");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertEquals("locale must not be null", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((int[]) null, 'A', 127, 10);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      String string0 = ")GaoubL`#2";
      String string1 = StringUtils.uncapitalize(")GaoubL`#2");
      assertTrue(string1.equals((Object)string0));
      assertEquals(")GaoubL`#2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst(")GaoubL`#2", "}'p`", "No arguments sources were found for @CartesianTest");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(")GaoubL`#2", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((int[]) null, 'K', 4722, 0);
      assertNull(string3);
      
      CharSequence charSequence0 = null;
      int int0 = StringUtils.countMatches((CharSequence) "No arguments sources were found for @CartesianTest", (CharSequence) null);
      assertEquals(0, int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string1));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(3320);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3320
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      HashSet<String> hashSet0 = new LinkedHashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string0 = StringUtils.left(" PM,>gXi1]-i+A", 46);
      assertEquals(" PM,>gXi1]-i+A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String string0 = StringUtils.left("vuzr9]3|=", 56);
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("vuzr9]3|=");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "vuzr9]3|=", "vuzr9]3|=");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("empty", "empty", "empty");
      assertEquals("empty", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, '');
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      String string0 = StringUtils.join(byteArray0, ',', (int) (byte)34, 0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      String string0 = StringUtils.capitalize("`");
      assertEquals("`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("f.|RV'W");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.capitalize("pyu_Xzo?aZDA($qS}lc");
      assertEquals("Pyu_Xzo?aZDA($qS}lc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("y:5YT:sN[dRs&+\"", "f.|RV'W", "Pyu_Xzo?aZDA($qS}lc");
      assertFalse(string1.equals((Object)string0));
      assertEquals("y:5YT:sN[dRs&+\"", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("q|uPl", "q|uPl");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("q|uPl", stringArray0);
      assertEquals(5, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-2048));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      String string0 = StringUtils.removePattern("%s %s.", "zrY9AV@ziPWkk=nx");
      assertEquals("%s %s.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "%s %s.", "{6]3#c~ufBAljJ,{;");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "{6]3#c~ufBAljJ,{;", (-1934));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zrY9V@ziPWkk=nx", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap(" has no clone method", "zrY9AV@ziPWkk=nx");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" has no clone method", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right(" has no clone method", (-1934));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny(" has no clone method", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "%s %s.", (CharSequence) "%s %s.", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) '}';
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.right("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "k~", charSequenceArray0[1], 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "F", (CharSequence) "F", 52);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      String string0 = StringUtils.right("h", 8198);
      assertEquals("h", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ")", (CharSequence) ")");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ")", (CharSequence) ")");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "q!,f?4&%!#", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("$^Q7&sMT");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      assertFalse(list0.contains("$^Q7&sMT"));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Z');
      assertEquals("$^Q7&sMT", string0);
      assertNotNull(string0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      String string1 = linkedList0.set(0, "3@5BBT");
      assertEquals("$^Q7&sMT", string1);
      assertNotNull(string1);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("$^Q7&sMT"));
      assertTrue(linkedList0.contains("3@5BBT"));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "$^Q7&sMT", (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$^Q7&sMT";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "$^Q7&sMT", (CharSequence) "$^Q7&sMT");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = linkedList0.add("$^Q7&sMT");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains("$^Q7&sMT"));
      
      String string2 = StringUtils.toRootUpperCase("3@5BBT");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.right("$^Q7&sMT", 759);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("$^Q7&sMT", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOfAny("$^Q7&sMT", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3@5BBT", (CharSequence) "3@5BBT", 0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NH&MsJ:3<", '}');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("0.0}-187.41091492}1167.474}0.0", 56);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0}-187.41091492}1167.474}0.0", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("NH&MsJ:3<");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "0.0}-187.41091492}1167.474}0.0", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "d9 ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String string0 = StringUtils.removeFirst(">05!k", ">05!k");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("N", "N");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chop("N");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'H');
      assertEquals("", string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", 8);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, '3');
      assertEquals("", string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      String string0 = StringUtils.join(intArray0, '+', 64, 64);
      assertEquals("", string0);
      assertArrayEquals(new int[] {64}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 64, 64);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replacePattern("{QT/XX", "9", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{QT/XX", string3);
      assertNotNull(string3);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 64;
      floatArray0[1] = (float) 64;
      floatArray0[2] = (float) 64;
      floatArray0[3] = (float) '+';
      floatArray0[4] = (float) '+';
      String string4 = StringUtils.join(floatArray0, '=', 10, 10);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertArrayEquals(new float[] {64.0F, 64.0F, 64.0F, 43.0F, 43.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("f.|RV'W");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "=}O";
      String string1 = StringUtils.prependIfMissingIgnoreCase("=}O", "=}O", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("=}O", string1);
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      
      String string2 = "Kbwa6'Bp}j\\G,";
      String string3 = StringUtils.abbreviateMiddle("Kbwa6'Bp}jG,", "iVZMv ls", 54);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Kbwa6'Bp}jG,", string3);
      assertNotNull(string3);
      
      String string4 = "";
      String string5 = StringUtils.stripStart("f.|RV'W", "t`^%s:m5MmQ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("f.|RV'W", string5);
      assertNotNull(string5);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "t`^%s:m5MmQ", (-32768), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -32768
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("\"_DgtKU3$$8AF]\"", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("NP^FP@z|.Z%");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replace("NP^FP@z|.Z%", "", "WgV6Ek~8 8c#_r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NP^FP@z|.Z%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(9, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissing("", "", stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(9, stringArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      String string0 = StringUtils.abbreviate("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", 8200);
      assertEquals("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("CYe", "CYe", (CharSequence[]) null);
      assertEquals("CYe", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String string0 = StringUtils.stripStart("fj", "fj");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      String string0 = StringUtils.trimToNull("J5[q");
      assertEquals("J5[q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, "St,ings us5 noK be Qull", 77, 77);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("St,ings us5 noK be Qull"));
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(10, charSequenceArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "6[@549aw2Y*ASmF(4", 40, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      String string0 = StringUtils.center("nQ~'>TG$lVR%E4|R$zB", Integer.MIN_VALUE, "contains '%s'.");
      assertEquals("nQ~'>TG$lVR%E4|R$zB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      String string0 = StringUtils.difference("", ")'t`gZLndxw@55/B!");
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ")'t`gZLndxw@55/B!", (CharSequence) " ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) null, ";=C!oo'^#KCy8u &gJ8", Integer.MAX_VALUE, 480);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("OdW+0WAdzr|@");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "OdW+0WAdzr|@");
      assertEquals("OdOdW+0WAdzr|@WOdW+0WAdzr|@+OdW+0WAdzr|@0OdW+0WAdzr|@WOdW+0WAdzr|@AdzrOdW+0WAdzr|@|OdW+0WAdzr|@@", string0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "OdW+0WAdzr|@", (CharSequence) "OdOdW+0WAdzr|@WOdW+0WAdzr|@+OdW+0WAdzr|@0OdW+0WAdzr|@WOdW+0WAdzr|@AdzrOdW+0WAdzr|@|OdW+0WAdzr|@@");
      assertEquals(84, int0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.5726704524732562);
      String string0 = StringUtils.replacePattern("qw,fZ,4&%!", "qw,fZ,4&%!", "qw,fZ,4&%!");
      assertEquals("qw,fZ,4&%!", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("qw,fZ,4&%!");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("qw,fZ,4&%!", "!");
      assertFalse(string1.equals((Object)string0));
      assertEquals("!qw,fZ,4&%!", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"_DgtKU3$$8AF]\"", "\"_DgtKU3$$8AF]\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[2] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\"_DgtKU3$$8AF]\"";
      String string1 = StringUtils.substringAfter("", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[0], charSequenceArray0[2]);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.chop("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      double double1 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.normalizeSpace("a-=");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("a-=", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("IssueExtension", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("IssueExtension", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String string0 = StringUtils.center("P:\"rw(7b'", 417, "tSiz92");
      assertEquals("tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92P:\"rw(7b'tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92tSiz92", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      String string0 = StringUtils.replaceAll("M@MuUZdgDLOn", "M@MuUZdgDLOn", "M@MuUZdgDLOn");
      assertEquals("M@MuUZdgDLOn", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank(" ", " ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(14, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", (-399), "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, ">");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-187.41091492);
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) (-187.41091492);
      String string0 = StringUtils.join(objectArray0, "FlqQkBJ4m]o");
      assertEquals("-187.41091492FlqQkBJ4m]o0.0FlqQkBJ4m]o-187.41091492", string0);
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("FlqQkBJ4m]o", "-187.41091492FlqQkBJ4m]o0.0FlqQkBJ4m]o-187.41091492");
      assertEquals(0.62, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "-187.41091492FlqQkBJ4m]o0.0FlqQkBJ4m]o-187.41091492", (CharSequence) "-187.41091492FlqQkBJ4m]o0.0FlqQkBJ4m]o-187.41091492");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("FlqQkBJ4m]o");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FlqQkBJ4m]", string1);
      assertNotNull(string1);
      
      double double1 = StringUtils.getJaroWinklerDistance("FlqQkBJ4m]o", "FlqQkBJ4m]");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      String string2 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      String string0 = StringUtils.remove("Culdnot resolve pa8amqter of type %s.", 'C');
      assertEquals("uldnot resolve pa8amqter of type %s.", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("uldnot resolve pa8amqter of type %s.", "Culdnot resolve pa8amqter of type %s.");
      assertEquals(0.99, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      String string0 = StringUtils.wrap("vuzr9]3|=", "vuzr9]3|=");
      assertEquals("vuzr9]3|=vuzr9]3|=vuzr9]3|=", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("vuzr9]3|=", "vuzr9]3|=vuzr9]3|=vuzr9]3|=");
      assertEquals(0.85, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      String string0 = StringUtils.chop("P");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "P");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("vuzr9]3|=", "l", "vuzr9]3|=");
      assertEquals("vuzr9]3|=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      String string0 = StringUtils.trim("I=");
      assertEquals("I=", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("I=", "p{InCombiningDiacriticalMarks}+");
      assertEquals(0.51, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      String string0 = StringUtils.chop("Y&*0m`P");
      assertEquals("Y&*0m`", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      objectArray0[1] = (Object) "Y&*0m`";
      objectArray0[2] = (Object) "Y&*0m`";
      objectArray0[3] = (Object) "Y&*0m`P";
      objectArray0[4] = (Object) "Y&*0m`P";
      objectArray0[5] = (Object) "Y&*0m`P";
      objectArray0[6] = (Object) "Y&*0m`";
      String string1 = StringUtils.join(objectArray0, "Y&*0m`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`", string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`", "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`");
      assertEquals(1.0, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`", (CharSequence) "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chop("vu4]w");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("vu4]", string2);
      assertNotNull(string2);
      
      double double1 = StringUtils.getJaroWinklerDistance("vu4]w", "Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`PY&*0m`Y&*0m`");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.39, double1, 0.01);
      
      String string3 = StringUtils.normalizeSpace("@FwxiZ*-");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("@FwxiZ*-", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      StringUtils.join((Object[]) stringArray0, "");
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(stringArray0[0], stringArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Cloneable type ", "Cloneable type ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("`", "`");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtils.join(floatArray0, '\u0004');
      assertEquals("0.0\u00040.0\u00040.0\u00040.0\u00040.0\u00040.0\u00040.0\u00040.0\u00040.0\u00040.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(">05!k", ">05!k");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)66;
      String string0 = StringUtils.swapCase("1z0QJAaR|6j2N");
      assertEquals("1Z0qjaAr|6J2n", string0);
      
      String string1 = StringUtils.truncate((String) null, (int) (byte)66);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "1Z0qjaAr|6J2n", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A";
      stringArray0[1] = "Y:01xHL!L1^amX2Vuvuzr9]3|=";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.leftPad("NyF5PVL_s0![", (-787));
      assertEquals("NyF5PVL_s0![", string0);
      
      String string1 = StringUtils.remove("\n", '>');
      String[] stringArray2 = StringUtils.split("NyF5PVL_s0![", "3d~,7#{+>+tyF", (-787));
      assertEquals(2, stringArray2.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("\n", "org.apache.commons.lang3.ObjectUtils", "Mn,L6=TYrJ!k}", (-787));
      assertTrue(string2.equals((Object)string1));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2616;
      shortArray0[2] = (short)1262;
      shortArray0[3] = (short)2625;
      String string3 = StringUtils.join(shortArray0, '>');
      assertEquals("0>2616>1262>2625", string3);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string0);
      
      StringUtils.join((List<?>) null, '}', 11, 1594);
      int int0 = StringUtils.lastOrdinalIndexOf("Object varargs must not be null", "Object varargs must not be null", 38);
      int[] intArray0 = StringUtils.toCodePoints("Object varargs must not be null");
      assertEquals(31, intArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '[';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      int int1 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null", charArray0);
      assertTrue(int1 == int0);
      
      StringUtils.join((short[]) null, '[');
      StringUtils.countMatches((CharSequence) "Object varargs must not be null", (CharSequence) null);
      StringUtils.substringAfter("<+", (String) null);
      StringUtils.leftPad((String) null, 32767);
      String string1 = StringUtils.abbreviate((String) null, ")", (-1), (-199));
      assertNull(string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, 'B', 10, (-199));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isAnyEmpty(charSequenceArray0);
      StringUtils.truncate("MKs#1R8$Q7=2U", 13, 13);
      StringUtils.mid("MKs#1R8$Q7=2U", 677, 127);
      String string0 = "j";
      int int0 = 4;
      StringUtils.center("j", 4, "U");
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.US;
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", '9', '9');
      StringUtils.removePattern("org.junitpioneer.jupiter.DisabledUntilExtension", "a4}");
      StringUtils stringUtils0 = new StringUtils();
      Stack<String> stack0 = new Stack<String>();
      StringUtils.valueOf((char[]) null);
      StringUtils.toCodePoints("p{InCombiningDiacriticalMarks}+");
      StringUtils.replaceOnceIgnoreCase("", " ", "6-o={<t`TMm");
      StringUtils.contains((CharSequence) null, 785);
      // Undeclared exception!
      try { 
        StringUtils.truncate("", 97, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      
      StringUtils.removeFirst(" ", " ");
      boolean boolean0 = StringUtils.isAlpha(" ");
      assertFalse(boolean0);
      
      StringUtils.capitalize("");
      String string0 = StringUtils.replaceIgnoreCase("9!%&!%YQFZ;h0NV[EB ", "", "9!%&!%YQFZ;h0NV[EB ");
      assertEquals("9!%&!%YQFZ;h0NV[EB ", string0);
      
      String string1 = StringUtils.rightPad("t'C!gzg3PvsYhV>a(\"", 1000, "");
      assertEquals("t'C!gzg3PvsYhV>astring1);
      
      String string2 = StringUtils.abbreviateMiddle("maxWith cannot be negative", "F7Cmee'HY ", 24);
      assertEquals("maxWithF7Cmee'HY egative", string2);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      StringUtils.chop("Y&*0m`P");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Y&*0m`";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y&*0m`";
      stringArray0[1] = " vs ";
      String string0 = "%o{N1(%hZ~urHy";
      StringUtils.abbreviateMiddle("%o{N1(%hZ~urHy", "iVZMv ls", 8);
      String string1 = "i5yhyJG: Lze8USFOr:";
      StringUtils.stripStart("i5yhyJG: Lze8USFOr:", "%o{N1(%hZ~urHy");
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      Stack<Object> stack0 = new Stack<Object>();
      StringUtils.join((List<?>) stack0, "i5yhyJG: Lze8USFOr:", 0, 0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("GD;rn");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // GD;rn
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.truncate(" ", 441, 441);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("L", (String) null, 8);
      assertEquals("L", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("49!br8zRH3Ij)`3");
      assertEquals("49!br8zRH3Ij)`3", string0);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Locale must not be null");
      assertEquals("Locale must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, 'E');
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      String string0 = StringUtils.replaceChars(">v7 ", '\u001D', '\u001D');
      assertEquals(">v7 ", string0);
      assertNotNull(string0);
      
      StringUtils.substringAfterLast("6LM]TP\"A%.>e_QK", "6LM]TP\"A%.>e_QK");
      String string1 = StringUtils.rightPad("Could not provide arguments because of exception.", 3397, '\u001D');
      boolean boolean0 = StringUtils.isAlphaSpace(">v7 ");
      assertFalse(boolean0);
      
      StringUtils.getDigits("");
      String string2 = StringUtils.replaceAll("Could not provide arguments because of exception.", "", ">v7 ");
      assertEquals(">v7 C>v7 o>v7 u>v7 l>v7 d>v7  >v7 n>v7 o>v7 t>v7  >v7 p>v7 r>v7 o>v7 v>v7 i>v7 d>v7 e>v7  >v7 a>v7 r>v7 g>v7 u>v7 m>v7 e>v7 n>v7 t>v7 s>v7  >v7 b>v7 e>v7 c>v7 a>v7 u>v7 s>v7 e>v7  >v7 o>v7 f>v7  >v7 e>v7 x>v7 c>v7 e>v7 p>v7 t>v7 i>v7 o>v7 n>v7 .>v7 ", string2);
      
      String string3 = StringUtils.unwrap("Could not provide arguments because of exception.", '\u001D');
      assertFalse(string3.equals((Object)string1));
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 3397;
      String string4 = StringUtils.normalizeSpace(">v7 C>v7 o>v7 u>v7 l>v7 d>v7  >v7 n>v7 o>v7 t>v7  >v7 p>v7 r>v7 o>v7 v>v7 i>v7 d>v7 e>v7  >v7 a>v7 r>v7 g>v7 u>v7 m>v7 e>v7 n>v7 t>v7 s>v7  >v7 b>v7 e>v7 c>v7 a>v7 u>v7 s>v7 e>v7  >v7 o>v7 f>v7  >v7 e>v7 x>v7 c>v7 e>v7 p>v7 t>v7 i>v7 o>v7 n>v7 .>v7 ");
      assertEquals(">v7 C>v7 o>v7 u>v7 l>v7 d>v7 >v7 n>v7 o>v7 t>v7 >v7 p>v7 r>v7 o>v7 v>v7 i>v7 d>v7 e>v7 >v7 a>v7 r>v7 g>v7 u>v7 m>v7 e>v7 n>v7 t>v7 s>v7 >v7 b>v7 e>v7 c>v7 a>v7 u>v7 s>v7 e>v7 >v7 o>v7 f>v7 >v7 e>v7 x>v7 c>v7 e>v7 p>v7 t>v7 i>v7 o>v7 n>v7 .>v7", string4);
      
      String string5 = StringUtils.repeat("q)hD5v9", (-892));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      int int0 = StringUtils.compare((String) null, "B_", false);
      assertEquals(1, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("iGy(@v+6>.#p");
      assertEquals("iGy(@v+6>.#p", string0);
      
      int int0 = StringUtils.compare("T)A", "L'2)w3q7t8q[hpBGk", false);
      assertEquals(8, int0);
      
      StringUtils.truncate((String) null, 0, 110);
      StringUtils.trim((String) null);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'y');
      assertEquals("0", string1);
      
      boolean boolean0 = StringUtils.isBlank("iGy(@v+6>.#p");
      assertFalse(boolean0);
      
      String string2 = StringUtils.normalizeSpace("/i) Xf~BovU4");
      assertEquals("/i) Xf~BovU4", string2);
      
      StringUtils.abbreviateMiddle("", (String) null, (short)0);
      String[] stringArray0 = StringUtils.split("HXL", 'y');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1120.1019653207;
      String string3 = StringUtils.join(doubleArray0, '&');
      assertEquals("0.0&1120.1019653207", string3);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 7;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 16;
      intArray0[3] = (int) (short)0;
      String string4 = StringUtils.join(intArray0, 'y');
      assertEquals("7y0y16y0", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      int int0 = StringUtils.getFuzzyDistance("=M", "=M", locale0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      
      StringUtils.join((double[]) null, '/', 16, 16);
      StringUtils.containsWhitespace((CharSequence) null);
      String string1 = StringUtils.join((Object[]) stringArray0, '0');
      assertNotNull(string1);
      
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      StringUtils.chop("");
      String string2 = StringUtils.trimToEmpty(" must return `CartesianProductTest.Sets`.");
      assertEquals("must return `CartesianProductTest.Sets`.", string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "", 315);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("!");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      StringUtils.reverseDelimited("r~z:\"&:'j,KQ", 'r');
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", (-288));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "offset cannot be negative";
      stringArray0[1] = "VhX&t;prNyYGB.v+";
      stringArray0[2] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "nv[!;,d{>>L&$z$]k";
      stringArray0[4] = "org.junitpioneer.jupiter.json.JsonClasspathSourceArgumentsProvider";
      stringArray0[5] = "org.apache.commons.lang3.Charsets";
      stringArray0[6] = "*!+mWAdG";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Jd&P", 100);
      assertEquals("&P", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("nv[!;,d{>>L&$z$]k", "vuzr9]3|=");
      assertEquals("nv[!;,d{>>L&$z$]k", string2);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      StringUtils.left("vuzr9]3|=", 67);
      boolean boolean0 = StringUtils.isAlpha("vuzr9]3|=");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("aXWit+ cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      StringUtils.rightPad("aXWit+ cannot be negative", 3397, '*');
      StringUtils.isAlphaSpace("aXWit+ cannot be negative");
      String string0 = StringUtils.getDigits("vuzr9]3|=");
      assertEquals("93", string0);
      
      String string1 = StringUtils.uncapitalize("vuzr9]3|=");
      assertEquals("vuzr9]3|=", string1);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      String string0 = StringUtils.center("e loop is the input of another", 3295, 'V');
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("e loop is the input of another", 2970);
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Search and Replace array lengths don't match: ";
      StringUtils.join(objectArray0, "e loop is the input of another", 3295, (-2000));
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) ":e7j`Gt/XgI'${";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) ":e7j`Gt/XgI'${";
      charSequenceArray0[4] = (CharSequence) "";
      String string2 = StringUtils.right("(", 5);
      assertEquals("(", string2);
      
      charSequenceArray0[5] = (CharSequence) "(";
      boolean boolean0 = StringUtils.isBlank(charSequenceArray0[5]);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'V';
      String string3 = StringUtils.join(charArray0, 'V');
      assertEquals("4VV", string3);
      
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      String string0 = StringUtils.defaultString("j");
      assertEquals("j", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "j", "j");
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripEnd("j", "j");
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("j");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      StringUtils.removePattern("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx");
      StringUtils.containsOnly((CharSequence) "", "zrY9AV@ziPWkk=nx");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zrY9AV@ziPWkk=nx", "zrY9AV@ziPWkk=nx", (-1934));
      StringUtils.join((Object[]) stringArray0);
      String string0 = ")";
      StringUtils.abbreviate("", ")", 122, 122);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.substringAfterLast("", 3);
      StringUtils.equalsIgnoreCase(")", "");
      StringUtils.repeat(")", "", (-1934));
      StringUtils.containsAny((CharSequence) ")", (CharSequence[]) null);
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("TC%.(:oQn*n-", 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("U~*J:danv3n{4^;L/ ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertEquals("Strings must not be null", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '[';
      charArray0[2] = 'h';
      String string1 = StringUtils.chomp("FM%");
      assertEquals("FM%", string1);
      
      String string2 = StringUtils.center(" does not have data element at ", (-142));
      assertEquals(" does not have data element at ", string2);
      
      StringUtils.stripAll((String[]) null);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "0.0}1167.474}0.0}0.0");
      assertNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("C%", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      String string3 = StringUtils.center("org.apache.commons.lang3.StringUtils9Nj~x6", 1);
      assertEquals("org.apache.commons.lang3.StringUtils9Nj~x6", string3);
      
      boolean boolean1 = StringUtils.isBlank("org.apache.commons.lang3.StringUtils9Nj~x6");
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.join(charArray0, '4');
      assertNotNull(string4);
      assertEquals("?4[4h4\u00004\u00004\u0000", string4);
      
      boolean boolean2 = StringUtils.equalsAny("FM%", (CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)7;
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      String string1 = StringUtils.repeat("\u0000&&\uFFFD]\u0007", 3597);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string1;
      stringArray0[1] = "\u0000&&\uFFFD]\u0007";
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string1;
      stringArray0[6] = "\u0000&&\uFFFD]\u0007";
      stringArray0[7] = string1;
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.normalizeSpace("\u0000&&\uFFFD]\u0007");
      assertEquals("&&\uFFFD]", string3);
      
      String string4 = StringUtils.rightPad("eq +AQ{", (int) (byte)38, "1fph|!!,rUyUq9W(");
      assertEquals("eq +AQ{1fph|!!,rUyUq9W(1fph|!!,rUyUq9W", string4);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      StringUtils.replaceChars("yF={", 'D', 'D');
      StringUtils.indexOf((CharSequence) "yF={", (CharSequence) "yF={", (-1720));
      StringUtils.isAllLowerCase("yF={");
      StringUtils.wrapIfMissing("yF={", 'D');
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "DyF={D";
      charSequenceArray0[1] = (CharSequence) "DyF={D";
      charSequenceArray0[2] = (CharSequence) "DyF={D";
      StringUtils.isNoneEmpty(charSequenceArray0);
      String string0 = "'+m~TtC}.71+F)u+\\u*";
      StringUtils.abbreviateMiddle("yF={", string0, 54);
      String string1 = "";
      StringUtils.stripStart("DyF={D", "");
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      StringUtils.join((List<?>) arrayList0, string0, 0, (-1720));
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      int int0 = StringUtils.getFuzzyDistance("5", "5", locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("<14*O`UPZe ^vt< \\Z", "<14*O`UPZe ^vt< \\Z", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NH&MsJ:3<", '}');
      String string0 = StringUtils.SPACE;
      int int0 = StringUtils.ordinalIndexOf("NH&MsJ:3<", " ", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = " ";
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertEquals(" ", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      String string2 = StringUtils.substringAfterLast(" ", (-773));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.equalsAny("", stringArray0);
      assertTrue(boolean1 == boolean0);
      
      StringUtils.remove(":b1>CwAHQyLl`B]olS>", '\"');
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.TAIWAN;
      locale1.getUnicodeLocaleKeys();
      Locale.setDefault(locale1);
      locale0.getDisplayCountry(locale1);
      int int1 = StringUtils.getFuzzyDistance(":b1>CwAHQyLl`B]olS>", ":b1>CwAHQyLl`B]olS>", locale0);
      assertEquals(55, int1);
      
      String[] stringArray2 = StringUtils.split("l", '}');
      assertEquals(1, stringArray2.length);
      
      StringUtils.getDigits("");
      StringUtils.center(":b1>CwAHQyLl`B]olS>", 1367, '@');
      String string3 = StringUtils.center("F)6<%E", 55, 'c');
      assertEquals("ccccccccccccccccccccccccF)6<%Eccccccccccccccccccccccccc", string3);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String string0 = StringUtils.removePattern("#", "#");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "#", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("<LBo", "~gM");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Cannot get the toString of a null object ");
      boolean boolean0 = StringUtils.equals((CharSequence) "Cannot get the toString of a null object ", (CharSequence) charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A";
      stringArray0[1] = "Y:01xHL!L1^amX2Vuvuzr9]3|=";
      StringUtils.stripAll(stringArray0);
      StringUtils.leftPad("NyF5PVL_s0![", (-787));
      StringUtils.remove("\n", '>');
      StringUtils.split("NyF5PVL_s0![", "\n", (-787));
      StringUtils.isAlphanumeric("\n");
      String string0 = StringUtils.join((char[]) null, '>', 1265, (-787));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'i');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(">05!k", ">05!k");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      String string0 = StringUtils.rotate("&Z3 B&n", (-3080));
      assertEquals("&Z3 B&n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "&Z3 B&n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "r~7 2X+#%2k*<5+F^";
      StringUtils.isNoneEmpty(charSequenceArray0);
      StringUtils.indexOfAny((CharSequence) null, "r~7 2X+#%2k*<5+F^");
      StringUtils.rotate("Y:01xHL!L1^amX2Vu", 2466);
      StringUtils.substringAfterLast("r~7 2X+#%2k*<5+F^", "r~7 2X+#%2k*<5+F^");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 16);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "e loop is the input of another", (CharSequence) "e loop is the input of another", (-1986));
      assertEquals(0, int0);
      
      String string0 = StringUtils.replaceAll("Minimum abbreviation width with offset is %d", "M<4ah", "H|EI)");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = '/';
      charArray0[7] = 'z';
      charArray0[8] = 's';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chop("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertNotNull(string1);
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`", string1);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      String string0 = "\"#ol@\"";
      StringUtils.abbreviate("\"#ol@\"", 747, 64);
      StringUtils.substringAfterLast("w!KT~h1", "\"#ol@\"");
      StringUtils.indexOfIgnoreCase((CharSequence) "\"#ol@\"", (CharSequence) "\"#ol@\"", 747);
      String string1 = "";
      String string2 = "p$$q{_";
      StringUtils.splitByWholeSeparator("", "p$$q{_");
      StringUtils.equals((CharSequence) "p$$q{_", (CharSequence) "");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'e';
      charArray0[2] = 'D';
      StringUtils.join(charArray0, 'B', (-1), (-455));
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.add("p$$q{_");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        treeSet0.add(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 284);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 284;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 284;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) 284;
      floatArray0[8] = (float) 284;
      String string1 = StringUtils.join(floatArray0, 's', (-1), (-1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      String string0 = StringUtils.join(doubleArray0, '\u0080');
      assertEquals("0.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("0.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0\u00800.0");
      assertEquals(75, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      StringUtils.replace("", "}oV@9T", "", 10);
      StringUtils.isEmpty("");
      StringUtils.replaceFirst("ukipZo[$oc>pRV[~`(x", "}oV@9T", "");
      StringUtils.countMatches((CharSequence) "", (CharSequence) "ukipZo[$oc>pRV[~`(x");
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'G';
      floatArray0[2] = (float) 'G';
      floatArray0[3] = (float) '>';
      StringUtils.join(floatArray0, '9');
      StringUtils.indexOfAny((CharSequence) "ukipZo[$oc>pRV[~`(x", "-89y-107y109k~");
      StringUtils.replaceOnce("}oV@9T", ";", "ukipZo[$oc>pRV[~`(x");
      StringUtils.getJaroWinklerDistance("}oV@9T", "");
      String string0 = StringUtils.join((double[]) null, '>');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      StringUtils.center((String) null, 108, (String) null);
      StringUtils.rightPad("xF>/", 108, "Threshold must not be negative");
      StringUtils.compareIgnoreCase("eVn`h+]<0yHU30s", (String) null, false);
      StringUtils.join((float[]) null, 'B');
      StringUtils.indexOf((CharSequence) "eVn`h+]<0yHU30s", (CharSequence) null);
      StringUtils.substringsBetween((String) null, (String) null, " has no clone method");
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      linkedList0.push(locale_Category0);
      linkedList0.add(locale_Category0);
      linkedList0.toArray();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertTrue(listIterator0.hasPrevious());
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("DISPLAYDISPLAY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      String string0 = StringUtils.replace("", "}oV@9T", "", 10);
      assertEquals("", string0);
      
      StringUtils.isEmpty("");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2058.19615549282);
      String string1 = StringUtils.join(doubleArray0, 'Q');
      assertEquals("0.0Q-2058.19615549282", string1);
      
      StringUtils.lastIndexOf((CharSequence) "}oV@9T", (CharSequence) "0.0Q-2058.19615549282", (-1399));
      StringUtils.isWhitespace("");
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      Stack<String> stack0 = new Stack<String>();
      Iterator<String> iterator0 = stack0.iterator();
      StringUtils.join(iterator0, "0.0Q-2058.19615549282");
      String string2 = StringUtils.rightPad("\r", 3, '}');
      assertEquals("\r}}", string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = StringUtils.join(doubleArray0, 'n');
      assertEquals("0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("0.0", "0.0");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      StringUtils.substringsBetween("0/8I :=", ")qw}", (String) null);
      int int0 = StringUtils.indexOf((CharSequence) "cV;dCVz+EQfO", (CharSequence) "cV;dCVz+EQfO");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      String string0 = StringUtils.join(iterator0, " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      StringUtils.stripToNull(" ");
      Locale locale0 = Locale.KOREA;
      String string1 = StringUtils.rightPad("NH&MsJ:3<", 9976, 'l');
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("u0?j[j nmI)W~I", 'v');
      assertEquals("u0?j[j nmI)W~I", string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.normalizeSpace("Ah0f4?:]");
      assertEquals("Ah0f4?:]", string3);
      
      String string4 = StringUtils.stripStart("d3,S.EWuSu-d3,S.EWuSu-d3,S.EWuSu-d3,S.EWuSu-d3,S.EWuSu-.EWuSu-", " ");
      assertEquals("d3,S.EWuSu-d3,S.EWuSu-d3,S.EWuSu-d3,S.EWuSu-d3,S.EWuSu-.EWuSu-", string4);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "FM%");
      assertEquals("Strings must not be null", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '?';
      StringUtils stringUtils0 = new StringUtils();
      Stack<String> stack0 = new Stack<String>();
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("!pKYbBD_!/EGIVp'^", "!pKYbBD_!/EGIVp'^", 2);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("maxWith cannot be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-187.41091492);
      doubleArray0[2] = 1167.474;
      doubleArray0[3] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals("0.0}-187.41091492}1167.474}0.0", string0);
      
      StringUtils.lastIndexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0", 0);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(":BFPT", "0.0}-187.41091492}1167.474}0.0", 0);
      boolean boolean0 = StringUtils.isWhitespace(":BFPT");
      assertFalse(boolean0);
      
      StringUtils.indexOf((CharSequence) "0.0}-187.41091492}1167.474}0.0", (CharSequence) "0.0}-187.41091492}1167.474}0.0");
      StringUtils stringUtils0 = new StringUtils();
      Stack<String> stack0 = new Stack<String>();
      Iterator<String> iterator0 = stack0.iterator();
      StringUtils.join(iterator0, "0.0}-187.41091492}1167.474}0.0");
      String string1 = StringUtils.rightPad("", 1, 'P');
      assertEquals("P", string1);
      
      StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) ":BFPT");
      String string2 = StringUtils.join((Object[]) stringArray0, 'b');
      assertNotNull(string2);
      assertEquals(":BFPT", string2);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoader0.iterator();
      serviceLoader0.iterator();
      String string0 = StringUtils.join((Iterable<?>) serviceLoader0, '!');
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 1442);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      int[] intArray0 = new int[10];
      String string0 = StringUtils.join(intArray0, '4');
      assertEquals("0404040404040404040", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, "c\"oPU=?Kl9Z");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) "");
      Stream<Object> stream0 = stack0.stream();
      stack0.add((Object) "");
      stack0.remove((Object) stream0);
      ListIterator<Object> listIterator0 = stack0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, 'Y');
      assertTrue(listIterator0.hasPrevious());
      
      StringUtils.splitByCharacterType("");
      StringUtils.replaceIgnoreCase("KQQal|", (String) null, "", 1);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'Y';
      intArray0[3] = 1;
      intArray0[4] = (int) 'Y';
      StringUtils.join(intArray0, 'Y');
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "1Y89Y89Y1Y89", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'q');
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("DISPLAY");
      assertEquals("DISPLAY", string1);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      StringUtils.replaceOnce("6b@jgi2:0Y,^'ode@", "6b@jgi2:0Y,^'ode@", "6b@jgi2:0Y,^'ode@");
      StringUtils.stripEnd("6b@jgi2:0Y,^'ode@", "A");
      StringUtils.chomp("6b@jgi2:0Y,^'ode@");
      StringUtils.center((String) null, (-142));
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("(?/lrZ}FOjbURuTt,OS", (String) null);
      StringUtils.compareIgnoreCase("6b@jgi2:0Y,^'ode@", "a4r.;w26");
      StringUtils.isAllUpperCase("6b@jgi2:0Y,^'ode@");
      StringUtils.isBlank("bF^#[L~Binkr");
      StringUtils.splitByCharacterTypeCamelCase("kIyzi>&#PW_<Ejfg");
      StringUtils.remove("", '?');
      StringUtils.wrapIfMissing("&qww*C|7om(1", "`06=m&pr*l!mQa#jx");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("'| MS]7gw:", (String) null, "'| MS]7gw:");
      assertEquals("'| MS]7gw:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("'| MS]7gw:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '[';
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.substringsBetween("yl>d9h", "!%ocd)C(/suiJ%Mk", "Could not provide arguments because of exception.");
      String string0 = StringUtils.join((int[]) null, '?');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase(".>;sTDw3/~U77V", "^ND");
      assertEquals((-48), int0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String string0 = StringUtils.chomp("WyZ<O");
      assertEquals("WyZ<O", string0);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = StringUtils.join((Iterable<?>) linkedList0, 'J');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      StringUtils.split("");
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.center("Strings must not be null", (-1));
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[1] = object0;
      StringUtils.substringBetween(" vs ", " vs ", " vs ");
      StringUtils.removeFirst((String) null, (String) null);
      StringUtils.remove("9", (String) null);
      StringUtils.chomp("9");
      StringUtils.center("cV;dCVz+EQfO", (-1753));
      StringUtils.split((String) null, "S8RZU6");
      StringUtils.splitPreserveAllTokens(" vs ", "cV;dCVz+EQfO");
      StringUtils.defaultString((String) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1753);
      doubleArray0[1] = (double) (-1753);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 'J';
      StringUtils.join(doubleArray0, '[', (-1), (-1));
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("WikZh<Pi~/D%L");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Stream<Object> stream0 = stack0.stream();
      stack0.add((Object) "");
      stack0.remove((Object) stream0);
      ListIterator<Object> listIterator0 = stack0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, 'Y');
      assertTrue(listIterator0.hasPrevious());
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      StringUtils.replaceIgnoreCase("KQQal|", (String) null, "", 1);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'Y';
      intArray0[3] = 1;
      intArray0[4] = (int) 'Y';
      StringUtils.join(intArray0, 'Y');
      StringUtils.chomp("KQQal|");
      StringUtils.center("", (-142));
      StringUtils.stripAll(stringArray0);
      StringUtils.splitPreserveAllTokens("", "");
      int int0 = StringUtils.compareIgnoreCase("WSe<", "k9D-?/YLIZ7$U8");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Method( `", "Method( `", "Method( `");
      assertEquals("Method( `", string0);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      StringUtils.defaultString("r~7 2X+#%2k*<5+F^");
      int int0 = StringUtils.indexOfAny((CharSequence) "r~7 2X+#%2k*<5+F^", "maxWith cannot be negative");
      assertEquals(3, int0);
      
      String string0 = StringUtils.rotate("StdIoExtension is active but no %s annotation was found.", 217);
      assertEquals("tension is active but no %s annotation was found.StdIoEx", string0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", (String) null, 3224);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("e5a\"v%rBOa)ec&");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = '?';
      charArray0[4] = '}';
      charArray0[5] = '>';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      StringUtils.join(shortArray0, 'Z');
      StringUtils.startsWithIgnoreCase("e5a\"v%rBOa)ec&", "e5a\"v%rBOa)ec&");
      StringUtils.leftPad("org.apache.commons.lang3.StringUtils", 3224, "Supplied value must be a valid byte literal between -128 and 127: [");
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("org.apache.commons.lang3.StringUtils", (-1), 529);
      assertEquals("s", string1);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      String string0 = StringUtils.substring("pj<R.:~", 322, 322);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 'C', 780, 780);
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("org.junitpioneer.vintage.ExpectedExceptionExtension", "", 780);
      String string1 = StringUtils.substring("Minimum abbreviation width is %d", 3224, 3224);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width is %d", "a(SFqU]r7Dr");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      String string0 = StringUtils.rotate("Could not resolve parameter of type %s.", (-1));
      assertEquals("ould not resolve parameter of type %s.C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      String string0 = StringUtils.remove("7w3ixpaw(^M@", 'C');
      assertEquals("7w3ixpaw(^M@", string0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1865);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1PR}+A3nU!3lv'k*58q";
      stringArray0[1] = "`]L so{&r`M~>";
      stringArray0[3] = ">v@FZk[qClJ0hI?~eK";
      stringArray0[4] = "\"_DgtKU3$$8AF]\"\"_DgtKU3$$8AF]\"";
      stringArray0[5] = "t(ia";
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      StringUtils.endsWithIgnoreCase("t(ia", "\"_DgtKU3$$8AF]\"\"_DgtKU3$$8AF]\"");
      StringUtils.substring("|tX:Hf~Ng1x;aP", 0, 0);
      StringUtils.remove(">v@FZk[qClJ0hI?~eK", 'l');
      String string0 = StringUtils.remove((String) null, 'P');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("),{{B/", "),{{B/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      StringUtils.stripStart("vuzr9]3|=", " ");
      StringUtils.isAlphaSpace("vuzr9]3|=");
      String[] stringArray0 = new String[0];
      StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray0);
      String string0 = StringUtils.substring("vuzr9]3|=", (-719), 5);
      StringUtils.lastIndexOf((CharSequence) "vuzr9", (CharSequence) "vuzr9");
      StringUtils.containsAny((CharSequence) "vuzr9", (CharSequence[]) stringArray0);
      StringUtils.substringsBetween("lm)UY/Xue {~B#2r^rB=l7@y9uZ|/C", (String) null, "vuzr9]3|=");
      Locale locale0 = Locale.CHINA;
      String string1 = StringUtils.lowerCase("'n", locale0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      String string0 = StringUtils.rotate("%o{N1(%hZ~urHy", 3);
      assertEquals("rHy%o{N1(%hZ~u", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'f');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      String string0 = StringUtils.remove("Could not resolve parameter of type %s.", 'C');
      assertEquals("ould not resolve parameter of type %s.", string0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">&MSmn(%)dr>#i";
      stringArray0[1] = "";
      stringArray0[2] = "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.";
      stringArray0[3] = "";
      stringArray0[4] = "org.junitpioneer.jupiter.RetryingTestExtension";
      stringArray0[5] = "*U5~~L-D,";
      stringArray0[6] = "";
      stringArray0[7] = "l'Dr{QY.1s/_vr-X";
      stringArray0[8] = ".wLk_PGDaX";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(">&MSmn(%)dr>#i", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      
      StringUtils.endsWithIgnoreCase("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", ".wLk_PGDaX");
      String string1 = StringUtils.substring("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", 0, 984);
      assertEquals("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", string1);
      
      StringUtils.remove("By+:Ruy%}=[E+Y'", 'l');
      String string2 = StringUtils.remove("", 'l');
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("t");
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("f.|RV'W");
      StringUtils.prependIfMissingIgnoreCase("=}O", "=}O", stringArray0);
      int int0 = 0;
      String string0 = " ";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", 57, (-1106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1865);
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
      
      StringUtils.firstNonBlank((String[]) null);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("L1^amX2Vu", (String) null, (-1724));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("d's0jf_V$B[h<J6.z");
      assertNotNull(stringArray1);
      assertEquals(16, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.subList(0, 0);
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.wrap("*(;7d]Wc$<", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", string0);
      
      StringUtils.firstNonBlank(stringArray0);
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("=VNqJVXQ)J@ss,", "Search and Replace array lengths don't match: *(;7d]Wc$<Search and Replace array lengths don't match: ", 9);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("*(;7d]Wc$<");
      assertEquals(10, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissing((String) null, "\r", charSequenceArray0);
      assertNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("\rCkj*Mx[#*d+/1r|Q2", (String) null);
      assertNotNull(string1);
      assertEquals("\rCkj*Mx[#*d+/1r|Q2", string1);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      String string0 = StringUtils.defaultString("=M");
      String[] stringArray0 = Locale.getISOLanguages();
      boolean boolean0 = StringUtils.isAllLowerCase("=M");
      String string1 = StringUtils.prependIfMissing("=M", "=M", stringArray0);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("=M");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "Method( `", (CharSequence) "Method( `");
      assertEquals("Method( `", charSequence0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing((String) null, "", charSequenceArray0);
      assertNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "u^F/<+{ive";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("u^F/<+{ive", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      String string0 = StringUtils.CR;
      StringUtils.isAlphaSpace("\r");
      StringUtils.defaultIfBlank((CharSequence) "\r", (CharSequence) "\r");
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "\r");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B-Fw+z", "B-Fw+z");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("=M");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      try { 
        StringUtils.toString(byteArray0, "Search and Replace array lengths don't match: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      StringUtils.join(objectArray0, '-');
      StringUtils.indexOfDifference((CharSequence[]) null);
      String string0 = "!Z|HZ!agW[I%";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("!Z|HZ!agW[I%", "--------", 21, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "\r";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Strings must not be null", 'r');
      assertNotNull(string0);
      assertEquals("ings must not be nullrSt", string0);
      
      String string1 = StringUtils.remove("Strings must not be null", 'r');
      assertEquals("Stings must not be null", string1);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[1] = object0;
      StringUtils.join(objectArray0, '-');
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      StringUtils.abbreviate("<7e^iMi*y\"%+s;J", "N", 56, 56);
      String string0 = StringUtils.strip("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String string0 = StringUtils.defaultString("OdW+0WAdzr|@");
      assertEquals("OdW+0WAdzr|@", string0);
      
      String string1 = StringUtils.stripEnd("\r", (String) null);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("OdW+0WAdzr|@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      StringUtils.valueOf(charArray0);
      StringUtils.trimToNull("O");
      StringUtils.startsWith("O", "O");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "O";
      charSequenceArray0[1] = (CharSequence) "O";
      charSequenceArray0[2] = (CharSequence) "O";
      charSequenceArray0[3] = (CharSequence) "O";
      charSequenceArray0[4] = (CharSequence) "O";
      charSequenceArray0[5] = (CharSequence) "O";
      charSequenceArray0[6] = (CharSequence) "O";
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.abbreviate("O", 3009);
      StringUtils.stripStart("O", "O");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      StringUtils.join((List<?>) arrayList0, "O", 3009, 15);
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, "O", charSequenceArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.stripToEmpty(" ");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String string0 = StringUtils.wrap("GY<<`Atbm-)fe5a\"v%rBOa)ec&", ":6");
      assertEquals(":6GY<<`Atbm-)fe5a\"v%rBOa)ec&:6", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ":6GY<<`Atbm-)fe5a\"v%rBOa)ec&:6", "$n+QC&}Uy}fLrUIParameter has to be annotated with ");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("}oV@9T", "3~j", 10);
      StringUtils.join((Object[]) stringArray0);
      String string1 = StringUtils.abbreviate("3~j", "", 4954, (-1934));
      assertEquals("3~j", string1);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("GY<<`Atbm-)fe5a\"v%rBOa)ec&", stringArray0);
      assertFalse(boolean1);
      
      StringUtils.containsIgnoreCase("GY<<`Atbm-)fe5a\"v%rBOa)ec&", (CharSequence) null);
      boolean boolean2 = StringUtils.startsWithAny(")", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("N", 'w');
      assertEquals("N", string0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      String string0 = StringUtils.removeFirst(" ", " ");
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 284);
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 284;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 284;
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", " ");
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.remove(" ", '{');
      assertEquals(" ", string1);
      
      String string2 = StringUtils.remove("", 'D');
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      StringUtils.substringAfterLast("zrY9AV@ziPWkk=nx", "%s %s.");
      StringUtils.stripToNull("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      StringUtils.containsNone((CharSequence) "zrY9AV@ziPWkk=nx", charArray0);
      StringUtils.join((Object[]) null, 'd');
      String[] stringArray0 = new String[9];
      stringArray0[0] = "zrY9AV@ziPWkk=nx";
      stringArray0[1] = "%s %s.";
      stringArray0[2] = "en%r<<MlWFU'a";
      stringArray0[3] = "";
      stringArray0[4] = "zrY9AV@ziPWkk=nx";
      stringArray0[5] = "";
      stringArray0[6] = "{6]3#c~ufBAljJ,{;";
      stringArray0[7] = null;
      stringArray0[8] = null;
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "{6]3#c~ufBAljJ,{;");
      String string0 = StringUtils.leftPad((String) null, (-1), "Y:01xHL!L1^amX2Vuorg.apache.commons.lang3.StringUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, (-322), (-322));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      StringUtils.chop("\n\n");
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      String string0 = StringUtils.leftPad("Locale must not be null", (int) '^', '^');
      assertNotNull(string0);
      assertEquals("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Locale must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String string0 = StringUtils.center("1RTi/![", 10);
      assertEquals(" 1RTi/![  ", string0);
      
      boolean boolean0 = StringUtils.isBlank(" 1RTi/![  ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      String string0 = StringUtils.repeat(".", 13);
      assertNotNull(string0);
      assertEquals(".............", string0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      String string0 = StringUtils.strip(">oc|k", ">oc|k");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      String string0 = StringUtils.chop("BiYaLFstCfZ$?d<");
      assertEquals("BiYaLFstCfZ$?d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      StringUtils.swapCase("Display name 'us' %s");
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("U", 'U');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (int) (short)1, "");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      StringUtils.defaultString("iTiXQI<R=~");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "iTiXQI<R=~";
      charSequenceArray0[1] = (CharSequence) "iTiXQI<R=~";
      charSequenceArray0[2] = (CharSequence) "iTiXQI<R=~";
      StringUtils.isNoneEmpty(charSequenceArray0);
      StringUtils.indexOfAny(charSequenceArray0[1], "t]`m2l`n=}i0dKWh");
      String string0 = StringUtils.substringBetween("t]`m2l`n=}i0dKWh", "", "OOOOOOOOOOO");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      StringUtils.substringBetween("[ NzH+{", "%agUdVR", (String) null);
      String string0 = StringUtils.stripToNull("%agUdVR");
      assertNotNull(string0);
      assertEquals("%agUdVR", string0);
      
      String string1 = StringUtils.center("%agUdVR", 3204, 'J');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      StringUtils.stripToNull((String) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) string1;
      charSequenceArray0[2] = (CharSequence) "%agUdVR";
      charSequenceArray0[3] = (CharSequence) "%agUdVR";
      charSequenceArray0[4] = (CharSequence) null;
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'r');
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[5] = (CharSequence) string2;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) string1;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      
      String string3 = StringUtils.chop("%agUdVR");
      assertEquals("%agUdV", string3);
      
      String string4 = StringUtils.abbreviate((String) null, "HFz", 3204, 0);
      assertNull(string4);
      
      String string5 = StringUtils.strip("\r");
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      String string0 = StringUtils.strip("z9]3|=");
      assertEquals("z9]3|=", string0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'j';
      charArray0[2] = '-';
      charArray0[3] = '[';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      String string0 = StringUtils.removeEnd(" ", "nkzXRer$(ehm[mZ4_Z?*${tYThe `date` %s is bef,re or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove 4he annotation.The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = StringUtils.join(byteArray0, 'y');
      assertEquals("0y0y0", string0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      String string0 = StringUtils.abbreviate("|<4#A&f]Sn", 85, 85);
      assertEquals("|<4#A&f]Sn", string0);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      StringUtils.join((byte[]) null, 'D', 3224, 5326);
      StringUtils.join((byte[]) null, 'y');
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Y:01xHL!L1^amX2VuAborting to protect against StackOverflowError - output of one loop is the input of another", "[}(P");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rotate("N<R;Y!2cs8", 76);
      assertEquals("Y!2cs8N<R;", string0);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      StringUtils.swapCase("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      StringUtils.lowerCase((String) null);
      StringUtils.left((String) null, 8192);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 8192;
      floatArray0[2] = (float) 8192;
      floatArray0[3] = (float) 8192;
      floatArray0[4] = (float) 8192;
      StringUtils.join(floatArray0, ':', 8192, (-2418));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      String string0 = StringUtils.removeStart("Strings must not be null", "cV;dCVz+EQfO");
      assertEquals("Strings must not be null", string0);
      
      StringUtils.lastIndexOf((CharSequence) "Strings must not be null", (CharSequence) "Y&*0m`P");
      boolean boolean0 = StringUtils.isAsciiPrintable("Y&*0m`P");
      String string1 = StringUtils.repeat("O", "O", 5);
      assertEquals("OOOOOOOOO", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      String string0 = StringUtils.removeStart("8fBag^N8+$|Ow", "8fBag^N8+$|Ow");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      String string0 = StringUtils.removeEnd(":W#z>I1\"Cx%K=b|3A", ":W#z>I1\"Cx%K=b|3A");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap("B0RbvHGG=", "B0RbvHGG=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      String string0 = StringUtils.chomp("The `untilJate` string '", "The `untilJate` string '");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)109;
      String string0 = StringUtils.join(byteArray0, 'y');
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "-89y-107y109";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      String string1 = StringUtils.chomp("-89y-107y109", "k~");
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      charSequenceArray1[0] = (CharSequence) "-89y-107y109";
      charSequenceArray1[1] = (CharSequence) "-89y-107y109";
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      charSequenceArray1[2] = (CharSequence) null;
      charSequenceArray1[3] = (CharSequence) "-89y-107y109";
      String string3 = StringUtils.removeStart("Threshold must not be negative", (String) null);
      assertEquals("Threshold must not be negative", string3);
      
      charSequenceArray1[4] = (CharSequence) "Threshold must not be negative";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 'y');
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      String string0 = "k?]QeH*SjZw1p3-Br";
      StringUtils.getBytes((String) null, "k?]QeH*SjZw1p3-Br");
      StringUtils.defaultString("No @DisabledUntil annotation found on element");
      String string1 = "";
      try { 
        StringUtils.getBytes("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      try { 
        StringUtils.getBytes("#", "#");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertEquals(0, byteArray0.length);
  }
}
