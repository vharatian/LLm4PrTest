/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 05:24:38 GMT 2025
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.IllegalFormatConversionException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.text.StrBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln((double) 114);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.skip(2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.skip(0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("n7ali lngth: ");
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder strBuilder2 = strBuilder1.append(strBuilder0);
      strBuilder0.append(2144L);
      StrBuilder strBuilder3 = strBuilder2.append(true);
      strBuilder0.equals(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v~'Z");
      StrBuilder strBuilder1 = new StrBuilder();
      strBuilder0.equals(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("n7valid lngth: ");
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder strBuilder2 = strBuilder1.append(strBuilder0);
      strBuilder0.append(2144L);
      strBuilder2.append(true);
      strBuilder0.equalsIgnoreCase(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"1mc~\"");
      StrBuilder strBuilder1 = new StrBuilder();
      strBuilder0.equalsIgnoreCase(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.lastIndexOf("", 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v~'Z");
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      Object object0 = new Object();
      StrBuilder strBuilder2 = strBuilder1.append(object0);
      strBuilder2.indexOf("MZ-#{\"", 32);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("Aborting to protect against StackOverflowError - output of one loop is the input of another", "C]Orw<AlfZ[");
      strBuilder1.contains("O");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", 5001, 'Z');
      StrBuilder strBuilder2 = strBuilder1.append(true);
      strBuilder2.midString(5001, 4);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5001);
      strBuilder0.setLength(5001);
      strBuilder0.midString(5001, 422);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.midString(0, 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.rightString(0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight(101, 101, 'S');
      strBuilder0.leftString(101);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.leftString(0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      stringBuffer0.append((-1.0F));
      strBuilder0.append(stringBuffer0);
      strBuilder0.endsWith("length must be valid");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("PA)8");
      strBuilder0.appendln(']');
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuilder1);
      strBuilder1.startsWith("PA)8");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      StrBuilder strBuilder0 = new StrBuilder("+X");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(object0, 5001, 'Z');
      strBuilder1.startsWith("Invalid offset: ");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      strBuilder0.appendln('n');
      strBuilder0.trim();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("startIndex must be valid", "startIndex must be valid");
      strBuilder0.appendln((Object) ".(>t0EX59`rJ_=");
      strBuilder1.replaceFirst(".(>t0EX59`rJ_=", "");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|B>mwF{LK/-1)?;g");
      strBuilder0.append("|B>mwF{LK/-1)?;g");
      strBuilder0.replaceAll("|B>mwF{LK/-1)?;g", "\r");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", 5001, 'Z');
      strBuilder1.append(true);
      strBuilder0.deleteFirst("true");
      assertEquals(5001, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",n% -Bl");
      StrBuilder strBuilder1 = strBuilder0.appendln('m');
      StrBuilder strBuilder2 = strBuilder1.setLength(5001);
      StrBuilder strBuilder3 = strBuilder0.appendSeparator(",n% -Bl", "end < start");
      strBuilder3.append(strBuilder1, 0, 30);
      strBuilder2.deleteAll("Bl,n% -Blm\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertEquals(10002, strBuilder1.capacity());
      assertEquals(5006, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|B>mwF{LK/-1)?;g");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('(');
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      strBuilder0.deleteAll('n');
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight(1259, 27, 'D');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, '<');
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('z', 0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("|B<>mwF7/-1)?;gw", 0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append("", 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[6];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(0, 'C');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.validateIndex(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Inlidlength+O: ");
      char[] charArray0 = new char[7];
      strBuilder0.getChars(0, 0, charArray0, 0);
      assertEquals(47, strBuilder0.capacity());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(15, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null, 0, 0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("h3xK&");
      Writer writer0 = strBuilder0.asWriter();
      writer0.write((-642));
      assertEquals(6, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.ready();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1970);
      strBuilder0.hashCode();
      assertEquals(1970, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((String) null, 101, 101);
      assertEquals(101, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.validateRange(0, 0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('{', '{');
      strBuilder0.appendln("");
      strBuilder0.validateRange(2, 2);
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      strBuilder0.minimizeCapacity();
      strBuilder0.trim();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(30);
      strBuilder0.appendln(30);
      strBuilder0.toStringBuffer();
      assertEquals(3, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2638);
      strBuilder0.size = 2638;
      strBuilder0.toString();
      assertEquals(2638, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      String string0 = strBuilder0.substring(4, 911);
      assertEquals(52, strBuilder0.capacity());
      assertEquals("th must be valid", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight(101, 101, 'S');
      strBuilder0.substring(101, 910);
      assertEquals(101, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v~'Z");
      String string0 = strBuilder0.substring(3);
      assertEquals("Z", string0);
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(2773, ']');
      strBuilder0.substring(2773);
      assertEquals(5546, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) '\u0000';
      objectArray0[6] = (Object) strBuilder0;
      strBuilder0.appendWithSeparators(objectArray0, "");
      strBuilder0.subSequence(7, 114);
      assertEquals(120, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      strBuilder0.appendln(2);
      int int0 = strBuilder0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b");
      StrBuilder strBuilder1 = strBuilder0.setNullText("b");
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.setNullText("^[r. l5.db:WriH6f");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.setNewLineText("Locale must not be null");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.setLength(0);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.reverse();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2495));
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      StrBuilder strBuilder2 = strBuilder1.replaceFirst("", "^]`Vz-5f&4.;ec<0");
      assertEquals(0, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendln((long) (-1));
      assertEquals(3, strBuilder1.size());
      
      strBuilder1.size = (-3386);
      strBuilder0.replaceFirst('t', 't');
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.replaceFirst('v', 'v');
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.replaceAll("", "ro`T[.lL;");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("qJ3h^);y_+Fw}GyEq");
      assertEquals(17, strBuilder0.length());
      
      strBuilder0.size = (-471);
      strBuilder0.replaceAll('F', 'F');
      assertEquals(49, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.replaceAll('3', '7');
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",");
      assertEquals(33, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      assertEquals(1, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.length();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 91;
      strBuilder0.length();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('{', '{');
      strBuilder0.appendln("");
      int int0 = strBuilder0.lastIndexOf("", 959);
      assertEquals(2, strBuilder0.length());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1970);
      strBuilder0.append("@StdIo defined no input, so Sbstem.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      int int0 = strBuilder0.lastIndexOf("");
      assertEquals(148, strBuilder0.size());
      assertEquals(147, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendln('C');
      int int0 = strBuilder1.lastIndexOf('C', 48);
      assertEquals(2, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",");
      int int0 = strBuilder0.lastIndexOf(',');
      assertEquals(0, int0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.insert(0, charArray0);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.insert(0, "");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bq=YK1V<");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-3432), 5138, '^');
      Reader reader0 = strBuilder1.asReader();
      strBuilder0.insert(200, (Object) reader0);
      assertEquals(10292, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      char[] charArray0 = new char[1];
      strBuilder0.appendln(charArray0);
      strBuilder0.insert(1, (long) 1);
      assertEquals(4, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(118);
      strBuilder0.append(charBuffer0, 2, 114);
      strBuilder0.insert(114, (-3319));
      assertEquals(119, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (double) 1236);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("KhFm;xv628}zkc\"%as");
      int int0 = strBuilder0.indexOf("");
      assertEquals(0, int0);
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1120);
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('@', '@');
      int int0 = strBuilder1.indexOf('@');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      StrBuilder strBuilder1 = strBuilder0.setNewLineText(", '");
      strBuilder1.getNewLineText();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.ensureCapacity((-586));
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.deleteFirst("");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      assertEquals(1, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('l');
      assertEquals(0, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Illegal range. There's no way to get from %s to %s with a step of %s.");
      strBuilder0.deleteCharAt(3);
      assertEquals(68, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(322);
      strBuilder0.append(charBuffer0, 0, 4);
      strBuilder0.deleteAll(")ZwWP?>3Kp8[_B@gR");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.deleteAll(")ZwWP?>3Kp8[_B@gR");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.deleteAll('9');
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.delete(0, 0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.clear();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      char[] charArray0 = new char[20];
      strBuilder0.appendln(charArray0);
      strBuilder0.charAt(1);
      assertEquals(21, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((double) 0);
      char char0 = strBuilder0.charAt(0);
      assertEquals(3, strBuilder0.size());
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v~'Z");
      char char0 = strBuilder0.charAt(3);
      assertEquals(36, strBuilder0.capacity());
      assertEquals('Z', char0);
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      int int0 = strBuilder0.capacity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bq=YK1V<");
      String string0 = strBuilder0.build();
      assertEquals(40, strBuilder0.capacity());
      assertEquals("bq=YK1V<", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|B>mwF{LK/-1)?;g");
      strBuilder0.appendln((char[]) null, 45, 10);
      assertEquals(17, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringWriter stringWriter0 = new StringWriter(114);
      stringWriter0.write("SKnN");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      strBuilder0.appendln(stringBuffer0, 2, 2);
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1970);
      assertEquals(1970, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      Object[] objectArray0 = new Object[2];
      strBuilder1.appendWithSeparators(objectArray0, "");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1038);
      strBuilder0.size = (-1685);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) null, "Test '%s' was supposed to run no longer than %d ms.");
      assertEquals(1038, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.appendWithSeparators((Iterator<?>) null, "Invalid length: ");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      strBuilder1.appendWithSeparators((Iterable<?>) linkedHashSet0, ")ZwWP?>3Kp8[_B@gR");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.appendSeparator("Invalid offset: ", "");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.appendSeparator("-p&O06dEL", (-2436));
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.appendSeparator("_t^7d");
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.appendSeparator('U', (-746));
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1165));
      strBuilder0.size = (-1165);
      strBuilder0.appendSeparator('0');
      assertEquals((-1165), strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.appendSeparator('k');
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(60, strBuilder0.length());
      
      strBuilder0.size = (-1723);
      strBuilder0.appendPadding((-1723), 'g');
      assertEquals(92, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-3275), 'I');
      assertEquals(0, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.appendNull();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, (-4346), 'a');
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.appendFixedWidthPadRight(101, 0, 'S');
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft((Object) strBuilder0, 0, '1');
      assertEquals(0, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.appendFixedWidthPadLeft((-45), (-45), 'e');
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      Object[] objectArray0 = new Object[8];
      strBuilder1.appendAll(objectArray0);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("PA)8");
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) null);
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = linkedHashSet0.iterator();
      strBuilder1.appendAll(iterator0);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      Stack<Object> stack0 = new Stack<Object>();
      strBuilder0.appendAll((Iterable<?>) stack0);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.append((char[]) null, (-850), 1311);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      StrBuilder strBuilder2 = strBuilder1.append((char[]) null);
      assertEquals(0, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.append(strBuilder0);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      strBuilder1.append(charBuffer0);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      StringBuffer stringBuffer0 = new StringBuffer();
      strBuilder0.append(stringBuffer0);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.append("", (Object[]) null);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.append((String) null, 4, 0);
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.append("");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(573, 27, 'X');
      strBuilder1.append((CharSequence) null, 573, 27);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendln((long) (-1));
      strBuilder1.size = (-3386);
      strBuilder0.append((CharSequence) strBuilder0);
      assertEquals((-3386), strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertEquals(101, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder0.append((CharSequence) strBuilder1);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.validateRange(968, 968);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(328);
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex(328);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 328
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(106);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(106, '7');
      char[] charArray0 = new char[7];
      strBuilder1.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder0.trim();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 91;
      // Undeclared exception!
      try { 
        strBuilder0.toStringBuilder();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 2194;
      // Undeclared exception!
      try { 
        strBuilder0.toStringBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray(2322, 2322);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b");
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.appendln(322);
      strBuilder0.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder1.reverse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 1289;
      // Undeclared exception!
      try { 
        strBuilder0.replaceFirst('S', '#');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 322;
      // Undeclared exception!
      try { 
        strBuilder0.replaceAll('o', '6');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(48);
      // Undeclared exception!
      try { 
        strBuilder0.replace(1698, 48, "org.apache.commons.lang3.text.StrBuilder");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        strBuilder0.readFrom(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "Invalid length: ");
      strBuilder1.size = (-1508);
      // Undeclared exception!
      try { 
        strBuilder0.leftString(11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(116, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 116
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(256, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 256
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(519, " or any enclosing class.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 519
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(116, 'o');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 116
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("R");
      strBuilder0.buffer = null;
      // Undeclared exception!
      try { 
        strBuilder0.endsWith("R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 447;
      // Undeclared exception!
      try { 
        strBuilder0.build();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Y");
      strBuilder0.size = 1170;
      // Undeclared exception!
      try { 
        strBuilder0.appendln(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.junitpioneer.jupiter.CartesianEnumArgumentsProvider");
      StrBuilder strBuilder1 = new StrBuilder(2);
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder1, 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1120);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuilder0, 1120, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder0);
      strBuilder0.size = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendln(";;%z+6!f", (Object[]) null);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'z'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        strBuilder0.appendln("KhFm;v28}zkc\"%as", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        strBuilder0.appendln((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendln(" must return `CartesianProductTest.Sets`.", (-16), (-16));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-843));
      strBuilder0.size = (-843);
      // Undeclared exception!
      try { 
        strBuilder0.appendln((String) null, (-843), (-843));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendln((long) (-1));
      strBuilder1.size = (-3386);
      // Undeclared exception!
      try { 
        strBuilder0.appendln("z1~`aM}KU .a1&O4=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v~'Z");
      strBuilder0.appendln(true);
      char[] charArray0 = new char[4];
      strBuilder0.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder0.appendln((-2074L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.size = (-36);
      // Undeclared exception!
      try { 
        strBuilder0.appendln(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "", 60, '=');
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, " must return `CartesianProductTest.Sets`.");
      char[] charArray0 = new char[0];
      strBuilder2.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder0.appendln((float) 60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(602);
      strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, 602, '}');
      char[] charArray0 = new char[1];
      strBuilder0.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder0.appendln((double) 602);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[1];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "");
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight(768, 768, 'O');
      char[] charArray0 = new char[3];
      strBuilder1.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder2.appendln('O');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = linkedList0.iterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedList0.add(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        strBuilder0.appendWithSeparators(iterator0, "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendTo((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%'XU yZ+_|3]o3!");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        strBuilder0.appendTo(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F:H?@vL}(F!$=");
      char[] charArray0 = new char[9];
      strBuilder0.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder0.appendSeparator('l');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 1268;
      // Undeclared exception!
      try { 
        strBuilder0.appendPadding(2790, ']');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 2069;
      // Undeclared exception!
      try { 
        strBuilder0.appendNewLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight(706, Integer.MAX_VALUE, 'H');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Cannot store ");
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight(Integer.MAX_VALUE, Integer.MAX_VALUE, '+');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft(2147483645, 2147483645, 'i');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft(Integer.MAX_VALUE, Integer.MAX_VALUE, 'Z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuilder stringBuilder0 = new StringBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuilder0);
      CharBuffer charBuffer0 = CharBuffer.allocate(2159);
      strBuilder1.size = 48;
      // Undeclared exception!
      try { 
        strBuilder1.append(charBuffer0, 41, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("ld%_515zccKbrAjSJ7", (Object[]) null);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '_'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1509));
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        strBuilder0.append("Expected exactly one annotation to provide an ArgumentSource, found %d.", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L$m;xv6;}zkc\",%as");
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) iterator0;
      // Undeclared exception!
      try { 
        strBuilder0.append("L$m;xv6;}zkc\",%as", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != java.util.ArrayDeque$DeqIterator
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[15];
      // Undeclared exception!
      try { 
        strBuilder0.append((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', has a length less than 2");
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("M");
      strBuilder1.size = 114;
      // Undeclared exception!
      try { 
        strBuilder0.append(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendln((long) (-1));
      strBuilder1.size = (-3386);
      // Undeclared exception!
      try { 
        strBuilder0.append('N');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3386
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"1mc~\"");
      int int0 = strBuilder0.lastIndexOf("\"1mc~\"", 5);
      assertEquals(0, int0);
      assertEquals(38, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[8];
      strBuilder0.append(charArray0);
      int int0 = strBuilder0.lastIndexOf("a", 123);
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Pv$5*/ec_QIiJMW");
      int int0 = strBuilder0.lastIndexOf("Invalid startIndex: ", 26);
      assertEquals(47, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(":|Bh,)F");
      strBuilder0.appendln((double) 2144);
      int int0 = strBuilder0.lastIndexOf("Cannot store ", 2144);
      assertEquals(14, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((String) null, 16);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.appendln(0);
      int int0 = strBuilder0.lastIndexOf("", 0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.appendln(false);
      int int0 = strBuilder0.lastIndexOf('a', 32);
      assertEquals(6, strBuilder0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setLength(5001);
      int int0 = strBuilder0.lastIndexOf('f', 32);
      assertEquals(5001, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1805));
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-1805), 1153, '<');
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add("=G");
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      strBuilder0.appendWithSeparators(iterator0, "");
      int int0 = strBuilder1.indexOf("=G", 1153);
      assertEquals(1155, strBuilder0.size());
      assertEquals(1153, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v~'Z");
      Object object0 = new Object();
      strBuilder0.append(object0);
      int int0 = strBuilder0.indexOf("startIndex must be valid", 3);
      assertEquals(31, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append(0.0);
      int int0 = strBuilder0.indexOf("", (-102));
      assertEquals(3, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v~'Z");
      int int0 = strBuilder0.indexOf("startIndex must be valid", 3);
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2453);
      int int0 = strBuilder0.indexOf((String) null, 2453);
      assertEquals((-1), int0);
      assertEquals(2453, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf("", 101);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      int int0 = strBuilder0.indexOf('i', 0);
      assertEquals(5, int0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("KhFm;xv628}zkc\"%as");
      int int0 = strBuilder0.indexOf('%', (int) '%');
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("',c@~}1");
      int int0 = strBuilder0.indexOf('%', (-412));
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5138);
      strBuilder0.appendln("length must be valid");
      strBuilder0.delete(1, 5138);
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bq=YK1V<");
      strBuilder0.appendFixedWidthPadLeft((-3432), 5138, '^');
      strBuilder0.insert(5138, "bq=YK1V<");
      assertEquals(5154, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.insert(0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendFixedWidthPadRight((Object) "", 3, '_');
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 14, 'U');
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2495));
      strBuilder0.appendFixedWidthPadLeft((Object) null, 9, 'd');
      strBuilder0.appendSeparator((String) null, "^]`Vz-5f&4.;ec<0");
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append(false);
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      strBuilder0.append(charArray0, 3, 1);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-1481), (-1481));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1481
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.toCharArray();
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(752);
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(752, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StringBuilder) null, 70, 70);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StringBuilder stringBuilder0 = new StringBuilder("Invalid length: ");
      strBuilder0.append(stringBuilder0);
      assertEquals(32, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuilder) null);
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StringBuilder stringBuilder0 = new StringBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StringBuffer stringBuffer0 = new StringBuffer(5);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 150, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(42);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      strBuilder0.append(charBuffer0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L$m;xv6;}zkc\",%as");
      StrBuilder strBuilder1 = strBuilder0.append("L$m;xv6;}zkc\",%as", 0, 0);
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("org.junitpioneer.jupiter.DefaultTimeZoneExtension", 1, (-2988));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v~'Z");
      // Undeclared exception!
      try { 
        strBuilder0.append("#:xkY|t7/", 281, 399);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("+X");
      StringBuilder stringBuilder0 = new StringBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuilder0);
      assertEquals(2, strBuilder1.length());
      assertEquals(34, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.setNullText("KhFm;xv628}zkc\"%as");
      strBuilder0.appendNull();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      strBuilder0.appendln((Object) locale_FilteringMode0);
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, 5, charArray0, (-3006));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.minimizeCapacity();
      strBuilder0.ensureCapacity(27);
      assertEquals(54, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator("", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      strBuilder0.ensureCapacity(38);
      assertEquals(94, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2638);
      String string0 = strBuilder0.toString();
      assertEquals("", string0);
      assertEquals(2638, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring(763, 763);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.getNullText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(20);
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[0];
      strBuilder0.append("}uC9hT", objectArray0);
      assertEquals(6, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((-1.0F));
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1981);
      strBuilder0.append('6');
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.size();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(1478L);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-686L));
      assertEquals(0, strBuilder0.size());
      assertEquals(0L, long0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bP`llI.w,?,l*QQl");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      strBuilder0.readFrom(strBuilder_StrBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 7, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1859, 1859);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 34, (-3082));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read((char[]) null, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(73, int0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.nextToken();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-2065), 117);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.delete((-4), (-4));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CharBuffer charBuffer0 = CharBuffer.allocate(322);
      strBuilder0.append(charBuffer0, 0, 4);
      linkedHashSet0.add(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("h3xK&");
      StrBuilder strBuilder1 = new StrBuilder();
      boolean boolean0 = strBuilder1.equals((Object) strBuilder0);
      assertFalse(boolean0);
      assertEquals(5, strBuilder0.length());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("uC'3o tbau9!8.");
      StrBuilder strBuilder1 = new StrBuilder("+0l)U[&Mbw9Q:o");
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertFalse(boolean0);
      assertEquals(14, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("!'.XDtks'");
      StrBuilder strBuilder1 = new StrBuilder("!'.XDtks'");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(boolean0);
      assertEquals(41, strBuilder1.capacity());
      assertEquals(9, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals((StrBuilder) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("mE@:V");
      StrBuilder strBuilder1 = new StrBuilder("mE@:V");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(38, strBuilder1.capacity());
      assertTrue(boolean0);
      assertEquals(6, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder("l9o_b4e)v9I");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder strBuilder2 = strBuilder0.append(2144L);
      StrBuilder strBuilder3 = strBuilder1.append(true);
      boolean boolean0 = strBuilder3.equalsIgnoreCase(strBuilder2);
      assertFalse(strBuilder1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.equalsIgnoreCase((StrBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      strBuilder0.appendTo(charBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(charBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      strBuilder0.appendTo(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendTo(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder");
      assertEquals(40, strBuilder0.size());
      assertEquals(0, int0);
      assertEquals(72, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");
      int int0 = strBuilder0.lastIndexOf("/");
      assertEquals((-1), int0);
      assertEquals(72, strBuilder0.capacity());
      assertEquals(40, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      int int0 = strBuilder0.lastIndexOf('a');
      assertEquals(20, strBuilder0.size());
      assertEquals(16, int0);
      assertEquals(52, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf('L', 77);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Timeout for vintage @Test must be positive.");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("In7valid lengh: ");
      assertEquals(75, strBuilder1.capacity());
      assertEquals(43, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b");
      boolean boolean0 = strBuilder0.contains("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(33, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("KhFm;xv628}zkc\"%as");
      boolean boolean0 = strBuilder0.contains("");
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k ]5h)a1MY>68.S%D");
      int int0 = strBuilder0.indexOf(",", 3);
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("-zeFkvri,8K/7u]d F");
      boolean boolean0 = strBuilder0.contains("-zeFkvri,8K/7u]d F");
      assertEquals(50, strBuilder0.capacity());
      assertTrue(boolean0);
      assertEquals(18, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("hPfh'9E+,");
      boolean boolean0 = strBuilder0.contains('h');
      assertTrue(boolean0);
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("(CP1i>qW0{1st.=[|7p");
      boolean boolean0 = strBuilder0.contains('5');
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("!'.XDtks'");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("!'.XDtks'", "(h9?KoCbW6>Fi<Q1^5");
      String string0 = strBuilder1.midString(13, 13);
      assertEquals(18, strBuilder0.length());
      assertEquals("<Q1^5", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("(Ol%APF0|@Sx]u");
      strBuilder0.appendFixedWidthPadRight(87, 261, 's');
      strBuilder0.midString(101, 101);
      assertEquals(550, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString((-1093), (-1093));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(188, 188);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Illegal range. The step cannot be zero.");
      String string0 = strBuilder0.rightString(1);
      assertEquals(".", string0);
      assertEquals(71, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-32));
      strBuilder0.rightString((-32));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.rightString(1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.leftString((-1102));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharSequence charSequence0 = strBuilder0.subSequence(0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.subSequence(7, 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 7
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.subSequence((-605), (-605));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -605
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("lE?x%#:{w.");
      // Undeclared exception!
      try { 
        strBuilder0.subSequence(29, (-3337));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3366
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      boolean boolean0 = strBuilder0.endsWith("U<+9&%UA8a'u\"E");
      assertEquals(52, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      boolean boolean0 = strBuilder0.endsWith("length must be valid");
      assertEquals(11, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.endsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', has a length less than 2");
      boolean boolean0 = strBuilder0.endsWith("', has a length less than 2");
      assertEquals(59, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("8w7?+[zJF");
      boolean boolean0 = strBuilder0.startsWith("k7{F(Pt>");
      assertFalse(boolean0);
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("W(2xi7m9:b&t9cND");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" must return `CartesianProductTest.Sets`.");
      boolean boolean0 = strBuilder0.startsWith(" must return `CartesianProductTest.Sets`.");
      assertEquals(73, strBuilder0.capacity());
      assertTrue(boolean0);
      assertEquals(41, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",");
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b");
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("zzs)3$L,UXg");
      strBuilder0.replaceFirst("zzs)3$L,UXg", (String) null);
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("Invalid offset: ", "Invalid offset: ");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', has a length less than 2");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('e', 'i');
      assertEquals(59, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendNewLine();
      strBuilder0.replaceFirst('e', '0');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("(CP1i>qW0{1st.=[|7p");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('W', '');
      assertEquals(51, strBuilder1.capacity());
      assertEquals(19, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.replace(0, 0, "8<nDt?~]-*CkGMu");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b");
      strBuilder0.replaceAll("b", (String) null);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("!'.XDtks'");
      strBuilder0.deleteFirst("!'.XDtks'");
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      strBuilder0.deleteAll("startIndex must be valid");
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(67);
      strBuilder0.appendPadding('c', 'c');
      strBuilder0.deleteFirst('c');
      assertEquals(198, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L$m;xv6;}zkc\",%as");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('\u0083');
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(106);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(106, '7');
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder1.deleteAll('7');
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, false);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("v~'Z");
      StrBuilder strBuilder1 = strBuilder0.appendln(true);
      char[] charArray0 = strBuilder1.toCharArray();
      strBuilder0.insert(4, charArray0, 4, 5);
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = strBuilder0.toCharArray();
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 176);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 176
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 108, 422);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 108
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-3181), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -3181
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-987));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -987
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[2];
      strBuilder0.insert(0, charArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Inlidlength+O: ");
      StrBuilder strBuilder1 = strBuilder0.insert(14, (char[]) null);
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (float) 0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(2774, 'L');
      strBuilder0.insert(2774, (char[]) null, 2454, (-1362));
      assertEquals(2774, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(1237, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1237
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('A', 64);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator("$vD'HKr]!", 507);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, (-1985));
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 2753;
      // Undeclared exception!
      try { 
        strBuilder0.appendSeparator('D', 'D');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("(CP1i>qW0{1st.=[|7p");
      strBuilder0.appendSeparator(':');
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      strBuilder0.appendWithSeparators(iterator0, "org.junitpioneer.jupiter.params.DoubleRange");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(strBuilder0);
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      strBuilder0.appendWithSeparators((Iterable<?>) linkedHashSet0, ")ZwWP?>3Kp8[_B@gR");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "c;&`");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Object> iterator0 = arrayList0.iterator();
      arrayList0.add((Object) iterator0);
      // Undeclared exception!
      try { 
        strBuilder0.appendAll(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) enumSet0);
      strBuilder1.leftString(35);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.junitpioneer.jupiter.StdIoExtension");
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) null);
      assertEquals(39, strBuilder1.length());
      assertEquals(71, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, 8192);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 8192
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      char[] charArray0 = new char[20];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 1, (-850));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -850
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 2144, 2144);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 2144
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, 321);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 802, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-115), (-115));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, 3, 3);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StringBuilder stringBuilder0 = new StringBuilder("f9+`DR&");
      StringBuilder stringBuilder1 = stringBuilder0.append((-1861.84F));
      stringBuilder1.append((CharSequence) stringBuilder0);
      stringBuilder0.append((Object) stringBuilder1);
      strBuilder0.append(stringBuilder1, 34, 7);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("must return `CaresianProductTes.Sets`.");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append(stringBuilder0, 0, 0);
      assertEquals(70, strBuilder1.capacity());
      assertEquals(38, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "3X&\"5utm9^/iFy");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, 9, (-4163));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuilder stringBuilder0 = new StringBuilder(31);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, 0, 2753);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, 4, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuilder0, (-2385), (-3));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ",U_w]Bhp+$");
      strBuilder0.append(stringBuffer0, 5, 5);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 111);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-2380));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-3765), (-3765));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(552);
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 29, 552);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(2144);
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 1, Integer.MIN_VALUE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 4454, 175);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0, 0, 0);
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5116);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 5116, 5116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      StrBuilder strBuilder1 = strBuilder0.append((CharBuffer) null, 1, 7);
      assertEquals(1, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, (-1308), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((CharBuffer) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append("R|<2[IBCvoF1+)", 7, 7);
      strBuilder1.append(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("", 0, 1226);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("==Rpj\"k%o(U", (-733), (-402));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null, 3303, 3303);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append((CharSequence) " must return `CartesianProductTest.Sets`.", 0, (-1465));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      strBuilder0.append((CharSequence) charBuffer0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(1858);
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((Object) stringBuilder0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setNewLineText("VP:t*^.NL");
      strBuilder0.appendln((-2749.200431448636));
      assertEquals(27, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      int int0 = strBuilder0.readFrom(charBuffer0);
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder("length must be valid");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      strBuilder0.readFrom(strBuilder_StrBuilderReader0);
      strBuilder0.rightString(20);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.readFrom((Readable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(3749, '(');
      // Undeclared exception!
      try { 
        strBuilder0.getChars(3749, 162, (char[]) null, 104);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.getChars(1495, 40, (char[]) null, 3881);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 40
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.getChars(4379, (-470), (char[]) null, 4379);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -470
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-846), (-846), charArray0, (-846));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -846
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      char[] charArray0 = new char[2];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(20, charArray1.length);
      assertEquals(52, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" must r+turn `CartesianProductTest.Sers`.");
      char[] charArray0 = strBuilder0.toCharArray(8, 101);
      assertEquals(41, strBuilder0.length());
      assertEquals(33, charArray0.length);
      assertEquals(73, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.deleteCharAt(0);
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(1191);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1191
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1792));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1792
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(114, 'T');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 114
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");
      StrBuilder strBuilder1 = strBuilder0.setCharAt(0, 'W');
      assertEquals(40, strBuilder0.length());
      assertEquals(72, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-3161), 'T');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3161
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt(4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-2367));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2367
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.setLength(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-428));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -428
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setNullText("b");
      String string0 = strBuilder0.getNullText();
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, (-2843));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[1];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln((StrBuilder) null);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.clear();
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-674));
      // Undeclared exception!
      try { 
        strBuilder0.insert((-674), 1602L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -674
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Writer writer0 = strBuilder0.asWriter();
      writer0.write("^tE");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, (-2667), (-870));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -870
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(77);
      // Undeclared exception!
      try { 
        strBuilder0.insert(77, 77);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 77
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuffer0, 5094, 5094);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      int int0 = strBuilder0.lastIndexOf('\\');
      assertEquals(52, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuilder stringBuilder0 = strBuilder0.toStringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.junitpioneer.jupiter.CartesianEnumArgumentsProvider");
      strBuilder0.appendln(strBuilder0, 2, 2);
      assertEquals(58, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i");
      strBuilder0.appendSeparator("i");
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      strBuilder0.appendln(stringBuffer0);
      assertEquals(1, strBuilder0.length());
      
      strBuilder0.trim();
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln((StringBuilder) null, 418, 418);
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(284, (-1.0F));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 284
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf("");
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.build();
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln(0.0F);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      int int0 = strBuilder0.indexOf('E');
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln("", objectArray0);
      strBuilder0.appendAll(objectArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, ',');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(6, (double) 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 6
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight((Object) null, 114, '6');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" in an array of ");
      strBuilder0.trim();
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b");
      StrBuilder strBuilder1 = strBuilder0.appendln(322);
      strBuilder1.reverse();
      assertEquals(5, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("must return `CaresianProductTes.Sets`.");
      strBuilder0.appendln("must return `CaresianProductTes.Sets`.", 0, 0);
      assertEquals(39, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring(2773);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark(3070);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(8);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(8, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1198);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      // Undeclared exception!
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 18336, 'O');
  }
}
