/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 15:11:21 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang3.ClassUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClassUtils_ESTest extends ClassUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      boolean boolean0 = ClassUtils.isAssignable(classArray1, classArray0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getAbbreviatedName(class0, 15);
      assertEquals("j.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = ClassUtils.getAbbreviatedName("i.\"+Wm", 1);
      assertEquals("i.\"+Wm", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getAbbreviatedName(class0, 2);
      assertEquals("j.l.Object", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = ClassUtils.getAbbreviatedName("char", 4);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("[Ltk02");
      assertEquals("Ltk02[]", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("[->=Wq`f");
      assertEquals("->=Wq`f[]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("java.lang.Object");
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("void");
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      assertSame(class0, class1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<Object>[] classArray1 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = ClassUtils.getSimpleName((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ClassUtils.getSimpleName((Object) "long[][]");
      assertEquals("String", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = ClassUtils.getSimpleName((Class<?>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = ClassUtils.getPackageName((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = ClassUtils.getPackageName((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName("x.GZ7U50n,/U");
      assertEquals("x", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = ClassUtils.getName((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = ClassUtils.getName((Class<?>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = ClassUtils.getName((Class<?>) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = ClassUtils.getName((Class<?>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("char", false);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("org.apache.commons.lang3.ClassUtils$Interfaces", true);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("org.junitpioneer.jupiter.DefaultTimeZoneExtension", true);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("java.lang.Object[]", false);
      assertEquals("class [Ljava.lang.Object;", class0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("org.apache.commons.lang3.ClassUtils$Interfaces");
      assertEquals("class org.apache.commons.lang3.ClassUtils$Interfaces", class0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertEquals(0, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass((ClassLoader) null, "[S", false);
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = ClassUtils.getClass(classLoader0, "org.junitpioneer.vintage.ExpectedExceptionExtension", true);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = ClassUtils.getClass(classLoader0, "boolean");
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = ClassUtils.getClass(classLoader0, "org.apache.commons.lang3.ClassUtils$Interfaces");
      assertEquals("class org.apache.commons.lang3.ClassUtils$Interfaces", class0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = ClassUtils.getClass(classLoader0, "long[]");
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = ClassUtils.getClass(classLoader0, "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertEquals(0, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = ClassUtils.getCanonicalName((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = ClassUtils.getCanonicalName((Class<?>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getShortClassName("[[[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getShortCanonicalName("[[[[[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        ClassUtils.getPublicMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Object> class0 = Object.class;
      try { 
        ClassUtils.getPublicMethod(class0, "short", (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getClass((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getClass((ClassLoader) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        ClassUtils.getClass(classLoader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.EXCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0, classUtils_Interfaces0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = ClassUtils.getCanonicalName((Object) "", "");
      assertEquals("java.lang.String", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = ClassUtils.getCanonicalName((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getCanonicalName(class0, "junit");
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = ClassUtils.getCanonicalName((Class<?>) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        ClassUtils.getClass("R", false);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        ClassUtils.getClass(classLoader0, "[java.lang.Object", true);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = ClassUtils.getClass(classLoader0, "boolean", false);
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        ClassUtils.getClass((ClassLoader) null, "e3M:@|$%vEK", false);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<?> class0 = ClassUtils.primitiveToWrapper((Class<?>) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
      assertEquals("class java.lang.Character", class1.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("void");
      assertNotNull(class0);
      
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("void");
      Class<String> class1 = String.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("void");
      boolean boolean0 = ClassUtils.isAssignable(class0, class0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("boolean");
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtils.isAssignable((Class<?>) null, class0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtils.isAssignable((Class<?>) null, class0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, (Class<?>) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = ClassUtils.getAbbreviatedName("p{InCombiningDiacriticalMarks}+", 1462);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName("_6Q`:|}a5", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = ClassUtils.getPackageName("<A6C.wh");
      assertEquals("<A6C", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = ClassUtils.getPackageName("L`N8lUt^NrG;");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = ClassUtils.getPackageName("Ln3\tk@yatXV\"wF/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = ClassUtils.getPackageName("[void");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getPackageName(class0);
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ClassUtils.getName(object0, "mU");
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = ClassUtils.getName((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtils.getName(class0, "void");
      assertEquals("java.lang.String", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = ClassUtils.getSimpleName((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = ClassUtils.getSimpleName((Class<?>) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Character> class0 = Character.class;
      String string0 = ClassUtils.getSimpleName(class0, "*8wQ8=j&,o");
      assertEquals("Character", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle");
      assertEquals("ToStringStyle.ShortPrefixToStringStyle", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getShortClassName(class0);
      assertEquals("Object", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0, classUtils_Interfaces0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getPackageCanonicalName("[Nn*tT\"1T5yjZa7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName("[L`N8lUt^NrG;");
      assertEquals("`N8lUt^NrG[]", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName((Class<?>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName((Object) "VujL", "");
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName((Class<?>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      assertEquals("Object", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ClassUtils.getCanonicalName(object0);
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = ClassUtils.getCanonicalName((Class<?>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName((Object) "A5!DE", "A5!DE");
      assertEquals("String", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(6, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassUtils.Interfaces[] classUtils_InterfacesArray0 = ClassUtils.Interfaces.values();
      Class<?>[] classArray0 = ClassUtils.toClass(classUtils_InterfacesArray0);
      assertEquals(2, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<?>[] classArray0 = ClassUtils.toClass((Object[]) null);
      assertNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ClassUtils.toClass(classArray0);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<?> class0 = ClassUtils.getClass("long[]");
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        ClassUtils.getClass("[[[[]");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = ClassUtils.getClass(classLoader0, "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle");
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = ClassUtils.isInnerClass((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<?>[] classArray0 = ClassUtils.wrappersToPrimitives((Class<?>[]) null);
      assertNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<?>[] classArray0 = ClassUtils.primitivesToWrappers((Class<?>[]) null);
      assertNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<String> class1 = String.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = ClassUtils.isPrimitiveOrWrapper(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 17);
      boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, classArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast((String) null);
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Character> class0 = Character.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertNotNull(list1);
      assertEquals(2, list1.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      List<String> list0 = ClassUtils.convertClassesToClassNames((List<Class<?>>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses((List<String>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      List<Class<?>> list0 = ClassUtils.getAllInterfaces((Class<?>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses((Class<?>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getAbbreviatedName(class0, 13);
      assertEquals("j.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = ClassUtils.getAbbreviatedName((String) null, 1726);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = ClassUtils.getAbbreviatedName(".D'P~(y{$n=J", 5);
      assertEquals(".D'P~(y{$n=J", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = ClassUtils.getAbbreviatedName((Class<?>) null, (-950));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtils.getAbbreviatedName(class0, (-2537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // len must be > 0
         //
         verifyException("org.apache.commons.lang3.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName("LUtt^NG;");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getPackageName("[[[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = ClassUtils.getPackageName((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = ClassUtils.getPackageName((Class<?>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = ClassUtils.getPackageName((Object) null, "[]");
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = ClassUtils.getPackageName((Object) "void", "void");
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ClassUtils.getName(object0);
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = ClassUtils.getSimpleName((Object) "[[[", "[[[");
      assertEquals("String", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtils.getSimpleName(class0);
      assertEquals("String", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("[Z");
      assertEquals("boolean[]", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("[L`N8lUt^N^G");
      assertEquals("L`N8lUt^N^G[]", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName("[LKMVT,(;");
      assertEquals("KMVT,([]", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName("[[[[");
      assertEquals("][][][][]", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName((Class<?>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName((Object) "]'`Pv;u/dkd", "]'`Pv;u/dkd");
      assertEquals("String", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<String> class0 = String.class;
      Iterable<Class<?>> iterable0 = ClassUtils.hierarchy(class0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = ClassUtils.getName((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtils.getName(class0);
      assertEquals("java.lang.String", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      String string0 = ClassUtils.getSimpleName(classArray0[0]);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        ClassUtils.getClass(classLoader0, "`!?T[");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = ClassUtils.getCanonicalName((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtils.getCanonicalName(class0);
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = ClassUtils.getSimpleName((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      assertEquals('$', ClassUtils.INNER_CLASS_SEPARATOR_CHAR);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName("[L`N8Ut^N^G");
      assertEquals("`N8Ut^N^G[]", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = ClassUtils.getPackageCanonicalName("L");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertEquals(1, classArray1.length);
  }
}
