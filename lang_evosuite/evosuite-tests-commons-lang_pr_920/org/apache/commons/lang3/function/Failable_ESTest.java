/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:57:10 GMT 2025
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.lang.reflect.Array;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.concurrent.Callable;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.apache.commons.lang3.function.Failable;
import org.apache.commons.lang3.function.FailableBiConsumer;
import org.apache.commons.lang3.function.FailableBiFunction;
import org.apache.commons.lang3.function.FailableBiPredicate;
import org.apache.commons.lang3.function.FailableBooleanSupplier;
import org.apache.commons.lang3.function.FailableCallable;
import org.apache.commons.lang3.function.FailableConsumer;
import org.apache.commons.lang3.function.FailableDoubleBinaryOperator;
import org.apache.commons.lang3.function.FailableDoubleConsumer;
import org.apache.commons.lang3.function.FailableDoubleSupplier;
import org.apache.commons.lang3.function.FailableFunction;
import org.apache.commons.lang3.function.FailableIntConsumer;
import org.apache.commons.lang3.function.FailableIntSupplier;
import org.apache.commons.lang3.function.FailableLongConsumer;
import org.apache.commons.lang3.function.FailableLongSupplier;
import org.apache.commons.lang3.function.FailablePredicate;
import org.apache.commons.lang3.function.FailableRunnable;
import org.apache.commons.lang3.function.FailableSupplier;
import org.apache.commons.lang3.stream.Streams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Failable_ESTest extends Failable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 0);
      Failable.tryWithResources(failableRunnable0, failableRunnableArray0);
      Stream<Object> stream0 = Stream.empty();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<Object> binaryOperator0 = BinaryOperator.maxBy((Comparator<? super Object>) comparator0);
      stream0.reduce(binaryOperator0);
      Failable.stream(stream0);
      // Undeclared exception!
      try { 
        Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, (FailableConsumer<Throwable, ? extends Throwable>) null, failableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FailableDoubleBinaryOperator<IOException> failableDoubleBinaryOperator0 = (FailableDoubleBinaryOperator<IOException>) mock(FailableDoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-2241.8)).when(failableDoubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      Failable.applyAsDouble(failableDoubleBinaryOperator0, 44.641, 5187.322);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockError mockError0 = new MockError("kCUt2>U: ", mockThrowable0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", " must return `CartesianProductTest.Sets`.", "Q", 0);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      MockIOException mockIOException0 = new MockIOException("kCUt2>U: ", mockRuntimeException0);
      // Undeclared exception!
      try { 
        Failable.rethrow(mockIOException0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: kCUt2>U: 
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("1M:3^");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException();
      mockRuntimeException0.initCause(mockRuntimeException1);
      FailableSupplier<Throwable, IOException> failableSupplier0 = (FailableSupplier<Throwable, IOException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockRuntimeException0).when(failableSupplier0).get();
      Failable.get(failableSupplier0);
      FailableBiFunction<IOException, IOException, IOException, IOException> failableBiFunction0 = FailableBiFunction.nop();
      BiFunction<IOException, IOException, IOException> biFunction0 = Failable.asBiFunction((FailableBiFunction<IOException, IOException, IOException, ?>) failableBiFunction0);
      assertNotNull(biFunction0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<IOException> linkedList0 = new LinkedList<IOException>();
      Streams.FailableStream<IOException> streams_FailableStream0 = Failable.stream((Collection<IOException>) linkedList0);
      assertNotNull(streams_FailableStream0);
      
      // Undeclared exception!
      try { 
        Failable.apply((FailableBiFunction<Object, Object, IOException, IOException>) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FailableLongSupplier<IOException> failableLongSupplier0 = (FailableLongSupplier<IOException>) mock(FailableLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-7L)).when(failableLongSupplier0).getAsLong();
      Failable.getAsLong(failableLongSupplier0);
      MockIOException mockIOException0 = new MockIOException("%s does not implement the CartesianAnnotationConsumer<T> interface.");
      FailableSupplier<Throwable, IOException> failableSupplier0 = (FailableSupplier<Throwable, IOException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(failableSupplier0).get();
      Failable.get(failableSupplier0);
      // Undeclared exception!
      try { 
        Failable.apply((FailableFunction<IOException, Throwable, IOException>) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableConsumer<Throwable, IOException> failableConsumer0 = FailableConsumer.nop();
      FailableRunnable<Throwable>[] failableRunnableArray0 = (FailableRunnable<Throwable>[]) Array.newInstance(FailableRunnable.class, 5);
      FailableRunnable<Throwable> failableRunnable1 = (FailableRunnable<Throwable>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      failableRunnableArray0[0] = failableRunnable1;
      failableRunnableArray0[1] = failableRunnable1;
      failableRunnableArray0[2] = failableRunnable1;
      failableRunnableArray0[3] = failableRunnable1;
      failableRunnableArray0[4] = failableRunnable1;
      Failable.tryWithResources(failableRunnable0, failableConsumer0, failableRunnableArray0);
      FailableIntConsumer.nop();
      // Undeclared exception!
      try { 
        Failable.accept((FailableIntConsumer<Throwable>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FailableConsumer<IOException, IOException> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<Throwable, IOException> failableConsumer1 = FailableConsumer.nop();
      FailableConsumer<Throwable, IOException> failableConsumer2 = failableConsumer1.andThen(failableConsumer1);
      failableConsumer0.andThen(failableConsumer2);
      Failable.asConsumer((FailableConsumer<IOException, ?>) failableConsumer0);
      // Undeclared exception!
      try { 
        Failable.get((FailableSupplier<IOException, IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FailableDoubleBinaryOperator<IOException> failableDoubleBinaryOperator0 = (FailableDoubleBinaryOperator<IOException>) mock(FailableDoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(762.03830593).when(failableDoubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      Failable.applyAsDouble(failableDoubleBinaryOperator0, 44.641, 5187.322);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockError mockError0 = new MockError("kCUt2>U: ", mockThrowable0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", " must return `CartesianProductTest.Sets`.", "Q", 0);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      MockIOException mockIOException0 = new MockIOException("kCUt2>U: ", mockRuntimeException0);
      // Undeclared exception!
      try { 
        Failable.rethrow(mockIOException0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: kCUt2>U: 
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FailableConsumer.nop();
      // Undeclared exception!
      try { 
        Failable.stream((Collection<IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableConsumer.nop();
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 0);
      FailablePredicate<Throwable, Throwable> failablePredicate0 = FailablePredicate.falsePredicate();
      FailablePredicate<Throwable, Throwable> failablePredicate1 = FailablePredicate.truePredicate();
      FailablePredicate<Throwable, Throwable> failablePredicate2 = failablePredicate0.or(failablePredicate1);
      FailablePredicate<Throwable, Throwable> failablePredicate3 = failablePredicate0.and(failablePredicate2);
      boolean boolean0 = Failable.test(failablePredicate3, (Throwable) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FailableBiConsumer<IOException, IOException, IOException> failableBiConsumer0 = FailableBiConsumer.nop();
      FailableBiConsumer<Throwable, IOException, IOException> failableBiConsumer1 = FailableBiConsumer.nop();
      FailableBiConsumer<IOException, IOException, IOException> failableBiConsumer2 = failableBiConsumer0.andThen(failableBiConsumer1);
      MockIOException mockIOException0 = new MockIOException((String) null);
      MockIOException mockIOException1 = new MockIOException((String) null);
      MockIOException mockIOException2 = new MockIOException(mockIOException1);
      Failable.accept(failableBiConsumer2, (IOException) mockIOException1, (IOException) mockIOException2);
      FailableBiPredicate.falsePredicate();
      FailableBiPredicate<IOException, IOException, IOException> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      Failable.test(failableBiPredicate0, (IOException) mockIOException0, (IOException) mockIOException1);
      // Undeclared exception!
      try { 
        Failable.getAsLong((FailableLongSupplier<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FailableBiConsumer<IOException, IOException, IOException> failableBiConsumer0 = FailableBiConsumer.nop();
      FailableBiConsumer<Throwable, IOException, IOException> failableBiConsumer1 = (FailableBiConsumer<Throwable, IOException, IOException>) mock(FailableBiConsumer.class, new ViolatedAssumptionAnswer());
      FailableBiConsumer<IOException, IOException, IOException> failableBiConsumer2 = failableBiConsumer0.andThen(failableBiConsumer1);
      MockIOException mockIOException0 = new MockIOException((String) null);
      Failable.accept(failableBiConsumer2, (IOException) mockIOException0, (IOException) mockIOException0);
      FailableBiPredicate<IOException, IOException, IOException> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      Failable.test(failableBiPredicate0, (IOException) mockIOException0, (IOException) mockIOException0);
      FailableRunnable<Throwable> failableRunnable0 = (FailableRunnable<Throwable>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableDoubleSupplier<Throwable> failableDoubleSupplier0 = (FailableDoubleSupplier<Throwable>) mock(FailableDoubleSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(4036.073003496591).when(failableDoubleSupplier0).getAsDouble();
      double double0 = Failable.getAsDouble(failableDoubleSupplier0);
      assertEquals(4036.073003496591, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Failable.run(failableRunnable0);
      FailableIntSupplier<Throwable> failableIntSupplier0 = (FailableIntSupplier<Throwable>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-3034)).when(failableIntSupplier0).getAsInt();
      Failable.getAsInt(failableIntSupplier0);
      FailableSupplier<IOException, IOException> failableSupplier0 = (FailableSupplier<IOException, IOException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      Failable.asSupplier((FailableSupplier<IOException, ?>) failableSupplier0);
      FailableRunnable<Throwable> failableRunnable1 = (FailableRunnable<Throwable>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 2);
      failableRunnableArray0[0] = failableRunnable0;
      failableRunnableArray0[1] = failableRunnable0;
      Failable.tryWithResources(failableRunnable1, (FailableConsumer<Throwable, ? extends Throwable>) null, failableRunnableArray0);
      FailableBooleanSupplier<IOException> failableBooleanSupplier0 = (FailableBooleanSupplier<IOException>) mock(FailableBooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(failableBooleanSupplier0).getAsBoolean();
      Failable.getAsBoolean(failableBooleanSupplier0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        Failable.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // throwable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FailableFunction<IOException, Throwable, Throwable> failableFunction0 = FailableFunction.nop();
      FailableFunction<IOException, IOException, Throwable> failableFunction1 = FailableFunction.identity();
      FailableFunction<IOException, Throwable, Throwable> failableFunction2 = failableFunction0.compose((FailableFunction<? super IOException, ? extends IOException, Throwable>) failableFunction1);
      FailableFunction<Throwable, IOException, Throwable> failableFunction3 = FailableFunction.nop();
      failableFunction2.andThen((FailableFunction<? super Throwable, ? extends IOException, Throwable>) failableFunction3);
      failableFunction2.compose((FailableFunction<? super IOException, ? extends IOException, Throwable>) failableFunction1);
      MockThrowable mockThrowable0 = new MockThrowable("Ht73T8vZ");
      MockIOException mockIOException0 = new MockIOException("blank_blank_blank_2014", mockThrowable0);
      FailableFunction<Throwable, IOException, Throwable> failableFunction4 = (FailableFunction<Throwable, IOException, Throwable>) mock(FailableFunction.class, new ViolatedAssumptionAnswer());
      doReturn(mockIOException0).when(failableFunction4).apply(any(java.lang.Throwable.class));
      FailableFunction<IOException, Throwable, Throwable> failableFunction5 = failableFunction2.andThen((FailableFunction<? super Throwable, ? extends Throwable, Throwable>) failableFunction4);
      failableFunction2.compose((FailableFunction<? super IOException, ? extends IOException, Throwable>) failableFunction1);
      FailableFunction<IOException, IOException, Throwable> failableFunction6 = failableFunction0.andThen((FailableFunction<? super Throwable, ? extends IOException, Throwable>) failableFunction3);
      failableFunction3.andThen((FailableFunction<? super IOException, ? extends Throwable, Throwable>) failableFunction5);
      MockIOException mockIOException1 = new MockIOException("}");
      FailableFunction<IOException, Throwable, Throwable> failableFunction7 = failableFunction5.andThen((FailableFunction<? super Throwable, ? extends Throwable, Throwable>) failableFunction3);
      failableFunction7.compose((FailableFunction<? super IOException, ? extends IOException, Throwable>) failableFunction6);
      MockIOException mockIOException2 = new MockIOException("", mockIOException1);
      Failable.apply(failableFunction5, (IOException) mockIOException2);
      FailableLongConsumer<IOException> failableLongConsumer0 = FailableLongConsumer.nop();
      FailableLongConsumer<IOException> failableLongConsumer1 = FailableLongConsumer.nop();
      failableLongConsumer0.andThen(failableLongConsumer1);
      FailableLongConsumer<IOException> failableLongConsumer2 = failableLongConsumer0.andThen(failableLongConsumer1);
      failableLongConsumer0.andThen(failableLongConsumer2);
      Failable.accept(failableLongConsumer0, 835L);
      FailableDoubleSupplier<Throwable> failableDoubleSupplier0 = (FailableDoubleSupplier<Throwable>) mock(FailableDoubleSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-1806.4782190383)).when(failableDoubleSupplier0).getAsDouble();
      double double0 = Failable.getAsDouble(failableDoubleSupplier0);
      assertEquals((-1806.4782190383), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Failable.asBiConsumer((FailableBiConsumer<IOException, IOException, ?>) null);
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate1 = FailableBiPredicate.truePredicate();
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate2 = failableBiPredicate0.and(failableBiPredicate1);
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate3 = failableBiPredicate2.negate();
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate4 = failableBiPredicate3.or(failableBiPredicate0);
      MockError mockError0 = new MockError();
      MockError mockError1 = new MockError(mockError0);
      MockIOException mockIOException0 = new MockIOException(mockError1);
      boolean boolean0 = Failable.test(failableBiPredicate4, (IOException) mockIOException0, (Throwable) mockError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableConsumer.nop();
      MockIOException mockIOException0 = new MockIOException("n9X~mgtQ@w=PgE_EP");
      FailableCallable<IOException, IOException> failableCallable0 = (FailableCallable<IOException, IOException>) mock(FailableCallable.class, new ViolatedAssumptionAnswer());
      doReturn(mockIOException0).when(failableCallable0).call();
      IOException iOException0 = Failable.call(failableCallable0);
      assertSame(mockIOException0, iOException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      // Undeclared exception!
      try { 
        Failable.rethrow(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FailableIntSupplier<IOException> failableIntSupplier0 = (FailableIntSupplier<IOException>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(14).when(failableIntSupplier0).getAsInt();
      Failable.getAsInt(failableIntSupplier0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        Failable.rethrow(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FailablePredicate<IOException, Throwable> failablePredicate0 = FailablePredicate.falsePredicate();
      FailablePredicate<IOException, Throwable> failablePredicate1 = failablePredicate0.negate();
      FailablePredicate<IOException, Throwable> failablePredicate2 = failablePredicate1.or(failablePredicate0);
      failablePredicate2.or(failablePredicate1);
      Failable.asPredicate((FailablePredicate<IOException, ?>) failablePredicate2);
      FailableLongSupplier<IOException> failableLongSupplier0 = (FailableLongSupplier<IOException>) mock(FailableLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(2951L).when(failableLongSupplier0).getAsLong();
      Failable.getAsLong(failableLongSupplier0);
      FailableBiFunction.nop();
      FailableFunction<IOException, IOException, IOException> failableFunction0 = FailableFunction.nop();
      FailableFunction<IOException, IOException, IOException> failableFunction1 = FailableFunction.identity();
      FailableFunction<IOException, IOException, IOException> failableFunction2 = failableFunction0.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction1);
      failableFunction2.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction1);
      failableFunction0.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction2);
      String string0 = "Gx~xrjGxNtJ(^";
      MockIOException mockIOException0 = new MockIOException("Gx~xrjGxNtJ(^");
      MockError mockError0 = new MockError(mockIOException0);
      // Undeclared exception!
      try { 
        Failable.rethrow(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FailableBiFunction<Throwable, IOException, IOException, Throwable> failableBiFunction0 = FailableBiFunction.nop();
      FailableFunction<Throwable, IOException, Throwable> failableFunction0 = FailableFunction.nop();
      FailableBiFunction<Throwable, IOException, IOException, Throwable> failableBiFunction1 = failableBiFunction0.andThen((FailableFunction<? super IOException, ? extends IOException, Throwable>) failableFunction0);
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      Failable.apply(failableBiFunction1, (Throwable) mockThrowable0, (IOException) mockIOException0);
      FailableCallable<Throwable, IOException> failableCallable0 = (FailableCallable<Throwable, IOException>) mock(FailableCallable.class, new ViolatedAssumptionAnswer());
      Failable.asCallable((FailableCallable<Throwable, ?>) failableCallable0);
      FailableFunction<IOException, IOException, Throwable> failableFunction1 = FailableFunction.nop();
      Failable.asFunction((FailableFunction<IOException, IOException, ?>) failableFunction1);
      FailablePredicate<IOException, IOException> failablePredicate0 = FailablePredicate.truePredicate();
      FailablePredicate<Throwable, IOException> failablePredicate1 = FailablePredicate.falsePredicate();
      FailablePredicate<IOException, IOException> failablePredicate2 = failablePredicate0.and(failablePredicate1);
      failablePredicate2.negate();
      Failable.asPredicate((FailablePredicate<IOException, ?>) failablePredicate0);
      LinkedList<IOException> linkedList0 = new LinkedList<IOException>();
      Stream<IOException> stream0 = linkedList0.parallelStream();
      Failable.stream(stream0);
      FailableDoubleSupplier<Throwable> failableDoubleSupplier0 = (FailableDoubleSupplier<Throwable>) mock(FailableDoubleSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(failableDoubleSupplier0).getAsDouble();
      double double0 = Failable.getAsDouble(failableDoubleSupplier0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableLongSupplier<Throwable> failableLongSupplier0 = (FailableLongSupplier<Throwable>) mock(FailableLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(failableLongSupplier0).getAsLong();
      Failable.getAsLong(failableLongSupplier0);
      FailableBiPredicate<IOException, IOException, IOException> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      MockIOException mockIOException0 = new MockIOException("&hJi`&o\"KXpb:");
      MockIOException mockIOException1 = new MockIOException("&hJi`&o\"KXpb:", mockIOException0);
      boolean boolean0 = Failable.test(failableBiPredicate0, (IOException) mockIOException1, (IOException) mockIOException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FailableIntSupplier<IOException> failableIntSupplier0 = (FailableIntSupplier<IOException>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-13)).when(failableIntSupplier0).getAsInt();
      Failable.getAsInt(failableIntSupplier0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FailableDoubleSupplier<Throwable> failableDoubleSupplier0 = (FailableDoubleSupplier<Throwable>) mock(FailableDoubleSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(failableDoubleSupplier0).getAsDouble();
      Failable.getAsDouble(failableDoubleSupplier0);
      FailableBiConsumer<IOException, Throwable, IOException> failableBiConsumer0 = FailableBiConsumer.nop();
      FailableBiConsumer<IOException, Throwable, IOException> failableBiConsumer1 = failableBiConsumer0.andThen(failableBiConsumer0);
      BiConsumer<IOException, Throwable> biConsumer0 = Failable.asBiConsumer((FailableBiConsumer<IOException, Throwable, ?>) failableBiConsumer1);
      assertNotNull(biConsumer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FailableIntSupplier<IOException> failableIntSupplier0 = (FailableIntSupplier<IOException>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(failableIntSupplier0).getAsInt();
      Failable.getAsInt(failableIntSupplier0);
      FailableConsumer.nop();
      FailableIntConsumer<Throwable> failableIntConsumer0 = FailableIntConsumer.nop();
      FailableIntConsumer<Throwable> failableIntConsumer1 = failableIntConsumer0.andThen(failableIntConsumer0);
      Failable.accept(failableIntConsumer1, 4);
      assertFalse(failableIntConsumer0.equals((Object)failableIntConsumer1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, (FailableRunnable<? extends Throwable>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Streams.FailableStream<IOException> streams_FailableStream0 = Failable.stream((Stream<IOException>) null);
      assertNotNull(streams_FailableStream0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FailableConsumer.nop();
      FailablePredicate<Throwable, Throwable> failablePredicate0 = FailablePredicate.falsePredicate();
      FailablePredicate<Throwable, Throwable> failablePredicate1 = FailablePredicate.truePredicate();
      FailablePredicate<Throwable, Throwable> failablePredicate2 = failablePredicate0.or(failablePredicate1);
      failablePredicate2.or(failablePredicate1);
      boolean boolean0 = Failable.test(failablePredicate1, (Throwable) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FailableConsumer<Throwable, IOException> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<Throwable, IOException> failableConsumer1 = FailableConsumer.nop();
      failableConsumer1.andThen(failableConsumer0);
      FailableConsumer<Throwable, IOException> failableConsumer2 = failableConsumer1.andThen(failableConsumer0);
      failableConsumer2.andThen(failableConsumer1);
      failableConsumer1.andThen(failableConsumer0);
      failableConsumer0.andThen(failableConsumer1);
      FailableConsumer<Throwable, IOException> failableConsumer3 = failableConsumer0.andThen(failableConsumer0);
      failableConsumer3.andThen(failableConsumer2);
      failableConsumer3.andThen(failableConsumer1);
      Failable.asConsumer((FailableConsumer<Throwable, ?>) failableConsumer3);
      FailableDoubleBinaryOperator<IOException> failableDoubleBinaryOperator0 = (FailableDoubleBinaryOperator<IOException>) mock(FailableDoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(failableDoubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      Failable.applyAsDouble(failableDoubleBinaryOperator0, 1.0, 1.0);
      FailablePredicate<Throwable, IOException> failablePredicate0 = FailablePredicate.falsePredicate();
      FailablePredicate<Throwable, IOException> failablePredicate1 = FailablePredicate.truePredicate();
      FailablePredicate<Throwable, IOException> failablePredicate2 = failablePredicate0.and(failablePredicate1);
      FailablePredicate<Throwable, IOException> failablePredicate3 = failablePredicate0.negate();
      FailablePredicate<Throwable, IOException> failablePredicate4 = failablePredicate2.or(failablePredicate3);
      failablePredicate3.and(failablePredicate4);
      failablePredicate2.and(failablePredicate1);
      failablePredicate1.or(failablePredicate3);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      Failable.test(failablePredicate4, (Throwable) mockRuntimeException0);
      MockIOException mockIOException0 = new MockIOException("$3].M}}I_u)B#0OM7Qe");
      UnaryOperator<IOException> unaryOperator0 = UnaryOperator.identity();
      Stream<IOException> stream0 = Stream.iterate((IOException) mockIOException0, unaryOperator0);
      Failable.stream(stream0);
      Failable.accept(failableConsumer1, (Throwable) mockRuntimeException0);
      assertSame(failableConsumer1, failableConsumer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 0);
      FailableBiFunction.nop();
      // Undeclared exception!
      try { 
        Failable.apply((FailableFunction<Stream<IOException>, IOException, IOException>) null, (Stream<IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FailableLongSupplier<IOException> failableLongSupplier0 = (FailableLongSupplier<IOException>) mock(FailableLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(failableLongSupplier0).getAsLong();
      Failable.getAsLong(failableLongSupplier0);
      MockIOException mockIOException0 = new MockIOException("%s does not implement the CartesianAnnotationConsumer<T> interface.");
      // Undeclared exception!
      try { 
        Failable.apply((FailableFunction<IOException, Throwable, IOException>) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Callable<Stream<Throwable>> callable0 = Failable.asCallable((FailableCallable<Stream<Throwable>, ?>) null);
      assertNotNull(callable0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FailableSupplier<Throwable, IOException> failableSupplier0 = (FailableSupplier<Throwable, IOException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(failableSupplier0).get();
      Failable.get(failableSupplier0);
      FailableLongSupplier<Throwable> failableLongSupplier0 = (FailableLongSupplier<Throwable>) mock(FailableLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(failableLongSupplier0).getAsLong();
      Failable.getAsLong(failableLongSupplier0);
      FailableCallable<Throwable, IOException> failableCallable0 = (FailableCallable<Throwable, IOException>) mock(FailableCallable.class, new ViolatedAssumptionAnswer());
      Failable.asCallable((FailableCallable<Throwable, ?>) failableCallable0);
      LinkedList<IOException> linkedList0 = new LinkedList<IOException>();
      Streams.FailableStream<IOException> streams_FailableStream0 = Failable.stream((Collection<IOException>) linkedList0);
      assertNotNull(streams_FailableStream0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // throwable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Failable.run(failableRunnable0);
      FailableIntSupplier<Throwable> failableIntSupplier0 = (FailableIntSupplier<Throwable>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(failableIntSupplier0).getAsInt();
      Failable.getAsInt(failableIntSupplier0);
      FailableSupplier<IOException, IOException> failableSupplier0 = (FailableSupplier<IOException, IOException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      Failable.asSupplier((FailableSupplier<IOException, ?>) failableSupplier0);
      FailableRunnable<Throwable> failableRunnable1 = (FailableRunnable<Throwable>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 2);
      failableRunnableArray0[0] = failableRunnable0;
      failableRunnableArray0[1] = failableRunnable0;
      Failable.tryWithResources(failableRunnable1, (FailableConsumer<Throwable, ? extends Throwable>) null, failableRunnableArray0);
      FailableBooleanSupplier<IOException> failableBooleanSupplier0 = (FailableBooleanSupplier<IOException>) mock(FailableBooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(failableBooleanSupplier0).getAsBoolean();
      Failable.getAsBoolean(failableBooleanSupplier0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        Failable.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // throwable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FailableFunction<Throwable, IOException, IOException> failableFunction0 = FailableFunction.nop();
      failableFunction0.andThen((FailableFunction<? super IOException, ? extends Throwable, IOException>) failableFunction0);
      IOException iOException0 = Failable.apply(failableFunction0, (Throwable) null);
      assertNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FailableFunction<IOException, Throwable, Throwable> failableFunction0 = FailableFunction.nop();
      FailableFunction<IOException, IOException, Throwable> failableFunction1 = FailableFunction.identity();
      FailableFunction<IOException, Throwable, Throwable> failableFunction2 = failableFunction0.compose((FailableFunction<? super IOException, ? extends IOException, Throwable>) failableFunction1);
      FailableFunction<Throwable, IOException, Throwable> failableFunction3 = FailableFunction.nop();
      failableFunction2.andThen((FailableFunction<? super Throwable, ? extends IOException, Throwable>) failableFunction3);
      failableFunction2.compose((FailableFunction<? super IOException, ? extends IOException, Throwable>) failableFunction1);
      FailableFunction<Throwable, IOException, Throwable> failableFunction4 = (FailableFunction<Throwable, IOException, Throwable>) mock(FailableFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(failableFunction4).apply(any(java.lang.Throwable.class));
      FailableFunction<IOException, Throwable, Throwable> failableFunction5 = failableFunction2.andThen((FailableFunction<? super Throwable, ? extends Throwable, Throwable>) failableFunction4);
      failableFunction2.compose((FailableFunction<? super IOException, ? extends IOException, Throwable>) failableFunction1);
      failableFunction0.andThen((FailableFunction<? super Throwable, ? extends IOException, Throwable>) failableFunction3);
      failableFunction3.andThen((FailableFunction<? super IOException, ? extends Throwable, Throwable>) failableFunction5);
      MockIOException mockIOException0 = new MockIOException("}");
      failableFunction5.andThen((FailableFunction<? super Throwable, ? extends Throwable, Throwable>) failableFunction3);
      failableFunction5.compose((FailableFunction<? super IOException, ? extends IOException, Throwable>) failableFunction1);
      MockIOException mockIOException1 = new MockIOException("", mockIOException0);
      Failable.apply(failableFunction5, (IOException) mockIOException1);
      FailableLongConsumer<IOException> failableLongConsumer0 = FailableLongConsumer.nop();
      FailableLongConsumer<IOException> failableLongConsumer1 = FailableLongConsumer.nop();
      failableLongConsumer0.andThen(failableLongConsumer1);
      FailableLongConsumer<IOException> failableLongConsumer2 = failableLongConsumer0.andThen(failableLongConsumer1);
      failableLongConsumer0.andThen(failableLongConsumer2);
      Failable.accept(failableLongConsumer0, 835L);
      FailableDoubleSupplier<Throwable> failableDoubleSupplier0 = (FailableDoubleSupplier<Throwable>) mock(FailableDoubleSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(failableDoubleSupplier0).getAsDouble();
      double double0 = Failable.getAsDouble(failableDoubleSupplier0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FailableBiPredicate<IOException, IOException, IOException> failableBiPredicate0 = FailableBiPredicate.truePredicate();
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate1 = FailableBiPredicate.truePredicate();
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate2 = failableBiPredicate1.negate();
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate3 = failableBiPredicate1.and(failableBiPredicate2);
      failableBiPredicate0.or(failableBiPredicate3);
      FailableBiPredicate<IOException, IOException, IOException> failableBiPredicate4 = failableBiPredicate0.negate();
      failableBiPredicate2.and(failableBiPredicate3);
      MockThrowable mockThrowable0 = new MockThrowable();
      failableBiPredicate4.or(failableBiPredicate1);
      failableBiPredicate1.and(failableBiPredicate3);
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      Failable.test(failableBiPredicate4, (IOException) mockIOException0, (IOException) mockIOException0);
      FailableRunnable<Throwable> failableRunnable0 = (FailableRunnable<Throwable>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Failable.asRunnable(failableRunnable0);
      Failable.asBiPredicate((FailableBiPredicate<IOException, Throwable, ?>) failableBiPredicate2);
      FailableDoubleBinaryOperator<IOException> failableDoubleBinaryOperator0 = (FailableDoubleBinaryOperator<IOException>) mock(FailableDoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(failableDoubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      Failable.applyAsDouble(failableDoubleBinaryOperator0, (-1220.14062178), (-1220.14062178));
      FailableSupplier<IOException, IOException> failableSupplier0 = (FailableSupplier<IOException, IOException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      Failable.asSupplier((FailableSupplier<IOException, ?>) failableSupplier0);
      FailableConsumer<Throwable, IOException> failableConsumer0 = FailableConsumer.nop();
      FailableRunnable<Throwable>[] failableRunnableArray0 = (FailableRunnable<Throwable>[]) Array.newInstance(FailableRunnable.class, 3);
      failableRunnableArray0[0] = failableRunnable0;
      failableRunnableArray0[1] = failableRunnable0;
      failableRunnableArray0[2] = failableRunnable0;
      Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, failableConsumer0, failableRunnableArray0);
      assertEquals(3, failableRunnableArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FailablePredicate<IOException, Throwable> failablePredicate0 = FailablePredicate.falsePredicate();
      FailablePredicate<IOException, Throwable> failablePredicate1 = failablePredicate0.negate();
      FailablePredicate<IOException, Throwable> failablePredicate2 = failablePredicate1.or(failablePredicate0);
      failablePredicate2.or(failablePredicate1);
      Failable.asPredicate((FailablePredicate<IOException, ?>) failablePredicate2);
      FailableLongSupplier<IOException> failableLongSupplier0 = (FailableLongSupplier<IOException>) mock(FailableLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(failableLongSupplier0).getAsLong();
      Failable.getAsLong(failableLongSupplier0);
      FailableBiFunction<IOException, IOException, IOException, IOException> failableBiFunction0 = FailableBiFunction.nop();
      FailableFunction<IOException, IOException, IOException> failableFunction0 = FailableFunction.nop();
      FailableFunction<IOException, IOException, IOException> failableFunction1 = FailableFunction.identity();
      FailableFunction<IOException, IOException, IOException> failableFunction2 = failableFunction0.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction1);
      FailableBiFunction<IOException, IOException, IOException, IOException> failableBiFunction1 = failableBiFunction0.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction2);
      IOException iOException0 = Failable.apply(failableBiFunction1, (IOException) null, (IOException) null);
      assertNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Failable.run((FailableRunnable<IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FailableBiFunction<Throwable, IOException, IOException, IOException> failableBiFunction0 = FailableBiFunction.nop();
      FailableFunction<Throwable, IOException, IOException> failableFunction0 = FailableFunction.nop();
      FailableFunction<IOException, IOException, IOException> failableFunction1 = FailableFunction.identity();
      FailableFunction<IOException, IOException, IOException> failableFunction2 = failableFunction1.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction0);
      FailableFunction<Throwable, IOException, IOException> failableFunction3 = failableFunction0.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction2);
      FailableFunction<Throwable, IOException, IOException> failableFunction4 = failableFunction3.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction2);
      failableBiFunction0.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction3);
      failableBiFunction0.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction2);
      FailableFunction<Throwable, IOException, IOException> failableFunction5 = FailableFunction.nop();
      FailableBiFunction<Throwable, IOException, IOException, IOException> failableBiFunction1 = failableBiFunction0.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction5);
      failableBiFunction1.andThen((FailableFunction<? super IOException, ? extends Throwable, IOException>) failableFunction5);
      failableBiFunction1.andThen((FailableFunction<? super IOException, ? extends Throwable, IOException>) failableFunction2);
      failableBiFunction1.andThen((FailableFunction<? super IOException, ? extends Throwable, IOException>) failableFunction1);
      failableBiFunction1.andThen((FailableFunction<? super IOException, ? extends Throwable, IOException>) failableFunction5);
      Failable.asBiFunction((FailableBiFunction<Throwable, IOException, IOException, ?>) failableBiFunction1);
      FailableSupplier<Throwable, IOException> failableSupplier0 = (FailableSupplier<Throwable, IOException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      Failable.asSupplier((FailableSupplier<Throwable, ?>) failableSupplier0);
      LinkedList<IOException> linkedList0 = new LinkedList<IOException>();
      Failable.stream((Collection<IOException>) linkedList0);
      FailableBiConsumer<IOException, IOException, Throwable> failableBiConsumer0 = FailableBiConsumer.nop();
      FailableBiConsumer<Throwable, IOException, Throwable> failableBiConsumer1 = (FailableBiConsumer<Throwable, IOException, Throwable>) mock(FailableBiConsumer.class, new ViolatedAssumptionAnswer());
      FailableBiConsumer<IOException, IOException, Throwable> failableBiConsumer2 = failableBiConsumer0.andThen(failableBiConsumer1);
      Failable.asBiConsumer((FailableBiConsumer<IOException, IOException, ?>) failableBiConsumer2);
      FailableBiFunction<Throwable, Throwable, IOException, IOException> failableBiFunction2 = FailableBiFunction.nop();
      FailableBiFunction<Throwable, Throwable, IOException, IOException> failableBiFunction3 = failableBiFunction2.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction4);
      Failable.apply(failableBiFunction3, (Throwable) null, (Throwable) null);
      FailableRunnable<IOException> failableRunnable0 = null;
      // Undeclared exception!
      try { 
        Failable.run((FailableRunnable<IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FailableBiConsumer<IOException, IOException, IOException> failableBiConsumer0 = FailableBiConsumer.nop();
      BiConsumer<IOException, IOException> biConsumer0 = Failable.asBiConsumer((FailableBiConsumer<IOException, IOException, ?>) failableBiConsumer0);
      assertNotNull(biConsumer0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.getAsLong((FailableLongSupplier<IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableConsumer.nop();
      MockIOException mockIOException0 = new MockIOException((String) null);
      // Undeclared exception!
      try { 
        Failable.test((FailableBiPredicate<IOException, IOException, IOException>) null, (IOException) mockIOException0, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        Failable.getAsBoolean((FailableBooleanSupplier<IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FailableBiFunction<Object, Object, IOException, IOException> failableBiFunction0 = FailableBiFunction.nop();
      IOException iOException0 = Failable.apply(failableBiFunction0, (Object) failableBiFunction0, (Object) failableBiFunction0);
      assertNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FailableCallable<Throwable, IOException> failableCallable0 = (FailableCallable<Throwable, IOException>) mock(FailableCallable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(failableCallable0).call();
      Failable.call(failableCallable0);
      LinkedList<IOException> linkedList0 = new LinkedList<IOException>();
      MockIOException mockIOException0 = new MockIOException();
      linkedList0.add((IOException) mockIOException0);
      MockIOException mockIOException1 = new MockIOException();
      mockIOException1.fillInStackTrace();
      MockIOException mockIOException2 = new MockIOException();
      mockIOException2.getStackTrace();
      linkedList0.removeFirstOccurrence(mockIOException2);
      linkedList0.offerLast(mockIOException1);
      Failable.stream((Collection<IOException>) linkedList0);
      // Undeclared exception!
      try { 
        Failable.getAsBoolean((FailableBooleanSupplier<IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FailableSupplier<Throwable, IOException> failableSupplier0 = (FailableSupplier<Throwable, IOException>) mock(FailableSupplier.class, new ViolatedAssumptionAnswer());
      Failable.asSupplier((FailableSupplier<Throwable, ?>) failableSupplier0);
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Failable.run(failableRunnable0);
      FailablePredicate<IOException, IOException> failablePredicate0 = FailablePredicate.truePredicate();
      FailablePredicate<IOException, IOException> failablePredicate1 = failablePredicate0.negate();
      FailablePredicate<IOException, IOException> failablePredicate2 = failablePredicate1.or(failablePredicate0);
      FailablePredicate<IOException, IOException> failablePredicate3 = failablePredicate1.and(failablePredicate0);
      failablePredicate0.and(failablePredicate2);
      failablePredicate3.or(failablePredicate0);
      FailablePredicate<IOException, IOException> failablePredicate4 = failablePredicate3.or(failablePredicate1);
      failablePredicate4.or(failablePredicate0);
      Failable.asPredicate((FailablePredicate<IOException, ?>) failablePredicate4);
      FailableIntSupplier<IOException> failableIntSupplier0 = (FailableIntSupplier<IOException>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(failableIntSupplier0).getAsInt();
      Failable.getAsInt(failableIntSupplier0);
      FailableBiFunction<Throwable, IOException, Throwable, IOException> failableBiFunction0 = FailableBiFunction.nop();
      FailableFunction<Throwable, Throwable, IOException> failableFunction0 = null;
      // Undeclared exception!
      try { 
        failableBiFunction0.andThen((FailableFunction<? super Throwable, ? extends Throwable, IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Supplier<Throwable> supplier0 = Failable.asSupplier((FailableSupplier<Throwable, ?>) null);
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FailableIntConsumer<Throwable> failableIntConsumer0 = FailableIntConsumer.nop();
      FailableIntConsumer<Throwable> failableIntConsumer1 = failableIntConsumer0.andThen(failableIntConsumer0);
      Failable.accept(failableIntConsumer1, 4);
      FailableBiFunction<Throwable, Throwable, IOException, IOException> failableBiFunction0 = FailableBiFunction.nop();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      IOException iOException0 = Failable.apply(failableBiFunction0, (Throwable) mockIOException0, (Throwable) mockIOException0);
      assertNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate1 = failableBiPredicate0.or(failableBiPredicate0);
      MockError mockError0 = new MockError();
      MockError mockError1 = new MockError(mockError0);
      MockIOException mockIOException0 = new MockIOException(mockError1);
      boolean boolean0 = Failable.test(failableBiPredicate1, (IOException) mockIOException0, (Throwable) mockError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FailableBiConsumer<IOException, IOException, IOException> failableBiConsumer0 = FailableBiConsumer.nop();
      MockIOException mockIOException0 = new MockIOException((String) null);
      Failable.accept(failableBiConsumer0, (IOException) mockIOException0, (IOException) mockIOException0);
      FailableConsumer<Throwable, IOException> failableConsumer0 = FailableConsumer.nop();
      assertNotNull(failableConsumer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FailableBiConsumer<IOException, IOException, IOException> failableBiConsumer0 = FailableBiConsumer.nop();
      FailableBiConsumer<Throwable, IOException, IOException> failableBiConsumer1 = (FailableBiConsumer<Throwable, IOException, IOException>) mock(FailableBiConsumer.class, new ViolatedAssumptionAnswer());
      FailableBiConsumer<IOException, IOException, IOException> failableBiConsumer2 = failableBiConsumer0.andThen(failableBiConsumer1);
      MockIOException mockIOException0 = new MockIOException((String) null);
      Failable.accept(failableBiConsumer2, (IOException) mockIOException0, (IOException) mockIOException0);
      FailableBiPredicate<IOException, IOException, IOException> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      Failable.test(failableBiPredicate0, (IOException) mockIOException0, (IOException) mockIOException0);
      FailableRunnable<Throwable> failableRunnable0 = (FailableRunnable<Throwable>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 6);
      FailableRunnable<IOException> failableRunnable1 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      failableRunnableArray0[0] = failableRunnable1;
      failableRunnableArray0[1] = failableRunnable1;
      failableRunnableArray0[2] = failableRunnable1;
      failableRunnableArray0[3] = failableRunnable1;
      failableRunnableArray0[4] = failableRunnable1;
      failableRunnableArray0[5] = failableRunnable1;
      Failable.tryWithResources(failableRunnable0, (FailableConsumer<Throwable, ? extends Throwable>) null, failableRunnableArray0);
      FailableIntConsumer<Throwable> failableIntConsumer0 = FailableIntConsumer.nop();
      FailableIntConsumer<Throwable> failableIntConsumer1 = failableIntConsumer0.andThen(failableIntConsumer0);
      Failable.accept(failableIntConsumer1, (-4058));
      assertFalse(failableIntConsumer0.equals((Object)failableIntConsumer1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FailableBiPredicate<Stream<IOException>, IntStream, IOException> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      BiPredicate<Stream<IOException>, IntStream> biPredicate0 = Failable.asBiPredicate((FailableBiPredicate<Stream<IOException>, IntStream, ?>) failableBiPredicate0);
      assertNotNull(biPredicate0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate0 = FailableBiPredicate.truePredicate();
      FailableBiPredicate<Throwable, Throwable, IOException> failableBiPredicate1 = FailableBiPredicate.falsePredicate();
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate2 = failableBiPredicate0.or(failableBiPredicate1);
      failableBiPredicate2.and(failableBiPredicate0);
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate3 = failableBiPredicate2.or(failableBiPredicate1);
      failableBiPredicate0.or(failableBiPredicate3);
      failableBiPredicate0.or(failableBiPredicate1);
      failableBiPredicate0.and(failableBiPredicate2);
      FailableBiPredicate<IOException, Throwable, IOException> failableBiPredicate4 = failableBiPredicate0.negate();
      failableBiPredicate4.and(failableBiPredicate3);
      failableBiPredicate4.or(failableBiPredicate1);
      failableBiPredicate4.or(failableBiPredicate3);
      Failable.asBiPredicate((FailableBiPredicate<IOException, Throwable, ?>) failableBiPredicate4);
      FailableConsumer<IOException, Throwable> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<Throwable, Throwable> failableConsumer1 = FailableConsumer.nop();
      failableConsumer0.andThen(failableConsumer1);
      Failable.asConsumer((FailableConsumer<IOException, ?>) failableConsumer0);
      LinkedList<Throwable> linkedList0 = new LinkedList<Throwable>();
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(object0);
      linkedList0.iterator();
      Failable.stream((Collection<Throwable>) linkedList0);
      LinkedList<IOException> linkedList1 = new LinkedList<IOException>();
      Streams.FailableStream<IOException> streams_FailableStream0 = Failable.stream((Collection<IOException>) linkedList1);
      FailableRunnable<Throwable> failableRunnable0 = (FailableRunnable<Throwable>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Failable.run(failableRunnable0);
      Streams.FailableStream<IOException> streams_FailableStream1 = Failable.stream((Collection<IOException>) linkedList1);
      assertNotSame(streams_FailableStream1, streams_FailableStream0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 4);
      FailableConsumer<Throwable, IOException> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<Throwable, IOException> failableConsumer1 = failableConsumer0.andThen(failableConsumer0);
      // Undeclared exception!
      try { 
        Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, failableConsumer1, failableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // runnable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FailableIntSupplier<Throwable> failableIntSupplier0 = (FailableIntSupplier<Throwable>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(failableIntSupplier0).getAsInt();
      Failable.getAsInt(failableIntSupplier0);
      FailableConsumer<Throwable, IOException> failableConsumer0 = FailableConsumer.nop();
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 2);
      failableRunnableArray0[0] = null;
      failableRunnableArray0[1] = null;
      // Undeclared exception!
      try { 
        Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, failableConsumer0, failableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // runnable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Runnable runnable0 = Failable.asRunnable((FailableRunnable<?>) null);
      assertNotNull(runnable0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FailableFunction<IOException, IOException, IOException> failableFunction0 = FailableFunction.identity();
      Function<IOException, IOException> function0 = Failable.asFunction((FailableFunction<IOException, IOException, ?>) failableFunction0);
      assertNotNull(function0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FailableFunction<IOException, IOException, IOException> failableFunction0 = FailableFunction.nop();
      FailableFunction<IOException, IOException, IOException> failableFunction1 = FailableFunction.identity();
      failableFunction0.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction1);
      failableFunction0.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction1);
      FailableFunction<Throwable, IOException, IOException> failableFunction2 = FailableFunction.nop();
      FailableFunction<Throwable, IOException, IOException> failableFunction3 = failableFunction2.compose((FailableFunction<? super Throwable, ? extends Throwable, IOException>) failableFunction2);
      FailableFunction<Throwable, IOException, IOException> failableFunction4 = failableFunction3.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction2);
      failableFunction4.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction3);
      failableFunction1.compose((FailableFunction<? super Throwable, ? extends IOException, IOException>) failableFunction4);
      failableFunction1.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction0);
      failableFunction0.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction1);
      Failable.asFunction((FailableFunction<IOException, IOException, ?>) failableFunction0);
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Failable.asRunnable(failableRunnable0);
      FailableConsumer<IOException, IOException> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<Throwable, IOException> failableConsumer1 = (FailableConsumer<Throwable, IOException>) mock(FailableConsumer.class, new ViolatedAssumptionAnswer());
      FailableConsumer<IOException, IOException> failableConsumer2 = failableConsumer0.andThen(failableConsumer1);
      Failable.asConsumer((FailableConsumer<IOException, ?>) failableConsumer2);
      FailableBiPredicate.truePredicate();
      MockThrowable mockThrowable0 = new MockThrowable("org.apache.commons.lang3.function.Failable");
      MockIOException mockIOException0 = new MockIOException("org.apache.commons.lang3.function.Failable", mockThrowable0);
      // Undeclared exception!
      try { 
        Failable.rethrow(mockIOException0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.commons.lang3.function.Failable
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FailablePredicate<Throwable, IOException> failablePredicate0 = FailablePredicate.falsePredicate();
      Predicate<Throwable> predicate0 = Failable.asPredicate((FailablePredicate<Throwable, ?>) failablePredicate0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FailableConsumer<IOException, Throwable> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<Throwable, Throwable> failableConsumer1 = FailableConsumer.nop();
      failableConsumer0.andThen(failableConsumer1);
      failableConsumer0.andThen(failableConsumer1);
      Failable.asConsumer((FailableConsumer<IOException, ?>) failableConsumer0);
      FailablePredicate<IOException, IOException> failablePredicate0 = FailablePredicate.truePredicate();
      FailablePredicate<IOException, IOException> failablePredicate1 = FailablePredicate.truePredicate();
      FailablePredicate<IOException, IOException> failablePredicate2 = failablePredicate1.and(failablePredicate0);
      failablePredicate2.and(failablePredicate1);
      failablePredicate0.or(failablePredicate2);
      Failable.asPredicate((FailablePredicate<IOException, ?>) failablePredicate0);
      // Undeclared exception!
      try { 
        Failable.getAsDouble((FailableDoubleSupplier<IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FailableConsumer<IOException, IOException> failableConsumer0 = FailableConsumer.nop();
      Consumer<IOException> consumer0 = Failable.asConsumer((FailableConsumer<IOException, ?>) failableConsumer0);
      assertNotNull(consumer0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        Failable.rethrow(mockIOException0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        Failable.rethrow(mockThrowable0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.applyAsDouble((FailableDoubleBinaryOperator<IOException>) null, (-1203.9749), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FailableIntSupplier<IOException> failableIntSupplier0 = (FailableIntSupplier<IOException>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(failableIntSupplier0).getAsInt();
      Failable.getAsInt(failableIntSupplier0);
      MockThrowable mockThrowable0 = new MockThrowable("o3{uY\"5_8VT");
      // Undeclared exception!
      try { 
        Failable.rethrow(mockThrowable0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        Failable.rethrow(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FailableDoubleBinaryOperator<IOException> failableDoubleBinaryOperator0 = (FailableDoubleBinaryOperator<IOException>) mock(FailableDoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(failableDoubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      Failable.applyAsDouble(failableDoubleBinaryOperator0, 44.641, 5187.322);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockError mockError0 = new MockError("kCUt2>U: ", mockThrowable0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("", " must return `CartesianProductTest.Sets`.", "Q", 0);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      MockIOException mockIOException0 = new MockIOException("kCUt2>U: ", mockRuntimeException0);
      // Undeclared exception!
      try { 
        Failable.rethrow(mockIOException0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: kCUt2>U: 
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.getAsInt((FailableIntSupplier<IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FailableDoubleSupplier<IOException> failableDoubleSupplier0 = (FailableDoubleSupplier<IOException>) mock(FailableDoubleSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(failableDoubleSupplier0).getAsDouble();
      Failable.getAsDouble(failableDoubleSupplier0);
      FailableIntSupplier<Throwable> failableIntSupplier0 = (FailableIntSupplier<Throwable>) mock(FailableIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(failableIntSupplier0).getAsInt();
      Failable.getAsInt(failableIntSupplier0);
      FailableRunnable<Throwable>[] failableRunnableArray0 = (FailableRunnable<Throwable>[]) Array.newInstance(FailableRunnable.class, 3);
      FailableRunnable<Throwable> failableRunnable0 = (FailableRunnable<Throwable>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      failableRunnableArray0[0] = failableRunnable0;
      failableRunnableArray0[1] = failableRunnable0;
      failableRunnableArray0[2] = failableRunnable0;
      // Undeclared exception!
      try { 
        Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, failableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.getAsDouble((FailableDoubleSupplier<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Failable.tryWithResources(failableRunnable0, (FailableConsumer<Throwable, ? extends Throwable>) null, (FailableRunnable<? extends Throwable>[]) null);
      FailableIntConsumer<Throwable> failableIntConsumer0 = FailableIntConsumer.nop();
      // Undeclared exception!
      try { 
        failableIntConsumer0.andThen((FailableIntConsumer<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 1);
      failableRunnableArray0[0] = failableRunnable0;
      Failable.tryWithResources(failableRunnable0, failableRunnableArray0);
      assertEquals(1, failableRunnableArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FailableDoubleConsumer<Throwable> failableDoubleConsumer0 = FailableDoubleConsumer.nop();
      Failable.accept(failableDoubleConsumer0, 1.0);
      FailableLongConsumer<Throwable> failableLongConsumer0 = FailableLongConsumer.nop();
      FailableLongConsumer<Throwable> failableLongConsumer1 = failableLongConsumer0.andThen(failableLongConsumer0);
      Failable.accept(failableLongConsumer1, (-1L));
      assertFalse(failableLongConsumer0.equals((Object)failableLongConsumer1));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      Failable.tryWithResources(failableRunnable0, (FailableRunnable<? extends Throwable>[]) null);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 3);
      // Undeclared exception!
      try { 
        Failable.tryWithResources(failableRunnableArray0[0], failableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // runnable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<Throwable> linkedList0 = new LinkedList<Throwable>();
      Failable.stream((Collection<Throwable>) linkedList0);
      FailableLongConsumer<Throwable> failableLongConsumer0 = FailableLongConsumer.nop();
      FailableLongConsumer<Throwable> failableLongConsumer1 = failableLongConsumer0.andThen(failableLongConsumer0);
      failableLongConsumer1.andThen(failableLongConsumer0);
      Failable.accept(failableLongConsumer1, (-894L));
      LinkedList<IOException> linkedList1 = new LinkedList<IOException>();
      MockIOException mockIOException0 = new MockIOException("7GSyvFT(1L{|Ct");
      linkedList1.push(mockIOException0);
      Failable.stream((Collection<IOException>) linkedList1);
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 8);
      failableRunnableArray0[0] = failableRunnable0;
      failableRunnableArray0[1] = failableRunnable0;
      failableRunnableArray0[2] = failableRunnable0;
      failableRunnableArray0[3] = failableRunnable0;
      failableRunnableArray0[4] = failableRunnable0;
      failableRunnableArray0[5] = failableRunnable0;
      failableRunnableArray0[6] = failableRunnable0;
      failableRunnableArray0[7] = failableRunnable0;
      Failable.tryWithResources(failableRunnable0, failableRunnableArray0);
      FailableRunnable<IOException>[] failableRunnableArray1 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 1);
      failableRunnableArray1[0] = failableRunnable0;
      Failable.tryWithResources(failableRunnable0, failableRunnableArray1);
      FailableConsumer<IOException, IOException> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<IOException, IOException> failableConsumer1 = FailableConsumer.nop();
      FailableConsumer<IOException, IOException> failableConsumer2 = failableConsumer0.andThen(failableConsumer1);
      FailableConsumer<IOException, IOException> failableConsumer3 = failableConsumer0.andThen(failableConsumer2);
      FailableConsumer<IOException, IOException> failableConsumer4 = failableConsumer0.andThen(failableConsumer0);
      Failable.accept(failableConsumer4, (IOException) mockIOException0);
      assertNotSame(failableConsumer4, failableConsumer3);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FailableConsumer<Throwable, IOException> failableConsumer0 = FailableConsumer.nop();
      FailableConsumer<Throwable, IOException> failableConsumer1 = failableConsumer0.andThen(failableConsumer0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockThrowable mockThrowable0 = new MockThrowable("", mockRuntimeException0);
      Failable.accept(failableConsumer1, (Throwable) mockThrowable0);
      assertFalse(failableConsumer1.equals((Object)failableConsumer0));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 0);
      // Undeclared exception!
      try { 
        Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, failableRunnableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableBiFunction.nop();
      MockIOException mockIOException0 = new MockIOException("org.junitpioneer.jupiter.json.AbstractJsonArgumentsProvider");
      // Undeclared exception!
      try { 
        Failable.call((FailableCallable<IOException, IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FailableBiFunction<IOException, IOException, Stream<Throwable>, IOException> failableBiFunction0 = FailableBiFunction.nop();
      BiFunction<IOException, IOException, Stream<Throwable>> biFunction0 = Failable.asBiFunction((FailableBiFunction<IOException, IOException, Stream<Throwable>, ?>) failableBiFunction0);
      assertNotNull(biFunction0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FailableCallable<IOException, IOException> failableCallable0 = (FailableCallable<IOException, IOException>) mock(FailableCallable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(failableCallable0).call();
      Failable.call(failableCallable0);
      linkedList0.add((Object) null);
      Streams.FailableStream<Object> streams_FailableStream0 = Failable.stream((Collection<Object>) linkedList0);
      assertNotNull(streams_FailableStream0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FailableBiFunction<IOException, Throwable, IOException, IOException> failableBiFunction0 = FailableBiFunction.nop();
      FailableFunction<IOException, IOException, IOException> failableFunction0 = FailableFunction.identity();
      FailableFunction<IOException, IOException, IOException> failableFunction1 = FailableFunction.nop();
      FailableFunction<IOException, IOException, IOException> failableFunction2 = failableFunction1.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction0);
      FailableFunction<IOException, IOException, IOException> failableFunction3 = failableFunction1.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction2);
      FailableFunction<IOException, IOException, IOException> failableFunction4 = failableFunction1.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction0);
      FailableFunction<IOException, IOException, IOException> failableFunction5 = failableFunction0.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction1);
      failableFunction5.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction3);
      failableFunction5.compose((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction4);
      failableBiFunction0.andThen((FailableFunction<? super IOException, ? extends IOException, IOException>) failableFunction5);
      Failable.asBiFunction((FailableBiFunction<IOException, Throwable, IOException, ?>) failableBiFunction0);
      // Undeclared exception!
      try { 
        Failable.call((FailableCallable<Throwable, IOException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }
}
