/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:26:12 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String[] stringArray0 = new String[12];
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.unwrap("2Y$", '~');
      assertEquals("2Y$", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.countMatches((CharSequence) "2Y$", '~');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, (String) null, 1, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang3.ObjectUtils$Null", 8249, 'c');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string0, "tyal{ea8xO[&\".");
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      short short0 = (short)19;
      shortArray0[0] = (short)19;
      int int0 = 1563;
      String string1 = StringUtils.join(shortArray0, 'H', 1563, 1563);
      assertEquals(1, shortArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)19}, shortArray0);
      
      String string2 = " ";
      String string3 = StringUtils.substringAfterLast("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", " ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("%s", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte)56;
      byteArray0[1] = (byte)56;
      String string4 = " vs ";
      try { 
        StringUtils.toString(byteArray0, " vs ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("org.junitpioneer.jupiter.params.ByteRange", "$", "$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference: group index is missing
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 7;
      String string0 = "^sv-";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.apache.commns.ang3.ArrayUtils", "^sv-", 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("\r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("\r", 8192, "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      StringUtils.getFuzzyDistance(string1, string1, locale0);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang3.ObjectUtils$Null", 8249, 'c');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("org.apache.commons.lang3.ObjectUtils$Null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      String string0 = StringUtils.unwrap("YSmI]qOx)TRm0`{Ye", 'Y');
      assertEquals("YSmI]qOx)TRm0`{Ye", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("YSmI]qOx)TRm0`{Ye", "YSmI]qOx)TRm0`{Ye");
      assertTrue(string1.equals((Object)string0));
      assertEquals("YSmI]qOx)TRm0`{Ye", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "0hWAXQX");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.substringAfter("YSmI]qOx)TRm0`{Ye", "71S");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", " ", 3998);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(string0, " ", 3998);
      assertEquals(3997, int0);
      
      String string1 = StringUtils.capitalize(string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L\"-s5:V", "h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '7';
      charArray0[2] = '+';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.ArrayUtils", charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'W', '7', '+'}, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-22);
      String string0 = StringUtils.join(byteArray0, 'w', (int) (byte)0, (int) (byte)1);
      assertEquals(9, byteArray0.length);
      assertEquals("3", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)3, (byte)90, (byte)0, (byte)0, (byte)1, (byte) (-111), (byte)49, (byte)120, (byte) (-22)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (-186);
      shortArray0[2] = (short)6;
      shortArray0[3] = (short) (-2712);
      shortArray0[4] = (short)4;
      shortArray0[5] = (short) (-14);
      shortArray0[6] = (short) (-14);
      shortArray0[7] = (short)4;
      shortArray0[8] = (short)5;
      String string0 = StringUtils.join(shortArray0, 'F', (int) (short)4, (int) (short)5);
      assertEquals(9, shortArray0.length);
      assertEquals("4", string0);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)6, (short) (-186), (short)6, (short) (-2712), (short)4, (short) (-14), (short) (-14), (short)4, (short)5}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Minimum abbreviation width is %d", " ", 50);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("Minimum abbreviation width is %d", stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      String string0 = StringUtils.unwrap("[?zuqMwO6C%U*", '8');
      assertEquals("[?zuqMwO6C%U*", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "[?zuqMwO6C%U*", '5');
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[35];
      objectArray0[0] = (Object) "\"<KnB#<";
      objectArray0[1] = (Object) "\"<KnB#<";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[3] = (Object) "[?zuqMwO6C%U*";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[12] = object1;
      objectArray0[5] = (Object) "\"<KnB#<";
      String string1 = StringUtils.join(objectArray0, "[", 0, 28);
      assertFalse(string1.equals((Object)string0));
      assertEquals(35, objectArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[?zuqMwO6C%U*", (CharSequence) "\"<KnB#<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("-)|%stAVP@", "O9[xz", 7);
      assertEquals("-O9[xz@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("O9[xz", '~');
      assertFalse(string1.equals((Object)string0));
      assertEquals("O9[xz", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String string0 = "~#";
      // Undeclared exception!
      StringUtils.repeat("offset cannot be negative                                                                                                                                                                                                                                                                                  offset cannot be negative", "`/:|P>X9}sOS}", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      String string0 = StringUtils.repeat("{,Ro[~$y}FE@NI)uRj", "E~", 3164);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String string0 = StringUtils.center("e#", 8249, (String) null);
      assertNotNull(string0);
      
      String string1 = "R#7db%#EUKfu&$";
      String[] stringArray0 = StringUtils.split("R#7db%#EUKfu&$");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string0, (CharSequence) "e#");
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("#@U");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("#@U"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("Classpath resource must not be null or blank");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("#@U"));
      assertEquals(2, priorityQueue0.size());
      
      boolean boolean2 = priorityQueue0.add("Threshold must not be negative");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains("#@U"));
      assertEquals(3, priorityQueue0.size());
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, (String) null);
      assertEquals("Classpath resource must not be null or blank#@UThreshold must not be negative", string0);
      assertNotNull(string0);
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("#@U"));
      assertEquals(3, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      boolean boolean0 = arrayList1.add("kG");
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean0);
      assertTrue(arrayList1.contains("kG"));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      boolean boolean1 = arrayList0.add("#@U");
      assertNotSame(arrayList0, arrayList1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains("kG"));
      assertTrue(arrayList0.contains("#@U"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      boolean boolean2 = StringUtils.isNumericSpace("#@U");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = arrayList0.add("]");
      assertNotSame(arrayList0, arrayList1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(arrayList0.contains("kG"));
      assertTrue(arrayList0.contains("#@U"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      String string0 = StringUtils.chomp("#@U");
      assertEquals("#@U", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("gggggggggggggggggggggggggggggggggggg#C|KT;IBmggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg#C|KT;IBmggggggggggggggggggggggggggggggggggggg", "#@U", 16, 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#@Ugggggggg#@U", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String string0 = "#C|KT;IBm";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[2] = (byte) (-127);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-11);
      // Undeclared exception!
      StringUtils.join(byteArray0, 'T', (-59432204), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String string0 = StringUtils.center("e#", 8249, (String) null);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "e#";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) string0;
      charSequenceArray0[5] = (CharSequence) null;
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(8249));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      String string1 = StringUtils.center(string0, 8249, '!');
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize(string0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = 'h';
      CharSequence charSequence0 = null;
      int int0 = StringUtils.countMatches((CharSequence) null, 'h');
      assertEquals(0, int0);
      
      String string0 = "\"<KnB#<";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'h';
      objectArray0[1] = (Object) 'h';
      objectArray0[2] = (Object) 'h';
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "\"<KnB#<", 0, 1492);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String string0 = "[8";
      String string1 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.ReportEntryExtension", "[8");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'e', (-2215), (-2215));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 'W';
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) '>';
      String string1 = StringUtils.join(doubleArray0, '}', 2, 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals(14, doubleArray0.length);
      assertEquals("87.0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Search and Replace array lengths don't match: ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match:", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[1], 1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.leftPad("{11B,Lw0@q", 52, "=U4<.^_AA&");
      assertEquals("=U4<.^_AA&=U4<.^_AA&=U4<.^_AA&=U4<.^_AA&=U{11B,Lw0@q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("=U4<.^_AA&");
      assertFalse(string1.equals((Object)string0));
      assertEquals("=U4<.^_AA&", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "=U4<.^_AA&=U4<.^_AA&=U4<.^_AA&=U4<.^_AA&=U{11B,Lw0@q", (CharSequence) "{11B,Lw0@q");
      assertEquals(42, int0);
      
      String string2 = StringUtils.substringAfterLast("HlZ7kuFGYB^y", "=U4<.^_AA&");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String string0 = StringUtils.rightPad("offset cannot be negative", 265);
      assertEquals("offset cannot be negative                                                                                                                                                                                                                                                ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = 'K';
      charArray0[2] = 'K';
      charArray0[2] = 'K';
      String[] stringArray0 = StringUtils.substringsBetween("offset cannot be negative                                                                                                                                                                                                                                                ", " ", " ");
      assertEquals(121, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripAccents(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 8192, ']');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) string1;
      // Undeclared exception!
      StringUtils.center("P1Jho(Q(i>y^Yr3)r", 8192);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("blank_blank_blank_2014").when(supplier0).toString();
      String string0 = StringUtils.getIfBlank("blank_blank_blank_2014", supplier0);
      assertEquals("blank_blank_blank_2014", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[25];
      objectArray0[0] = (Object) "blank_blank_blank_2014";
      objectArray0[1] = (Object) "blank_blank_blank_2014";
      objectArray0[2] = (Object) supplier0;
      objectArray0[3] = (Object) "blank_blank_blank_2014";
      objectArray0[4] = (Object) "blank_blank_blank_2014";
      objectArray0[5] = (Object) "blank_blank_blank_2014";
      objectArray0[6] = (Object) "blank_blank_blank_2014";
      String string1 = StringUtils.join(objectArray0, '~', 1, 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals(25, objectArray0.length);
      assertEquals("blank_blank_blank_2014~blank_blank_blank_2014~blank_blank_blank_2014~blank_blank_blank_2014~blank_blank_blank_2014~blank_blank_blank_2014~~~~~~~~~", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.rightPad("", 8, 'I');
      assertEquals("IIIIIIII", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "IIIIIIII", (CharSequence) "", 8);
      assertEquals(8, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "IIIIIIII", (-2072));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.repeat(';', 5328);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(string0, "DefaultLocale", 5328, 28);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DefaultLocale;;;;;;;;;;;;;;;", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("W_Q=mm,0!uBxW8(");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("W_Q=mm,0!uBxW8(", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("1", charSequenceArray0[0]);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlpha("\n");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = StringUtils.wrap("No @DisabledUntil annotation found on element", 'R');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("RNo @DisabledUntil annotation found on elementR", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string3 = StringUtils.getIfBlank("", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean4 = StringUtils.isEmpty("\n");
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string4 = StringUtils.rightPad("{}", (-1), "RNo @DisabledUntil annotation found on elementR");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{}", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[2], charSequenceArray0[3]);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.substringBetween("W(YAY&yW\"H+F3t_e#", "", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-60);
      String string6 = StringUtils.join(byteArray0, 'R', 100, (-2008));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals(2, byteArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-60)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 8192, 'c');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L\"-s5:V", "h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("org.apache.commons.lang3.ArrayUtils", "^v-", 40, 7);
      assertEquals("^v-tils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.unwrap("2Y$", '%');
      assertEquals("2Y$", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.countMatches((CharSequence) "2Y$", 'D');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "\"<KnB#<", 0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "8";
      String[] stringArray0 = StringUtils.split("offset cannot be negativel@`nYB,EY[A6uhIoffset cannot be negativel@`nYB,EY[A6uhIoffset cannot be negativel@`+YB,EY[A6uhIoffset cannot be negativel@`nYB!EY[A6uhIl@`nYB,EY[A6uhI");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "offset cannot be negativel@`nYB,EY[A6uhIoffset cannot be negativel@`nYB,EY[A6uhIoffset cannot be negativel@`+YB,EY[A6uhIoffset cannot be negativel@`nYB!EY[A6uhIl@`nYB,EY[A6uhI", 105);
      assertEquals(22, int0);
      
      String string0 = StringUtils.stripEnd((String) null, "&(P");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\r", 13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.center("\r ", 8192);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 'V';
      floatArray0[2] = (float) 'V';
      floatArray0[3] = (float) 'V';
      floatArray0[4] = (float) 8192;
      floatArray0[5] = (float) 8192;
      floatArray0[6] = (float) 'V';
      floatArray0[7] = (float) 8192;
      floatArray0[8] = (float) 'V';
      String string1 = StringUtils.join(floatArray0, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, floatArray0.length);
      assertEquals("8192.0V86.0V86.0V86.0V8192.0V8192.0V86.0V8192.0V86.0", string1);
      assertNotNull(string1);
      assertArrayEquals(new float[] {8192.0F, 86.0F, 86.0F, 86.0F, 8192.0F, 8192.0F, 86.0F, 8192.0F, 86.0F}, floatArray0, 0.01F);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      // Undeclared exception!
      StringUtils.rightPad("\r ", 8192);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.repeat("...", "Could not resolve parameter of type %s.", 6);
      assertEquals("...Could not resolve parameter of type %s....Could not resolve parameter of type %s....Could not resolve parameter of type %s....Could not resolve parameter of type %s....Could not resolve parameter of type %s....", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("...", 6, "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("......", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, 'i');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Could not resolve parameter of type %s.";
      charSequenceArray0[1] = (CharSequence) "......";
      charSequenceArray0[2] = (CharSequence) "Could not resolve parameter of type %s.";
      charSequenceArray0[3] = (CharSequence) "...";
      String string3 = StringUtils.trimToEmpty((String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "......";
      String string4 = StringUtils.removeAll("Could not resolve parameter of type %s.", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Could not resolve parameter of type %s.", string4);
      assertNotNull(string4);
      
      charSequenceArray0[6] = (CharSequence) "Could not resolve parameter of type %s.";
      int int0 = StringUtils.indexOfAny((CharSequence) "...Could not resolve parameter of type %s....Could not resolve parameter of type %s....Could not resolve parameter of type %s....Could not resolve parameter of type %s....Could not resolve parameter of type %s....", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      String string0 = StringUtils.center("\r ", 8192);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, "\r ");
      assertNull(stringArray0);
      
      String string1 = StringUtils.repeat(string0, 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) string1, 7, 7);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) "Strings must not be null");
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "8", charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {',', ',', ',', ',', ',', ','}, charArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "8");
      assertNotNull(charBuffer0);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("8", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      
      boolean boolean1 = StringUtils.equals((CharSequence) "8", (CharSequence) charBuffer0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("8", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      String string0 = StringUtils.rotate("", 256);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) charBuffer0);
      assertTrue(boolean0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String string0 = StringUtils.rightPad("i&9q3}.FnLdXu}1#", 8212, 'T');
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(8212);
      assertNotNull(charBuffer0);
      assertEquals(8212, charBuffer0.remaining());
      assertEquals(8212, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(8212, charBuffer0.length());
      assertEquals(8212, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      
      String string1 = StringUtils.substringAfterLast("i4[X 8-od", 4);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace(charBuffer0);
      assertFalse(boolean0);
      assertEquals(8212, charBuffer0.remaining());
      assertEquals(8212, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(8212, charBuffer0.length());
      assertEquals(8212, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("N6Kx:", "N6Kx:", ";^Wb@(C}$s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String string0 = StringUtils.rotate("c6", 256);
      assertEquals("c6", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "c6");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("c6", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "c6");
      assertTrue(boolean0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("c6", charBuffer0.toString());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      String string0 = StringUtils.center("\r ", 8192);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.leftPad("Strings must not be null", 8192, '/');
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(8212);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8212, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8212, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(8212, charBuffer0.length());
      assertEquals(8212, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      
      String string0 = ")c68!I}F:>w";
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = 'T';
      CharBuffer charBuffer1 = charBuffer0.get(charArray0, 3, 3);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(8, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'T', 'T', 'T', '\u0000', '\u0000', '\u0000', 'T', 'T'}, charArray0);
      assertEquals(8209, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8212, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8209, charBuffer0.length());
      assertEquals(8212, charBuffer0.capacity());
      assertEquals(3, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8212, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(8212, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(8209, charBuffer1.remaining());
      assertEquals(3, charBuffer1.position());
      assertEquals(8209, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      
      String string1 = StringUtils.center(")c68!I}F:>w", 8212, ")c68!I}F:>w");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap(")c68!I}F:>w", "Q&t");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(")c68!I}F:>w", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) charBuffer0, "!b9");
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("D", "D", (-3587));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("D", "D");
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.abbreviate("N`{[V4wMpiY1x", 2539, 51);
      assertEquals("N`{[V4wMpiY1x", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((List<?>) null, "File does not exist: ", 51, (-1795));
      assertNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = 'x';
      charArray0[2] = '?';
      charArray0[3] = 'u';
      charArray0[4] = 'G';
      charArray0[5] = 'R';
      charArray0[6] = '0';
      charArray0[7] = '|';
      int int2 = StringUtils.indexOfAny((CharSequence) "N`{[V4wMpiY1x", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, charArray0.length);
      assertEquals(12, int2);
      assertArrayEquals(new char[] {';', 'x', '?', 'u', 'G', 'R', '0', '|'}, charArray0);
      
      int int3 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = "offset cannot be negative";
      String string1 = StringUtils.repeat("offset cannot be negative", 3264);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) string1, supplier0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(charSequence0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string1, charSequence0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = charSequence0;
      charSequenceArray0[1] = (CharSequence) string1;
      charSequenceArray0[2] = (CharSequence) string1;
      charSequenceArray0[3] = (CharSequence) string1;
      // Undeclared exception!
      StringUtils.indexOfDifference(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("qpFR$-p^^sgcfCjW", (String) null, true);
      assertEquals(1, int0);
      
      String string3 = StringUtils.capitalize("1");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1", string3);
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)25;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '_', Integer.MAX_VALUE, (int) (byte) (-95));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("(4#f.6");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("(4#f.6"));
      assertEquals(1, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "Dr.$G5u,q:?iXl0 I:p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat(" ", 33);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                 ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("-$F1{[$]%rst", "\r", "                                 ");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      String string0 = "org.junitpioneer.jupiter.IssueExtension";
      String string1 = StringUtils.rightPad("org.junitpioneer.jupiter.IssueExtension", 672, "org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junit", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("[QY$_Eh", "Extension context \"");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[QY$_Eh", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.IssueExtension";
      charSequenceArray0[1] = (CharSequence) "[QY$_Eh";
      charSequenceArray0[2] = (CharSequence) "[QY$_Eh";
      charSequenceArray0[3] = (CharSequence) "[QY$_Eh";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junit";
      String string3 = "offset cannot be negative";
      String string4 = StringUtils.replacePattern("offset cannot be negative", "Extension context \"", "z6 v#<<dBmyfz$E");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      charSequenceArray0[5] = (CharSequence) "offset cannot be negative";
      boolean boolean0 = StringUtils.equalsAny("Extension context \"", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = " LNid9i%u LNid9i%u";
      String string6 = StringUtils.joinWith(" LNid9i%u LNid9i%u", charSequenceArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("org.junitpioneer.jupiter.IssueExtension LNid9i%u LNid9i%u[QY$_Eh LNid9i%u LNid9i%u[QY$_Eh LNid9i%u LNid9i%u[QY$_Eh LNid9i%u LNid9i%uorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junit LNid9i%u LNid9i%uoffset cannot be negative", string6);
      assertNotNull(string6);
      
      StringUtils.indexOf((CharSequence) "offset cannot be negative", 672, 672);
      StringUtils.substringBetween("Extension context \"", "org.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junit", "offset cannot be negative");
      StringUtils.ordinalIndexOf("offset cannot be negative", charSequenceArray0[3], (-2048));
      String string7 = "Method `CartesianProductTest.Sets ";
      StringUtils.trimToNull("Method `CartesianProductTest.Sets ");
      StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.IssueExtension LNid9i%u LNid9i%u[QY$_Eh LNid9i%u LNid9i%u[QY$_Eh LNid9i%u LNid9i%u[QY$_Eh LNid9i%u LNid9i%uorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junitpioneer.jupiter.IssueExtensionorg.junit LNid9i%u LNid9i%uoffset cannot be negative", (-1171));
      StringUtils.lastIndexOf(charSequenceArray0[4], 101);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "offset cannot be negative", (CharSequence) "Method `CartesianProductTest.Sets ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 1);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "\n", true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.chomp("\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.startsWithAny("\n", charSequenceArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = StringUtils.replaceFirst((String) null, "~)59uMKJx+EH6gd4k~\r", (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " must return `CartesianProductTest.Sets`.", (CharSequence) null, 208);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" must return `CartesianProductTest.Sets`.");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("2;e/4):ap@", (String) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.capitalize("~)59uMKJx+EH6gd4k~illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals("~)59uMKJx+EH6gd4k~illegal range. There's no way to get from %s to %s with a step of %s.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "", 1);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("\n"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<String> arrayList1 = new ArrayList<String>(arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList0.contains("\n"));
      assertFalse(arrayList1.contains("\n"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList1.listIterator();
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("\n"));
      assertFalse(arrayList1.contains("\n"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string2 = StringUtils.chomp("\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("b@(Z\"m7ajXm1:Y^KL", "6cC2IkCe>4.Kgi]y");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("b@(Z\"m7ajXm1:Y^KL", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Co vEwvIZne", "6cC2IkCe>4.Kgi]y");
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      String string0 = StringUtils.center("1}Z6PSPJbpc", 48, "i&9q3}.FnLdXu}1#");
      assertEquals("i&9q3}.FnLdXu}1#i1}Z6PSPJbpci&9q3}.FnLdXu}1#i&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("~)59uMKJx+EH6gd4k~", "i&9q3}.FnLdXu}1#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("i&9q3}.FnLdXu}1#~)59uMKJx+EH6gd4k~i&9q3}.FnLdXu}1#", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("i&9q3}.FnLdXu}1#~)59uMKJx+EH6gd4k~i&9q3}.FnLdXu}1#");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween(" ", "i&9q3}.FnLdXu}1#\u0001}Z6PSPJbpci&9q3}.FnLdXu}1#i", "+P[zaffTk<$2-f@%l ");
      assertNull(stringArray0);
      
      String string2 = StringUtils.defaultString("+P[zaffTk<$2-f@%l ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("+P[zaffTk<$2-f@%l ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.stripToNull("g");
      assertEquals("g", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("g");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("g");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.repeat("\r", (String) null, 90);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("\n", 4903);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String string0 = StringUtils.repeat("D", "D", 2539);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "D";
      stringArray0[2] = string0;
      stringArray0[3] = "D";
      stringArray0[4] = string0;
      stringArray0[5] = "D";
      // Undeclared exception!
      StringUtils.stripAll(stringArray0, "D");
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Index: ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Index: ", (CharSequence) "Index: ", Integer.MAX_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      String string0 = "D";
      // Undeclared exception!
      try { 
        StringUtils.repeat("D", "D", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("", "");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("\r", "\r", 100);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("\r");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, "");
      assertNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = ')';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {')', ')'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[2]);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      String string0 = StringUtils.leftPad("i&9q3}.#nLd'u}1#", 1490);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, "Zg");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 'X';
      charArray0[2] = 'k';
      charArray0[3] = 'E';
      charArray0[4] = '3';
      charArray0[5] = '(';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Cannot clear and set the following entries at the same time: ", 116);
      assertEquals("ime: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("ime: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("8_A|sWn0yb/:xQ-N");
      assertFalse(string1.equals((Object)string0));
      assertEquals("8_A|sWn0yb/:xQ-N", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("8_A|sWn0yb/:xQ-N");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("8_A|sWn0yb/:xQ-N", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("Cannot clear and set the following entries at the same time: ", "|R");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("|R", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize("org.junitpioneer.jupiter.DisabledUntilExtension");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Org.junitpioneer.jupiter.DisabledUntilExtension", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'p';
      charArray0[2] = 'O';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "|R", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'', 'p', 'O'}, charArray0);
      
      String string5 = StringUtils.getIfBlank("U7A\"Xf|", (Supplier<String>) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("U7A\"Xf|", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("Org.junitpioneer.jupiter.DisabledUntilExtension", 'p');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Org.junitpioneer.jupiter.DisabledUntilExtension", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.DisabledUntilExtension", (String) null);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.DisabledUntilExtension", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width with offset is %d", "r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Minimum abb", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("r", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "r", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.unwrap("YSmI]qOx)TRm0`{Ye7", 'Y');
      assertEquals("YSmI]qOx)TRm0`{Ye7", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "YSmI]qOx)TRm0`{Ye7";
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Y';
      intArray0[1] = 491;
      intArray0[2] = (int) 'Y';
      intArray0[3] = (int) 'Y';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'Y';
      intArray0[6] = (int) 'Y';
      String string1 = StringUtils.join(intArray0, 'e');
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, intArray0.length);
      assertEquals("89e491e89e89e89e89e89", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {89, 491, 89, 89, 89, 89, 89}, intArray0);
      
      charSequenceArray0[1] = (CharSequence) "89e491e89e89e89e89e89";
      String string2 = StringUtils.getDigits("8_A|sWn0yb/:xQ-N");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("80", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "80";
      String string3 = StringUtils.abbreviateMiddle("$d(I*6slN1(&kbaoqj]", "YSmI]qOx)TRm0`{Ye7", 89);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("$d(I*6slN1(&kbaoqj]", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "$d(I*6slN1(&kbaoqj]";
      String string4 = StringUtils.replaceIgnoreCase("$d(I*6slN1(&kbaoqj]", "89e491e89e89e89e89e89", "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", (-738));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("$d(I*6slN1(&kbaoqj]", string4);
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "$d(I*6slN1(&kbaoqj]";
      String string5 = StringUtils.replaceFirst("M-E|}uAY:YA?~Tu{V6M-^h_/Qf#@^F<ma6OG~q%Wj,$v7", "\n", "Minimum abbreviation width with offset is %d");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("M-E|}uAY:YA?~Tu{V6M-^h_/Qf#@^F<ma6OG~q%Wj,$v7", string5);
      assertNotNull(string5);
      
      charSequenceArray0[5] = (CharSequence) "M-E|}uAY:YA?~Tu{V6M-^h_/Qf#@^F<ma6OG~q%Wj,$v7";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      String string0 = StringUtils.unwrap("YSmI]qOx)TRm0`{Ye7", 'Y');
      assertEquals("YSmI]qOx)TRm0`{Ye7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      String string0 = StringUtils.removeEnd("8", "_A|sWn0yb/:xQ-N");
      assertEquals("8", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("M*0CH,", 4);
      assertFalse(string1.equals((Object)string0));
      assertEquals("M*0CH,", string1);
      assertNotNull(string1);
      
      int int0 = 115;
      String string2 = StringUtils.replace("0,IAA4_kN 9)", "%s does not implement the CartesianAnnotationConsumer<T> interface.", "%s does not implement the CartesianAnnotationConsumer<T> interface.", 115);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0,IAA4_kN 9)", string2);
      assertNotNull(string2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("0,IAA4_kN 9)"));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '@', 115, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(115) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (char[]) null);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.mid("", (-358), 0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfBlank(" $=/HC&fO8)%&{sG|2%", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" $=/HC&fO8)%&{sG|2%", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " $=/HC&fO8)%&{sG|2%", (CharSequence) null, (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "m t!r:2Bhawnm`&[", 3654, (-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(3654) > toIndex(-2147483647)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      String string0 = "K0_,eAru6@";
      String string1 = StringUtils.wrapIfMissing("K0_,eAru6@", ' ');
      assertFalse(string1.equals((Object)string0));
      assertEquals(" K0_,eAru6@ ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing(" must be static.", ' ');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" must be static. ", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Rpt2D", "%s does not implement the CartesianAnnotationConsumer<T> interface.", 13, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 68
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*U4evTG4t<!i");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("...", "66ZZ1j|2(");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("66ZZ1j|2(", "}kcLCartesianProductTest can only take exactly one type of arguments source.");
      assertEquals("}kcLCartesianProductTest can only take exactly one type of arguments source.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("*U4evTG4t<!i", "H()yuuV/FeSw");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}kcLCartesianProductTest can only take exactly one type of arguments source.";
      boolean boolean1 = StringUtils.equalsIgnoreCase(charSequenceArray0[0], charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("llllllalall", 4092, '.');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.toRootLowerCase("a~`T kS~Uvpe^lyg");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("a~`t ks~uvpe^lyg", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals(6, stringArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("0T K{]HQ %");
      assertEquals("0T K{]HQ %", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("", 'W');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("0T K{]HQ %", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBefore("0T K{]HQ %", "0T K{]HQ %");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("The character 3T-FqE,", "The character 3T-FqE,", 6);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("The character 3T-FqE,", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("+((2=", 6, "0T K{]HQ %");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("+((2=0", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlpha("+((2=");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("0T K{]HQ %"));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      String string5 = StringUtils.join((List<?>) stack0, "|Fm", 6, 2);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(stack0.contains("0T K{]HQ %"));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'i');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String string0 = StringUtils.difference("Y:jM", "=");
      assertEquals("=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("Y:jM", "N0/k6w}fZ=1t`U'<#=^`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y:jM", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("p>a,", 2016, 2016);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y:jM", "");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "=";
      charSequenceArray0[1] = (CharSequence) "Y:jM";
      charSequenceArray0[2] = (CharSequence) "N0/k6w}fZ=1t`U'<#=^`";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Y:jM";
      charSequenceArray0[5] = (CharSequence) "N0/k6w}fZ=1t`U'<#=^`";
      charSequenceArray0[6] = (CharSequence) "...";
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "Y:jM", charSequenceArray0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints("^h_/QwOf#@^F<ma");
      assertEquals(15, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.unwrap("^h_/QwOf#@^F<ma", '=');
      assertEquals("^h_/QwOf#@^F<ma", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("^h_/QwOf#@^F<ma", 'T');
      assertTrue(string1.equals((Object)string0));
      assertEquals("^h_/QwOf#@^F<ma", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("^^3m$!A`X _4", "$zc13>o_d^3_oFq~2", 32);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("^^3m$!A`X _4", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "^^3m$!A`X _4", 32, 2);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      String string0 = StringUtils.rightPad("offset cannot be negative", 299);
      assertEquals("offset cannot be negative                                                                                                                                                                                                                                                                                  ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "offset cannot be negative                                                                                                                                                                                                                                                                                  ", (int) 'K');
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = 'K';
      charArray0[2] = 'K';
      charArray0[2] = 'K';
      charArray0[7] = '=';
      charArray0[4] = 'K';
      charArray0[7] = 'K';
      charArray0[6] = 'K';
      charArray0[0] = '=';
      String string1 = StringUtils.unwrap("offset cannot be negative                                                                                                                                                                                                                                                                                  ", '\u0000');
      assertTrue(string1.equals((Object)string0));
      assertEquals("offset cannot be negative                                                                                                                                                                                                                                                                                  ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("offset cannot be negative                                                                                                                                                                                                                                                                                  ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      String string0 = StringUtils.rightPad("offset cannot be negative", 0);
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("/2I", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negative");
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("offset cannot be negative", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "offset cannot be negative", (int) 'K');
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = 'K';
      charArray0[2] = 'K';
      charArray0[2] = 'K';
      charArray0[7] = '=';
      charArray0[4] = 'K';
      charArray0[7] = 'K';
      charArray0[6] = 'K';
      charArray0[7] = '=';
      String string2 = StringUtils.unwrap("offset cannot be negative", '\u0000');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      int int1 = 1862;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("v}<4E{>-H1 vs ", ", Length: ", 1862, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      String string0 = StringUtils.stripToEmpty("TID");
      assertEquals("TID", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "}8en");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "TID", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("[p(9Rw,z|x", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[p(9Rw,z|x", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("@,53;", "@,53;", "@,53;", 0);
      assertEquals("@,53;", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "@,53;", (CharSequence) "@,53;", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToEmpty("@,53;");
      assertTrue(string1.equals((Object)string0));
      assertEquals("@,53;", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String string0 = "p$i,*.X,8^?w<J$NV";
      String[] stringArray0 = StringUtils.split("p$i,*.X,8^?w<J$NV", 'l');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("Illegal range. The step cannot be zero.", "ZF2ZGBr<YH4F>hYd[$", "B8Jz0L{F2cfg", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-848L);
      longArray0[1] = 17L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'b', (-2596), 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2596
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String string0 = StringUtils.abbreviate("&L\"N-)sd5:V", 7, 7);
      assertEquals("...d5:V", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("...d5:V");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "...d5:V", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = '0';
      charArray0[3] = '{';
      charArray0[4] = '-';
      charArray0[5] = '-';
      charArray0[6] = 'Q';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("QQ0{--Q", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'Q', 'Q', '0', '{', '-', '-', 'Q'}, charArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "QQ0{--Q", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'Q', 'Q', '0', '{', '-', '-', 'Q'}, charArray0);
      
      String string1 = StringUtils.wrapIfMissing("v{LZ[g?v!=h{TT75_!q", "&L\"N-)sd5:V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("&L\"N-)sd5:Vv{LZ[g?v!=h{TT75_!q&L\"N-)sd5:V", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "&L\"N-)sd5:V", (CharSequence) "&L\"N-)sd5:Vv{LZ[g?v!=h{TT75_!q&L\"N-)sd5:V");
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      String string2 = StringUtils.mid((String) null, 2030, 54);
      assertNull(string2);
      
      String string3 = StringUtils.defaultIfBlank("$J|}D6 E4W2r:", "1R4BH(k~@d[`gu]8FM)");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("$J|}D6 E4W2r:", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      // Undeclared exception!
      StringUtils.repeat(" EqOC", " EqOC", 1114111);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) " ");
      assertEquals(0, int0);
      
      String string1 = StringUtils.remove(" ", '%');
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.difference(" ", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null, 0);
      assertNull(stringArray0);
      
      String string3 = StringUtils.repeat('o', 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      String string0 = StringUtils.rightPad("-!f*q?Tv<A0!>9*=la", (-92), "D");
      assertEquals("-!f*q?Tv<A0!>9*=la", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("maxWith cannot be negative", (-1944), "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains((-92)));
      assertEquals(0, priorityQueue0.size());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'O';
      charArray0[2] = 'i';
      charArray0[3] = '*';
      charArray0[4] = '0';
      charArray0[5] = '0';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "maxWith cannot be negative", charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'*', 'O', 'i', '*', '0', '0'}, charArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("\r");
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {13}, intArray0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase((String) null, "b1E.ql&:m8H&", "qx`q>8> KkhPG");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "maxWith cannot be negative", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 1);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "\n", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'B');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      String string0 = StringUtils.truncate("", 34);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string1 = StringUtils.wrap("", '1');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Locale must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("", "Locale must not be null");
      assertEquals((-23), int0);
      
      String string3 = StringUtils.uncapitalize("/2I");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("/2I", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", (int) '1');
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.wrapIfMissing("Locale must not be null", ' ');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" Locale must not be null ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("Locale must not be null", ' ');
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" Locale must not be null ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate(" Locale must not be null ", "n2nwy^5", (-23), 13);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals(" Localn2nwy^5", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.indexOf((CharSequence) " Localn2nwy^5", 13);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String string0 = StringUtils.substringAfter("%s: Could not resolve parameter by name (%s).", (-185));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[4] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[5] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      String string1 = StringUtils.remove("#C|KT;IBm", '>');
      assertFalse(string1.equals((Object)string0));
      assertEquals("#C|KT;IBm", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "#C|KT;IBm";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter("D", (-185));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("", ":vYM$H8r9G%hHz");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(":vYM$H8r9G%hHz", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("#C|KT;IBm", "", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("#C|KT;IBm", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat('>', (-255));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "#C|KT;IBm";
      stringArray0[3] = ":vYM$H8r9G%hHz";
      stringArray0[4] = "";
      stringArray0[0] = "#C|KT;IBm";
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals("#C|KT;IBm", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.split("", '>');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], (CharSequence) "");
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = 'i';
      charArray0[5] = '>';
      charArray0[6] = '>';
      String string8 = StringUtils.join(charArray0, '/', 0, 3);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertEquals(7, charArray0.length);
      assertEquals(">/>/>", string8);
      assertNotNull(string8);
      assertArrayEquals(new char[] {'>', '>', '>', '>', 'i', '>', '>'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 598, 135);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("(", 598, 135);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("(");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnce((String) null, "p{InCombiningDiacriticalMarks}+", (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.join((List<?>) linkedList0, "@CartesianProductTest not found.", 3748, 3748);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String string0 = StringUtils.substring("(", 598, 135);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("(");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "");
      assertEquals((-1), int0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((List<?>) linkedList0, "@CartesianProductTest not found.", 3748, 3748);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = StringUtils.truncate("", 12);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("...");
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {46, 46, 46}, intArray0);
      
      String string1 = StringUtils.leftPad((String) null, 12);
      assertNull(string1);
      
      String string2 = StringUtils.replace("", (String) null, "org.apache.commons.lang3.ArrayUtils", 12);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = '=';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = 'q';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "...", charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'q', 'q', 'q', '=', 'q', 'q', 'q'}, charArray0);
      
      String string3 = StringUtils.replaceChars((String) null, 'q', 'q');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" \r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, " vs ", "/2IJ+Mx\u0004H<{G");
      assertNull(string0);
      
      String string1 = StringUtils.defaultString("1b-3?_X1b-3?", "1b-3?_X1b-3?");
      assertEquals("1b-3?_X1b-3?", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("#C|KT;IBm", "x<c.[UDK");
      assertFalse(string2.equals((Object)string1));
      assertEquals("#C|KT;IBm", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("wXB=", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "1b-3?_X1b-3?", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("1b-3?_X1b-3?");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.truncate("x<c.[UDK", 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Cannot clear and set the following entries at the same time: ", 116);
      assertEquals("ime: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Cannot clear and set the following entries at the same time: ", 116);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" clear and set the following entries at the same time: ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-3405L);
      longArray0[1] = (-1124L);
      longArray0[2] = (-1626L);
      longArray0[3] = 909L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'q', 12, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      boolean boolean0 = StringUtils.equalsAny("^h_/QwOf#@^F<ma", stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.defaultString("^h_/QwOf#@^F<ma", "^h_/QwOf#@^F<ma");
      assertEquals("^h_/QwOf#@^F<ma", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString(" no clone method", " ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" no clone method", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("^h_/QwOf#@^F<ma", " ");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " no clone method", (CharSequence) " ");
      assertEquals(1, int0);
      
      String string2 = StringUtils.substringAfter((String) null, 1);
      assertNull(string2);
      
      String string3 = StringUtils.remove(" no clone method", '}');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" no clone method", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween(" no clone method", " ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("no", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#{@^FZma";
      String string0 = StringUtils.substringBefore("*U4evTG4t<!i", "^h_/QwOf#{@^FZma");
      assertEquals("*U4evTG4t<!i", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("^h_/QwOf#{@^FZma", "*U4evTG4t<!i", 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("^h_/QwOf#{@^FZma", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "^h_/QwOf#{@^FZma", (CharSequence) "^h_/QwOf#{@^FZma", (-84));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "le(9G1F<rX>2+qY\"Z", "offset cannot be negative");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((List<?>) null, '3', (-1021), (-1021));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("\"~{k83<mKO", "\"~{k83<mKO");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBefore("", "Y$]|/rZ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("Arguments cannot both be null", "The character 3T-FqE,", 6);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Arguments cannot both be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("}5+Jh", 6, ".*{[0-9]+}.*");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("}5+Jh.", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4q5Dc<rOv@7-ORl-@4q5Dc<rOv@7-ORl-@4q5Dc<rOv@7-ORl-@4q5Dc<rOv@7-ORl-@4q5Dc<rOv@7-ORl-@4q5Dc<rOv@7-ORl-@7-ORl-@";
      stringArray0[1] = "";
      stringArray0[2] = "Arguments cannot both be null";
      stringArray0[3] = "Arguments cannot both be null";
      stringArray0[4] = "Arguments cannot both be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "<Eq\r");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(""));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean2 = priorityQueue0.add("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains(""));
      assertEquals(2, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains(""));
      assertEquals(2, priorityQueue0.size());
      
      String string2 = StringUtils.join(iterator0, 'K');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("K", string2);
      assertNotNull(string2);
      assertFalse(priorityQueue0.contains('K'));
      assertTrue(priorityQueue0.contains(""));
      assertEquals(2, priorityQueue0.size());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean3);
      assertArrayEquals(new char[] {'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 1, "blank_blank_blank_2014");
      assertEquals("b", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "b";
      stringArray0[1] = "b";
      stringArray0[2] = "blank_blank_blank_2014";
      stringArray0[3] = "b";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("b", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("", 'X');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("b", "b", stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("b", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Cannot clear and set the following entries at the same time: ";
      charSequenceArray0[1] = (CharSequence) "Cannot clear and set the following entries at the same time: ";
      String string0 = StringUtils.trimToEmpty("Cannot clear and set the following entries at the same time: ");
      assertEquals("Cannot clear and set the following entries at the same time:", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "Cannot clear and set the following entries at the same time:";
      charSequenceArray0[3] = (CharSequence) "Cannot clear and set the following entries at the same time: ";
      CharSequence charSequence0 = StringUtils.defaultIfBlank(charSequenceArray0[0], charSequenceArray0[0]);
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("Cannot clear and set the following entries at the same time: ", charSequence0);
      assertNotNull(charSequence0);
      
      charSequenceArray0[4] = (CharSequence) "Cannot clear and set the following entries at the same time: ";
      charSequenceArray0[5] = (CharSequence) "Cannot clear and set the following entries at the same time: ";
      charSequenceArray0[6] = (CharSequence) "Cannot clear and set the following entries at the same time: ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("", 1, "blank_blank_blank_2014");
      assertFalse(string1.equals((Object)string0));
      assertEquals("b", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b";
      stringArray0[1] = "blank_blank_blank_2014";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("b", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 32);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                ", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("Duplicate enum constant name(s) found in ", supplier0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Duplicate enum constant name(s) found in ", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = 'g';
      charArray0[2] = 'W';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "b", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'!', 'g', 'W'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      String string0 = StringUtils.truncate("qjdAu]&JE:Iok", 34);
      assertEquals("qjdAu]&JE:Iok", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("qjdAu]&JE:Iok");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("qjdAu]&JE:Iok", "qjdAu]&JE:Iok", "Minimum abbreviation width with offset is %d", 1870);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((long[]) null, '\"', 34, 41);
      assertNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("X'Gh<bv]L eQ+qcQW", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("X'Gh<bv]L eQ+qcQW", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Corea del Sud", string4);
      assertNotNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      
      String string5 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "E77)JyG;|5;9");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Illegal range. The step cannot be zero.", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replace((String) null, "E77)JyG;|5;9", "Minimum abbreviation", 1870);
      assertNull(string6);
      
      String string7 = StringUtils.substringBeforeLast("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider", "WDxT8");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("\n", "\n", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("Fw", (String) null, "\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Fw", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("\n", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      boolean boolean1 = StringUtils.isNotBlank("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.stripStart("\n", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      String string0 = StringUtils.center("\r ", 8192);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, 8192);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("%s: Could not resolve parameter by name (%s).", string0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) string0, "%s: Could not resolve parameter by name (%s).");
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("doesn't contain any substring.");
      assertEquals("doesn't contain any substring.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "doesn't contain any substring.", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("doesn't contain any substring.");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("doesn't contain any substring.", "Vr^,");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Vr^,doesn't contain any substring.Vr^,", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "doesn't contain any substring.", (CharSequence) "doesn't contain any substring.");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substringBefore("doesn't contain any substring.", "org.junitpioneer.jupiter.json.JsonFileSourceArgumentsProvider");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("doesn't contain any substring.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("Cz/5oZ1emx/6<ab", '^');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Cz/5oZ1emx/6<ab", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int3 = StringUtils.lastIndexOfAny("Vr^,doesn't contain any substring.Vr^,", charSequenceArray0);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int3);
      
      double double0 = StringUtils.getJaroWinklerDistance("doesn't contain any substring.", "Cz/5oZ1emx/6<ab");
      assertEquals(0.47, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAllLowerCase("doesn't contain any substring.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.substringBetween("doesn't contain any substring.", "doesn't contain any substring.");
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("doesn't contain any substring."));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = arrayList0.add(object0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(object0));
      assertFalse(arrayList0.contains("doesn't contain any substring."));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = arrayList0.add((Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(object0));
      assertFalse(arrayList0.contains("doesn't contain any substring."));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      String string1 = StringUtils.removeStart("doesn't contain any substring.", "");
      assertEquals("doesn't contain any substring.", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "doesn't contain any substring.";
      charSequenceArray0[1] = (CharSequence) "doesn't contain any substring.";
      charSequenceArray0[2] = (CharSequence) "doesn't contain any substring.";
      charSequenceArray0[3] = (CharSequence) "doesn't contain any substring.";
      charSequenceArray0[4] = (CharSequence) "doesn't contain any substring.";
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains("doesn't contain any substring."));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      ListIterator<String> listIterator0 = arrayList1.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList1.contains("doesn't contain any substring."));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, 'X');
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(arrayList1.contains("doesn't contain any substring."));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "doesn't contain any substring.";
      charSequenceArray0[8] = (CharSequence) "";
      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      String string0 = StringUtils.replacePattern("l5`/5G]_d8S", "l5`/5G]_d8S", ".*{[0-9]+}.*");
      assertEquals(".*{[0-9]+}.*", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '.';
      charArray0[2] = 'X';
      charArray0[3] = 'w';
      charArray0[4] = '/';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ".*{[0-9]+}.*", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'}', '.', 'X', 'w', '/'}, charArray0);
      
      String string1 = StringUtils.abbreviate("#", ".*{[0-9]+}.*", 1200, 61);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "l5`/5G]_d8S", (CharSequence) "#");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.defaultIfBlank("#", ")~63&7I4o3m>qz}\"nT");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("#", string2);
      assertNotNull(string2);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Locale locale0 = Locale.lookup(vector0, stack0);
      assertNull(locale0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("#", ")~63&7I4o3m>qz}\"nT", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Fyt]f=?uXdv,MJ");
      assertEquals("Fyt]f=?uXdv,MJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("Fyt]f=?uXdv,MJ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Fyt]f=?uXdv,MJ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Fyt]f=?uXdv,MJ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      Locale locale0 = Locale.forLanguageTag("Fyt]f=?uXdv,MJ");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      boolean boolean1 = StringUtils.equalsAny("Fyt]f=?uXdv,MJ", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string1));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains(string1));
      assertFalse(navigableSet0.contains(string1));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      boolean boolean2 = treeSet0.add("#BtplL");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(treeSet0.contains(string1));
      assertTrue(treeSet0.contains("#BtplL"));
      
      boolean boolean3 = treeSet0.add("a}EKQBH-q~E+X57");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(treeSet0.contains(string1));
      assertTrue(treeSet0.contains("a}EKQBH-q~E+X57"));
      
      String string2 = StringUtils.join((Iterable<?>) treeSet0, 'v');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#BtplLva}EKQBH-q~E+X57", string2);
      assertNotNull(string2);
      assertFalse(treeSet0.contains(string1));
      assertTrue(treeSet0.contains("a}EKQBH-q~E+X57"));
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(""));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean2 = priorityQueue0.add("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains(""));
      assertEquals(2, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains(""));
      assertEquals(2, priorityQueue0.size());
      
      String string2 = StringUtils.join(iterator0, 'K');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("K", string2);
      assertNotNull(string2);
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains('K'));
      assertEquals(2, priorityQueue0.size());
      
      boolean boolean3 = StringUtils.containsWhitespace(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad(">", 1, "blank_blank_blank_2014");
      assertFalse(string1.equals((Object)string0));
      assertEquals(">", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "blank_blank_blank_2014";
      stringArray0[1] = "blank_blank_blank_2014";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("blank_blank_blank_2014", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center(">", 32);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("               >                ", string3);
      assertNotNull(string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("blank_blank_blank_2014"));
      assertEquals(0, priorityQueue0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = priorityQueue0.add(object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains(object0));
      assertTrue(priorityQueue0.contains(object1));
      assertEquals(1, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        priorityQueue0.add(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String string0 = StringUtils.defaultString(" \r", "offset cannot be negative");
      assertEquals(" \r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Locale must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) " \r", (CharSequence) "offset cannot be negative");
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(" \r", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean1 = StringUtils.isAllUpperCase(" \r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "~P60]E", 28);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "~P60]E", (CharSequence) "org.junitpioneer.jupiter.IssueExtension", 28);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviate((String) null, (-506675484));
      assertNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'V';
      charArray0[3] = 'l';
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals(4, charArray0.length);
      assertEquals("qqVl", string3);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'q', 'q', 'V', 'l'}, charArray0);
      
      String string4 = StringUtils.stripEnd("Aborting to protect against StackOverflowError - output of one loop is the input of another", "z>9vs,Bgh");
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = "";
      int int0 = (-428);
      String[] stringArray0 = StringUtils.split("", "{X{>u2", (-428));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.leftPad("pA]01(dLI~j", (-428), '1');
      assertFalse(string1.equals((Object)string0));
      assertEquals("pA]01(dLI~j", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 1144, 'S');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "pA]01(dLI~j", 103);
      assertFalse(boolean0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("%]yccMwB6T.nq", string2, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "{X{>u2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 7);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.rotate("StdIoExtension is active but neither System.out or System.in are getting redirected.", (-1));
      assertEquals("tdIoExtension is active but neither System.out or System.in are getting redirected.S", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeFirst("tdIoExtension is active but neither System.out or System.in are getting redirected.S", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertEquals("tdIoExtension is active but neither System.out or System.in are getting redirected.S", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween("Minimum abbreviation width with offset is %d", (String) null);
      assertNull(string4);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("StdIoExtension is active but neither System.out or System.in are getting redirected.", supplier0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("StdIoExtension is active but neither System.out or System.in are getting redirected.", string5);
      assertNotNull(string5);
      
      int int4 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals((-1), int4);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[2] = (Object) null;
      String string6 = StringUtils.join(objectArray0, '_', 2592, 52);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String string0 = "G1ktRK9Od";
      String string1 = StringUtils.swapCase("G1ktRK9Od");
      assertFalse(string1.equals((Object)string0));
      assertEquals("g1KTrk9oD", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "g1KTrk9oD", 3051);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      int int0 = 2674;
      char char0 = '\"';
      String[] stringArray0 = StringUtils.split((String) null, '\"');
      assertNull(stringArray0);
      
      String string0 = "doesn't contain any substring.";
      String string1 = StringUtils.reverse("W5ZERV/");
      assertFalse(string1.equals((Object)string0));
      assertEquals("/VREZ5W", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "doesn't contain any substring.", " ");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, int2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "/VREZ5W", 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      String string0 = "D";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("D");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "D";
      objectArray0[1] = (Object) "D";
      objectArray0[2] = (Object) "D";
      objectArray0[3] = (Object) "D";
      objectArray0[4] = (Object) "D";
      objectArray0[5] = (Object) "D";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'Y', 13, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.substringBefore("QKV", stringArray0[0]);
      assertEquals(5, stringArray0.length);
      assertEquals("QKV", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("QKV");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "QKV", "QKV");
      assertEquals(0, int0);
      
      // Undeclared exception!
      StringUtils.join((Object[]) stringArray0, 'h', 0, 1932735283);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = StringUtils.join((Object[]) stringArray0, "/;E>;ph)C4'_:h=(");
      assertEquals(16, stringArray0.length);
      assertEquals("/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(", (CharSequence) "/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(/;E>;ph)C4'_:h=(", 2127);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.rightPad("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 64, 'y');
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'm';
      floatArray0[1] = (float) 64;
      floatArray0[2] = (float) 64;
      floatArray0[3] = (float) 64;
      floatArray0[4] = (float) 'm';
      String string1 = StringUtils.join(floatArray0, 'm');
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, floatArray0.length);
      assertEquals("109.0m64.0m64.0m64.0m109.0", string1);
      assertNotNull(string1);
      assertArrayEquals(new float[] {109.0F, 64.0F, 64.0F, 64.0F, 109.0F}, floatArray0, 0.01F);
      
      String string2 = StringUtils.removeEnd("Illegal range. There's no way to get from %s to %s with a step of %s.", "8");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("[ 0|");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[ 0|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("M*0CH,", 64);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("                                                          M*0CH,", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("Illegal range. There's no way to get from %s to %s with a step of %s.", "Index: ", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 64);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'q';
      charArray0[5] = 'y';
      charArray0[6] = 'm';
      charArray0[7] = 'y';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'m', 'y', 'y', 'y', 'q', 'y', 'm', 'y'}, charArray0);
      
      boolean boolean1 = StringUtils.isNumeric("8");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      String string0 = StringUtils.truncate((String) null, 2999, 2999);
      assertNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2999;
      floatArray0[1] = (float) 2147483628;
      floatArray0[2] = (float) 2999;
      floatArray0[3] = (float) 9;
      floatArray0[4] = (float) 2999;
      floatArray0[5] = (float) 2147483628;
      floatArray0[6] = (float) 2147483628;
      int int0 = (-1073741822);
      String string1 = StringUtils.join(floatArray0, '(', 9, (-1073741822));
      assertEquals(7, floatArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new float[] {2999.0F, 2.14748365E9F, 2999.0F, 9.0F, 2999.0F, 2.14748365E9F, 2.14748365E9F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootUpperCase((String) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.trim("{'T)G+A!ttO=k02");
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("{'T)G+A!ttO=k02", "lG@H,[_}(*J,");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{'T)G+A!ttO=k02", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("{'T)G+A!ttO=k02", "{'T)G+A!ttO=k02");
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("1b-", 875, "qx`q>8> KkhPG");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("1b-qx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGq", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("wjb", "qx`q>8> KkhPG");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("wjb", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("{'T)G+A!ttO=k02"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string5 = StringUtils.repeat("(Aqk.:", "1b-qx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGq", (-1849));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.swapCase("");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02", "GCQ ;");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) "{'T)G+A!ttO=k02", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "{'T)G+A!ttO=k02", (CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int1 == int0);
      assertEquals(2, stringArray1.length);
      assertEquals(0, int1);
      
      String string7 = StringUtils.reverseDelimited("#@Met@~?GUa@|\"r~", '~');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("?GUa@|\"r~#@Met@", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.reverseDelimited("#@Met@~GUa@|\"r~", '~');
      assertEquals("GUa@|\"r~#@Met@", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.truncate((String) null, 8);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 34);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("kmhZe zG;gL5'");
      assertEquals(13, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.wrap((String) null, 'j');
      assertNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      int int1 = StringUtils.compare("kmhZe zG;gL5'", "");
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "/2I", (CharSequence) null, (-60));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.substringAfter("Locale must not be null", 90);
      assertEquals("", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("Locale must not be null", "");
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.wrapIfMissing((String) null, '0');
      assertNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("", '0');
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      
      int int0 = StringUtils.compare("GJYUDT!?@", "GJYUDT!?@");
      assertEquals(0, int0);
      
      String string2 = StringUtils.uncapitalize("m<./g<sh5_a");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("m<./g<sh5_a", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, 0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "m<./g<sh5_a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = StringUtils.strip("@,53;", "@,53;");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.overlay("@,53;", (String) null, 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@,53;", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Display name '%s' %s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Display name '%s' %s", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '{', 'o');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Display name '%s' %s", "Display name '%s' %s");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase(" vs ", "S", "IUBP~C:Yw RZ#");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" vIUBP~C:Yw RZ# ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "S", 1093);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("", "S", 1093);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.wrap("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", 'B');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Bo-g.junitpioneer.jupiter.AbstractEntryBasedExtensionB", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("", "");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '8', 7, 49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.abbreviate("HTmOs@%XvFr+pgJv]", 56, 7);
      assertEquals("...gJv]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("1}Z6PSPJbpc", 'j');
      assertFalse(string1.equals((Object)string0));
      assertEquals("j1}Z6PSPJbpcj", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("*qSv=wx&SYS$BI", '=', '=');
      assertEquals("*qSv=wx&SYS$BI", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("*qSv=wx&SYS$BI");
      assertTrue(string1.equals((Object)string0));
      assertEquals("*qSv=wx&SYS$BI", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty("*qSv=wx&SYS$BI", "*U4evTG4t<!i");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("*qSv=wx&SYS$BI", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string3 = StringUtils.wrapIfMissing("c", "*qSv=wx&SYS$BI");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("*qSv=wx&SYS$BIc*qSv=wx&SYS$BI", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.length("*qSv=wx&SYS$BI");
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      String string4 = StringUtils.mid("@a~o", (-358), 0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfBlank("", "c");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("c", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\r", "\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.remove("/2I", '@');
      assertEquals("/2I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("Threshold must not be negative", "Threshold must not be negative", "K\u0002=]]ZLo6`");
      assertNull(string1);
      
      String string2 = StringUtils.defaultString("Threshold must not be negative");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("{jd1");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.startsWith("K\u0002=]]ZLo6`", "Threshold must not be negative");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.US;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      
      String string3 = StringUtils.defaultString("/2I");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("/2I", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("/2I/2I...");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("...I2/I2/", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      char[] charArray0 = new char[6];
      String[] stringArray0 = StringUtils.splitByWholeSeparator("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", "_");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\u0000\u0000\u0000\u0000\u0000\u0000");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "-;~i", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.rightPad((String) null, 8192, 'Z');
      assertNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2038);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2038, charBuffer0.remaining());
      assertEquals(2038, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2038, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2038, charBuffer0.length());
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "-;~i", (CharSequence) "_");
      assertEquals(0, int0);
      
      String string2 = StringUtils.overlay((String) null, "99BhG[qr?Es93.Jju", 8192, (-1392));
      assertNull(string2);
      
      String string3 = StringUtils.chomp((String) null, "<RWSg<8t,B9");
      assertNull(string3);
      
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2392;
      shortArray0[1] = (short)98;
      shortArray0[2] = (short)1801;
      shortArray0[3] = (short)1735;
      shortArray0[4] = (short)125;
      shortArray0[5] = (short)439;
      shortArray0[6] = (short) (-1323);
      shortArray0[7] = (short) (-1497);
      shortArray0[8] = (short)2588;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Z', 0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.replacePattern(" is not in the range '0' - '9'", " is not in the range '0' - '9'", ".*{[0-9]+}.*");
      assertEquals(".*{[0-9]+}.*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast(".*{[0-9]+}.*", ".*{[0-9]+}.*");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '.';
      charArray0[2] = 'X';
      charArray0[3] = 'w';
      charArray0[4] = '/';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ".*{[0-9]+}.*", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'}', '.', 'X', 'w', '/'}, charArray0);
      
      String string2 = StringUtils.abbreviate("#", ".*{[0-9]+}.*", 1200, 61);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) " is not in the range '0' - '9'", (CharSequence) "#");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.defaultIfBlank("#", ")~63&7I4o3m>qz}\"nT");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("#", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = ")~63&7I4o3m>qz}\"nT";
      stringArray0[2] = " is not in the range '0' - '9'";
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '>', 1200, (int) '}');
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(3, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad(stringArray0[0], 2, 'X');
      assertEquals(3, stringArray0.length);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int0 = StringUtils.indexOf((CharSequence) " must be static.", (CharSequence) " must be static.");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "vPnfx$");
      assertEquals(8, charSequenceArray0.length);
      assertEquals("vPnfx$vPnfx$vPnfx$vPnfx$vPnfx$vPnfx$vPnfx$", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '-', (-160968518), 88);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("@CartesianTest not found.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("@CartesianTest not found.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "Minimum abbreviation width is %d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.removeStartIgnoreCase("\r", "ve/F;])$ZU/i%BrP[");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider", (CharSequence) "Minimum abbreviation width is %d");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      String string3 = StringUtils.strip(" ", " ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("Minimum abbreviation width is %d", "H");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Minimum abbreviation width is %d", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1.0);
      String string0 = StringUtils.join(doubleArray0, '<');
      assertEquals(2, doubleArray0.length);
      assertEquals("0.0<-1.0", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0.0<-1.0", (CharSequence) "0.0<-1.0");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("0.0<-1.0", "0.0<-1.0");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[13];
      floatArray0[0] = (float) '<';
      floatArray0[1] = (float) '<';
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) '<';
      floatArray0[4] = (float) '<';
      floatArray0[5] = (float) 0;
      String string2 = StringUtils.join(floatArray0, 'Y', 0, 13);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(13, floatArray0.length);
      assertEquals("60.0Y60.0Y0.0Y60.0Y60.0Y0.0Y0.0Y0.0Y0.0Y0.0Y0.0Y0.0Y0.0", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'Y');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.substringBeforeLast("0.0<-1.0", "0.0<-1.0");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty("...");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replacePattern("...", "", "R_hfzE");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("R_hfzE.R_hfzE.R_hfzE.R_hfzE", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p$i,*.X,8^?w<J$NV", "p$i,*.X,8^?w<J$NV");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("p$i,*.X,8^?w<J$NV", "", (-1242), (-203));
      assertEquals("p$i,*.X,8^?w<J$NV", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("JY", "p$i,*.X,8^?w<J$NV", "p$i,*.X,8^?w<J$NV", 61);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JY", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("maxOith cannKt beneYative");
      assertTrue(boolean0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.joinWith("maxOith cannKt beneYative", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("maxOith cannKt beneYative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Search and Replace array lengths don't match: ;bjpiX?F5,x5!)uU0", (-2986));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ;bjpiX?F5,x5!)uU0", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String string0 = StringUtils.abbreviate(" ", (-2313), 346);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " ");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("Strings must not be null", "...", "Threshold must not be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString(" ", " ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("org.junitpioneer.jupiter.params.ShortRange", "1E}[Qn-{");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank(" ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Locale locale0 = new Locale("/2I/2I annotation, but there were empty", "Strings must not be null", " ");
      assertNotNull(locale0);
      assertEquals("/2i/2i annotation, but there were empty", locale0.getLanguage());
      assertEquals("STRINGS MUST NOT BE NULL", locale0.getCountry());
      assertEquals("/2i/2i annotation, but there were empty_STRINGS MUST NOT BE NULL_ ", locale0.toString());
      assertEquals(" ", locale0.getVariant());
      
      String string5 = StringUtils.lowerCase(" ", locale0);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals(" ", string5);
      assertNotNull(string5);
      assertEquals("/2i/2i annotation, but there were empty", locale0.getLanguage());
      assertEquals("STRINGS MUST NOT BE NULL", locale0.getCountry());
      assertEquals("/2i/2i annotation, but there were empty_STRINGS MUST NOT BE NULL_ ", locale0.toString());
      assertEquals(" ", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) " ", (-1005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\"~{k83<mKO", "\"~{k83<mKO");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\"~{k83<mKO";
      charSequenceArray0[1] = (CharSequence) "\"~{k83<mKO";
      String string1 = StringUtils.replaceOnceIgnoreCase("\"~{k83<mKO", "&mP}G5uq?6oa)$ok(`>", "&mP}G5uq?6oa)$ok(`>");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"~{k83<mKO", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "\"~{k83<mKO";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Locale must not be null";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.replaceFirst("", (String) null, "\"~{k83<mKO");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean2 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\"mGjuc~Y6 Dg2GD");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\"mGjuc~Y6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("\"mGjuc~Y6 Dg2GD", '9');
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"mGjuc~Y6 Dg2GD", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("Minimum abbreviation width with offset is %d", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("\"mGjuc~Y6Minimum abbreviation width with offset is %dDg2GD", string2);
      assertNotNull(string2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("\"mGjuc~Y6 Dg2GD"));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((Object) "\"mGjuc~Y6");
      assertTrue(boolean0);
      assertFalse(stack0.contains("\"mGjuc~Y6 Dg2GD"));
      assertTrue(stack0.contains("\"mGjuc~Y6"));
      assertFalse(stack0.isEmpty());
      assertEquals("[\"mGjuc~Y6]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\"mGjuc~Y6", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) "\"mGjuc~Y6Minimum abbreviation width with offset is %dDg2GD", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(9, int0);
      
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "\r";
      stringArray2[1] = "Minimum abbreviation width with offset is %d";
      String string3 = StringUtils.getCommonPrefix(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray2.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertEquals(0, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertEquals(0, priorityQueue0.size());
      
      String string4 = StringUtils.join(iterator0, "g|DT");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(priorityQueue0.contains("Supplied value must be a valid byte literal between -128 and 127: ["));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (-2026L);
      longArray0[2] = 1926L;
      String string0 = StringUtils.join(longArray0, '#', 421, 421);
      assertEquals(3, longArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new long[] {0L, (-2026L), 1926L}, longArray0);
      
      String string1 = StringUtils.wrapIfMissing("il7Nn}", 'a');
      assertFalse(string1.equals((Object)string0));
      assertEquals("ail7Nn}a", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("il7Nn}", "il7Nn}", "ail7Nn}a");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ail7Nn", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, '8');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, floatArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Search ad veplc arrayOlengths don't match: ", "Search ad veplc arrayOlengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Search ad veplc arrayOlengths don't match: ", 1501);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.strip("Search ad veplc arrayOlengths don't match: ", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Search ad veplc arrayOlengths don't match: ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("VzLIeAi");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\r ", "");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceEach("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isMixedCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.joinWith((String) null, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("VzLIeAi", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'P';
      charArray0[2] = 'j';
      charArray0[3] = 'w';
      charArray0[4] = 'h';
      charArray0[5] = 'A';
      charArray0[6] = 'i';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'Y', 'P', 'j', 'w', 'h', 'A', 'i'}, charArray0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      String string0 = StringUtils.center("p$i,*.X,8^?w<J$NVacL5dKn0f", 2716);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, 2716);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, "9Q%e");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "9Q%e", (CharSequence) "p$i,*.X,8^?w<J$NVacL5dKn0f");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("p$i,*.X,8^?w<J$NVacL5dKn0f");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String string0 = StringUtils.center("9Q%e", 2674, (String) null);
      assertNotNull(string0);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("9Q%e"));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string1 = StringUtils.join((List<?>) vector0, "9Q%e", 2674, 24);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(vector0.contains("9Q%e"));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.left("org.junitpioneer.jupiter.CartesianEnumArgumentsProvider", 869);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianEnumArgumentsProvider", string3);
      assertNotNull(string3);
      
      String string4 = "OzB,El";
      String string5 = "The String must not be empty";
      String string6 = "Locale must not be nulliA%R/Fcu";
      String string7 = StringUtils.replace("9Q%e", "The String must not be empty", "Locale must not be nulliA%R/Fcu", 924);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("9Q%e", string7);
      assertNotNull(string7);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '3';
      floatArray0[1] = (float) '3';
      floatArray0[2] = 0.0F;
      String string8 = StringUtils.join(floatArray0, '3');
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals(3, floatArray0.length);
      assertEquals("51.0351.030.0", string8);
      assertNotNull(string8);
      assertArrayEquals(new float[] {51.0F, 51.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvideraD1gL\"Hf &A%u)KGJ(%";
      objectArray0[1] = (Object) "9Q%e";
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '3', 2, 2266);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("*qSv=wx&SYS$BI", '=', '=');
      assertEquals("*qSv=wx&SYS$BI", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("^h_/QwOf#@^F<ma", "*U4evTG4t<!i");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^h_/QwOf#@^F<ma", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '=';
      String string2 = StringUtils.uncapitalize("*qSv=wx&SYS$BI");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("*qSv=wx&SYS$BI", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad((String) null, (-1990), "^h_/QwOf#@^F<ma");
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate("", 52);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "^h_/QwOf#@^F<ma", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("*qSv=wx&SYS$BI");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.trimToEmpty("^h_/QwOf#@^F<ma");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("^h_/QwOf#@^F<ma", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'j');
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-879);
      intArray0[1] = 6;
      intArray0[2] = 783;
      intArray0[3] = 34;
      intArray0[4] = 29;
      intArray0[5] = 744;
      String string0 = StringUtils.join(intArray0, 'P', 744, 6);
      assertEquals(6, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-879), 6, 783, 34, 29, 744}, intArray0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 29;
      objectArray0[2] = (Object) (-879);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "I";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) 744;
      objectArray0[8] = (Object) "";
      String string1 = StringUtils.joinWith("I", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", (-879), "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.difference("Search and Replace array lengths don't match: ", (String) null);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String string0 = StringUtils.center("^h_/QwOf#@^F<ma", 16, '\'');
      assertEquals("^h_/QwOf#@^F<ma'", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("^h_/QwOf#@^F<ma'", "^h_/QwOf#@^F<ma'", 16);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBefore("7-ORl-@", "7-ORl-@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("#z99i$zA^5\t1ag$1~");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#z99i$zA^51ag$1~", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotBlank("^h_/QwOf#@^F<ma");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "7ueq*v", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "^h_/QwOf#@^F<ma'", (CharSequence) "#z99i$zA^5\t1ag$1~");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.abbreviateMiddle("=%2*dW7dSG&fT", "/2I/2I", 1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("=%2*dW7dSG&fT", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "^h_/QwOf#@^F<ma", (CharSequence) "b6+Cko@{c''aa6Aw4");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string4 = StringUtils.trimToEmpty("");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "OG~q%Wj,$vD7");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "lC<3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String string0 = StringUtils.center("#C|KT;IBm", 108, 'e');
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("#C|KT;IBm", "#C|KT;IBm");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnce("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "|U#<n&NO", "...");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", ")u|kmue{qfqNV=cu");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", (CharSequence) "...", 9996);
      assertFalse(int1 == int0);
      assertEquals(108, int1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
      objectArray0[1] = (Object) "|U#<n&NO";
      objectArray0[2] = (Object) ")u|kmue{qfqNV=cu";
      objectArray0[3] = (Object) "#C|KT;IBm";
      objectArray0[4] = (Object) "...";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "|U#<n&NO";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '&', 2, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("_");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.join((Object[]) stringArray0, '1');
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("_", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("_", "_", 25);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("`U#>CR", "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("`U#>CR"));
      assertEquals(0, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("`U#>CR"));
      assertEquals(0, linkedList1.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean0 = linkedList1.add((Object) "");
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(""));
      assertFalse(linkedList1.contains("`U#>CR"));
      assertEquals(1, linkedList1.size());
      
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains("`U#>CR"));
      assertEquals(0, linkedList2.size());
      
      boolean boolean1 = linkedList2.containsAll(linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList1.contains(""));
      assertFalse(linkedList1.contains("`U#>CR"));
      assertFalse(linkedList2.contains("`U#>CR"));
      assertEquals(1, linkedList1.size());
      assertEquals(0, linkedList2.size());
      
      String string3 = StringUtils.joinWith("Expected exception %s was not thrown.", stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("_", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 100);
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "`U#>CR");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "D", charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.isAlpha("D");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("9n:");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("9n:"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("9n:");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("9n:"));
      assertEquals(2, priorityQueue0.size());
      
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "9n:", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      String string0 = StringUtils.substringAfter(" LNid9i%u", 8);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Object varargs must not be null", "^h_/QwOf#@^F<ma");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) " LNid9i%u";
      charSequenceArray0[2] = (CharSequence) "^h_/QwOf#@^F<ma";
      charSequenceArray0[2] = (CharSequence) "^h_/QwOf#@^F<ma";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad(" LNid9i%u", 8, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" LNid9i%u", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.rightPad("", 76);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("                                                                            ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.getDigits("^h_/QwOf#@^F<ma");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(31, int1);
      
      String string6 = StringUtils.CR;
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("\r", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#C|KT;IBm", (CharSequence) "");
      assertEquals(9, int0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.getIfBlank("#C|KT;IBm", (Supplier<String>) null);
      assertEquals("#C|KT;IBm", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = StringUtils.difference("X", "p$i,*.X,8^?w<J$NV");
      assertEquals("p$i,*.X,8^?w<J$NV", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("X");
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {88}, intArray0);
      
      String string1 = StringUtils.wrap("Object varargs must not be null", '2');
      assertFalse(string1.equals((Object)string0));
      assertEquals("2Object varargs must not be null2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      int int1 = StringUtils.compare("2Object varargs must not be null2", "p$i,*.X,8^?w<J$NV");
      assertFalse(int1 == int0);
      assertEquals((-62), int1);
      
      String string3 = StringUtils.uncapitalize("Object varargs must not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("object varargs must not be null", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "/2I", 50);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      double double0 = StringUtils.getJaroWinklerDistance("2Object varargs must not be null2", "2Object varargs must not be null2");
      assertEquals(1.0, double0, 0.01);
      
      String string4 = StringUtils.wrapIfMissing("Object varargs must not be null", 'l');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("lObject varargs must not be null", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootUpperCase((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("&L\"N-)sd5:V", (String[]) null, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("&L\"N-)sd5:V", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1610612734);
      intArray0[1] = (-2499);
      intArray0[2] = 2;
      intArray0[3] = (-1011);
      intArray0[4] = (-2893);
      intArray0[5] = (-1111);
      intArray0[6] = 10;
      String string2 = StringUtils.join(intArray0, '|');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, intArray0.length);
      assertEquals("-1610612734|-2499|2|-1011|-2893|-1111|10", string2);
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-1610612734), (-2499), 2, (-1011), (-2893), (-1111), 10}, intArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("org.junitpioneer.jupiter.CartesianProductTestExtension", (-1610612734));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBefore("\r", "\r");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("\r", supplier0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("\r", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "&L\"N-)sd5:V", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Y:jM", (String) null);
      assertEquals("Y:jM", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "Y:jM", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.leftPad((String) null, 9, "HP*:5Y48VE}y|");
      assertNull(string1);
      
      String string2 = StringUtils.substring("/2I/2I", 121, (-1017));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate(" \r", 9, 1985);
      assertFalse(string3.equals((Object)string2));
      assertEquals(" \r", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "/2I/2I", (CharSequence) "HP*:5Y48VE}y|");
      assertEquals((-1), int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("HP*:5Y48VE}y|"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("HP*:5Y48VE}y|");
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("HP*:5Y48VE}y|"));
      assertFalse(arrayList0.contains(string3));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      boolean boolean1 = arrayList0.add((String) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("HP*:5Y48VE}y|"));
      assertFalse(arrayList0.contains(string3));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      String string4 = StringUtils.toRootLowerCase("/2I/2I");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/2i/2i", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNumericSpace("/2i/2i");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = arrayList0.add((String) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertTrue(arrayList0.contains("HP*:5Y48VE}y|"));
      assertFalse(arrayList0.contains("/2i/2i"));
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      String string5 = StringUtils.chomp(" \r");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", " \r", 121, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 9, "HP*:5Y48VE}y|");
      assertNull(string0);
      
      String string1 = StringUtils.substring("/2I/2I", 121, (-1017));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate(" \r", 9, 1985);
      assertFalse(string2.equals((Object)string1));
      assertEquals(" \r", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "/2I/2I", (CharSequence) "HP*:5Y48VE}y|");
      assertEquals((-1), int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("HP*:5Y48VE}y|"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains("HP*:5Y48VE}y|"));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("HP*:5Y48VE}y|"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, 'q');
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(arrayList0.contains(string3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList1.add((String) null);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList1.contains(string3));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      String string4 = StringUtils.chomp(" \r");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("#");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "org.apahe.commonslang3.StringUtils");
      assertNull(stringArray0);
      
      String string6 = StringUtils.removeEnd("mx{3%9'", " \r");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("mx{3%9'", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.upperCase("mx{3%9'");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("MX{3%9'", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.replacePattern((String) null, "zt7Wfa`~QCHPPyg|H+", "p~$");
      assertNull(string8);
      
      String string9 = StringUtils.substringAfter(" \r", "dgXrt-d~[oO%");
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.mid(string0, '=', '=');
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase(string1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\\U", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat(string0, 10);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      
      Locale locale2 = Locale.CANADA;
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      
      String string5 = locale2.getDisplayCountry(locale0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Canada", string5);
      assertNotNull(string5);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      
      String string6 = StringUtils.removeStartIgnoreCase(" ", "6~xauv");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, 10);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      String string0 = StringUtils.center("1V", 2716);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, 2716);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, "1V", string0);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) string0, (CharSequence) "1V");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("1V");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfAny(string0, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.prependIfMissing("p{InCombiningDiacriticalMarks}+", "1V", (CharSequence[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1Vp{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) null, "1Vp{InCombiningDiacriticalMarks}+", (-1), 160);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) null, (-1958));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.right((String) null, 52);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("/2I", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "offset cannot be negative", (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("offset cannot be negative", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "offset cannot be negative", (int) '4');
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[3] = 't';
      charArray0[1] = 'K';
      charArray0[2] = '4';
      charArray0[3] = '=';
      charArray0[4] = 't';
      charArray0[5] = '4';
      charArray0[6] = 'K';
      charArray0[7] = '=';
      String string3 = StringUtils.substringAfter("", (-1));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "/2I", "5+Mx\u0004H<{G/2I");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) '=';
      floatArray0[2] = (float) '=';
      floatArray0[3] = (float) 'K';
      floatArray0[4] = (float) '4';
      floatArray0[5] = (float) 'K';
      String string4 = StringUtils.abbreviate("/2I/2I", (-1), 31);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/2I/2I", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '4', 0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String string0 = StringUtils.getDigits(",nD)!v");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 64, 'y');
      assertFalse(string2.equals((Object)string0));
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'm';
      floatArray0[1] = (float) 64;
      floatArray0[2] = (float) 64;
      floatArray0[3] = (float) 64;
      floatArray0[4] = (float) 'm';
      String string3 = StringUtils.join(floatArray0, 'm');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, floatArray0.length);
      assertEquals("109.0m64.0m64.0m64.0m109.0", string3);
      assertNotNull(string3);
      assertArrayEquals(new float[] {109.0F, 64.0F, 64.0F, 64.0F, 109.0F}, floatArray0, 0.01F);
      
      String string4 = StringUtils.removeEnd("Illegal range. There's no way to get from %s to %s with a step of %s.", "8");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("[ 0|");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("[ 0|", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string6 = StringUtils.replacePattern("8", "", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("8", string6);
      assertNotNull(string6);
      
      byte[] byteArray0 = StringUtils.getBytes("24J'|;<w=6Kvz,8Q", (String) null);
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.leftPad("1}Z6PSPJbpc", 96, (String) null);
      assertEquals("                                                                                     1}Z6PSPJbpc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("'u`L0", 10, 2725);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 920, 96);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "                                                                                     1}Z6PSPJbpc", (CharSequence) "'u`L0");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(string0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      ListIterator<String> listIterator0 = arrayList1.listIterator();
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(listIterator0);
      assertFalse(arrayList1.contains(string0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, 'q');
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(arrayList1.contains(string0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = StringUtils.isNumericSpace("                                                                                     1}Z6PSPJbpc");
      assertFalse(boolean0);
      
      boolean boolean1 = arrayList1.add((String) null);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList1.contains(string0));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.getDigits("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("1}Z6PSPJbpc", "RM");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      String string6 = StringUtils.removeEnd((String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.upperCase("");
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.replacePattern("", "1}Z6PSPJbpc", "");
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " `GQRQ't?dFB:]";
      stringArray0[1] = " `GQRQ't?dFB:]";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(" `GQRQ't?dFB:]", string0);
      assertNotNull(string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(" `GQRQ't?dFB:]"));
      assertEquals(0, priorityQueue0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      String string1 = StringUtils.unwrap((String) null, '_');
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) " `GQRQ't?dFB:]", (-413));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, " `GQRQ't?dFB:]");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" `GQRQ't?dFB:]");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrap((String) null, 'w');
      assertNull(string2);
      
      String string3 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String string0 = StringUtils.right("...", 2333);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", "...");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "...";
      boolean boolean1 = StringUtils.equalsAny("...", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString((String) null, "Y:jM");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y:jM", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isNotBlank("Y:jM");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "=", (CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "...", (CharSequence) "Y:jM");
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string2 = StringUtils.abbreviateMiddle("...", "...", 2333);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean5 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      String string3 = StringUtils.trimToEmpty("O*FT");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("O*FT", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "qL76nTllh)ljd*DNG m");
      assertNull(string4);
      
      String string5 = StringUtils.rotate((String) null, 5);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String string0 = "Minimum abbreviation width is %d";
      // Undeclared exception!
      StringUtils.rightPad("Minimum abbreviation width is %d", 32767, "Minimum abbreviation width is %d");
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string0 = StringUtils.substring((String) null, 46);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("maxWith cannot be negative", '_');
      assertEquals("_maxWith cannot be negative_", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.remove("/2I", '@');
      assertEquals("/2I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("/2I");
      assertTrue(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate((String) null, 1);
      assertNull(string2);
      
      String string3 = StringUtils.normalizeSpace("/2I");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("/2I", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "/2I", (CharSequence) null, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "K\u0002=]]ZLo6`", (char[]) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("/2I", "/2I");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("/2I", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      int int4 = StringUtils.length("/2I");
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(3, int4);
      
      String string5 = StringUtils.mid("w!R{y4d", (-706), 1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("w", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring((String) null, 1893);
      assertNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "&p9y[xQQw!I");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#C|KT;IBm", (CharSequence) "S-_Lg");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.substringBetween("doesn't contain any substring.", "doesn't contain any substring.");
      assertNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("#A2?\"mrBE", (String) null);
      assertEquals("#A2?\"mrBE", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'L';
      intArray0[2] = (int) 'L';
      intArray0[3] = (int) 'L';
      intArray0[4] = (int) 'L';
      intArray0[5] = (-1);
      intArray0[6] = (int) 'L';
      intArray0[7] = (int) 'L';
      intArray0[8] = (int) 'L';
      String string2 = StringUtils.join(intArray0, 'L');
      assertFalse(string2.equals((Object)string1));
      assertEquals(9, intArray0.length);
      assertEquals("-1L76L76L76L76L-1L76L76L76", string2);
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-1), 76, 76, 76, 76, (-1), 76, 76, 76}, intArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "doesn't contain any substring.", (CharSequence) "-1L76L76L76L76L-1L76L76L76");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad("!Q<<", 76);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!Q<<                                                                        ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBefore(" \r", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" \r", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "-1L76L76L76L76L-1L76L76L76", (CharSequence) " \r");
      assertFalse(int1 == int0);
      assertEquals(26, int1);
      
      String string5 = StringUtils.defaultString("doesn't contain any substring.");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("doesn't contain any substring.", string5);
      assertNotNull(string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("doesn't contain any substring.", supplier0);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("doesn't contain any substring.", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      int int2 = StringUtils.getFuzzyDistance("-1L76L76L76L76L-1L76L76L76", "doesn't contain any substring.", locale0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, " vs ", "/2IJ+Mx\u0004H<{G");
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars("/2IJ+Mx\u0004H<{G", '!', 'n');
      assertEquals("/2IJ+Mx\u0004H<{G", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) "#C|KT;IBm";
      objectArray0[3] = (Object) "#C|KT;IBm";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "/2IJ+Mx\u0004H<{G";
      objectArray0[6] = (Object) null;
      String string2 = StringUtils.join(objectArray0, "#C|KT;IBm", (-776715842), (-776715842));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("/2IJ+Mx\u0004H<{G");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ">hS%}rg&hz9Ea{Gt";
      String string3 = StringUtils.stripAccents("");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "/2IJ+Mx\u0004H<{G";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "", 1872);
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.countMatches((CharSequence) ">hS%}rg&hz9Ea{Gt", (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", 1501);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("", 550, "Threshold must not be negative");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Threshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold must not be negativeThreshold ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((int[]) null, '!');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[1], (CharSequence) "Threshold must not be negative");
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string5 = StringUtils.rightPad("\"", 553);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEqualsstring5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[3], charSequenceArray0[5]);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string6 = StringUtils.removeFirst("", "\r");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      String string0 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "doesn't contain any substring.");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("doesn't contain any substring.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.strip("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("P{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("", 'H');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("");
      assertNull(string5);
      
      String string6 = StringUtils.leftPad("", 1725, 'H');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.strip("doesn't contain any substring.");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("doesn't contain any substring.", string7);
      assertNotNull(string7);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.deleteWhitespace("Locale must not be null");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Localemustnotbenull", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.capitalize("");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.removeIgnoreCase("doesn't contain any substring.", "$lA],i%O]YVw)k");
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertEquals("doesn't contain any substring.", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.repeat("", 1725);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertTrue(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertEquals("", string11);
      assertNotNull(string11);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertSame(charset0, charset1);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("...", charSequenceArray0[2]);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String string1 = StringUtils.stripToEmpty("7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("7", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[3], "...");
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.stripToNull("s");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("s", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], charSequenceArray0[0], 993);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "I*A*c#)-ipOTHWucwQ";
      stringArray1[1] = "J+M";
      stringArray1[2] = "p|p>zmz{G";
      stringArray1[3] = "J+M";
      String string3 = StringUtils.replaceEach("p|p>zmz{G", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertEquals("p|p>zmz{G", string3);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isMixedCase("\n");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string4 = StringUtils.joinWith("...", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray1.length);
      assertEquals("I*A*c#)-ipOTHWucwQ...J+M...p|p>zmz{G...J+M", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("8");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("8");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8";
      stringArray0[1] = "\n";
      String string0 = StringUtils.replaceEach("\n", stringArray0, stringArray0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", 1501);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("<&w9y5Wzkk/s8GVq QI", 11, '1');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<&w9y5Wzkk/s8GVq QI", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfBlank("", supplier0);
      assertNull(string5);
      
      String string6 = StringUtils.defaultString("H:f8CG3");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("H:f8CG3", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substring((String) null, 1501, 2725);
      assertNull(string7);
      
      String string8 = StringUtils.abbreviate("Cannot store ", 11, 3252);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertEquals("Cannot store ", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.normalizeSpace("8");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertEquals("8", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.replacePattern(" is not in the range '0' - '9'", " is not in the range '0' - '9'", ".*{[0-9]+}.*");
      assertEquals(".*{[0-9]+}.*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("\"mGjuc~Y6 Dg2GD", "\"mGjuc~Y6 Dg2GD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '.';
      charArray0[2] = 'X';
      charArray0[3] = 'w';
      charArray0[4] = '/';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ".*{[0-9]+}.*", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'}', '.', 'X', 'w', '/'}, charArray0);
      
      String string2 = StringUtils.abbreviate("#", ".*{[0-9]+}.*", 1200, 61);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "\"mGjuc~Y6 Dg2GD", (CharSequence) "#");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.defaultIfBlank("#", ")~63&7I4o3m>qz}\"nT");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("#", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "#";
      stringArray0[1] = ")~63&7I4o3m>qz}\"nT";
      stringArray0[2] = "\"mGjuc~Y6 Dg2GD";
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '>', 1200, 45);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("#", 2, 'X');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("#X", string6);
      assertNotNull(string6);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.5138782051282051;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '6', 0, 1193);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Display name '%s' %s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Display name '%s' %s", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '{', 'o');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Display name '%s' %s", (-1), (-1));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter("[:KAEs", "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeIgnoreCase("Display name '%s' %s", "Display name '%s' %s");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd(".*{[0-9]+}.*", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(".*{[0-9]+}.*", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", (CharSequence) "Display name '%s' %s");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("/2I", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "offset cannot be negative", (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("offset cannot be negative", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "offset cannot be negative", (int) '4');
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[3] = 't';
      charArray0[1] = 'K';
      charArray0[2] = '4';
      charArray0[3] = '=';
      charArray0[4] = 't';
      charArray0[5] = '4';
      charArray0[6] = 'K';
      charArray0[7] = '=';
      String string3 = StringUtils.substringAfter("", (-1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "/2I", "5+Mx\u0004H<{G/2I");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) '=';
      floatArray0[2] = (float) '=';
      floatArray0[3] = (float) 'K';
      floatArray0[4] = (float) '4';
      floatArray0[5] = (float) 'K';
      String string4 = StringUtils.left("Strings must not be null", 0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 108, "bc},r^>H>!)+w,+P");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)25;
      String string0 = StringUtils.join(byteArray0, '?', 467, 467);
      assertEquals(6, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)127, (byte)22, (byte)11, (byte) (-1), (byte)25}, byteArray0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.leftPad((String) null, 98, "\"^&$]g");
      assertNull(string1);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2);
      
      int int0 = StringUtils.lastIndexOfAny("\"^&$]g", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(6, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "\"^&$]g";
      stringArray0[2] = "*Fa-itQ%(AH,,NW(F";
      stringArray0[3] = "org.junitpioneer.jupiter.params.FloatRange";
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = "org.junitpioneer.jupiter.params.FloatRange";
      stringArray0[7] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.params.FloatRange", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("1", charSequenceArray0[0]);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlpha("\n");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string2 = StringUtils.wrap("No @DisabledUntil annotation found on element", 'R');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("RNo @DisabledUntil annotation found on elementR", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfBlank("", supplier0);
      assertNull(string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean4 = StringUtils.isEmpty("\n");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string4 = StringUtils.rightPad("{}", (-1), "RNo @DisabledUntil annotation found on elementR");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{}", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[2], charSequenceArray0[3]);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.substringBetween("W(YAY&yW\"H+F3t_e#", (String) null, "");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&kbaoqj]");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("&kbaoqj]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("&kbaoqj]", "&kbaoqj]", "&kbaoqj]", (int) '~');
      assertTrue(string1.equals((Object)string0));
      assertEquals("&kbaoqj]", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("&kbaoqj]", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "&kbaoqj]", 7, 1720);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("&kbaoqj]", "P=,", "&kbaoqj]");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertEquals("Org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("\"mGjuc~Y6 Dg2GD", '4');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "^h_/QwOf#@^F<ma", (CharSequence) "\"mGjuc~Y6 Dg2GD");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("-;i", '4');
      assertFalse(string1.equals((Object)string0));
      assertEquals("4-;i4", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("7ogB$6Z| /J!d.H", "...", "...");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7ogB$6Z| /J!d.H", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.repeat('4', 10);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("4444444444", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("y_PwMg@", (-1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cSnNH|=LX,SVuk2}\"-";
      boolean boolean0 = StringUtils.isWhitespace("cSnNH|=LX,SVuk2}\"-");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("cSnNH|=LX,SVuk2}\"-");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.leftPad("cSnNH|=LX,SVuk2}\"-", 12);
      assertEquals("cSnNH|=LX,SVuk2}\"-", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("cSnNH|=LX,SVuk2}\"-", "cSnNH|=LX,SVuk2}\"-");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripToEmpty("}");
      assertFalse(string1.equals((Object)string0));
      assertEquals("}", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ")6ix&p2^k>/_?", (CharSequence) "cSnNH|=LX,SVuk2}\"-", 12);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "cSnNH|=LX,SVuk2}\"-", (-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator((String) null, "cSnNH|=LX,SVuk2}\"-", (-685));
      assertNull(stringArray2);
      
      String string2 = StringUtils.repeat("}", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("=%2*dW7dSG&fT", "=%2*dW7dSG&fT");
      assertEquals("=%2*dW7dSG&fT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("=%2*dW7dSG&fT", Integer.MAX_VALUE, 9);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("=%2*dW7dSG&fT");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("", "");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("=%2*dW7dSG&fT", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.rightPad("", 9, "N3hMG");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("N3hMGN3hM", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAllUpperCase("=%2*dW7dSG&fT");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.swapCase("");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripToNull("=%2*dW7dSG&fT");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("=%2*dW7dSG&fT", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "N3hMG", (-542));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=%2*dW7dSG&fT";
      stringArray0[1] = "=%2*dW7dSG&fT";
      stringArray0[2] = "=%2*dW7dSG&fT";
      stringArray0[3] = "o;?jB'yaw7pzf#`";
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "Minimum abbreviation width is %d";
      stringArray1[2] = "o;?jB'yaw7pzf#`";
      stringArray1[3] = "o;?jB'yaw7pzf#`";
      String string7 = StringUtils.replaceEach("=%2*dW7dSG&fT", stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.isMixedCase("=%2*dW7dSG&fT");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("=%2*dW7dSG&fT", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'w');
      assertEquals(3, charSequenceArray0.length);
      assertEquals("ww", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "ww";
      String string1 = StringUtils.joinWith("ww", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("wwwwww", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "wwwwww";
      String string2 = StringUtils.abbreviate("zm'(@F<f<H", 16);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("zm'(@F<f<H", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "zm'(@F<f<H";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = "Supplied value must be a valid byte literal between -128 and 127: [";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("zm'(@F<f<H", "Supplied value must be a valid byte literal between -128 and 127: [", 16, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 68
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("\n", "\n");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[2], charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.abbreviate("\n", 32, 32);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "maxWith cannot be negative", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = '!';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      assertEquals("b!", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'b', '!'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "b!", charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'b', '!'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "b!", 584);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isAlphaSpace("b!");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isBlank("b!");
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      // Undeclared exception!
      StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 65536, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-11);
      shortArray0[1] = (short) (-1207);
      shortArray0[2] = (short)6;
      String string0 = StringUtils.join(shortArray0, ',');
      assertEquals(3, shortArray0.length);
      assertEquals("-11,-1207,6", string0);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short) (-11), (short) (-1207), (short)6}, shortArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("-11,-1207,6");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("-11,-1207,6");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad("y", (int) (short)6);
      assertFalse(string1.equals((Object)string0));
      assertEquals("     y", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("     y", "     y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = StringUtils.toCodePoints("y");
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {121}, intArray0);
      
      String string2 = StringUtils.abbreviateMiddle("-11,-1207,6", "     y", (short) (-1207));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("-11,-1207,6", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("=\"qB(W\"Ae>le/!&4X", "U/OS");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("=\"qB(W\"Ae>le/!&4X", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("=\"qB(W\"Ae>le/!&4X");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.joinWith("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertEquals("-11,-1207,6", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "-11,-1207,6", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "=\"qB(W\"Ae>le/!&4X", 33, 32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      String string0 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "doesn't contain any substring.");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("doesn't contain any substring.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+");
      assertTrue(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("P{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("p{InCombiningDiacriticalMarks}+", 8192);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      
      String string4 = "OO";
      Locale locale0 = new Locale("The `date` %s is after the current date %s", "OO", "The `date` %s is after the current date %s");
      assertNotNull(locale0);
      assertEquals("the `date` %s is after the current date %s_OO_The `date` %s is after the current date %s", locale0.toString());
      assertEquals("The `date` %s is after the current date %s", locale0.getVariant());
      assertEquals("the `date` %s is after the current date %s", locale0.getLanguage());
      assertEquals("OO", locale0.getCountry());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertEquals("the `date` %s is after the current date %s_OO_The `date` %s is after the current date %s", locale0.toString());
      assertEquals("The `date` %s is after the current date %s", locale0.getVariant());
      assertEquals("the `date` %s is after the current date %s", locale0.getLanguage());
      assertEquals("OO", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      assertNotSame(locale0, locale1);
      assertSame(set1, set0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(set1);
      assertFalse(set1.contains(string1));
      assertEquals("the `date` %s is after the current date %s_OO_The `date` %s is after the current date %s", locale0.toString());
      assertEquals("The `date` %s is after the current date %s", locale0.getVariant());
      assertEquals("the `date` %s is after the current date %s", locale0.getLanguage());
      assertEquals("OO", locale0.getCountry());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) set1, locale_FilteringMode0);
      assertNotSame(locale0, locale1);
      assertNotSame(vector1, vector0);
      assertSame(set1, set0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(list0);
      assertFalse(set1.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals("the `date` %s is after the current date %s_OO_The `date` %s is after the current date %s", locale0.toString());
      assertEquals("The `date` %s is after the current date %s", locale0.getVariant());
      assertEquals("the `date` %s is after the current date %s", locale0.getLanguage());
      assertEquals("OO", locale0.getCountry());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string5 = locale1.getDisplayCountry(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("China", string5);
      assertNotNull(string5);
      assertEquals("the `date` %s is after the current date %s_OO_The `date` %s is after the current date %s", locale0.toString());
      assertEquals("The `date` %s is after the current date %s", locale0.getVariant());
      assertEquals("the `date` %s is after the current date %s", locale0.getLanguage());
      assertEquals("OO", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      
      Locale locale2 = Locale.FRANCE;
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertEquals("FRA", locale2.getISO3Country());
      
      String string6 = StringUtils.lowerCase("zr0<&,c<6hC[Wh0$Z", locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("zr0<&,c<6hc[wh0$z", string6);
      assertNotNull(string6);
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertEquals("FRA", locale2.getISO3Country());
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The `date` %s is after the current date %s", (CharSequence) "doesn't contain any substring.", 12);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "zr0<&,c<6hC[Wh0$Z";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "doesn't contain any substring.";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Minimum abbreviation width is %d", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("IT\"9A?$@(%y~hTW#", ", Length: ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("IT\"9A?$@(%y~hTW#", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", Length: ", (CharSequence) "IT\"9A?$@(%y~hTW#", 14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsAny(" LNid9>%u", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) null, 'q');
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(" LNid9>%u"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean2 = arrayList0.add("@Id'?4W");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains("@Id'?4W"));
      assertFalse(arrayList0.contains(" LNid9>%u"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, "=i#[:|Q_59?c]tW=jp", 221, (-1726));
      assertNull(string2);
      
      String string3 = StringUtils.getDigits("=i#[:|Q_59?c]tW=jp");
      assertEquals("59", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = StringUtils.rightPad("kmhZe zG;gL5'", 8212, 'T');
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(8212);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8212, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8212, charBuffer0.remaining());
      assertEquals(8212, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8212, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, 'm');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      char[] charArray0 = new char[6];
      String[] stringArray0 = StringUtils.splitByWholeSeparator("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", "_");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\u0000\u0000\u0000\u0000\u0000\u0000");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "-;i", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000", 2);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("-;i");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAlphaSpace("-;i");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("@CartesianTest not found.");
      assertEquals("@CartesianTest not found.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Wg4pU~-*-Qo.lC");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripToEmpty("Wg4pU~-*-Qo.lC");
      assertFalse(string2.equals((Object)string1));
      assertEquals("Wg4pU~-*-Qo.lC", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissing("Wg4pU~-*-Qo.lC", (CharSequence) null, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(12, stringArray1.length);
      assertEquals("Wg4pU~-*-Qo.lC", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "Wg4pU~-*-Qo.lC");
      assertEquals(0.35, double0, 0.01);
      
      String string4 = StringUtils.stripToNull("WnGuLe]6r}H`");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("WnGuLe]6r}H`", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "WnGuLe]6r}H`", (-3557));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replaceEach("Wg4pU~-*-Qo.lC", stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals(6, stringArray0.length);
      assertEquals("Wg4pU~-*-Qo.lC", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isMixedCase("Wg4pU~-*-Qo.lC");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string6 = StringUtils.joinWith((String) null, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals(12, stringArray1.length);
      assertEquals("Wg4pU~-*-Qo.lC", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String string0 = StringUtils.replace("^h_/QwOf#@^F<ma", "^h_/QwOf#@^F<ma", "^h_/QwOf#@^F<ma");
      assertEquals("^h_/QwOf#@^F<ma", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("^h_/QwOf#@^F<ma", "^h_/QwOf#@^F<ma");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 31);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "^h_/QwOf#@^F<ma", (CharSequence) "", 10);
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.substring("q3P=rLV1}C?HmaxWith cannot be negative", 112);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("Display name '%s' %sDisplay name '%s' %s");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Display name '%s' %sDisplay name '%s' %s", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertEquals(53, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.startsWith(charSequenceArray0[0], "^h_/QwOf#@^F<ma");
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.countMatches(charSequenceArray0[1], (CharSequence) "^h_/QwOf#@^F<ma");
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int3);
      
      int int4 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int4);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "q3P=rLV1}C?HmaxWith cannot be negative", "ln=UYU2");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 99, 12);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("d8X<QtG*HKb", '[');
      assertFalse(string1.equals((Object)string0));
      assertEquals("d8X<QtG*HKb", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.chomp("{'T)G+A!ttO=k02");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{'T)G+A!ttO=k02", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{'T)G+A!ttO=k02", "^h_/QwOf#@^F<ma");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("{'T)G+A!ttO=k02", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("", "");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.startsWithAny("^h_/QwOf#@^F<ma", stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("{'T)G+A!ttO=k02", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.ordinalIndexOf("", "{'T)G+A!ttO=k02", 1619);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.removeFirst((String) null, "Minimum abbreviation width is %d");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension");
      assertEquals("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", '6');
      assertTrue(string1.equals((Object)string0));
      assertEquals("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", (CharSequence) "~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Display name '%s' %s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Display name '%s' %s", string1);
      assertNotNull(string1);
      
      String string2 = "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension";
      String string3 = StringUtils.difference("", "");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "Display name '%s' %s", 72);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBefore("", "Display name '%s' %s");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isMixedCase("Display name '%s' %s");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 44;
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      longArray0[5] = (long) 72;
      longArray0[6] = 3764L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'h', 72, 1927);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 72
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'D');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      int int0 = (-2147483631);
      String string0 = "\r";
      // Undeclared exception!
      try { 
        StringUtils.upperCase("\r", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center(", Length: 0", 16, '9');
      assertFalse(string1.equals((Object)string0));
      assertEquals("99, Length: 0999", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("99, Length: 0999", ", Length: 0", 32);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("$/Y=3'@#{?o':R=Q", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$/Y=3'@#{?o':R=Q", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("p=W#`Y%5\"%1}pZdw");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("p=W#`Y%5\"%1}pZdw", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("T!l*P*>9g32+ En`", "is %d");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("T!l*P*>9g32+ En`", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(string1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, '9');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(arrayList0.contains(string5));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string6 = StringUtils.left("UCwWA4K$", (-1772));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'O');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.mid("p=W#`Y%5\"%1}pZdw", 16, 1114111);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfter("!V,KQ6", ", Length: 0");
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.wrapIfMissing(".m\"<$lAv!*nVG C", "oE<\"3_2g(L");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertEquals("oE<\"3_2g(L.m\"<$lAv!*nVG CoE<\"3_2g(L", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = StringUtils.substringBefore("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", (String) null);
      assertEquals("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String string0 = StringUtils.center("#C|KT;IBm", 108, 'Z');
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ#C|KT;IBmZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("#C|KT;IBm", "#C|KT;IBm");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("#C|KT;IBm", "", 44);
      assertEquals(9, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "#C|KT;IBm";
      charSequenceArray0[3] = (CharSequence) "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ#C|KT;IBmZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim(":)9bls");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(":)9bls", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = '_';
      charArray0[7] = 'Z';
      charArray0[8] = 'Z';
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(9, charArray0.length);
      assertEquals("ZZZZZZ_ZZ", string3);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', 'Z', 'Z', '_', 'Z', 'Z'}, charArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) ":)9bls", "doesn't contain any substring.");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String string4 = StringUtils.replaceIgnoreCase("OCbavMe>R?bO", "#C|KT;IBm", "", (-2140));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("OCbavMe>R?bO", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.stripStart("WU", (String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("WU", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      String string0 = StringUtils.mid("Vc^ya]2>:", (-419), 1056);
      assertEquals("Vc^ya]2>:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("Vc^ya]2>:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Search and eplace array lengths dn't match: ", 1501);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Search and eplace array lengths dn't match: ", "");
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", "");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", charSequenceArray0[1]);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.substring("", Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string4 = StringUtils.joinWith("}p:[", charSequenceArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("\r}p:[}p:[}p:[}p:[", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "}p:[", 299, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'p', 2860, (-800));
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", (-800));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("", 'p');
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("IT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      
      Locale locale2 = new Locale(",po[.R2", "iXTZ~PX*w_S}iqg[Lf", "");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("IXTZ~PX*W_S}IQG[LF", locale2.getCountry());
      assertEquals(",po[.r2_IXTZ~PX*W_S}IQG[LF", locale2.toString());
      assertEquals(",po[.r2", locale2.getLanguage());
      
      String string3 = locale1.getDisplayCountry(locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Italy", string3);
      assertNotNull(string3);
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("IT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("IXTZ~PX*W_S}IQG[LF", locale2.getCountry());
      assertEquals(",po[.r2_IXTZ~PX*W_S}IQG[LF", locale2.toString());
      assertEquals(",po[.r2", locale2.getLanguage());
      
      String string4 = StringUtils.unwrap("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", "!Vt'{cW,Mm;hX!");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Italy", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.removePattern("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", "9VhX5m4%");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = null;
      String string2 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removePattern("{[0-9]+}", "9r&%6?");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("{[0-9]+}", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("`r,!`6~'eTfp{InCombiningDiacriticalMarks}+", "{[0-9]+}", false);
      assertFalse(int1 == int0);
      assertEquals((-27), int1);
      
      String string4 = "Pt>mUC0-zqxUxGt";
      // Undeclared exception!
      try { 
        Charset.forName("Pt>mUC0-zqxUxGt");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Pt>mUC0-zqxUxGt
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("d6\"/");
      assertFalse(string1.equals((Object)string0));
      assertEquals("d6\"/", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "d6\"/", (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = StringUtils.stripEnd(",7 6i", "Q.O");
      assertEquals(",7 6i", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "3Ko-?70a<}", (CharSequence) "F9+.Dis=Nj");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace(",7 6i");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("Q.O");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "n& DZIuOJC8m[cp{InCombiningDiacriticalMarks}+", "Q.O", (-1));
      assertNull(string1);
      
      String string2 = StringUtils.join((long[]) null, '2', (-1), (-1));
      assertNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("F9+.Dis=Nj", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertEquals("F9+.Dis=Nj", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      String string4 = StringUtils.removeStartIgnoreCase((String) null, "<tZK36k^'kwo1");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = ',';
      String[] stringArray0 = StringUtils.split("", ',');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, 'J');
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'4', ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("", '4');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "=%2*dW7dSG&fT", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "=%2*dW7dSG&fT";
      charSequenceArray0[1] = (CharSequence) "=%2*dW7dSG&fT";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = (CharSequence) "=%2*dW7dSG&fT";
      charSequenceArray0[4] = (CharSequence) "=%2*dW7dSG&fT";
      boolean boolean1 = StringUtils.equalsAny("=%2*dW7dSG&fT", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string0 = StringUtils.defaultString("", "Array element ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("Minimum abbreviation width with offset is %d", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("j9S$", "wX,");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("j9S$", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("j9S$", charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0.44, double0, 0.01);
      
      String string3 = StringUtils.abbreviate("maxWith cannot be negative", 32, 10);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("...egative", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[1], (CharSequence) "");
      assertEquals(5, charSequenceArray0.length);
      assertEquals(14, int0);
      
      String string5 = StringUtils.abbreviate("Array element ", "__", 14);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Array element ", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Array element ", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "doesn't contain any substring.");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("doesn't contain any substring.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+");
      assertTrue(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("P{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("p{InCombiningDiacriticalMarks}+", 'H');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 1725, 'H');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.strip("doesn't contain any substring.");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("doesn't contain any substring.", string7);
      assertNotNull(string7);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.getIfBlank(string6, supplier0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String string9 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+");
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.substring("Illegal range. There's no way to get from %s to %s with a step of %s.8", 72, 2725);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertEquals("", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.abbreviate(string6, 72, 117);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertEquals("...HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH...", string11);
      assertNotNull(string11);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "...HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH...");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.abbreviate("DefaultLocale", 7, 7);
      assertEquals("...L...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("...L...", 7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "1}Z6PSPJbpc", "The String must not be empty");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string0 = "8>KvI]h\\u";
      // Undeclared exception!
      try { 
        Charset.forName(string0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 8>KvI]h\\u
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.abbreviate(" ", (-2313), 337);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(" ", '[');
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.normalizeSpace(" ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate(" ", 337, 920);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "");
      assertEquals(1, int0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      String string4 = StringUtils.lowerCase(" ", locale0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      String string5 = StringUtils.capitalize((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.removeIgnoreCase((String) null, "n& DZIuOJC8m[c");
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "n& DZIuOJC8m[c", 8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-2813), (-2813));
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.remove((String) null, '@');
      assertNull(string0);
      
      String string1 = StringUtils.upperCase("K\u0002=]]ZLo6`");
      assertEquals("K\u0002=]]ZLO6`", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate((String) null, 1);
      assertNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "K\u0002=]]ZLO6`", (CharSequence) null);
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("K\u0002=]]ZLO6`", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "K\u0002=]]ZLo6`", (CharSequence) null, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("K\u0002=]]ZLO6`", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0.37, double0, 0.01);
      
      String string3 = StringUtils.rightPad("...", 2876, (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "matches '%s'", (char[]) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(vector0);
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("K\u0002=]]ZLo6`"));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertFalse(priorityQueue0.contains("K\u0002=]]ZLo6`"));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertFalse(priorityQueue0.contains("K\u0002=]]ZLo6`"));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, priorityQueue0.size());
      
      String string5 = StringUtils.join(iterator0, '.');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      assertNotNull(string5);
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertFalse(priorityQueue0.contains("K\u0002=]]ZLo6`"));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, priorityQueue0.size());
      
      String string6 = StringUtils.mid((String) null, (-1), 321);
      assertNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "", "");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(" vs ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "HeQ", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("HeQ", "X+#C30&", "Fw");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("HeQ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("SIS]@]}#cf", "k?t2*a^s0opE-x*oGE/");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("SIS]@]}#cf", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SIS]@]}#cf";
      stringArray0[1] = "Fw";
      stringArray0[2] = "No test failed with one of the specified exceptions (yet).";
      stringArray0[3] = "";
      stringArray0[4] = "HeQ";
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(5, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isMixedCase(" vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.joinWith("", stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(5, stringArray0.length);
      assertEquals("SIS]@]}#cfFwNo test failed with one of the specified exceptions (yet).HeQ", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.startsWithAny("SIS]@]}#cf", stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.equalsAny("Fw", stringArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" ", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("e@$h^>)FP", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("WHi'VMLus(Q\".X", 398, '^');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("WHi'VMLus(Q\".X^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", string2);
      assertNotNull(string2);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(" "));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayDeque0);
      assertNotNull(list0);
      assertFalse(arrayDeque0.contains(" "));
      assertFalse(list0.contains(" "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(arrayDeque0.contains(" "));
      assertFalse(list0.contains(" "));
      assertFalse(list1.contains(" "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      String string3 = StringUtils.join((List<?>) arrayList0, 'W', 75, (-716));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "WHi'VMLus(Q\".X^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", (CharSequence) "", 398);
      assertEquals(398, int0);
      
      int int1 = StringUtils.ordinalIndexOf("", "WHi'VMLus(Q\".X^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", 398);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WK<%", "WK<%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("WK<%", "vsr-|W*sP%a/n", 908, 908);
      assertFalse(string1.equals((Object)string0));
      assertEquals("WK<%", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "WK<%", (CharSequence) "");
      assertEquals(4, int0);
      
      boolean boolean0 = StringUtils.isNumeric("WK<%");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "WK<%";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "WK<%";
      objectArray0[4] = (Object) "vsr-|W*sP%a/n";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[6] = object2;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, 908, 2046);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 908
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = "\\u";
      String string2 = StringUtils.abbreviate(string1, 33, 33);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\u", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "B", charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviate(string1, string2, 9);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\\u", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) 9;
      longArray0[2] = (-1L);
      String string4 = StringUtils.join(longArray0, '=');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(3, longArray0.length);
      assertEquals("9=9=-1", string4);
      assertNotNull(string4);
      assertArrayEquals(new long[] {9L, 9L, (-1L)}, longArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("T5T5", "'~");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\n", "");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "9=9=-1", (-1610));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Search and Replace array lengths don't match: ");
      assertEquals("search and replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("search and replace array lengths don't match: ", "clone");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "search and replace array lengths don't match: ", 7);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.abbreviate("p#*MOpiq17$", 30, Integer.MAX_VALUE);
      assertFalse(string2.equals((Object)string0));
      assertEquals("p#*MOpiq17$", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviate((String) null, "=R.]", 91);
      assertNull(string3);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 7;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 30;
      longArray0[6] = (-1L);
      longArray0[7] = (long) 91;
      String string4 = StringUtils.join(longArray0, 'B');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(8, longArray0.length);
      assertEquals("-1B-1B7B-1B-1B30B-1B91", string4);
      assertNotNull(string4);
      assertArrayEquals(new long[] {(-1L), (-1L), 7L, (-1L), (-1L), 30L, (-1L), 91L}, longArray0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("search and replace array lengths don't match: ", (String) null);
      assertEquals(8, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("oz}c", "null");
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 33);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.remove("/2I", '@');
      assertEquals("/2I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("/2I");
      assertTrue(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate((String) null, 1);
      assertNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "/2I", (CharSequence) null);
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("/2I", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "/2I", (CharSequence) null, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.toRootLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "K\u0002=]]ZLo6`", (char[]) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("J+Mx\u0004H<{G", "/2I");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("/2IJ+Mx\u0004H<{G/2I", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      boolean boolean1 = StringUtils.isMixedCase("/2I");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 1;
      objectArray0[2] = (Object) "J+Mx\u0004H<{G";
      objectArray0[3] = (Object) "/2I";
      objectArray0[4] = (Object) "/2I";
      String string5 = StringUtils.joinWith((String) null, objectArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals(5, objectArray0.length);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, 'V');
      assertEquals(5, floatArray0.length);
      assertEquals("0.0V0.0V0.0V0.0V0.0", string0);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isMixedCase("0.0V0.0V0.0V0.0V0.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      String string0 = StringUtils.leftPad("1}Z6PSPJbpc", 83, (String) null);
      assertEquals("                                                                        1}Z6PSPJbpc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("hN8XY!s#8:S|mY^", 10, 2725);
      assertFalse(string1.equals((Object)string0));
      assertEquals("S|mY^", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("S|mY^", 920, 83);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("S|mY^", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "                                                                        1}Z6PSPJbpc", (CharSequence) "'u`L0");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "S|mY^";
      charSequenceArray0[2] = (CharSequence) "S|mY^";
      charSequenceArray0[3] = (CharSequence) "S|mY^";
      charSequenceArray0[4] = (CharSequence) "S|mY^";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "hN8XY!s#8:S|mY^";
      charSequenceArray0[7] = (CharSequence) "                                                                        1}Z6PSPJbpc";
      boolean boolean0 = StringUtils.startsWithAny("1}Z6PSPJbpc", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '=');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("=S|mY^=S|mY^=S|mY^=S|mY^==hN8XY!s#8:S|mY^=                                                                        1}Z6PSPJbpc", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = 'T';
      charArray0[2] = '=';
      charArray0[3] = '8';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "=S|mY^=S|mY^=S|mY^=S|mY^==hN8XY!s#8:S|mY^=                                                                        1}Z6PSPJbpc", charArray0);
      assertFalse(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new char[] {'=', 'T', '=', '8'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string4 = StringUtils.wrapIfMissing("ZST;> gtI<&{_S_K", '=');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("=ZST;> gtI<&{_S_K=", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isEmpty("'u`L0");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'V');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '(');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string1 = StringUtils.join((Iterator<?>) null, '8');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("");
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "DVsla name '%s'%s", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'k'}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1739), (-1739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String string0 = StringUtils.abbreviate(" ", (-2313), 337);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(" ", '[');
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.normalizeSpace(" ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars(" ", '=', '\"');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Display name '%s' %s", " ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("Display", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfEmpty("$@N7`!v62~\"_$sKfk", "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("$@N7`!v62~\"_$sKfk", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.startsWithAny("$@N7`!v62~\"_$sKfk", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ybaD=k1", "D");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", ",nD)!v");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("offset cannot be negative", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("r!6)akJkP", (-1895), '^');
      assertFalse(string2.equals((Object)string0));
      assertEquals("r!6)akJkP", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) '^';
      floatArray0[2] = (float) 64;
      floatArray0[3] = (float) '^';
      floatArray0[4] = (float) 64;
      floatArray0[5] = (-2662.43F);
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 64;
      String string3 = StringUtils.join(floatArray0, 'L');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(8, floatArray0.length);
      assertEquals("94.0L94.0L64.0L94.0L64.0L-2662.43L1.0L64.0", string3);
      assertNotNull(string3);
      assertArrayEquals(new float[] {94.0F, 94.0F, 64.0F, 94.0F, 64.0F, (-2662.43F), 1.0F, 64.0F}, floatArray0, 0.01F);
      
      String string4 = StringUtils.removeEnd("r!6)akJkP", "{");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("r!6)akJkP", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("T5T5");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("T5T5", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("n<L(v", (-4146));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfter((String) null, 5002);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.getDigits("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", 1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("\"mGjuc~Y6 Dg2GD", '4');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "^h_/QwOf#@^F<ma", (CharSequence) "\"mGjuc~Y6 Dg2GD");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("^h_/QwOf#@^F<ma", "^h_/QwOf#@^F<ma");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^h_/QwOf#@^F<ma", string1);
      assertNotNull(string1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "^h_/QwOf#@^F<ma", supplier0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("^h_/QwOf#@^F<ma", charSequence0);
      assertNotNull(charSequence0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\"mGjuc~Y6 Dg2GD", "^h_/QwOf#@^F<ma");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.rightPad(" vs ", (-1), "}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("", ",POwwSl';ax]1S$j3UU", 875);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      double double1 = StringUtils.getJaroWinklerDistance("", "}");
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String string5 = StringUtils.rightPad("", (-837), " vs ");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("maxWith cannot be negative", (-3371));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "offset cannot be negative", 2584);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "'Q*?", (CharSequence) "", (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      boolean boolean0 = linkedList0.add((Object) listIterator0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, 'w');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", ",nD)!v");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("{", ",nD)!v");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("T5T5", 64, 'm');
      assertFalse(string2.equals((Object)string0));
      assertEquals("T5T5mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 64;
      floatArray0[1] = (float) 'm';
      floatArray0[2] = (float) 'm';
      floatArray0[3] = (float) 'm';
      floatArray0[4] = (float) 'm';
      floatArray0[5] = (float) 'm';
      floatArray0[6] = (float) 'm';
      floatArray0[7] = (float) 64;
      String string3 = StringUtils.join(floatArray0, 'm');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, floatArray0.length);
      assertEquals("64.0m109.0m109.0m109.0m109.0m109.0m109.0m64.0", string3);
      assertNotNull(string3);
      assertArrayEquals(new float[] {64.0F, 109.0F, 109.0F, 109.0F, 109.0F, 109.0F, 109.0F, 64.0F}, floatArray0, 0.01F);
      
      String string4 = StringUtils.removeEnd(",nD)!v", "64.0m109.0m109.0m109.0m109.0m109.0m109.0m64.0");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(",nD)!v", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("{");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("{", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("{", 469);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfter("T5T5", 64);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      String string0 = "1}Z6PSPJbpc";
      // Undeclared exception!
      StringUtils.leftPad("1}Z6PSPJbpc", 65536, "1}Z6PSPJbpc");
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.rotate("", 77);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((char[]) null, 'E', 77, 3606);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "62", 31);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "62", (CharSequence) "62", 10);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.substringBeforeLast(":@AvzUF@%0p/K4", ":@AvzUF@%0p/K4");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      String string2 = StringUtils.join(longArray0, '5', 2769, 10);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(4, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "62", "y~&yUgW*8s");
      assertTrue(boolean0);
      
      String string3 = StringUtils.repeat("", ";TYs[%hO=[rA!F'Sm!", (-1306));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("^h_/QwOf#@^F<ma", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("^h_/QwOf#@^F<ma", string4);
      assertNotNull(string4);
      
      Locale locale0 = new Locale("}@-Bt{", "UkAZ$3 Y5}gRbNk(^$", "doesn't contain any substring.");
      assertNotNull(locale0);
      assertEquals("UKAZ$3 Y5}GRBNK(^$", locale0.getCountry());
      assertEquals("}@-bt{_UKAZ$3 Y5}GRBNK(^$_doesn't contain any substring.", locale0.toString());
      assertEquals("}@-bt{", locale0.getLanguage());
      assertEquals("doesn't contain any substring.", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.rightPad((String) null, (-1753), (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.CR;
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("\r", (CharSequence) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, ".", 8192, 8192);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, ".Gl$gF.{");
      assertEquals(0, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left(".Gl$gF.{", 869);
      assertFalse(string2.equals((Object)string1));
      assertEquals(".Gl$gF.{", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvideraD1gL\"Hf &A%u)KGJ(%", "OzB,El", "IT`1#<a-K)XMh", 869);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvideraD1gL\"Hf &A%u)KGJ(%", string3);
      assertNotNull(string3);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 869;
      String string4 = StringUtils.join(floatArray0, '3');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(3, floatArray0.length);
      assertEquals("8192.030.03869.0", string4);
      assertNotNull(string4);
      assertArrayEquals(new float[] {8192.0F, 0.0F, 869.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", 1501);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("", "", false);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "H:f8CG3", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.abbreviate(">", 4, 4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(">", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "H:f8CG3");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.IntRange", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("\n", "\n");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[2], charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("maxWith cannot be negative", 875, "a7`~' 77@$ZTj+");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("maxWith cannot be negativea7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n", 875);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "\n", (char[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.abbreviate("# toJtlI", "", (-1594));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("# toJtlI", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.countMatches((CharSequence) "# toJtlI", charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string6 = StringUtils.replaceEachRepeatedly(")Y", stringArray0, stringArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals(2, stringArray0.length);
      assertEquals(")Y", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "\n", (CharSequence[]) stringArray0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\n"));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, ")Y", (-1594), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1594
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = ',';
      charArray0[2] = '+';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '+';
      floatArray0[1] = (float) 52;
      floatArray0[2] = (float) '+';
      floatArray0[3] = (float) ',';
      floatArray0[4] = (float) 52;
      String string0 = StringUtils.join(floatArray0, '@', 1233, 1233);
      assertEquals(5, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new float[] {43.0F, 52.0F, 43.0F, 44.0F, 52.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("", 16, 52);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.reverseDelimited("|~SmseK`4L}v>QXHt", '4');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L}v>QXHt4|~SmseK`", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 20, 3817);
      assertNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = " must be static.";
      int int0 = StringUtils.indexOf((CharSequence) stringArray0[1], (CharSequence) stringArray0[0]);
      assertEquals(6, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "FwQ");
      assertEquals(6, stringArray0.length);
      assertEquals("FwQFwQStrings must not be nullFwQ must be static.FwQFwQ", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.startsWith("FwQFwQStrings must not be nullFwQ must be static.FwQFwQ", " must be static.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "FwQFwQStrings must not be nullFwQ must be static.FwQFwQ", (char[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = StringUtils.countMatches((CharSequence) " must be static.", (CharSequence) "FwQ");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " must be static.";
      stringArray1[1] = "CartesianEnumSource annotation not found";
      stringArray1[2] = "bx] VKa|]r";
      stringArray1[3] = "Locale must not be null";
      stringArray1[4] = " must be static.";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Locale must not be null", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("b", "{displayName}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "{displayName}", "Display name '%s' %sCart");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("{displayName}", "Display name '%s' %sCart");
      assertEquals(0.69, double0, 0.01);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly(":`.D!EKuO=tkRIe0O75", (String[]) null, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":`.D!EKuO=tkRIe0O75", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "b", (CharSequence) "b", (-223));
      assertEquals(0, int0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertNull(string2);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String[] stringArray0 = StringUtils.split("sV`QMa8j+B t03aC");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "`I({]RH6(0");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("\r", 'P');
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "b", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("8");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "@.J.Kk?$X", 1711);
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "@.J.Kk?$X", (CharSequence) "@.J.Kk?$X", 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      String string0 = StringUtils.truncate("doesn't contain any substring.p{InCombiningDiacriticalMarks}+", 1983);
      assertEquals("doesn't contain any substring.p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string1 = StringUtils.wrap("doesn't contain any substring.p{InCombiningDiacriticalMarks}+", 'A');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Adoesn't contain any substring.p{InCombiningDiacriticalMarks}+A", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Adoesn't contain any substring.p{InCombiningDiacriticalMarks}+A", (CharSequence) null, 1983);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.uncapitalize("Locale must not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("locale must not be null", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "locale must not be null", (CharSequence) "", 34);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      double double0 = StringUtils.getJaroWinklerDistance("/2I", "doesn't contain any substring.p{InCombiningDiacriticalMarks}+");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.wrapIfMissing((String) null, '1');
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("Locale must not be null", "locale must not be null", "U");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'p', 2860, (-800));
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("", 'p');
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      
      Locale locale2 = new Locale(",po[.R2", "iXTZ~PX*w_S}iqg[Lf", "");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals(",po[.r2", locale2.getLanguage());
      assertEquals(",po[.r2_IXTZ~PX*W_S}IQG[LF", locale2.toString());
      assertEquals("IXTZ~PX*W_S}IQG[LF", locale2.getCountry());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'u';
      charArray0[4] = 'p';
      charArray0[5] = 'e';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int1 == int0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'p', 'p', 'p', 'u', 'p', 'e'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("V");
      assertTrue(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("", '6');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "K'PW7Ral;=@f74c8R&";
      String[] stringArray1 = StringUtils.split("K'PW7Ral;=@f74c8R&", 'w');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = "doesn't contain any substring.";
      String string2 = StringUtils.uncapitalize("9t1Jf");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("9t1Jf", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "K'PW7Ral;=@f74c8R&", "\")}&\"J-1N");
      assertEquals(17, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "doesn't contain any substring.", (CharSequence) "doesn't contain any substring.", 17);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = "IX3Il";
      String string4 = "=S1d<@lTW(zmH8yohY";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("=S1d<@lTW(zmH8yohY", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.repeat("D", "D", 2539);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "5]PixQ0g'0G";
      stringArray0[1] = "5]PixQ0g'0G";
      stringArray0[2] = "D";
      stringArray0[3] = string0;
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = string0;
      stringArray1[1] = string0;
      stringArray1[2] = "D";
      stringArray1[3] = "D";
      stringArray1[4] = string0;
      stringArray1[5] = string0;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("5]PixQ0g'0G", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string0 = StringUtils.unwrap(stringArray0[0], 'C');
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("org.junitpioneer.v", string0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right(" vs ", (-68));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("", "1");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringAfter("org.junitpioneer.v", "Invalid exceptionStatus");
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "Invalid exceptionStatus";
      stringArray1[2] = "";
      stringArray1[3] = null;
      stringArray1[4] = "";
      stringArray1[5] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(")3B{/xM_-Fx2]", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 9 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "3Ko-?70a<}");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3Ko-?70a<}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Illegal range. The step cannot be zero.", "");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.repeat("Search and Replace array lengths don't match: ", "...", 33);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("...", 'R');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.center("M,8Z0q>1&~epQ", 105, "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("                                              M,8Z0q>1&~epQ                                              ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart(")+:Uw~6&HxZ[Pg9}2Qx", "5:kHk");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals(")+:Uw~6&HxZ[Pg9}2Qx", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("", 'l');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("@CartesianTest not found.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("@CartesianTest not found.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "Minimum abbreviation width is %d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.CartesianValueArgumentsProvider");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("Minimum abbreviation width is %d", "@CartesianTest not found.");
      assertEquals(0.51, double0, 0.01);
      
      String string3 = StringUtils.stripToNull("J+M");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("J+M", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "J+M", (CharSequence) "@CartesianTest not found.", (-3557));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceEach("@CartesianTest not found.", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(10, stringArray0.length);
      assertEquals("@CartesianTest not found.", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isMixedCase("Minimum abbreviation width is %d");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.joinWith("Minimum abbreviation width is %d", stringArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(10, stringArray0.length);
      assertEquals("orgMinimum abbreviation width is %d.Minimum abbreviation width is %djunitpioneerMinimum abbreviation width is %d.Minimum abbreviation width is %djupiterMinimum abbreviation width is %d.Minimum abbreviation width is %dCartesianMinimum abbreviation width is %dValueMinimum abbreviation width is %dArgumentsMinimum abbreviation width is %dProvider", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "Minimum abbreviation width is %d");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chop("Timeout for vintage @Test must be positive.");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Timeout for vintage @Test must be positive", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("\"mGjuc~Y6 Dg2GD", '4');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "^h_/QwOf#@^F<ma", (CharSequence) "\"mGjuc~Y6 Dg2GD");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.uncapitalize("Fwi9B5T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fwi9B5T", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty("62", "l&@&$B'NW7");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("62", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = '4';
      int int1 = StringUtils.indexOfAny((CharSequence) "Fwi9B5T", charArray0);
      assertTrue(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {',', '4'}, charArray0);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(vector0);
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("\"mGjuc~Y6 Dg2GD"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("l&@&$B'NW7");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("l&@&$B'NW7"));
      assertFalse(priorityQueue0.contains("\"mGjuc~Y6 Dg2GD"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains("l&@&$B'NW7"));
      assertFalse(priorityQueue0.contains("\"mGjuc~Y6 Dg2GD"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, priorityQueue0.size());
      
      String string3 = StringUtils.join(iterator0, ' ');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("l&@&$B'NW7", string3);
      assertNotNull(string3);
      assertTrue(priorityQueue0.contains("l&@&$B'NW7"));
      assertFalse(priorityQueue0.contains("\"mGjuc~Y6 Dg2GD"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Duplicate enum constant name(s) found in ");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Iterable<?>) null, "M_j:KaXSe6D");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "doesn't contain any substring.");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("doesn't contain any substring.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+");
      assertTrue(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("P{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("p{InCombiningDiacriticalMarks}+", 'H');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull(" vs org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("vs org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("vs org.apache.commons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("vs org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("vs org.apache.commons.lang3.StringUtils", 1725, 'H');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.strip("doesn't contain any substring.");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("doesn't contain any substring.", string7);
      assertNotNull(string7);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.getIfBlank(string6, supplier0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+");
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.join((Iterable<?>) null, "doesn't contain any substring.");
      assertNull(string10);
      
      String[] stringArray0 = StringUtils.substringsBetween(string8, "vs org.apache.commons.lang3.StringUtils", "[fY$t");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string9));
      assertNull(stringArray0);
      
      String string11 = StringUtils.left(string6, (-292));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertEquals("", string11);
      assertNotNull(string11);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", (-292), (-292));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = "T5";
      String string1 = StringUtils.chomp("T5", "T5");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "T5");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrap("T5", ']');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("]T5]", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",0i77r%EMSQ^C[";
      stringArray0[1] = "T5";
      stringArray0[2] = "";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals(",0i77r%EMSQ^C[", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.upperCase("");
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.split(",0i77r%EMSQ^C[", "", 3706);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 3706);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.joinWith("", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(1, stringArray1.length);
      assertEquals(",0i77r%EMSQ^C[", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)64;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        charset0.encode((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.repeat("Vqd", 22);
      assertEquals("VqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqd", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Vqd");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Vqd", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("VqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqd", "/4}4JN\"tJ_Jm!AU\nc", "doesn't contain any substring.");
      assertNull(stringArray0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale0 = new Locale("(3|.o:6c3LSC|Sw3%;@", "cCQEJ9Rg6", "org.apache.commons.lang3.StringUtils");
      assertNotNull(locale0);
      assertEquals("org.apache.commons.lang3.StringUtils", locale0.getVariant());
      assertEquals("(3|.o:6c3lsc|sw3%;@_CCQEJ9RG6_org.apache.commons.lang3.StringUtils", locale0.toString());
      assertEquals("CCQEJ9RG6", locale0.getCountry());
      assertEquals("(3|.o:6c3lsc|sw3%;@", locale0.getLanguage());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Locale locale2 = Locale.CANADA;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("en", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(set0);
      assertFalse(set0.contains("doesn't contain any substring."));
      assertEquals("en", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(list0);
      assertFalse(set0.contains("doesn't contain any substring."));
      assertFalse(list0.contains("doesn't contain any substring."));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale locale3 = Locale.FRENCH;
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getISO3Country());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getCountry());
      
      String string3 = locale0.getDisplayCountry(locale3);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("CCQEJ9RG6", string3);
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtils", locale0.getVariant());
      assertEquals("(3|.o:6c3lsc|sw3%;@_CCQEJ9RG6_org.apache.commons.lang3.StringUtils", locale0.toString());
      assertEquals("CCQEJ9RG6", locale0.getCountry());
      assertEquals("(3|.o:6c3lsc|sw3%;@", locale0.getLanguage());
      assertEquals("fr", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getISO3Country());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getCountry());
      
      String string4 = StringUtils.lowerCase("cCQEJ9Rg6", locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ccqej9rg6", string4);
      assertNotNull(string4);
      assertEquals("en", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      
      String string5 = StringUtils.chomp("CCQEJ9RG6", "@hh8XY!s#88@Y!YX!8X\"#YUMX");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("CCQEJ9RG6", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "CCQEJ9RG6", (CharSequence) "OO", 49);
      assertEquals(9, int0);
      
      String string6 = StringUtils.replaceEachRepeatedly("Locale must not be null", (String[]) null, (String[]) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Locale must not be null", string6);
      assertNotNull(string6);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode2));
      assertEquals(3, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_FilteringMode2));
      assertEquals(3, enumSet0.size());
      
      String string7 = StringUtils.join(iterator0, "CCQEJ9RG6");
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("AUTOSELECT_FILTERINGCCQEJ9RG6EXTENDED_FILTERINGCCQEJ9RG6IGNORE_EXTENDED_RANGES", string7);
      assertNotNull(string7);
      assertTrue(enumSet0.contains(locale_FilteringMode2));
      assertEquals(3, enumSet0.size());
      
      int int1 = StringUtils.getFuzzyDistance("/4}4JN\"tJ_Jm!AU\nc", "AUTOSELECT_FILTERINGCCQEJ9RG6EXTENDED_FILTERINGCCQEJ9RG6IGNORE_EXTENDED_RANGES", locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 3167, 'E');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap((String) null, 'E');
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '=', (-1514), 2108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1514
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-591);
      intArray0[1] = (-591);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (-591);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (-591);
      String string0 = StringUtils.joinWith("IssueExtension", objectArray0);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "java.lang.Object@4e9825daIssueExtension-591IssueExtensionjava.lang.Object@780dd671IssueExtension-591", 3);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("java.lang.Object@4e9825daIssueExtension-591IssueExtensionjava.lang.Object@780dd671IssueExtension-591", "java.lang.Object@4e9825daIssueExtension-591IssueExtensionjava.lang.Object@780dd671IssueExtension-591");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join(intArray0, 's');
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, intArray0.length);
      assertEquals("-591s-591s0s0s0s0s0", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {(-591), (-591), 0, 0, 0, 0, 0}, intArray0);
      
      String string2 = StringUtils.leftPad("qc/", 905, "java.lang.Object@4e9825daIssueExtension-591IssueExtensionjava.lang.Object@780dd671IssueExtension-591");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("java.lang.Object@4e9825daIssueExtension-591IssueExtensionjava.lang.Object@780dd671IssueExtension-591", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.startsWithAny("java.lang.Object@4e9825daIssueExtension-591IssueExtensionjava.lang.Object@780dd671IssueExtension-591", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.defaultIfEmpty("x]dnfHkVGPY", (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("x]dnfHkVGPY", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 905;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 3;
      floatArray0[4] = (float) (-591);
      floatArray0[5] = (-2244.569F);
      floatArray0[6] = (float) 905;
      String string6 = StringUtils.join(floatArray0, 's');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals(7, floatArray0.length);
      assertEquals("905.0s0.0s3.0s3.0s-591.0s-2244.569s905.0", string6);
      assertNotNull(string6);
      assertArrayEquals(new float[] {905.0F, 0.0F, 3.0F, 3.0F, (-591.0F), (-2244.569F), 905.0F}, floatArray0, 0.01F);
      
      String string7 = StringUtils.lowerCase((String) null);
      assertNull(string7);
      
      boolean boolean1 = StringUtils.isEmpty("-591s-591s0s0s0s0s0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      String string0 = StringUtils.center("The character must not be null", 26, (String) null);
      assertEquals("The character must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Display name '%s' %s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Display name '%s' %s", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '{', 'o');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Display name '%s' %s", "Display name '%s' %s");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.repeat("Search and Replace array lengths don't match: ", "Display name '%s' %s", 105);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split((String) null, '{');
      assertNull(stringArray1);
      
      String string4 = StringUtils.center("Search and Replace array lengths don't match: ", 15, "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("defaultlocale", "Search and Replace array lengths don't match: ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("defaultlocale", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "0VoEMrf l3K$", "y.^;mJ,7");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripToNull("5VX");
      assertEquals("5VX", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isEmpty("5VX");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String string0 = StringUtils.substring("/2I/2I", 121, (-1017));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(" \r", 9, 1985);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" \r", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "/2I/2I", (CharSequence) null);
      assertEquals((-1), int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("/2I/2I"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains("/2I/2I"));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("/2I/2I"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = arrayList1.add((String) null);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean0);
      assertFalse(arrayList1.contains("/2I/2I"));
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(" \r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("=%2*dW7dSG&fT", "=%2*dW7dSG&fT");
      assertEquals("=%2*dW7dSG&fT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("=%2*dW7dSG&fT", Integer.MAX_VALUE, 9);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("=%2*dW7dSG&fT", 32);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("=%2*dW7dSG&fT                  ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "=%2*dW7dSG&fT                  ", (CharSequence) "=%2*dW7dSG&fT", 15);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "=%2*dW7dSG&fT";
      String string3 = StringUtils.strip("@caSA0B");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("@caSA0B", string3);
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "@caSA0B";
      charSequenceArray0[2] = (CharSequence) "=%2*dW7dSG&fT";
      charSequenceArray0[3] = (CharSequence) "=%2*dW7dSG&fT";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("=%2*dW7dSG&fT", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.defaultString((String) null, "=%2*dW7dSG&fT");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("=%2*dW7dSG&fT", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("=%2*dW7dSG&fT", "=%2*dW7dSG&fT");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("=%2*dW7dSG&fT", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAlphanumeric("@caSA0B");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.SPACE;
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "=%2*dW7dSG&fT");
      assertEquals(0.0, double0, 0.01);
      
      String string7 = StringUtils.rightPad("=%2*dW7dSG&fT                  ", 28, "@caSA0B");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("=%2*dW7dSG&fT                  ", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isAllUpperCase("=%2*dW7dSG&fT");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d[L%WL", (String) null, 32);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d[L%WL", (CharSequence) " ", 9);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double1 = StringUtils.getJaroWinklerDistance(charSequenceArray0[3], "=%2*dW7dSG&fT                  ");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0.89, double1, 0.01);
      
      String string8 = StringUtils.capitalize("Jjw1BI^X:\"5g6(");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("Jjw1BI^X:\"5g6(", string8);
      assertNotNull(string8);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[3], (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.repeat("Vqd", 22);
      assertEquals("VqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqd", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Vqd", 22, "(3|.o:6c3LSC|Sw3%;@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Vqd(3|.o:6c3LSC|Sw3%;@", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("VqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqd", "/4}4JN\"tJ_Jm!AU\nc", "doesn't contain any substring.");
      assertNull(stringArray0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "doesn't contain any substring.", 'm');
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("Vqd");
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {86, 113, 100}, intArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "VqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqdVqd", (CharSequence) "Vqd", 22);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.wrap("Vqd", '\"');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\"Vqd\"", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = '\"';
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("/4}4JN\"tJ_Jm!AU\nc");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripToNull("Vqd");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Vqd", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "Vqd", (CharSequence) "/4}4JN\"tJ_Jm!AU\nc", (-1));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string5 = StringUtils.uncapitalize("/4}4JN\"tJ_Jm!AU\nc");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("/4}4JN\"tJ_Jm!AU\nc", string5);
      assertNotNull(string5);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "Vqd", (CharSequence) "/4}4JN\"tJ_Jm!AU\nc", 22);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      
      boolean boolean1 = StringUtils.startsWithAny("Vqd", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.center("C", 80, "Cannot get the toString of a null object");
      assertEquals("Cannot get the toString of a null objecCCannot get the toString of a null object", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '@', 31, 31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "offset cannot be negative";
      String string1 = StringUtils.remove("/2I", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "offset cannot be negative", (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("offset cannot be negative", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "offset cannot be negative", (-2160));
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'K';
      charArray0[2] = '4';
      charArray0[3] = '=';
      charArray0[4] = 't';
      charArray0[5] = '4';
      charArray0[6] = 'K';
      charArray0[7] = '=';
      String string3 = StringUtils.substringAfter("", (-1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "/2I", "J+Mx\u0004H<{G/2I");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) '=';
      floatArray0[2] = (float) '=';
      floatArray0[3] = (float) 'K';
      floatArray0[4] = (float) '4';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', 'K', '4', '=', 't', '4', 'K', '='}, charArray0);
      
      String string4 = StringUtils.join((short[]) null, 'H', 75, 67);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("D", "D", (-2442), (-2442));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      String string0 = StringUtils.difference("#C|KT;IBm", "#C|KT;IBm");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("#C|KT;IBm", "", 44);
      assertEquals(9, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("#C|KT;IBm", "#C|KT;IBm", "Locale must not be null", 44);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("e");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Locale must not be null", "Hop:V'^`JsncR", 108, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'p', 2860, (-800));
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("", 'p');
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      
      String string3 = StringUtils.join((float[]) null, 'r', 2860, (-800));
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substring((String) null, 53, 18);
      assertNull(string4);
      
      String string5 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'x');
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.truncate("', has a length less than 2", 34);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 52;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte)0;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) ',';
      floatArray0[7] = (float) 1;
      floatArray0[8] = 0.0F;
      String string2 = StringUtils.join(floatArray0, '>', 34, 34);
      assertFalse(string2.equals((Object)string1));
      assertEquals(9, floatArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new float[] {52.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 44.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substring("", 661, (int) (byte)0);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "U.", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = StringUtils.chop("D");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      String string0 = StringUtils.defaultString("1}Z6PSPJbpc", "1}Z6PSPJbpc");
      assertEquals("1}Z6PSPJbpc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("1}Z6PSPJbpc", 2725, 72);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("k`*", 2075, 920);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("k`*", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "1}Z6PSPJbpc", (CharSequence) "1}Z6PSPJbpc");
      assertEquals(0, int0);
      
      String string3 = StringUtils.chop("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string4 = StringUtils.substringAfterLast("k`*", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "1}Z6PSPJbpc";
      charSequenceArray0[5] = (CharSequence) "k`*";
      charSequenceArray0[6] = (CharSequence) "1}Z6PSPJbpc";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\"mGjuc~Y6 Dg2GD");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\"mGjuc~Y6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((char[]) null, 'n', 12, 12);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("n2*wy^5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeFirst("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("j=FeHem`(", "rZ2;9k", 27);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("j=FeHem`(", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "x]dnfHkVGPY";
      charSequenceArray0[1] = (CharSequence) "x]dnfHkVGPY";
      charSequenceArray0[2] = (CharSequence) "x]dnfHkVGPY";
      charSequenceArray0[3] = (CharSequence) "x]dnfHkVGPY";
      charSequenceArray0[4] = (CharSequence) "x]dnfHkVGPY";
      String string0 = StringUtils.left("x]dnfHkVGPY", (-3427));
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "x]dnfHkVGPY";
      charSequenceArray0[7] = (CharSequence) "x]dnfHkVGPY";
      String string1 = StringUtils.prependIfMissing("x]dnfHkVGPY", "x]dnfHkVGPY", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("x]dnfHkVGPY", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "x]dnfHkVGPY", (String) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.reverseDelimited("x]dnfHkVGPY", '-');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("x]dnfHkVGPY", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-900);
      shortArray0[1] = (short) (-2572);
      shortArray0[2] = (short)23;
      shortArray0[3] = (short)5;
      shortArray0[4] = (short)1250;
      shortArray0[5] = (short)10;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'R', (-3427), (int) (short)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3427
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "V1iBzLx?nzi{", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "Uzu/N1s)W*e@n");
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string1 = StringUtils.abbreviate((String) null, (String) null, 64, 64);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("Uzu/N1s)W*e@n", (-967), "?Ohm}xtS,c\"~5");
      assertEquals("Uzu/N1s)W*e@n", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.chomp("?Ohm}xtS,c\"~5");
      assertFalse(string3.equals((Object)string2));
      assertEquals("?Ohm}xtS,c\"~5", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("''CPs?", 109, 'T');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT''CPs?TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '{', 'o');
      assertFalse(string1.equals((Object)string0));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("-l44~ ?|)Am]U3=bFNc~yNZ%").when(supplier0).get();
      String string2 = StringUtils.getIfEmpty("", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-l44~ ?|)Am]U3=bFNc~yNZ%", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split(" vs ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", "...");
      assertEquals(3, int0);
      
      String string3 = StringUtils.substringAfter(".x6bTbsm", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".x6bTbsm", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Display name '%s' %s");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.leftPad("", (-1178));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Parameter of type %s must reference an Enum type", "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(34, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'p', 2860, (-800));
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBefore((String) null, "K=DWAyvKR>?V");
      assertNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("K=DWAyvKR>?V");
      assertFalse(string3.equals((Object)string1));
      assertEquals("K=DWAyvKR>?V", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "K=DWAyvKR>?V", (char[]) null);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("\n", "1");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("...");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("@nN8XY!o#8:S|Y^", "p{InCombiningDiacriticalMarks}+", "matches '%s'");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("@cN8XY!e#8:S|Y^", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "@hN8XY!s#8:S|mY^", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace(charSequenceArray0[3]);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string5 = StringUtils.wrapIfMissing("@hN8XY!s#8:S|mY^", "q$x\":fUMAt.hiT");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("q$x\":fUMAt.hiT@hN8XY!s#8:S|mY^q$x\":fUMAt.hiT", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("\n", 'Y');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Y\nY", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "q$x\":fUMAt.hiT", (CharSequence) "Y\nY");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 52;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 32;
      intArray0[6] = (int) 'Y';
      String string7 = StringUtils.join(intArray0, '?', 89, 0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals(7, intArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertArrayEquals(new int[] {52, (-1), 0, (-1), (-1), 32, 89}, intArray0);
      
      int int2 = StringUtils.length(charSequenceArray0[2]);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String string0 = "K\\2=]]ZLo6`";
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      char char0 = '@';
      String string1 = StringUtils.remove((String) null, '@');
      assertNull(string1);
      
      String string2 = StringUtils.upperCase("K\u0002=]]ZLo6`");
      assertFalse(string2.equals((Object)string0));
      assertEquals("K\u0002=]]ZLO6`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate((String) null, 1);
      assertNull(string3);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "K\u0002=]]ZLO6`", (CharSequence) null);
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("K\u0002=]]ZLO6`", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "K\u0002=]]ZLo6`", (CharSequence) null, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      double double0 = StringUtils.getJaroWinklerDistance("K\u0002=]]ZLO6`", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0.37, double0, 0.01);
      
      int int2 = 875;
      int int3 = 2876;
      String string5 = StringUtils.rightPad("...", 2876, (String) null);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertNotNull(string5);
      
      String string6 = StringUtils.CR;
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("\r", string6);
      assertNotNull(string6);
      
      String string7 = "matches '%s'";
      String string8 = StringUtils.removeAll((String) null, "matches '%s'");
      assertNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("...", "...", "...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      boolean boolean1 = StringUtils.equalsAny("...", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("...", "...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("...", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("...");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.strip((String) null);
      assertNull(string3);
      
      boolean boolean3 = StringUtils.isAllUpperCase("...");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("/E?J", "yL'}Dsa5:to,X^0+m", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "yL'}Dsa5:to,X^0+m", 2333);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.getDigits("|a%>x&#o@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove((String) null, "\"mGjuc~Y6 Dg2GD");
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 52);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substring("J+M", (-1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("M", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("}Skh#_g");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("}Skh#_g", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("J+M");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "M";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "q3P=rLV1}C?HmaxWith cannot be negative";
      charSequenceArray0[4] = (CharSequence) "M";
      charSequenceArray0[5] = (CharSequence) null;
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.startsWith("", charSequenceArray0[4]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.countMatches((CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", (CharSequence) "Display name '%s' %sDisplay name '%s' %s");
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      String string4 = StringUtils.replaceEachRepeatedly("ah5U9m~_AC", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(3, stringArray0.length);
      assertEquals("ah5U9m~_AC", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "M", (CharSequence[]) stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("M"));
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("M"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean3 = linkedList0.retainAll(arrayDeque0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertFalse(linkedList0.contains("M"));
      assertFalse(arrayDeque0.contains("M"));
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Object object0 = linkedList0.poll();
      assertNull(object0);
      assertFalse(linkedList0.contains("M"));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "|a%>x&#o@", (-1379), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1379
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String string0 = StringUtils.getDigits("Annotat");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Annotat", "/.]qp4;+n[NTD5j>.ga");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Annotat", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Annotat", 31);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, 13);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBeforeLast("", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      long[] longArray0 = new long[0];
      String string3 = StringUtils.join(longArray0, 'g', (-1), (-1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, longArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
      
      String string4 = StringUtils.repeat("", "Annotat", 2769);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad((String) null, (-1793));
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("8I=wQ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = objectArray0[4];
      String string0 = StringUtils.joinWith("", objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultString("4", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("4", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("4", "Illegal range. There's no way to get from %s to %s with a step^tq3Illegal range. There's no way to get from %s to %s with a step ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("4", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "4");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "4", 45);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((int[]) null, '8', (-1), (-1));
      assertNull(string0);
      
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      String string2 = null;
      String string3 = "maxWith cannot be negative";
      byte[] byteArray0 = StringUtils.getBytes((String) null, "maxWith cannot be negative");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '8', (-1), 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("*qSv=wx&SYS$BI", '=', '=');
      assertEquals("*qSv=wx&SYS$BI", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, '=');
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("^h_/QwOf#@^F<ma", "rqTBSe?1TXAvr;/", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("^h_QwOf#@^F<ma", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("*U4evTG4t<!i", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("*U4evTG4t<!i", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("^h_/QwOf#@^F<ma", supplier0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("^h_/QwOf#@^F<ma", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.split("...");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[2] = '=';
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfBlank("RCKzY02}cWyDu/", supplier1);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("RCKzY02}cWyDu/", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("^h_/QwOf#@^F<ma"));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("IT", locale2.getCountry());
      assertEquals("it_IT", locale2.toString());
      assertEquals("it", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("ITA", locale2.getISO3Country());
      assertEquals("ita", locale2.getISO3Language());
      
      String string7 = locale0.getDisplayCountry(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Corea del Sud", string7);
      assertNotNull(string7);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      
      String string8 = StringUtils.removeStartIgnoreCase("Threshold must not be negative", (String) null);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Threshold must not be negative", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("^h_/Qf#@^F<ma", "");
      assertEquals("^h_/Qf#@^F<ma", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^h_/Qf#@^F<ma", (CharSequence) "^h_/Qf#@^F<ma");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Display name '%s' %s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Display name '%s' %s", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '{', 'o');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Display name '%s' %s", "Display name '%s' %s");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, (-841));
      assertNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", (CharSequence) "Display name '%s' %s", 126);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("gTUE6l)O:h~O`rGC+", "=x)", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // =x)
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-446), '1');
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequenceharSequence
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("^h_/QwOf#@^F<ma", "62");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^h_/QwOf#@^F<ma", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^h_/QwOf#@^F<ma", 31);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "62", (CharSequence) "^h_/QwOf#@^F<ma", 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "^h_/QwOf#@^F<ma";
      boolean boolean0 = StringUtils.equalsAny("\r", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultString("\r", "62");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 10;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 10;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      String string3 = StringUtils.join(intArray0, 'y');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, intArray0.length);
      assertEquals("-1y-1y10y-1y-1y10y-1y-1", string3);
      assertNotNull(string3);
      assertArrayEquals(new int[] {(-1), (-1), 10, (-1), (-1), 10, (-1), (-1)}, intArray0);
      
      boolean boolean1 = StringUtils.isWhitespace("\r");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "\r", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "62";
      stringArray0[1] = "62";
      stringArray0[2] = "\r";
      stringArray0[3] = "/i/i";
      stringArray0[4] = "62";
      stringArray0[5] = "/i/i";
      stringArray0[6] = "\r";
      stringArray0[7] = "\r";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("/i/i", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      String string0 = StringUtils.remove("c6", '6');
      assertEquals("c", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "c", (CharSequence) "c6");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.trim("{'T)G+A!ttO=k02");
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("{'T)G+A!ttO=k02", "lG@H,[_}(*J,");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("{'T)G+A!ttO=k02", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("{'T)G+A!ttO=k02", "{'T)G+A!ttO=k02");
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("1b-", 875, "qx`q>8> KkhPG");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("1b-qx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGqx`q>8> KkhPGq", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1073);
      floatArray0[1] = (float) 875;
      floatArray0[2] = (float) 'V';
      floatArray0[3] = 1567.88F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'V', 875, 2147483616);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.left("Minimum abbreviation width with offset is %d", 1);
      assertEquals("M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains(string1));
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(2, priorityQueue0.size());
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "|&=,BBM~oe1?C");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d|&=,BBM~oe1?CMinimum abbreviation width with offset is %d", string2);
      assertNotNull(string2);
      assertFalse(priorityQueue0.contains(string2));
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(2, priorityQueue0.size());
      
      String string3 = StringUtils.substring("V*Bsg1!pr;Wz1g0ov", (-1675), (-1675));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("|o7: e-h11f\"M1", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("|o7: e-h11f\"M1", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("|&=,BBM~oe1?C"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "M";
      charSequenceArray0[1] = (CharSequence) "V*Bsg1!pr;Wz1g0ov";
      charSequenceArray0[2] = (CharSequence) "Object varargs must not be null";
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string5 = StringUtils.trim("Object varargs must not be null");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      String string6 = StringUtils.valueOf(charArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals(1, charArray0.length);
      assertEquals("O", string6);
      assertNotNull(string6);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "8k7s", "Classpath resource [");
      assertEquals(3, int0);
      
      String string7 = StringUtils.replaceIgnoreCase("Object varargs must not be null", "Minimum abbreviation width with offset is %d|&=,BBM~oe1?CMinimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d|&=,BBM~oe1?CMinimum abbreviation width with offset is %d", 1);
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("Object varargs must not be null", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 252, 252);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString("", "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertFalse(boolean0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center((String) null, 252);
      assertNull(string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Illegal range. There's no way to get from %s to %s with a step of %s."));
      assertEquals(0, priorityQueue0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = priorityQueue0.add(object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains(object1));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains(object1));
      assertEquals(1, priorityQueue0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string1));
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      assertFalse(treeSet1.contains(string1));
      
      NavigableSet<String> navigableSet0 = treeSet1.descendingSet();
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(navigableSet0);
      assertFalse(treeSet1.contains(string1));
      assertFalse(navigableSet0.contains(string1));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      String string4 = StringUtils.join((Iterable<?>) treeSet1, 'w');
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(treeSet1.contains(string4));
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "", "");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay(" vs ", " vs ", 14, 14);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs  vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase(" vs  vs ");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs  vs ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric(" vs ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.LF;
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.startsWith("", "#");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.countMatches((CharSequence) " vs  vs ", (CharSequence) " vs ");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) " vs ", charSequenceArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'p';
      floatArray0[1] = (-1994.66F);
      floatArray0[1] = (float) 'p';
      floatArray0[3] = (float) 'p';
      floatArray0[4] = (float) (-800);
      floatArray0[5] = (float) (-800);
      floatArray0[6] = (float) 'p';
      floatArray0[7] = (float) (-800);
      String string0 = StringUtils.join(floatArray0, 'p', (-800), (-800));
      assertEquals(8, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new float[] {112.0F, 112.0F, 0.0F, 112.0F, (-800.0F), (-800.0F), 112.0F, (-800.0F)}, floatArray0, 0.01F);
      
      String string1 = StringUtils.trimToEmpty("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trim("?2Kn BuV");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("?2Kn BuV", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "?2Kn BuV", (CharSequence) "...", 16);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replace("?2Kn BuV", "...", "?2Kn BuV", (int) 'p');
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("?2Kn BuV", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      
      Locale locale2 = new Locale("!c<uvsZqIdcVT>0\"h /Aborting to protect against StackOverflowError - output of one loop is the input of another", ",po[.R2", "");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("!c<uvszqidcvt>0\"h /aborting to protect against stackoverflowerror - output of one loop is the input of another", locale2.getLanguage());
      assertEquals(",PO[.R2", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("!c<uvszqidcvt>0\"h /aborting to protect against stackoverflowerror - output of one loop is the input of another_,PO[.R2", locale2.toString());
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("Corea del Sud", string4);
      assertNotNull(string4);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      
      String string5 = StringUtils.unwrap((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another8z`\"^>fQWncTU5R");
      assertNull(string5);
      
      String string6 = StringUtils.lowerCase("...", locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("...", string6);
      assertNotNull(string6);
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "iXTZ~PX*w_S}iqg[Lf", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another8z`\"^>fQWncTU5R", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("1}Z6PSPJbpc");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "1}Z6PSPJbpc", "1}Z6PSPJbpc");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "offset cannot be negative";
      String string1 = StringUtils.remove("/2I", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "offset cannot be negative", (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("offset cannot be negative", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "offset cannot be negative", (-2160));
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'K';
      charArray0[2] = '4';
      charArray0[3] = '=';
      charArray0[4] = 't';
      charArray0[5] = '4';
      charArray0[6] = 'K';
      charArray0[7] = '=';
      String string3 = StringUtils.substringAfter("", (-1));
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "/2I", "J+Mx\u0004H<{G/2I");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) '=';
      floatArray0[2] = (float) '=';
      floatArray0[3] = (float) 'K';
      floatArray0[4] = (float) '4';
      floatArray0[5] = (float) 'K';
      String string4 = StringUtils.join(floatArray0, '$', (-585), (-585));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string2));
      assertEquals(6, floatArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertArrayEquals(new float[] {75.0F, 61.0F, 61.0F, 75.0F, 52.0F, 75.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("\n", "\n");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[2], charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("maxWith cannot be negative", 875, "a7`~' 77@$ZTj+");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("maxWith cannot be negativea7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n", 875);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      
      String string5 = StringUtils.upperCase(", Length: 0, Length: 0", locale0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(", LENGTH: 0, LENGTH: 0", string5);
      assertNotNull(string5);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("\r", "\r");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "M1x1]g# S\"5");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.defaultIfEmpty("uK\u0005}?A?E+", "}kcLCartesianProductTest can only take exactly one type of arguments source.");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("uK\u0005}?A?E+", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '5');
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", (-16), (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "!ec/7wSoB", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.startsWith(" vs ", "\n");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string2 = StringUtils.trimToNull("Invalid exceptionStatus");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Invalid exceptionStatus", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("~1-^}F<XEB${aDQbLd", supplier0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("~1-^}F<XEB${aDQbLd", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '5';
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean4);
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Invalid exceptionStatus", (CharSequence) "", 51);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(23, int2);
      
      String string4 = StringUtils.abbreviateMiddle("~1-^}F<XEB${aDQbLd", "", 0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("~1-^}F<XEB${aDQbLd", string4);
      assertNotNull(string4);
      
      boolean boolean5 = StringUtils.endsWithIgnoreCase("~1-^}F<XEB${aDQbLd", "");
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "lG@H,[_}(*J,");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("{'T)G+A!ttO=k02", 'O');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      String string4 = StringUtils.substringBeforeLast("", ":]h;9Y),;iASyS");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.StdIoExtension");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(9, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string5 = StringUtils.joinWith((String) null, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(9, stringArray2.length);
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string5);
      assertNotNull(string5);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'O';
      charArray1[1] = 'O';
      charArray1[2] = 'O';
      charArray1[3] = 'O';
      charArray1[4] = 'O';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "U/OS", charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'O'}, charArray1);
      
      byte[] byteArray0 = new byte[0];
      String string6 = StringUtils.join(byteArray0, 'O');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals(0, byteArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string7 = StringUtils.leftPad("Minimum abbreviation width is %d", 109);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("                                                                             Minimum abbreviation width is %d", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "                                                                             Minimum abbreviation width is %d", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*U4evTG4t<!i");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("...", "66ZZ1j|2(");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("66ZZ1j|2(", "}kcLCartesianProductTest can only take exactly one type of arguments source.");
      assertEquals("}kcLCartesianProductTest can only take exactly one type of arguments source.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("*U4evTG4t<!i", "H()yuuV/FeSw");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "}kcLCartesianProductTest can only take exactly one type of arguments source.";
      charSequenceArray0[1] = (CharSequence) "}kcLCartesianProductTest can only take exactly one type of arguments source.";
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("Am]U3=bFNc~yNZ%", 'd');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Am]U3=bFNc~yNZ%", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = '\u008D';
      charArray0[1] = '}';
      charArray0[3] = '\u008D';
      charArray0[4] = '}';
      charArray0[5] = 'd';
      charArray0[6] = '\u008D';
      charArray0[7] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "H()yuuV/FeSw", charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'d', '}', '\u0000', '\u008D', '}', 'd', '\u008D', '}'}, charArray0);
      
      boolean boolean2 = StringUtils.isMixedCase("Am]U3=bFNc~yNZ%");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.wrapIfMissing("-l44~ ?|)", "Am]U3=bFNc~yNZ%");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Am]U3=bFNc~yNZ%-l44~ ?|)Am]U3=bFNc~yNZ%", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "}kcLCartesianProductTest can only take exactly one type of arguments source.", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale0 = new Locale("Am]U3=bFNc~yNZ%", "...", "v>@xT&h[)HR2J");
      assertNotNull(locale0);
      assertEquals("...", locale0.getCountry());
      assertEquals("am]u3=bfnc~ynz%", locale0.getLanguage());
      assertEquals("am]u3=bfnc~ynz%_..._v>@xT&h[)HR2J", locale0.toString());
      assertEquals("v>@xT&h[)HR2J", locale0.getVariant());
      
      int int2 = StringUtils.getFuzzyDistance("66ZZ1j|2(", "Am]U3=bFNc~yNZ%", locale0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals("...", locale0.getCountry());
      assertEquals("am]u3=bfnc~ynz%", locale0.getLanguage());
      assertEquals("am]u3=bfnc~ynz%_..._v>@xT&h[)HR2J", locale0.toString());
      assertEquals("v>@xT&h[)HR2J", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("Strings must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (-128));
      assertNull(string0);
      
      String string1 = StringUtils.remove("\"=QTHktWDAV ^yM@", '^');
      assertEquals("\"=QTHktWDAV yM@", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "#C|KT;IBm";
      charSequenceArray0[1] = (CharSequence) "\"=QTHktWDAV yM@";
      charSequenceArray0[2] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\"=QTHktWDAV yM@", (CharSequence) null, (-1470));
      assertEquals((-1), int0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedList0.add(locale_Category0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_Category0));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("#C|KT;IBm"));
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = linkedList1.containsAll(linkedList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(locale_Category0));
      assertFalse(linkedList1.contains("#C|KT;IBm"));
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      String string2 = StringUtils.join((List<?>) linkedList0, ",", 40, (-1470));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(linkedList0.contains(locale_Category0));
      assertEquals(1, linkedList0.size());
      
      String string3 = StringUtils.stripAccents(" vs ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" vs ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      int int0 = StringUtils.compare("Display name '%s' %sCart", "Display name '%s' %sCart", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("b", "{displayName}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "{displayName}", "Display name '%s' %sCart");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("{displayName}", "Display name '%s' %sCart");
      assertEquals(0.69, double0, 0.01);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly(":`.D!EKuO=tkRIe0O75", (String[]) null, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":`.D!EKuO=tkRIe0O75", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "b", (CharSequence) "b", (-223));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertNull(string2);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String[] stringArray0 = StringUtils.split("sV`QMa8j+B t03aC");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "`I({]RH6(0");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("\r", 'P');
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'P';
      intArray0[1] = 0;
      intArray0[2] = (-223);
      intArray0[3] = 0;
      intArray0[4] = 32;
      intArray0[5] = (int) 'P';
      intArray0[6] = 8192;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'P', 0, 972);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = objectArray0[4];
      String string0 = StringUtils.removePattern("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.CartesianProductTestExtension", "iXTZ~PX*w_S}iqg[Lf", "iXTZ~PX*w_S}iqg[Lf", 33);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      
      String string2 = locale1.getDisplayCountry(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\uC774\uD0C8\uB9AC\uC544", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      
      Locale locale2 = Locale.forLanguageTag("");
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.toString());
      
      String string3 = StringUtils.unwrap("!':l+H", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("!':l+H", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("\n", "1");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[2], charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("maxWith cannot be negative", 875, "a7`~' 77@$ZTj+");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("maxWith cannot be negativea7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      double double1 = StringUtils.getJaroWinklerDistance("(]H \"j=@$", "maxWith cannot be negativea7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@");
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.4, double1, 0.01);
      
      String string5 = StringUtils.rightPad("maxWith cannot be negative", (-515), "maxWith cannot be negative");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("maxWith cannot be negative", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAllUpperCase("maxWith cannot be negative");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "'Q*?", 875);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", "_");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad((String) null, 8192, 'Z');
      assertNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2038);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2038, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2038, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2038, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2038, charBuffer0.length());
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "z;~i", (CharSequence) "_");
      assertEquals(0, int0);
      
      String string1 = StringUtils.overlay((String) null, "99BhG[qr?Es93.Jju", 8192, (-1392));
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'Z', (-1392), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1392
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      charArray0[8] = '8';
      String string1 = StringUtils.join(charArray0, '8');
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals(">8>8>8>8>8>8>8>88", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '>', '>', '8'}, charArray0);
      
      String string2 = StringUtils.overlay((String) null, ">8>8>8>8>8>8>8>88", 128, 128);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = ',';
      charArray0[2] = '+';
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "", (-2160));
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string0 = StringUtils.toRootLowerCase("");
      assertTrue(string0.equals((Object)charSequence0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'4', ',', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("", (String) null);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("{'T)G+A!ttO=k02", "{'T)G+A!ttO=k02", "{'T)G+A!ttO=k02");
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase("'s", "{'T)G+A!ttO=k02", "lG@H,[_}(*J,");
      assertEquals("'s", string0);
      assertNotNull(string0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("{'T)G+A!ttO=k02"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Vector<Object> vector0 = new Vector<Object>(arrayDeque0);
      assertNotNull(vector0);
      assertFalse(arrayDeque0.contains("{'T)G+A!ttO=k02"));
      assertFalse(vector0.contains("{'T)G+A!ttO=k02"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      
      String string1 = "Object varargs must not be null";
      // Undeclared exception!
      try { 
        StringUtils.truncate("lG@H,[_}(*J,", (-1787), 2446);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string0 = StringUtils.unwrap(stringArray0[0], 'C');
      assertEquals(11, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("org.junitpioneer.v", string0);
      assertEquals(11, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right(" vs ", (-68));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-68), 1);
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) string0, supplier0);
      assertEquals(11, stringArray0.length);
      assertNull(charSequence0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.wrapIfMissing((String) null, '?');
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, '2');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.remove("/2I", '@');
      assertEquals("/2I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("/2I");
      assertTrue(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate((String) null, 1);
      assertNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "/2I", (CharSequence) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("/2I", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "/2I", (CharSequence) null, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.toRootLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "K\u0002=]]ZLo6`", (char[]) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("J+Mx\u0004H<{G", "/2I");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("/2IJ+Mx\u0004H<{G/2I", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      String string5 = StringUtils.join(intArray0, '#', 32, 1);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4, intArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new int[] {0, 1, 0, 1}, intArray0);
      
      int int4 = StringUtils.length("");
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      String string0 = StringUtils.removeAll("~/]&g*DSW_t'5:GV*", (String) null);
      assertEquals("~/]&g*DSW_t'5:GV*", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("~/]&g*DSW_t'5:GV*", (CharSequence) null, 591);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate("~/]&g*DSW_t'5:GV*", 591, (int) 'j');
      assertTrue(string1.equals((Object)string0));
      assertEquals("~/]&g*DSW_t'5:GV*", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) " LNid9>%u", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("*qSv=wx&SYS$BI", '=', '=');
      assertEquals("*qSv=wx&SYS$BI", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, '=');
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("^h_/QwOf#@^F<ma", "rqTBSe?1TXAvr;/", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("^h_QwOf#@^F<ma", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("*U4evTG4t<!i", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("*U4evTG4t<!i", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("^h_/QwOf#@^F<ma", supplier0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("^h_/QwOf#@^F<ma", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.split("...");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      boolean boolean1 = StringUtils.endsWithAny("*qSv=wx&SYS$BI", stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "^h_/QwOf#@^F<ma", "^h_QwOf#@^F<ma");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("^h_/QwOf#@^F<ma");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.removeStart("rqTBSe?1TXAvr;/", "t");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("rqTBSe?1TXAvr;/", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.endsWithIgnoreCase((CharSequence) null, "*U4evTG4t<!i");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.jupiter.CartesianEnumArgumentsProvider", "org.junitpioneer.jupiter.CartesianEnumArgumentsProvider", " ");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny(" ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("org.junitpioneer.jupiter.CartesianEnumArgumentsProvider", " ", (String) null);
      assertEquals("org.junitpioneer.jupiter.CartesianEnumArgumentsProvider", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 2806);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, 1263);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1263;
      doubleArray0[1] = (double) 1263;
      doubleArray0[2] = (double) 1263;
      doubleArray0[3] = (double) 1263;
      String string1 = StringUtils.join(doubleArray0, 'X', (-1657), (-2753));
      assertEquals(4, doubleArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new double[] {1263.0, 1263.0, 1263.0, 1263.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.chop("o7");
      assertFalse(string2.equals((Object)string1));
      assertEquals("o", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String string0 = StringUtils.right("...", 2333);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "...";
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultString((String) null, "Y:jM");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y:jM", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("Y:jM", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Y:jM", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) null);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsWhitespace("4");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotBlank(charSequenceArray0[0]);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean3);
      
      String string3 = StringUtils.strip((String) null, (String) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("8U)`r\n", "Y:jM", 256);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean4 = StringUtils.startsWithIgnoreCase("java.lang.Object@3a83c2f0IssueExtension-591IssueExtensionjava.lang.Object@16a850f0IssueExtension-591Object varargs must not be null", "...");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string4 = StringUtils.join((long[]) null, 'Q', 256, 160);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String string0 = StringUtils.unwrap("rP", 'h');
      assertEquals("rP", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("rP");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      objectArray0[3] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = objectArray0[4];
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      objectArray0[5] = (Object) "";
      String string1 = StringUtils.replaceIgnoreCase("", "No test failed with one of the specified exceptions (yet).", "`yU");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.defaultString((String) null, "7?A@L@yi|G<ZB");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7?A@L@yi|G<ZB", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("`yU");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("`yU");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      doubleArray0[1] = 833.5;
      String string0 = StringUtils.join(doubleArray0, ',');
      assertEquals(2, doubleArray0.length);
      assertEquals("-693.28637282,833.5", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-693.28637282), 833.5}, doubleArray0, 0.01);
      
      String string1 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", ',', ',');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", "maxWith cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", "/U)");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      int int0 = StringUtils.indexOfAny((CharSequence) "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'O', 'o', 'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)56;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (byte)56;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 52;
      String string1 = StringUtils.leftPad("maxWith cannot be negative", (int) (byte)56, "Minimum abbreviation width is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is maxWith cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("'u`L0", 2075, 2725);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 86, 46);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Y:jM", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1852.1635F;
      String string0 = StringUtils.defaultString("Y:jM", "Y:jM");
      assertEquals("Y:jM", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("k*X7P]&^M~", "#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("k*X7P]&^M~", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y:jM", "Y:jM");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.rightPad("\" should have a parent context.org.apache.commons.lang3.StringUtils", 4, "...");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\" should have a parent context.org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{FxAe", "", 984);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\" should have a parent context.org.apache.commons.lang3.StringUtils", (CharSequence) "Y:jM", 4);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "\" should have a parent context.org.apache.commons.lang3.StringUtils");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("M1x1]g# S\"5", "Y:jM");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.defaultIfEmpty("}$wg0e-`\u0005V", "maxWith cannot be negative");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("}$wg0e-`\u0005V", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAlpha("{FxAe");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.chop("y5<X.Hvb|YNpWB");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("y5<X.Hvb|YNpW", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAny((CharSequence) ", Length: 0, Length: 0", "8t:Cx>z_!HX}z");
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "y5<X.Hvb|YNpWB", (CharSequence) "}$wg0e-`\u0005V");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, '5', (-1373), (-1373));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, 'M', 2787, 696);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, floatArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      String string2 = "Invalid exceptionStatus";
      String string3 = StringUtils.trimToEmpty("Invalid exceptionStatus");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Invalid exceptionStatus", string3);
      assertNotNull(string3);
      
      String string4 = "...";
      String string5 = StringUtils.mid("...", 2333, 696);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) "", 2787);
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Invalid exceptionStatus", (CharSequence) "Invalid exceptionStatus");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = "";
      try { 
        StringUtils.getBytes("", "%Q\"~s8Z+");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'P';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'P', (int) 'P', 537);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 80
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("=%2*dW7dSG&fT", "=%2*dW7dSG&fT");
      assertEquals("=%2*dW7dSG&fT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("=%2*dW7dSG&fT", Integer.MAX_VALUE, 9);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("=%2*dW7dSG&fT");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("=%2*dW7dSG&fT", "\"mGjuc~Y6 Dg2GD");
      assertEquals(27, int0);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, ':');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, intArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '|', 9, 27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = objectArray0[4];
      String string0 = StringUtils.joinWith("", objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("llllllalallExpected exactly one annotation to provide an ArgumentSource, found %d.", (-2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("llllllalallExpected exactly one annotation to provide an ArgumentSource, found %d.", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripToEmpty("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("llllllalallExpected exactly one annotation to provide an ArgumentSource, found %d.", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.stripToEmpty("2wd\"Q _+@$}$");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("2wd\"Q _+@$}$", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 15, 12);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.stripAccents("");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 1, 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = " vs ";
      stringArray0[5] = "|zbJR=H$*m|";
      stringArray0[6] = null;
      stringArray0[7] = null;
      boolean boolean0 = StringUtils.isAllUpperCase(" vs ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter((String) null, "|zbJR=H$*m|");
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = 'S';
      charArray0[2] = '/';
      charArray0[3] = '}';
      charArray0[4] = '_';
      charArray0[5] = 'K';
      String string1 = StringUtils.valueOf(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(".S/}_K", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'.', 'S', '/', '}', '_', 'K'}, charArray0);
      
      String string2 = StringUtils.substringAfterLast("BT<cDZ", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String string0 = "Fyt]f=?uXdv,MJ";
      String string1 = StringUtils.trimToNull("Fyt]f=?uXdv,MJ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Fyt]f=?uXdv,MJ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("Fyt]f=?uXdv,MJ");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Fyt]f=?uXdv,MJ", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = "w>PZ8KnLn.iE";
      String[] stringArray2 = StringUtils.splitByCharacterType("w>PZ8KnLn.iE");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(11, stringArray2.length);
      assertNotNull(stringArray2);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("Oq7)UuC1kFD-Za", "Oq7)UuC1kFD-Za", "n%Y-QK@%]}Q");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // Oq7)UuC1kFD-Za
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("^h_/QwOf#@^F<ma", "62");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^h_/QwOf#@^F<ma", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^h_/QwOf#@^F<ma", 31);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "62", (CharSequence) "^h_/QwOf#@^F<ma", 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "^h_/QwOf#@^F<ma";
      String string2 = StringUtils.substring("q3P=rLV1}C?HmaxWith cannot be negative", 112);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("Display name '%s' %sDisplay name '%s' %s");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Display name '%s' %sDisplay name '%s' %s", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertEquals(53, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.startsWith(charSequenceArray0[0], "^h_/QwOf#@^F<ma");
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "^h_/QwOf#@^F<ma", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.countMatches(charSequenceArray0[1], (CharSequence) "^h_/QwOf#@^F<ma");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(1, int3);
      
      String string4 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(53, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "q3P=rLV1}C?HmaxWith cannot be negative", 0, 2780);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2780
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "^h_/QwOf#@^F<ma", 8, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 11
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center(", Length: 0", 16, '9');
      assertFalse(string1.equals((Object)string0));
      assertEquals("99, Length: 0999", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("99, Length: 0999", ", Length: 0", 32);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("$/Y=3'@#{?o':R=Q", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$/Y=3'@#{?o':R=Q", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("p=W#`Y%5\"%1}pZdw");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("p=W#`Y%5\"%1}pZdw", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = 'R';
      charArray0[5] = '9';
      charArray0[6] = 'R';
      charArray0[7] = 'w';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "M-E|}uAY:YA?~Tu{V6", charArray0);
      assertFalse(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'9', '9', '9', '9', 'R', '9', 'R', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains('='));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.join((List<?>) arrayList0, "`=(", 49, 49);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(arrayList0.contains(49));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string3 = StringUtils.stripAccents("");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty(string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("\\u", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("(6%{',ey`|f", "(6%{',ey`|f", "(6%{',ey`|f");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // (6%{',ey`|f
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("o+vc0VMAHRb0(XKZ%", "Q", "Q");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("mRs1Uxdx8?nS4", "mRs1Uxdx8?nS4", "U.");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      int int0 = 22;
      String string0 = StringUtils.repeat("`]<2<As{X,|\"mIN", 22);
      assertEquals("`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("`]<2<As{X,|\"mIN", 22, "(3|.o:6c3LSC|Sw3%;@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`]<2<As{X,|\"mIN(3|.o:6", string1);
      assertNotNull(string1);
      
      String string2 = "/4}4JN\"tJ_Jm!AU\\nc";
      String string3 = "doesn't contain any substring.";
      String[] stringArray0 = StringUtils.substringsBetween("`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN", "/4}4JN\"tJ_Jm!AU\nc", "doesn't contain any substring.");
      assertNull(stringArray0);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char char0 = 'm';
      int int1 = StringUtils.countMatches((CharSequence) "doesn't contain any substring.", 'm');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = StringUtils.toCodePoints("`]<2<As{X,|\"mIN");
      assertEquals(15, intArray0.length);
      assertNotNull(intArray0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN", (CharSequence) "`]<2<As{X,|\"mIN", 22);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.replaceFirst("`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN", "/4}4JN\"tJ_Jm!AU\nc", "(3|.o:6c3LSC|Sw3%;@");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN`]<2<As{X,|\"mIN", string5);
      assertNotNull(string5);
      
      String string6 = ",HX,MSc1";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("RgKTL", "`]<2<As{X,|\"mIN(3|.o:6", ",HX,MSc1");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6
         // `]<2<As{X,|\"mIN(3|.o:6
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("e{/=TGm)h]_mg");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Extension");
      assertEquals("extension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("extension");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      String string0 = StringUtils.right("...", 2333);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      boolean boolean1 = StringUtils.equalsAny("...", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("...", "...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("...", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("...");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.substringAfterLast((String) null, 2333);
      assertNull(string3);
      
      boolean boolean3 = StringUtils.isMixedCase("...");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("maxWith cannot be negative");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.rightPad((String) null, 4909, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.join((Object[]) stringArray0, '5', 64, 64);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Y:jM", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) '-';
      String string0 = StringUtils.join(longArray0, 'n');
      assertEquals(2, longArray0.length);
      assertEquals("0n45", string0);
      assertNotNull(string0);
      assertArrayEquals(new long[] {0L, 45L}, longArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Y:jM", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.substring("Y:jM", (-136));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y:jM", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("Minimum abbreviation width is %d, Length: 0", "wM5");
      assertEquals((-42), int0);
      
      String string2 = StringUtils.chomp("Minimum abbreviation width is %d, Length: 0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d, Length: 0", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 17);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.isNumericSpace("Y:jM");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.rightPad("wM5", 1927, 'M');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width is %d, Length: 0", charArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "Minimum abbreviation width is %d, Length: 0", (CharSequence) "Y:jM");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      String string0 = StringUtils.center("M-E|}uAY:YA?~Tu{V6", 16, 'R');
      assertEquals("M-E|}uAY:YA?~Tu{V6", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("M-E|}uAY:YA?~Tu{V6", "M-E|}uAY:YA?~Tu{V6", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBefore("QKV", "7ueq*v");
      assertFalse(string1.equals((Object)string0));
      assertEquals("QKV", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("7ueq*v");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7ueq*v", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "^h_/QwOf#@^F<ma", charArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'R', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("\n"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string2 = StringUtils.join((List<?>) null, "\n", 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.stripAccents(" vs org.apache.commons.lang3.StringUtils");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" vs org.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap(" vs org.apache.commons.lang3.StringUtils", " vs org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" vs org.apache.commons.lang3.StringUtils vs org.apache.commons.lang3.StringUtils vs org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty(" vs org.apache.commons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("vs org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replace("{arguments}", ";DLiw+e]", "The character ", 324);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("{arguments}", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '>', (-938), 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -938
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "1!&Dp/K", 1250, 3948);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("&*\"N(-)sd5 V");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "&*\"N(-)sd5 V", (-790), (-790));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cSnNH|=LX,SVuk2}\"-";
      boolean boolean0 = StringUtils.isWhitespace("cSnNH|=LX,SVuk2}\"-");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("cSnNH|=LX,SVuk2}\"-");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.leftPad("cSnNH|=LX,SVuk2}\"-", 12);
      assertEquals("cSnNH|=LX,SVuk2}\"-", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("cSnNH|=LX,SVuk2}\"-", "cSnNH|=LX,SVuk2}\"-");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripToEmpty("}");
      assertFalse(string1.equals((Object)string0));
      assertEquals("}", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("cSnNH|=LX,SVuk2}\"-", ")6ix&p2^k>/_?");
      assertEquals(0.25, double0, 0.01);
      
      String string2 = StringUtils.stripToEmpty("p{InCombiningDiacriticalMarks}+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 1186, 1186);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripAccents("p{InCombiningDiacriticalMarks}+");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String string0 = StringUtils.overlay("Fc$$8/<o#x]{;", "", (-201), 160);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "Fc$$8/<o#x]{;");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[3] = 'P';
      charArray0[4] = '@';
      charArray0[5] = '!';
      charArray0[6] = 'W';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, charArray0.length);
      assertEquals("Y\u0000\u0000P@!W", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'Y', '\u0000', '\u0000', 'P', '@', '!', 'W'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Fc$$8/<o#x]{;");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.remove("", 'I');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("Fc$$8/<o#x]{;").when(supplier0).get();
      String string4 = StringUtils.getIfEmpty("", supplier0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Fc$$8/<o#x]{;", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'Y', '\u0000', '\u0000', 'P', '@', '!', 'W'}, charArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Fc$$8/<o#x]{;", (CharSequence) "", 27);
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("Y\u0000\u0000P@!W", "Fc$$8/<o#x]{;");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = StringUtils.stripStart("iip2|lo*", "iip2|lo*");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "iip2|lo*", (CharSequence) "", 67);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars((String) null, 'q', 'q');
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 2500);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "lG@H,[_}(*J,");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.StdIoExtension", 'O');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 321;
      floatArray0[1] = (float) 'O';
      String string4 = StringUtils.join(floatArray0, 'O', 10, 0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, floatArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertArrayEquals(new float[] {321.0F, 79.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isNumeric("d% si tesffo htiw htdiw noitaiverbba muminiM");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substring("DefaultTimeZone", 11, (-1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Zon", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("{'T)G+A!ttO=k02", 0);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("{'T)G+A!ttO=k02", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat("d% si tesffo htiw htdiw noitaiverbba muminiM", 128);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, "o\"hLnB%=,n", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.replaceChars("o\"hLnB%=,n", "BuY", "doesn't match any regular expression.");
      assertEquals("o\"hLnd%=,n", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "o\"hLnd%=,n", (CharSequence) "BuY", (-2));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.strip("M");
      assertFalse(string1.equals((Object)string0));
      assertEquals("M", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("BuY");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("BuY", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("BuY", (String) null, (-2), 1);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("BuY", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "BuY";
      objectArray0[1] = (Object) null;
      String string4 = StringUtils.joinWith("BuY", objectArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertEquals("BuYBuY", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.center("/PO\"*3=|tbhHC'U", 1);
      assertEquals("/PO\"*3=|tbhHC'U", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "/PO\"*3=|tbhHC'U", (CharSequence) "/PO\"*3=|tbhHC'U", 1001);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Search and Replace array lengths don't match: ");
      assertEquals("search and replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("clone", 7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "search and replace array lengths don't match: ", 7);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("clone");
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string2 = StringUtils.replaceFirst("search and replace array lengths don't match: ", "Display name '%s' %sDisplay name '%s' %s", "Y(1d<w'P,");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("search and replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "i'K", 1);
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeStart("`=(K\u0002=]]ZLo6`FwQ66ZZ1j2(FwQStrings must not be nullFwQ must be static.FwQFwQ", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("`=(K\u0002=]]ZLo6`FwQ66ZZ1j2(FwQStrings must not be nullFwQ must be static.FwQFwQ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter((String) null, 10);
      assertNull(string4);
      
      String string5 = StringUtils.center("org.apache.commons.lang3.StringUtils", 16);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.compare((String) null, "H:XJ@L3", true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 1;
      String string6 = StringUtils.join(longArray0, '[');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals(2, longArray0.length);
      assertEquals("7[1", string6);
      assertNotNull(string6);
      assertArrayEquals(new long[] {7L, 1L}, longArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "search and replace array lengths don't match: ", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.abbreviate("t not be null", 1, 10);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("t not b...", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      String string0 = StringUtils.unwrap("p$i,*.X,8^?w<J$NV", 'm');
      assertEquals("p$i,*.X,8^?w<J$NV", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("p$i,*.X,8^?w<J$NV", "The character ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("", (-68));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 48, 1);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("maxWith cannot be negative", "org.junitpioneer.v", (CharSequence[]) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.junitpioneer.vmaxWith cannot be negative", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.compare((String) null, "No @DisabledUntil annotation found on element", true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("g");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "g");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("c6", '6');
      assertEquals("6c6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.wrapIfMissing
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("YSmI]qOx)TRm0`{Ye7", 'Y');
      assertEquals("YSmI]qOx)TRm0`{Ye7Y", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*U4evTG4t<!i");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("...", "66ZZ1j|2(");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("66ZZ1j|2(", "}kcLCartesianProductTest can only take exactly one type of arguments source.");
      assertEquals("}kcLCartesianProductTest can only take exactly one type of arguments source.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("*U4evTG4t<!i", "H()yuuV/FeSw");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}kcLCartesianProductTest can only take exactly one type of arguments source.";
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("llllllalall", 4092, '.');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "}kcLCartesianProductTest can only take exactly one type of arguments source.", (-1617));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.toRootLowerCase("a~`T kS~Uvpe^lyg");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("a~`t ks~uvpe^lyg", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'W';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "66ZZ1j|2(", charArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'e', 'W'}, charArray0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("}kcLCartesianProductTest can only take exactly one type of arguments source.");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.wrapIfMissing("...", '.');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isEmpty("...");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = 'l';
      String string0 = StringUtils.join(charArray0, 'l');
      assertEquals(6, charArray0.length);
      assertEquals("llllllalall", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'a', 'a', 'l'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "p$i,*.X,8^?w<J$NV";
      charSequenceArray0[1] = (CharSequence) "llllllalall";
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'a', 'a', 'l'}, charArray0);
      
      String string1 = StringUtils.repeat("Object varargs must not be null", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("llllllalall", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.llllllalallExpected exactly one annotation to provide an ArgumentSource, found %d.", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.llllllalallExpected exactly one annotation to provide an ArgumentSource, found %d.", charSequenceArray0[0]);
      assertTrue(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(" \" should have a parent context.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\" should have a parent context.", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null, (-829));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("^h_/QwOf#@^F<maIllegal range. There's no way to get from %s to %s with a step of %s.", '$');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("^h_/QwOf#@^F<maIllegal range. There's no way to get from %s to %s with a step of %s.", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.forLanguageTag("\" should have a parent context.");
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = new Locale("V", "v0", "qryw");
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals("V0", locale2.getCountry());
      assertEquals("qryw", locale2.getVariant());
      assertEquals("v", locale2.getLanguage());
      assertEquals("v_V0_qryw", locale2.toString());
      
      String string3 = locale2.getDisplayCountry(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("V0", string3);
      assertNotNull(string3);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("V0", locale2.getCountry());
      assertEquals("qryw", locale2.getVariant());
      assertEquals("v", locale2.getLanguage());
      assertEquals("v_V0_qryw", locale2.toString());
      
      String string4 = StringUtils.lowerCase((String) null, locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertNull(string4);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "^h_/QwOf#@^F<maIllegal range. There's no way to get from %s to %s with a step of %s.", (CharSequence) null, (-800));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String string0 = StringUtils.truncate("b.", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "b.", "");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("`I({]RH6(0", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.CR;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "b.";
      stringArray0[2] = "";
      String string2 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("b.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "(]H \"j=@$", (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string3 = StringUtils.upperCase("", locale0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null, "Zqi");
      assertNull(stringArray2);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.params.DisableIfNameExtension", 'C');
      assertNotSame(stringArray3, stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Display name '%s' %s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Display name '%s' %s", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '{', 'o');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", "JJ", (-1983));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", "rqTBSe?1TXAvr;/", (-2663));
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.reverse("");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", "");
      assertTrue(boolean0);
      
      String string5 = StringUtils.join((long[]) null, 'Q', (-1983), 4);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 8192, 'c');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String string0 = StringUtils.right("...", 2333);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      boolean boolean1 = StringUtils.equalsAny("...", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("...", "...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("...", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("...");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("...", 2333, "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$E!J", "yL'}Dsa5:to,X^0+m", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "yL'}Dsa5:to,X^0+m", 2333);
      assertEquals(17, int0);
      
      String string4 = StringUtils.leftPad((String) null, 2333);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String string0 = "a~`T kS~Uvpe^lyg";
      // Undeclared exception!
      StringUtils.repeat("a~`T kS~Uvpe^lyg", 65536);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.swapCase("%s does not implement %s interface.");
      assertEquals("%S DOES NOT IMPLEMENT %S INTERFACE.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "%s does not implement %s interface.", (CharSequence) "%s does not implement %s interface.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripEnd("aYAO#|eBNJ'O$]dje", "aYAO#|eBNJ'O$]dje");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.unwrap("yk|?E+n[:]BGBwz4=3", 'B');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("yk|?E+n[:]BGBwz4=3", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-37);
      String string3 = StringUtils.join(byteArray0, 'B');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(6, byteArray0.length);
      assertEquals("48B22B108B102B34B-37", string3);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)48, (byte)22, (byte)108, (byte)102, (byte)34, (byte) (-37)}, byteArray0);
      
      String string4 = StringUtils.join(stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("maxWithcannotbenegative", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWithcannotbenegative", (int) (byte)102);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween(" ", "maxWith cannot be negative", "Av;");
      assertNull(stringArray1);
      
      String string5 = StringUtils.substring("Ga<+2<9A96T|", (-1), (int) (byte)48);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("|", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("48B22B108B102B34B-37", 64);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte)108;
      try { 
        StringUtils.toString(byteArray1, "offset cannot be negative");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "~wZB%M389fY", (CharSequence) "=A9{}");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBeforeLast("\n", "\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", 24, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("                        ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String string0 = StringUtils.unwrap("8", "2|>9a");
      assertEquals("8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "cSnNH|=LX,SVuk2}\"-";
      stringArray0[0] = "cSnNH|=LX,SVuk2}\"-";
      boolean boolean0 = StringUtils.isWhitespace("cSnNH|=LX,SVuk2}\"-");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("cSnNH|=LX,SVuk2}\"-");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = "h~UJtAv8@z";
      String string2 = StringUtils.defaultString("h~UJtAv8@z", "cSnNH|=LX,SVuk2}\"-");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("h~UJtAv8@z", string2);
      assertNotNull(string2);
      
      int int0 = 32767;
      // Undeclared exception!
      StringUtils.repeat('.', 32767);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.right("...", 2333);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      boolean boolean1 = StringUtils.equalsAny("...", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("...", "...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("...", 12);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("         ...", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(charSequenceArray0[1], "         ...");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string3 = StringUtils.stripToEmpty("         ...");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("...", charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string4 = StringUtils.stripStart("...", "...");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\"mGjuc~Y6 Dg2GD");
      assertEquals("\"mGjuc~Y6 Dg2GD", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("\"mGjuc~Y6 Dg2GD", "\"mGjuc~Y6 Dg2GD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 81, "}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      String string3 = "BO:)";
      String string4 = StringUtils.replace("p{InCombiningDiacriticalMarks}+", "maxWith cannot be negative", "BO:)");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}p{InCombiningDiacriticalMarks}+");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}p{InCombiningDiacriticalMarks}+", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference("maxWith cannot be negative", "BO:)");
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("BO:)", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.split("}");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("A|QI,ee[", "A|QI,ee[");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 7
         // A|QI,ee[
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = objectArray0[4];
      String string0 = StringUtils.joinWith("", objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 12, 12);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.CartesianProductTestExtension", "iXTZ~PX*w_S}iqg[Lf", "iXTZ~PX*w_S}iqg[Lf", 33);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      
      String string3 = StringUtils.upperCase("", locale0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      
      String[] stringArray0 = StringUtils.split("Array element ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "org.junitpioneer.jupiter.CartesianProductTestExtension";
      stringArray1[1] = "";
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "/H(9Xf");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray2.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("", 'b');
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '[';
      charArray0[2] = ';';
      charArray0[3] = 'm';
      charArray0[4] = '|';
      charArray0[5] = 'A';
      charArray0[6] = 'n';
      charArray0[7] = 'M';
      String string0 = StringUtils.join(charArray0, 'l');
      assertEquals(8, charArray0.length);
      assertEquals("ll[l;lml|lAlnlM", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'l', '[', ';', 'm', '|', 'A', 'n', 'M'}, charArray0);
      
      String string1 = StringUtils.leftPad(" vs ", 2575, 'A');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[1], (CharSequence[]) stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.StdIoExtension", 'O');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      String string5 = StringUtils.replace((String) null, "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", "m2[~{");
      assertNull(string5);
      
      String string6 = StringUtils.replaceEach("Minimum abbreviation width with offset is %d", stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals("Minimum abbreviation width with offset is %d", string6);
      assertNotNull(string6);
      
      String string7 = "K\\2\\u";
      String string8 = StringUtils.joinWith(string7, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("{'T)G+A!ttO=k02", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.getIfBlank("org.apache.commons.lang3.CharUtils", (Supplier<String>) null);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.CharUtils", string9);
      assertNotNull(string9);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.CharUtils", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      String string0 = StringUtils.center("", (-981), 'a');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("~/]&g*DSW_t'5:GV*", "offset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("~/]&g*DSW_t'5:GV*", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      String string3 = StringUtils.substringAfter(",<mRJg'", "ZuM");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "~/]&g*DSW_t'5:GV*";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Y:jM", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = StringUtils.substring("Y:jM", 7);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("5Oupc;", "StdIo_System_Out", 7);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(7);
      assertNotNull(charBuffer0);
      assertEquals(7, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.length());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-107);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteBuffer0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)18, (byte)93, (byte) (-36), (byte) (-39), (byte) (-107)}, byteArray0);
      assertEquals(6, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(6, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals(6, byteArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)18, (byte)93, (byte) (-36), (byte) (-39), (byte) (-107)}, byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(6, byteBuffer0.position());
      assertEquals(6, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=6 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(6, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertEquals("\uFFFD\u0012]\uFFFD\u0655", charBuffer1.toString());
      assertEquals(5, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(5, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      
      int int0 = charBuffer1.read(charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals(6, byteArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)18, (byte)93, (byte) (-36), (byte) (-39), (byte) (-107)}, byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(7, charBuffer0.capacity());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.position());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, byteBuffer0.position());
      assertEquals(6, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=6 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(5, charBuffer1.position());
      assertEquals(6, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals(6, byteArray0.length);
      assertNotNull(byteBuffer1);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)18, (byte)93, (byte) (-36), (byte) (-39), (byte) (-107)}, byteArray0);
      assertEquals(0, byteBuffer1.capacity());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.limit());
      assertFalse(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer1.toString());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(6, byteBuffer0.position());
      assertEquals(6, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=6 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(5, charBuffer1.position());
      assertEquals(6, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      
      byte[] byteArray1 = StringUtils.getBytes("v[{K=r?", charset0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)118, (byte)91, (byte)123, (byte)75, (byte)61, (byte)114, (byte)63}, byteArray1);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      String[] stringArray1 = StringUtils.split("Search and Replace array lengths don't match: ", "blank_blank_blank_2014", (int) (byte) (-36));
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(10, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = objectArray0[4];
      String string0 = StringUtils.joinWith("", objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultString("4", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("4", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("4", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("4", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotBlank("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.replaceIgnoreCase("Illegal range. The step cannot be zero.", "java.lang.Object@3a83c2f0IssueExtension-591IssueExtensionjava.lang.Object@16a850f0IssueExtension-591Object varargs must not be null", "JJ", (-1983));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Illegal range. The step cannot be zero.", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "4", 1967);
      assertNull(stringArray0);
      
      boolean boolean4 = StringUtils.startsWithIgnoreCase("4", "java.lang.Object@3a83c2f0IssueExtension-591IssueExtensionjava.lang.Object@16a850f0IssueExtension-591Object varargs must not be null");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string4 = StringUtils.join((long[]) null, 'Q', (-1983), (-1983));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Display name '%s' %s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Display name '%s' %s", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Display name '%s' %s", "Display name '%s' %s");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.removeEnd("Display name '%s' %s", "Display name '%s' %s");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      
      Locale locale1 = Locale.TAIWAN;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      
      String string3 = locale1.getDisplayScript(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      
      String string4 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils", locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string4);
      assertNotNull(string4);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1824);
      shortArray0[1] = (short) (-2747);
      shortArray0[2] = (short)14;
      shortArray0[3] = (short)17;
      shortArray0[4] = (short)16;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, ' ', (int) (short)17, 2369);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ", Length: 0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("", '{', 'j');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1), 31);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("9\"ur=+H@b.x6bTbsmiA%R/Fcu", "[:KAEs");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase(", Length: 0", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(", Length: 0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate(")%~|eu8X-!Ib%?y", 64);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(")%~|eu8X-!Ib%?y", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\r", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'p', 2860, (-800));
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("", 'p');
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      
      Locale locale2 = new Locale(",po[.R2", "iXTZ~PX*w_S}iqg[Lf", "");
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals(",po[.r2", locale2.getLanguage());
      assertEquals(",po[.r2_IXTZ~PX*W_S}IQG[LF", locale2.toString());
      assertEquals("IXTZ~PX*W_S}IQG[LF", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      
      String string3 = locale1.getDisplayCountry(locale2);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Italy", string3);
      assertNotNull(string3);
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals(",po[.r2", locale2.getLanguage());
      assertEquals(",po[.r2_IXTZ~PX*W_S}IQG[LF", locale2.toString());
      assertEquals("IXTZ~PX*W_S}IQG[LF", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      
      String string4 = StringUtils.unwrap("(Ak.:", "!Vt'{cW,Mm;hX!");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("(Ak.:", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("", locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(",po[.r2", locale2.getLanguage());
      assertEquals(",po[.r2_IXTZ~PX*W_S}IQG[LF", locale2.toString());
      assertEquals("IXTZ~PX*W_S}IQG[LF", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "V", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 55);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String string0 = "Minimum abbreviation width is %d";
      String string1 = StringUtils.substring("Minimum abbreviation width is %d", 8);
      assertFalse(string1.equals((Object)string0));
      assertEquals("abbreviation width is %d", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = (-1613);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "abbreviation width is %d", (CharSequence) "abbreviation width is %d", (-1613));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.params.ByteRange", "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1118L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-2608L);
      String string0 = StringUtils.join(longArray0, '-');
      assertEquals(5, longArray0.length);
      assertEquals("-1118-0-0-0--2608", string0);
      assertNotNull(string0);
      assertArrayEquals(new long[] {(-1118L), 0L, 0L, 0L, (-2608L)}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'-', '-', '-', '-'}, charArray0);
      
      String string1 = StringUtils.substring("Minimum abbreviation width is %d, Length: 0", (-136));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d, Length: 0", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("-1118-0-0-0--2608", "Minimum abbreviation width is %d, Length: 0");
      assertEquals((-32), int0);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width is %d, Length: 0", 5);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.rightPad("org.junitpioneer.jupiter.params.ByteRange", (-136), '-');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.ByteRange", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.params.ByteRange", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("`z zqYzL", (-1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("z zqYzL`", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String string0 = StringUtils.overlay("Fc$$8/<o#x]{;", "", (-201), 160);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("iA%R/Fcu", (-201), (-201));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removePattern("CTe~H+c6'PGt)kQUZ{", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("CTe~H+c6'PGt)kQUZ{", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("CTe~H+c6'PGt)kQUZ{", (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 61);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.trimToEmpty("iA%R/Fcu");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("iA%R/Fcu", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string5 = StringUtils.uncapitalize((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.chomp("9\"ur=+H@b.x6bTbsm", "iA%R/Fcu");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceIgnoreCase((String) null, "4~JD$,FS<JK}6Ph", "maxWith cannot be negative", (-1936));
      assertNull(string7);
      
      boolean boolean3 = StringUtils.endsWithAny("", charSequenceArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String string8 = StringUtils.removeStartIgnoreCase("CTe~H+c6'PGt)kQUZ{", "9W]Wre>YYY! ");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertEquals("CTe~H+c6'PGt)kQUZ{", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isBlank("\n");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = 'T';
      charArray0[2] = '|';
      charArray0[4] = 'q';
      charArray0[5] = '\\';
      charArray0[6] = '<';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'j', 'T', '|', '\u0000', 'q', '\\', '<'}, charArray0);
      
      String string1 = StringUtils.substringAfter("Minimum abbreviation width is %d", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("NSS-&XqaWUw@M", (String) null, "Minimum abbreviation width is %d");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Object varargs must not be null", (String) null, "Object varargs must not be null");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.right("...", 2333);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      boolean boolean1 = StringUtils.equalsAny("...", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.repeat((String) null, 2333);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, "");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("...", 2333, "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAllUpperCase("...");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.joinWith("$E!J", charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("...$E!J...$E!J...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, (String) null, 2333, 64);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "...", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Display name '%s' %sCart";
      stringArray0[1] = "Display name '%s' %sCart";
      stringArray0[2] = "Display name '%s' %sCart";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("Display name '%s' %sCart", string0);
      assertNotNull(string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Display name '%s' %sCart"));
      assertEquals(0, priorityQueue0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      boolean boolean0 = treeSet0.add("oc84S-o");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains("oc84S-o"));
      
      Stream<String> stream0 = treeSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains("oc84S-o"));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains("oc84S-o"));
      assertFalse(navigableSet0.contains(string0));
      assertTrue(navigableSet0.contains("oc84S-o"));
      assertEquals(1, navigableSet0.size());
      assertFalse(navigableSet0.isEmpty());
      
      String string1 = StringUtils.left("Display name '%s' %sCart", 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Display name '%s", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Display name '%s' %sCart", (-4107));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripAccents("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastOrdinalIndexOf("Display name '%s' %sCart", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("G,OX1Se& OPp");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.substringBefore("oc84S-o", "Display name '%s' %sCart");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("oc84S-o", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("Display name '%s' %sCart", "Display name '%s' %sCart", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize(")Z^ n&T[9I5h :=");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(")Z^ n&T[9I5h :=", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference(")Z^ n&T[9I5h :=", " 3d[+}.dl#wX/)I");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals(" 3d[+}.dl#wX/)I", string6);
      assertNotNull(string6);
      
      String[] stringArray2 = StringUtils.split("");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int2 = StringUtils.length("}kcL");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) ")Z^ n&T[9I5h :=", (CharSequence) "Display name '%s' %sCart");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("[TCy");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      String string0 = StringUtils.substringAfter("", 1844);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("rZv!QnPB", '');
      assertFalse(string1.equals((Object)string0));
      assertEquals("rZv!QnPB", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\"=QTHktWDAV ^yM@", (CharSequence) "", 14);
      assertEquals(14, int0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedList0.add(locale_Category0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_Category0));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(1844));
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = linkedList1.containsAll(linkedList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(locale_Category0));
      assertFalse(linkedList1.contains(1844));
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      String string2 = StringUtils.substringBetween("#C|KT;IBm", "`=(K\u0002=]]ZLo6`FwQ66ZZ1j2(FwQStrings must not be nullFwQ must be static.FwQFwQ");
      assertNull(string2);
      
      String string3 = StringUtils.joinWith("a~`T kS~Uvpe^lyg`=(", objectArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(6, objectArray0.length);
      assertEquals("a~`T kS~Uvpe^lyg`=(a~`T kS~Uvpe^lyg`=(a~`T kS~Uvpe^lyg`=(a~`T kS~Uvpe^lyg`=(a~`T kS~Uvpe^lyg`=(", string3);
      assertNotNull(string3);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) linkedList1;
      objectArray1[1] = (Object) "\"=QTHktWDAV ^yM@";
      objectArray1[2] = (Object) "a~`T kS~Uvpe^lyg`=(";
      objectArray1[3] = (Object) null;
      objectArray1[4] = (Object) "a~`T kS~Uvpe^lyg`=(";
      String string4 = StringUtils.join(objectArray1, "a~`T kS~Uvpe^lyg`=(a~`T kS~Uvpe^lyg`=(a~`T kS~Uvpe^lyg`=(a~`T kS~Uvpe^lyg`=(a~`T kS~Uvpe^lyg`=(", (-1470), (-1470));
      assertNotSame(objectArray1, objectArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray1.length);
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '8');
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      boolean boolean0 = treeSet0.add(" ");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains(" "));
      assertFalse(treeSet0.contains(string0));
      
      Stream<String> stream0 = treeSet0.parallelStream();
      assertNotNull(stream0);
      assertTrue(treeSet0.contains(" "));
      assertFalse(treeSet0.contains(string0));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertTrue(treeSet0.contains(" "));
      assertFalse(treeSet0.contains(string0));
      assertFalse(navigableSet0.contains(string0));
      assertTrue(navigableSet0.contains(" "));
      assertFalse(navigableSet0.isEmpty());
      assertEquals(1, navigableSet0.size());
      
      String string1 = StringUtils.left(" ", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "oc84S-o", 112);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("\r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", charArray0);
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'W', 'W', 'W'}, charArray0);
      
      String string3 = StringUtils.replaceOnce("|zYV;9`tF=2.", "=yU3Bk:39c", " ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("|zYV;9`tF=2.", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphaSpace("|zYV;9`tF=2.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("s:dme)");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("s:dme)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.difference("K\u0002=]]ZLo6`FwQ66ZZ1j2(FwQStrings must not be nullFwQ must be static.FwQFwQ`=(", "K\u0002=]]ZLo6`FwQ66ZZ1j2(FwQStrings must not be nullFwQ must be static.FwQFwQ`=(");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Locale must not be null", ']');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("Minimum abbreviation width is %d[L%WL", "", false);
      assertEquals(37, int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'R');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Locale must not be null");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeEnd("9h&-7R\"]+", "K\u0002=]]ZLo6`FwQ66ZZ1j2(FwQStrings must not be nullFwQ must be static.FwQFwQ`=(");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("9h&-7R\"]+", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("Locale must not be null", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'l';
      charArray0[2] = 'R';
      String string5 = StringUtils.join(charArray0, '+', 37, 37);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals(3, charArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new char[] {'R', 'l', 'R'}, charArray0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("9h&-7R\"]+", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)43;
      String string6 = StringUtils.join(byteArray0, '|', 29, (-1026));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals(8, byteArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-22), (byte)20, (byte)67, (byte)15, (byte)38, (byte)56, (byte)43}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", "");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean1 = StringUtils.startsWithAny("\r", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.trimToEmpty("Parameter of type %s must reference an Enum type");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Parameter of type %s must reference an Enum type", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("9=0~>)^ ", 1888, '3');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Parameter of type %s must reference an Enum type", (CharSequence) "", 4092);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.toRootLowerCase(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      Locale locale0 = Locale.forLanguageTag("\r");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      
      String string6 = locale2.getDisplayCountry(locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("\u4E2D\u570B", string6);
      assertNotNull(string6);
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      
      Locale locale3 = Locale.TAIWAN;
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertSame(locale3, locale1);
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertNotNull(locale3);
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("TW", locale3.getCountry());
      
      String string7 = StringUtils.lowerCase("9!{:'i[^K_Z%4LU-,", locale1);
      assertSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("9!{:'i[^k_z%4lu-,", string7);
      assertNotNull(string7);
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      
      String string8 = StringUtils.difference("d*n", "9!{:'i[^k_z%4lu-,");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertEquals("9!{:'i[^k_z%4lu-,", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.join((char[]) null, '3', 19, 1888);
      assertNull(string9);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "5jz3m", 1888);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = ", Length: 0";
      double double0 = StringUtils.getJaroWinklerDistance("`I({]RH6(0", "`I({]RH6(0");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.removeEnd("Minimum abbreviation width is %d", "[L%WL");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = Locale.TAIWAN;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      String string2 = StringUtils.upperCase("hLQUdm}vBmBl-", locale0);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("HLQUDM}VBMBL-", string2);
      assertNotNull(string2);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      short[] shortArray0 = new short[3];
      String string3 = StringUtils.join(shortArray0, ' ', 3895, 3895);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(3, shortArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      String string4 = StringUtils.replaceEach("_Qahi!2r<*(s", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals("_Qahi!2r<*(s", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      String string0 = StringUtils.strip("v`Qxc+B[=)+VFmCo", "");
      assertEquals("v`Qxc+B[=)+VFmCo", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull(" ");
      assertNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 252, 252);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      int int0 = StringUtils.indexOf((CharSequence) " must be static.", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "#p#");
      assertEquals(6, charSequenceArray0.length);
      assertEquals("#p##p##p##p##p#", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("i&pow2j", 'L');
      assertFalse(string2.equals((Object)string1));
      assertEquals("i&pow2j", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "o26r7xYji2", 3358, 16);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "bx] VKa|]r", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#p#";
      stringArray0[1] = "!B";
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string5 = StringUtils.join(stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals(4, stringArray0.length);
      assertEquals("#p#!B", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray1 = StringUtils.split("g3{{8`dTnr~<&apcA?");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int3 = StringUtils.ordinalIndexOf("", "o26r7xYji2", 5);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.replaceChars("b&Eyf O,U9QbS", "", " annotation, but there were QKVorg.junitpioneer.jupiter.DefaultLocaleExtensionReport entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }<mGH?3eo1m)(vI!F");
      assertEquals("b&Eyf O,U9QbS", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("b&Eyf O,U9QbS");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "&*\"N(-)sd5 V", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '7', 90, Integer.MAX_VALUE);
      assertNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'7', '7', '7', '7'}, charArray0);
      
      int int1 = StringUtils.compare("Minimum abbreviation width is %d", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("=%2*dW7dSG&fT", "=%2*dW7dSG&fT");
      assertEquals("=%2*dW7dSG&fT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("=%2*dW7dSG&fT", Integer.MAX_VALUE, 9);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "=%2*dW7dSG&fT");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "=%2*dW7dSG&fT";
      objectArray0[1] = (Object) "=%2*dW7dSG&fT";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "=%2*dW7dSG&fT";
      objectArray0[4] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'F');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, objectArray0.length);
      assertEquals("=%2*dW7dSG&fTF=%2*dW7dSG&fTFF=%2*dW7dSG&fTF", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", '^');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("=%2*dW7dSG&fTF=%2*dW7dSG&fTFF=%2*dW7dSG&fTF", 7, 'F');
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("=%2*dW7dSG&fTF=%2*dW7dSG&fTFF=%2*dW7dSG&fTF", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = 'F';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'^', 'F'}, charArray0);
      
      String string5 = StringUtils.substringAfter("8:CzvL", 57);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.rightPad("offset cannot be negative", 299);
      assertEquals("offset cannot be negative                                                                                                                                                                                                                                                                                  ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "offset cannot be negative                                                                                                                                                                                                                                                                                  ", (int) 'K');
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = 'K';
      charArray0[2] = 'K';
      charArray0[2] = 'K';
      String[] stringArray0 = StringUtils.substringsBetween("offset cannot be negative                                                                                                                                                                                                                                                                                  ", " ", " ");
      assertEquals(138, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("offset cannot be negative", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('K', (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("offset cannot be negative                                                                                                                                                                                                                                                                                  ", "[xf.%PsL5-s9");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negative                                                                                                                                                                                                                                                                                  ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K\u0002=]]ZLo6`";
      stringArray0[1] = "66ZZ1j|2(";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = " must be static.";
      int int0 = StringUtils.indexOf((CharSequence) "66ZZ1j|2(", (CharSequence) "K\u0002=]]ZLo6`");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "FwQ");
      assertEquals(6, stringArray0.length);
      assertEquals("K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("bx] VKa|]r", 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals("bx] VKa|]r", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Strings must not be null", charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.substringAfter("j.Xnqr<@ImxT=", 43);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.substringsBetween("B@57r@*x:|!\"C1a&Mx", "qc/\nqc/\nqc/\nqc/\nqc/\nqc/\nqc/\nqc/\n\n", "offset cannot be negative");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("\r", "\r", "\r");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "c6", (CharSequence) "c6", (-3418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (-128));
      assertNull(string0);
      
      String string1 = StringUtils.remove("\"=QTHktWDAV ^yM@", '^');
      assertEquals("\"=QTHktWDAV yM@", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "#C|KT;IBm";
      charSequenceArray0[1] = (CharSequence) "\"=QTHktWDAV yM@";
      charSequenceArray0[2] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\"=QTHktWDAV yM@", (CharSequence) null, (-1470));
      assertEquals((-1), int0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedList0.add(locale_Category0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_Category0));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains((-128)));
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = linkedList1.containsAll(linkedList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(locale_Category0));
      assertFalse(linkedList1.contains((-128)));
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      String string2 = StringUtils.substringBetween((String) null, "\"=QTHktWDAV yM@");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "?qo2b5wuL-.nX", (-1));
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 126);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*U4evTG4t<!i");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("...", "66ZZ1j|2(");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("66ZZ1j|2(", "}kcLCartesianProductTest can only take exactly one type of arguments source.");
      assertEquals("}kcLCartesianProductTest can only take exactly one type of arguments source.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("*U4evTG4t<!i", "H()yuuV/FeSw");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}kcLCartesianProductTest can only take exactly one type of arguments source.";
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.center("maxWith cannot be negative", 33, 'w');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("wwwmaxWith cannot be negativewwww", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "}kcLCartesianProductTest can only take exactly one type of arguments source.");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int[] intArray0 = StringUtils.toCodePoints("*U4evTG4t<!i");
      assertEquals(12, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, "\nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: Search and Replace array lengths don't match: defaultlocale", 16);
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("...", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("\nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: Search and Replace array lengths don't match: defaultlocale");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(72, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string5 = StringUtils.joinWith("}kcLCartesianProductTest can only take exactly one type of arguments source.", charSequenceArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("}kcLCartesianProductTest can only take exactly one type of arguments source.}kcLCartesianProductTest can only take exactly one type of arguments source.", string5);
      assertNotNull(string5);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'w';
      longArray0[1] = (long) 'w';
      String string6 = StringUtils.join(longArray0, 'w', 33, 33);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals(2, longArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertArrayEquals(new long[] {119L, 119L}, longArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, charArray0.length);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean4 = StringUtils.isAlpha("*U4evTG4t<!i");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "}kcLCartesianProductTest can only take exactly one type of arguments source.", (CharSequence) "}kcLCartesianProductTest can only take exactly one type of arguments source.", 16);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.replaceFirst((String) null, "~)59uMKJx+EH6gd4k~\r", (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " must return `CartesianProductTest.Sets`.", (CharSequence) null, 208);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" must return `CartesianProductTest.Sets`.");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("2;e/4):ap@", (String) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.capitalize("~)59uMKJx+EH6gd4k~illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals("~)59uMKJx+EH6gd4k~illegal range. There's no way to get from %s to %s with a step of %s.", string1);
      assertNotNull(string1);
      
      List<Locale.LanguageRange> list0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" must return `CartesianProductTest.Sets`."));
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) linkedList0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 29, "'RFFu%.f`jKP_");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("'RFFu%.f`jKP_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = ", Length: 0";
      double double0 = StringUtils.getJaroWinklerDistance("`I({]RH6(0", "`I({]RH6(0");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.removeEnd("Minimum abbreviation width is %d", "[L%WL");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      Locale locale1 = Locale.TAIWAN;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      
      String string2 = StringUtils.upperCase("hLQUdm}vBmBl-", locale0);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("HLQUDM}VBMBL-", string2);
      assertNotNull(string2);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("`I({]RH6(0", "&,", 11);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 6);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.rightPad("o#", (-4053), '@');
      assertEquals("o#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("z+b*F+6Go6*dUvH2");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z+B*F+6GO6*DUVH2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "z+b*F+6Go6*dUvH2", 49);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("Z+B*F+6GO6*DUVH2", "z+b*F+6Go6*dUvH2", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.reverse("z+b*F+6Go6*dUvH2");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("2HvUd*6oG6+F*b+z", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("2HvUd*6oG6+F*b+z", "o#");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("o#", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.compareIgnoreCase("=1e=ZQIs6p", "Locale must not be null", true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-47), int2);
      
      String string4 = StringUtils.getDigits((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.center((String) null, (-4053), "org.");
      assertNull(string5);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "o#", (CharSequence) "o#", 108);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      short[] shortArray0 = new short[0];
      String string6 = StringUtils.join(shortArray0, 'W', 105, 105);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals(0, shortArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "o#";
      objectArray0[1] = (Object) "=1e=ZQIs6p";
      objectArray0[2] = (Object) "o#";
      objectArray0[3] = (Object) "o#";
      objectArray0[4] = (Object) "o#";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "org.";
      objectArray0[7] = (Object) "z+b*F+6Go6*dUvH2";
      objectArray0[8] = (Object) "=1e=ZQIs6p";
      String string7 = StringUtils.join(objectArray0, '#', Integer.MAX_VALUE, 108);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals(9, objectArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("|NrAWFv6769<", 'w');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultIfEmpty("\n\n", "1}Z6PSPJbpc");
      assertEquals("\n\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n\n");
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("[jD2P|XW", (Charset) null);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)106, (byte)68, (byte)50, (byte)80, (byte)124, (byte)88, (byte)87}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Search and Replace array lengths don't match: ");
      assertEquals("search and replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("clone", 7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "search and replace array lengths don't match: ", 7);
      assertNull(stringArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(7);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.remaining());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)48;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteBuffer0);
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-107), (byte)93, (byte)9, (byte)70, (byte)18, (byte) (-39), (byte)48}, byteArray0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals(8, byteArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-107), (byte)93, (byte)9, (byte)70, (byte)18, (byte) (-39), (byte)48}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("\u0715]\tF\u0012\uFFFD0", charBuffer1.toString());
      assertEquals(7, charBuffer1.length());
      assertEquals(7, charBuffer1.limit());
      assertEquals(7, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(8, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertNotNull(byteBuffer1);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer1.toString());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(7, byteBuffer1.limit());
      assertEquals(7, byteBuffer1.capacity());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(7, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.position());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(7, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      
      byte[] byteArray1 = StringUtils.getBytes("i'K", charset0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)105, (byte)39, (byte)75}, byteArray1);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.StdIoExtension", 'O');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string5 = StringUtils.abbreviateMiddle("{'T)G+A!ttO=k02", "maxWith cannot be negative", 321);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("{'T)G+A!ttO=k02", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast("zqrG)b([w", "206tpH3^~ue0EB");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("zqrG)b([w", string6);
      assertNotNull(string6);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string7 = StringUtils.joinWith("{'T)G+A!ttO=k02", stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("=%2*dW7dSG&fT", "=%2*dW7dSG&fT");
      assertEquals("=%2*dW7dSG&fT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("=%2*dW7dSG&fT", Integer.MAX_VALUE, 9);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("=%2*dW7dSG&fT");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("=%2*dW7dSG&fT", "\"mGjuc~Y6 Dg2GD");
      assertEquals(27, int0);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, ':');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, intArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(6, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':'}, charArray0);
      
      String string4 = StringUtils.substringAfter("?ds!hjV-,", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("?ds!hjV-,", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("", "");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("*qSv=wx&SYS$BI", '=', '=');
      assertEquals("*qSv=wx&SYS$BI", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, '=');
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("^h_/QwOf#@^F<ma", "rqTBSe?1TXAvr;/", "Another failed with one of the specifPed eMceptions.");
      assertFalse(string2.equals((Object)string0));
      assertEquals("^h_wQwOf#@^F<ma", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("*U4evTG4t<!i", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("*U4evTG4t<!i", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("^h_/QwOf#@^F<ma", supplier0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("^h_/QwOf#@^F<ma", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.split("...");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      boolean boolean1 = StringUtils.endsWithAny("*qSv=wx&SYS$BI", stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "^h_/QwOf#@^F<ma", "^h_wQwOf#@^F<ma");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("^h_/QwOf#@^F<ma");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.join((Locale.FilteringMode[]) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 493, 15);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter(", Length: 0, Length: 0", 493);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, ", Length: 0, Length: 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("...", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("c6");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissing((String) null, "...", (CharSequence[]) null);
      assertNull(string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(1967));
      assertEquals(0, priorityQueue0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = priorityQueue0.add(object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(object1));
      assertFalse(priorityQueue0.contains(1967));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains(object1));
      assertFalse(priorityQueue0.contains(1967));
      assertEquals(1, priorityQueue0.size());
      
      String string4 = StringUtils.prependIfMissing("", "", (CharSequence[]) null);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string2));
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      assertFalse(treeSet1.contains(string2));
      
      NavigableSet<String> navigableSet0 = treeSet1.descendingSet();
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(navigableSet0);
      assertFalse(treeSet1.contains(string2));
      assertFalse(navigableSet0.contains(string2));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(", Length: 0", ',');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D";
      stringArray0[1] = "D";
      String string0 = StringUtils.trim("FMQA:`s");
      assertEquals("FMQA:`s", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("FMQA:`s", "D");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "D", "FMQA:`s");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "D", (CharSequence[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ`=(", 'K');
      assertEquals("\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ`=(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ`=(", "\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ`=(");
      assertTrue(boolean0);
      
      String string1 = "";
      String string2 = StringUtils.strip("", "");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = "4t";
      String string4 = StringUtils.difference((String) null, "4t");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("4t", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("+~cMZU))0hR$cs/jL", "", "`,HR'3wy<i$", 49);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("+~cMZU))0hR$cs/jL", string5);
      assertNotNull(string5);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 49;
      longArray0[1] = (long) 49;
      longArray0[2] = (long) 54;
      String string6 = StringUtils.join(longArray0, 'K', 786, 14);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals(3, longArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertArrayEquals(new long[] {49L, 49L, 54L}, longArray0);
      
      String string7 = StringUtils.substringBetween("Minimum abbreviation width is %d", "4t", "");
      assertNull(string7);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string8 = locale0.getDisplayCountry(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("Corea del Sud", string8);
      assertNotNull(string8);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string9 = StringUtils.lowerCase("Search and Replace array lengths don't match: ", locale1);
      assertNotSame(locale1, locale0);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("search and replace array lengths don't match: ", string9);
      assertNotNull(string9);
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string10 = StringUtils.center("6t", 53, 'V');
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVV6tVVVVVVVVVVVVVVVVVVVVVVVVVV", string10);
      assertNotNull(string10);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Threshold must not be ", 'T');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace("Threshold must not be ");
      assertEquals("Thresholdmustnotbe", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("Threshold must not be ", "p{InCombiningDiacriticalMarks}+Strings must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+Strings must not be nullThreshold must not be p{InCombiningDiacriticalMarks}+Strings must not be null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String[] stringArray0 = new String[8];
      stringArray0[3] = "`I({]RH6(0";
      stringArray0[4] = "`I({]RH6(0";
      stringArray0[5] = "a~`T kS~Uvpe^lyg";
      stringArray0[6] = "`I({]RH6(0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("a~`T kS~Uvpe^lyg"));
      assertEquals(0, priorityQueue0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("a~`T kS~Uvpe^lyg"));
      
      boolean boolean0 = treeSet0.add("Display name '%s' %s");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains("a~`T kS~Uvpe^lyg"));
      assertTrue(treeSet0.contains("Display name '%s' %s"));
      
      Stream<String> stream0 = treeSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(treeSet0.contains("a~`T kS~Uvpe^lyg"));
      assertTrue(treeSet0.contains("Display name '%s' %s"));
      
      String string1 = StringUtils.remove("~qO*{9Ho+N5Kgx/|3EPQpm!#", '}');
      assertFalse(string1.equals((Object)string0));
      assertEquals("~qO*{9Ho+N5Kgx/|3EPQpm!#", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = 'L';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "`I({]RH6(0", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L', '}', '}', '}', 'L'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("`I({]RH6(0");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrapIfMissing("`=(", "a~`T kS~Uvpe^lyg");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("a~`T kS~Uvpe^lyg`=(a~`T kS~Uvpe^lyg", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "`I({]RH6(0", (CharSequence) "a~`T kS~Uvpe^lyg");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale0 = new Locale("!(7 J*5C]5J;kZUWo0", "`I({]RH6(0", "`I({]RH6(0");
      assertNotNull(locale0);
      assertEquals("!(7 j*5c]5j;kzuwo0_`I({]RH6(0_`I({]RH6(0", locale0.toString());
      assertEquals("`I({]RH6(0", locale0.getCountry());
      assertEquals("`I({]RH6(0", locale0.getVariant());
      assertEquals("!(7 j*5c]5j;kzuwo0", locale0.getLanguage());
      
      int int2 = StringUtils.getFuzzyDistance("!(7 J*5C]5J;kZUWo0", "`m~p:", locale0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals("!(7 j*5c]5j;kzuwo0_`I({]RH6(0_`I({]RH6(0", locale0.toString());
      assertEquals("`I({]RH6(0", locale0.getCountry());
      assertEquals("`I({]RH6(0", locale0.getVariant());
      assertEquals("!(7 j*5c]5j;kzuwo0", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("pId@ J3l;iQMQ[/AV", "");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 252, 252);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(252, comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string1 = priorityQueue0.poll();
      assertNull(string1);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add(" or any enclosing class.");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(" or any enclosing class."));
      assertEquals(1, priorityQueue0.size());
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "V*Bsg1!pr;Wz1g0ov");
      assertEquals(" or any enclosing class.", string2);
      assertNotNull(string2);
      assertFalse(priorityQueue0.contains("V*Bsg1!pr;Wz1g0ov"));
      assertTrue(priorityQueue0.contains(string2));
      assertEquals(1, priorityQueue0.size());
      
      String string3 = StringUtils.substring("8k7s", 252, (-1675));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("", " or any enclosing class.");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, 'O');
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'O');
      assertEquals(0, int0);
      
      String string6 = StringUtils.mid("org.junitpioneer.vintage.ExpectedExceptionExtension", 0, 7);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("org.jun", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) " or any enclosing class.", (CharSequence) " or any enclosing class.");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("", (-1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "Threshold must not be negative", (-1222), 1722);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1222
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", 'a');
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("Search and Replace array lengths don't match: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("Search and Replace array lengths don't match: "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = StringUtils.join((List<?>) arrayList0, "Search and Replace array lengths don't match: ", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(arrayList0.contains(0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.defaultString("", "Search and Replace array lengths don't match: ");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean3 = arrayList0.add((Object) "");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("Search and Replace array lengths don't match: "));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      String string3 = StringUtils.rightPad("2j^6mt9^2", 0, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("2j^6mt9^2", string3);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isAllUpperCase("Search and Replace array lengths don't match: ");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      boolean boolean5 = linkedList0.containsAll(arrayList0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("Search and Replace array lengths don't match: "));
      assertFalse(linkedList0.contains(""));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.substringBetween("", "Search and Replace array lengths don't match: ");
      assertNull(string4);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Search and Replace array lengths don't match: ";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "Search and Replace array lengths don't match: ";
      String string5 = StringUtils.joinWith("Locale must not be null", objectArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(6, objectArray0.length);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", (-948), 2341);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -948
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("8!$wf=zPo", "8!$wf=zPo");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "&L\"N-)sd5:V");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "&L\"N-)sd5:V", "&L\"N-)sd5:V");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      String string0 = StringUtils.leftPad((String) null, Integer.MAX_VALUE, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = null;
      String string2 = "Threshold must not be negative";
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, "Display name '%s' %s", "Threshold must not be negative");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.strip("YsRD:e8 &v5", "java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null~e@3YMYZ\"&kq:");
      assertEquals("RD:e8", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("RD:e8", "RD:e8");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("RD:e8", "", "", 49);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("RD:e8", string2);
      assertNotNull(string2);
      
      long[] longArray0 = new long[0];
      String string3 = StringUtils.join(longArray0, '0', 122, (-538));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, longArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new long[] {}, longArray0);
      
      String string4 = StringUtils.substringBetween("", "'b JSphR5", "Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertNull(string4);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string2));
      assertEquals(0, priorityQueue0.size());
      
      String string5 = Locale.lookupTag(arrayList0, priorityQueue0);
      assertNull(string5);
      assertFalse(priorityQueue0.contains(string2));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string6 = locale1.getDisplayCountry(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("\uC774\uD0C8\uB9AC\uC544", string6);
      assertNotNull(string6);
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string7 = StringUtils.lowerCase(">/T2A", locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals(">/t2a", string7);
      assertNotNull(string7);
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string8 = StringUtils.center("frw,a[\"=RLg", 54, '0');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertEquals("000000000000000000000frw,a[\"=RLg0000000000000000000000", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("^h_/QwOf#@^F<ma", "62");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^h_/QwOf#@^F<ma", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^h_/QwOf#@^F<ma", 31);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "62", (CharSequence) "^h_/QwOf#@^F<ma", 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "^h_/QwOf#@^F<ma";
      boolean boolean0 = StringUtils.equalsAny("\r", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultString("\r", "62");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("Illegal range. There's no way to get from %s to %s with a step^tq3Illegal range. There's no way to get from %s to %s with a step ", "62");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step^tq3Illegal range. There's no way to get from %s to %s with a step ", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance(":@AvzUF@%0p/K4", "Illegal range. There's no way to get from %s to %s with a step^tq3Illegal range. There's no way to get from %s to %s with a step ");
      assertEquals(0.39, double0, 0.01);
      
      String string4 = StringUtils.rightPad("Illegal range. There's no way to get from %s to %s with a step^tq3Illegal range. There's no way to get from %s to %s with a step ", 40, "62");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step^tq3Illegal range. There's no way to get from %s to %s with a step ", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[1]);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("yL'}Dsa5:to,X^0+m", "\"mGjuc~Y6 Dg2GD", 31);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "^h_/QwOf#@^F<ma", (CharSequence) "62", 27);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(15, int2);
      
      double double1 = StringUtils.getJaroWinklerDistance("\r", charSequenceArray0[0]);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(1.0, double1, 0.01);
      
      String string5 = StringUtils.capitalize((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[2] = (CharSequence) "...";
      String string0 = StringUtils.wrapIfMissing("2|U]2Y->3-Il", 'Z');
      assertEquals("Z2|U]2Y->3-IlZ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("M-E|}uAY:YA?~Tu{V6", "^h_/Qf#@^F<ma", 16);
      assertEquals("M-^h_/Qf#@^F<ma6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.chomp(",aBkcZir?N7t7]zQI1");
      assertEquals(",aBkcZir?N7t7]zQI1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(",aBkcZir?N7t7]zQI1");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(",aBkcZir?N7t7]zQI1");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'n';
      boolean boolean1 = StringUtils.containsNone((CharSequence) ",aBkcZir?N7t7]zQI1", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'t', 'n'}, charArray0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(13, stringArray0.length);
      assertEquals(",", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isNotBlank(",");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) ",", (CharSequence[]) stringArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(13, stringArray0.length);
      assertTrue(boolean3);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      charArray1[1] = '6';
      charArray1[2] = 't';
      charArray1[3] = 'K';
      charArray1[4] = 'K';
      charArray1[5] = 't';
      charArray1[6] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray1, 1, 1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray1.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'K', '6', 't', 'K', 'K', 't', 't'}, charArray1);
      assertEquals(7, charBuffer0.capacity());
      assertEquals("6", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(1, charBuffer0.position());
      
      boolean boolean4 = StringUtils.contains((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray1.length);
      assertTrue(boolean4);
      assertArrayEquals(new char[] {'K', '6', 't', 'K', 'K', 't', 't'}, charArray1);
      assertEquals(7, charBuffer0.capacity());
      assertEquals("6", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(1, charBuffer0.position());
      
      String string2 = StringUtils.abbreviateMiddle("java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null~e@3YMYZ\"&kq:", "empty", 27);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean5 = StringUtils.contains((CharSequence) charBuffer0, (CharSequence) ",");
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray1.length);
      assertFalse(boolean5);
      assertArrayEquals(new char[] {'K', '6', 't', 'K', 'K', 't', 't'}, charArray1);
      assertEquals(7, charBuffer0.capacity());
      assertEquals("6", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(1, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = ',';
      charArray0[2] = '=';
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("...", "...");
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.rightPad("", 91, "...");
      assertEquals("...........................................................................................", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "[m<5SSR", 11);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "[m<5SSR", (CharSequence) "p{InCombiningDiacriticalMarks}+", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("1UG8w#@?Q)!L.gdMinimum abbreviation width is %d");
      assertEquals(21, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(21, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "1UG8w#@?Q)!L.gdMinimum abbreviation width is %d", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("Minimum abbreviation width with offset is %d", ".ft6~<A:nW$Kq2SF", locale0);
      assertEquals(0, int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension");
      assertEquals("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", '6');
      assertTrue(string1.equals((Object)string0));
      assertEquals("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("l", "~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("l", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "l", "DQHVgrndJM@x@[]T&A");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      int int0 = StringUtils.compare("Display name '%s' %sCart", "Display name '%s' %sCart", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.replaceOnce("{displayName}", "b", "{displayName}");
      assertEquals("{displayName}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 0, '2');
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-444);
      String string2 = StringUtils.join(intArray0, 'd');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, intArray0.length);
      assertEquals("-444", string2);
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-444)}, intArray0);
      
      String string3 = StringUtils.leftPad("-;i", (-444), '2');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-;i", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("{displayName}");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{displayName}", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '\'';
      charArray0[1] = 'd';
      charArray0[4] = '2';
      charArray0[5] = 'd';
      charArray0[6] = '2';
      charArray0[7] = 'd';
      charArray0[8] = 'd';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "-;i", charArray0);
      assertTrue(int1 == int0);
      assertEquals(9, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'2', 'd', '\'', '\u0000', '2', 'd', '2', 'd', 'd'}, charArray0);
      
      String string5 = StringUtils.wrapIfMissing("{displayName}", 'i');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("i{displayName}i", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("#C|KT;IBm");
      assertFalse(boolean0);
      
      String string0 = StringUtils.overlay("em]_@7N", "em]_@7N", 2888, (-1621));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-625);
      intArray0[1] = 0;
      intArray0[4] = 0;
      intArray0[3] = (-547);
      intArray0[4] = (-625);
      intArray0[5] = 1297;
      intArray0[6] = 97;
      String string0 = StringUtils.join(intArray0, '8');
      assertEquals(7, intArray0.length);
      assertEquals("-62580808-5478-62581297897", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-625), 0, 0, (-547), (-625), 1297, 97}, intArray0);
      
      String string1 = StringUtils.toRootUpperCase("-62580808-5478-62581297897");
      assertTrue(string1.equals((Object)string0));
      assertEquals("-62580808-5478-62581297897", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("!ss1", "\"mGjuc~Y6 Dg2GD");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      String string3 = StringUtils.join(shortArray0, 'm');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, shortArray0.length);
      assertEquals("0m0m0m0m0m0m0m0", string3);
      assertNotNull(string3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      String string4 = StringUtils.overlay("vC7dOO%5:", "-62580808-5478-62581297897", (-886), 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("-62580808-5478-62581297897vC7dOO%5:", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("-62580808-5478-62581297897", ")|f$RmO", 1431655765, (-547));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(")|f$RmO", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny(")|f$RmO", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase(")|f$RmO", "-62580808-5478-62581297897", charSequenceArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals(0, charSequenceArray0.length);
      assertEquals(")|f$RmO-62580808-5478-62581297897", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("0VoEMrf l3K$");
      assertEquals("0VoEMrfl3K$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("|zbJR=H$*m|");
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceFirst("|zbJR=H$*m|", (String) null, (String) null);
      assertEquals("|zbJR=H$*m|", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "|zbJR=H$*m|", 1955);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart(")7J8", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals(")7J8", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter(")7J8", 2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("pRp?R3)LRgRaiG", (-5005));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("pRp?R3)LRgRaiG", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compare("=)UN!#1vL\"$8", "|zbJR=H$*m|", false);
      assertEquals((-63), int0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("1)U#", '0');
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "pRp?R3)LRgRaiG";
      charSequenceArray1[1] = (CharSequence) ")7J8";
      charSequenceArray1[2] = (CharSequence) "=)UN!#1vL\"$8";
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("=)UN!#1vL\"$8"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string4 = StringUtils.join((List<?>) vector0, '4', 2297, (-5005));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(vector0.contains("=)UN!#1vL\"$8"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "|zbJR=H$*m|";
      String string5 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "|zbJR=H$*m|", "", 419);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      
      charSequenceArray1[5] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray1[6] = (CharSequence) "|zbJR=H$*m|";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(7, charSequenceArray1.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = " must be static.";
      int int0 = StringUtils.indexOf((CharSequence) stringArray0[1], (CharSequence) stringArray0[0]);
      assertEquals(6, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "FwQ");
      assertEquals(6, stringArray0.length);
      assertEquals("FwQFwQStrings must not be nullFwQ must be static.FwQFwQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("bx] VKa|]r", 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals("bx] VKa|]r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Strings must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, (String) null, 322, 322);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(6, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "FwQFwQStrings must not be nullFwQ must be static.FwQFwQ", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, int1);
      
      String string4 = StringUtils.join(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(6, stringArray0.length);
      assertEquals("Strings must not be null must be static.", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfAny("Strings must not be null", stringArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, stringArray0.length);
      assertEquals(0, int2);
      
      String[] stringArray1 = StringUtils.split("Strings must not be null must be static.");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((int[]) null, 'r', (-1593), 10);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte)4;
      String string2 = StringUtils.join(byteArray0, 'r');
      assertEquals(9, byteArray0.length);
      assertEquals("67r18r-52r-96r95r2r44r-97r4", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)67, (byte)18, (byte) (-52), (byte) (-96), (byte)95, (byte)2, (byte)44, (byte) (-97), (byte)4}, byteArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 213L;
      longArray0[1] = (long) 'r';
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      String string3 = StringUtils.join(longArray0, 'r');
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, longArray0.length);
      assertEquals("213r114r2r2", string3);
      assertNotNull(string3);
      assertArrayEquals(new long[] {213L, 114L, 2L, 2L}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(5, charArray0.length);
      assertEquals("rrrrr", string4);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'r'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`I({]RH6(0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = "`I({]RH6(0";
      stringArray0[3] = "`I({]RH6(0";
      stringArray0[4] = "`I({]RH6(0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("`I({]RH6(0", string0);
      assertNotNull(string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("`I({]RH6(0"));
      assertEquals(0, priorityQueue0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("`I({]RH6(0"));
      
      boolean boolean0 = treeSet0.add("`I({]RH6(0");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("`I({]RH6(0"));
      
      Stream<String> stream0 = treeSet0.parallelStream();
      assertNotNull(stream0);
      assertTrue(treeSet0.contains("`I({]RH6(0"));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertTrue(treeSet0.contains("`I({]RH6(0"));
      assertTrue(navigableSet0.contains("`I({]RH6(0"));
      assertEquals(1, navigableSet0.size());
      assertFalse(navigableSet0.isEmpty());
      
      String string1 = StringUtils.left("`I({]RH6(0", 160);
      assertTrue(string1.equals((Object)string0));
      assertEquals("`I({]RH6(0", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "`I({]RH6(0", (CharSequence) "`I({]RH6(0", 16);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("`I({]RH6(0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`i({]rh6(0", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "`I({]RH6(0", charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("`I({]RH6(0");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "^h_/QwOf#@^F<ma", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 't');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-591);
      intArray0[1] = (-591);
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.remove("/2I", '1');
      assertEquals("/2I", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "/2I", (CharSequence) "/2I");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("/2I", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "/2I", (CharSequence) "/2I", 48);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("Sp[VJ*ad%>");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("sp[vj*ad%>", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = '1';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = 't';
      charArray0[5] = 'a';
      charArray0[6] = '=';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "/2I", charArray0);
      assertFalse(int1 == int0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'*', '1', '4', '4', 't', 'a', '='}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("/2I");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((double[]) null, ';');
      assertNull(string3);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Sp[VJ*ad%>", (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) " LNid9>%u", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((int[]) null, 'r', (-1593), 10);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      String string2 = StringUtils.center((String) null, 835, '-');
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "~/]&g*DSW_t'5:GV*", 40);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (byte)82);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringBefore("t/t7P#2", "t/t7P#2");
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("%[Suc=q");
      assertFalse(string4.equals((Object)string3));
      assertEquals("%[Suc=q", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'-', '-', '-', 'r', 'r'}, charArray0);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "t/t7P#2", charArray0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int3);
      assertArrayEquals(new char[] {'-', '-', '-', 'r', 'r'}, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1593);
      intArray0[1] = 1529;
      intArray0[2] = 722;
      intArray0[3] = 10;
      String string5 = StringUtils.join(intArray0, '^', 1529, 1287);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals(4, intArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new int[] {(-1593), 1529, 722, 10}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-625);
      intArray0[1] = 0;
      intArray0[4] = 0;
      intArray0[3] = (-547);
      intArray0[4] = (-625);
      intArray0[5] = 1297;
      intArray0[6] = 97;
      String string0 = StringUtils.join(intArray0, '8');
      assertEquals(7, intArray0.length);
      assertEquals("-62580808-5478-62581297897", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-625), 0, 0, (-547), (-625), 1297, 97}, intArray0);
      
      String string1 = StringUtils.toRootUpperCase("-62580808-5478-62581297897");
      assertTrue(string1.equals((Object)string0));
      assertEquals("-62580808-5478-62581297897", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("!ss1", "\"mGjuc~Y6 Dg2GD");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      String string3 = StringUtils.join(shortArray0, 'm');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(8, shortArray0.length);
      assertEquals("0m0m0m0m0m0m0m0", string3);
      assertNotNull(string3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      String string4 = StringUtils.overlay("vC7dOO%5:", "-62580808-5478-62581297897", (-886), 0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("-62580808-5478-62581297897vC7dOO%5:", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("empty", (-625), (int) (short)0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "-62580808-5478-62581297897");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("vC7dOO%5:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String string0 = StringUtils.getDigits(",nD)!v");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 64, 'm');
      assertFalse(string2.equals((Object)string0));
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'm';
      floatArray0[1] = (float) 64;
      floatArray0[2] = (float) 64;
      floatArray0[3] = (float) 64;
      floatArray0[4] = (float) 'm';
      String string3 = StringUtils.join(floatArray0, 'm');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, floatArray0.length);
      assertEquals("109.0m64.0m64.0m64.0m109.0", string3);
      assertNotNull(string3);
      assertArrayEquals(new float[] {109.0F, 64.0F, 64.0F, 64.0F, 109.0F}, floatArray0, 0.01F);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ",nD)!v", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("*qSv=wx&SYS$BI", '=', '=');
      assertEquals("*qSv=wx&SYS$BI", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, '=');
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("^h_/QwOf#@^F<ma", "rqTBSe?1TXAvr;/", "Another failed with one of the specified exceptions.");
      assertFalse(string2.equals((Object)string0));
      assertEquals("^h_wQwOf#@^F<ma", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("*U4evTG4t<!i", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("*U4evTG4t<!i", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("^h_/QwOf#@^F<ma", supplier0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("^h_/QwOf#@^F<ma", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.split("...");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      boolean boolean1 = StringUtils.endsWithAny("*qSv=wx&SYS$BI", stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "^h_/QwOf#@^F<ma", "^h_wQwOf#@^F<ma");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("^h_/QwOf#@^F<ma");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.ordinalIndexOf("Another failed with one of the specified exceptions.", "*U4evTG4t<!i", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '@', 3011, Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "offset cannot be negative");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "offset cannot be negative";
      objectArray0[1] = (Object) "offset cannot be negative";
      String string1 = StringUtils.join(objectArray0, 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertEquals("offset cannot be negativeKoffset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("Display name '%s' %s", 'K');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("KDisplay name '%s' %sK", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", (-4065), 'K');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = '<';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      charArray0[7] = 'K';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'K', 'K', 'K', '<', 'K', 'K', 'K', 'K'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("3H1J+GMWD7C2`ph)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.getDigits("6R");
      assertEquals("6", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "6R", (CharSequence) "6", 1543);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = objectArray0[4];
      String string0 = StringUtils.joinWith("", objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.CartesianProductTestExtension", "iXTZ~PX*w_S}iqg[Lf", "iXTZ~PX*w_S}iqg[Lf", 33);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[0];
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      
      String string2 = locale1.getDisplayCountry(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\uC774\uD0C8\uB9AC\uC544", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      
      String string3 = StringUtils.unwrap("!':l+H", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!':l+H", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "e{/=TGm)h]_mg");
      assertNotNull(charBuffer0);
      assertEquals(13, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(13, charBuffer0.capacity());
      assertEquals("e{/=TGm)h]_mg", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(13, charBuffer0.limit());
      assertEquals(13, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      
      String string0 = StringUtils.toRootLowerCase("e{/=TGm)h]_mg");
      assertEquals("e{/=tgm)h]_mg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("e{/=TGm)h]_mg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("e{/=TGm)h]_mg", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "e{/=tgm)h]_mg", (CharSequence) "e{/=TGm)h]_mg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String string0 = StringUtils.substring(" vs ", 132, 132);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("x='x?,~G~6]rmU/5:E", '`', '`');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("x='x?,~G~6]rmU/5:E", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("x='x?,~G~6]rmU/5:E", 132, 'q');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqx='x?,~G~6]rmU/5:Eqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "~/]&g*DSW_t'5:GV*", (-981));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("~/]&g*DSW_t'5:GV*", "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substringBefore("~e@3YMYZ\"&kq:", " vs ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("~e@3YMYZ\"&kq:");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll((String) null, " vs ", "Another failed with one of the specified exceptions.");
      assertNull(string6);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'`', '`', '`'}, charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "x='x?,~G~6]rmU/5:E";
      objectArray0[1] = (Object) "x='x?,~G~6]rmU/5:E";
      objectArray0[2] = (Object) "~e@3YMYZ\"&kq:";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) " vs ";
      String string7 = StringUtils.joinWith("\n", objectArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals(7, objectArray0.length);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.center("?Q*PN#", 56, "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeee?Q*PN#eeeeeeeeeeeeeeeeeeeeeeeee", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.leftPad("A", 10, "1}Z6PSPJbpc");
      assertEquals("1}Z6PSPJbA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '1');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" is not in the range '0' - '9' is not in the range '0' - '9'", ',');
      assertEquals(", is not in the range '0' - '9' is not in the range '0' - '9',", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\"mGjuc~Y6 Dg2GD");
      assertEquals("\"mGjuc~Y6 Dg2GD", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("\"mGjuc~Y6 Dg2GD", "\"mGjuc~Y6 Dg2GD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 81, "}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("dh&/v+Hg~h.T1+S", 'Z');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Zdh&/v+Hg~h.T1+SZ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "offset cannot be negative";
      String string1 = StringUtils.remove("/2I", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(1, charSequenceArray1.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("of arguments source.", "", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, charSequenceArray1.length);
      assertEquals("of arguments source.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('F', (-255));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "...";
      stringArray0[2] = "X5";
      stringArray0[3] = "";
      stringArray0[4] = "...";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split((String) null, 'r');
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "OG~q%Wj,$vD7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.join((float[]) null, 'k');
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.split("E4jgJM#m?QGI");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.containsNone(charSequenceArray0[3], "Classpath resource [");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3);
      
      String string3 = StringUtils.stripEnd((String) null, "E4jgJM#m?QGI");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "n2*wy^5");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.lastIndexOfAny("n2*wy^5", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.getDigits("hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT hcT 2UG=rHB*|[DvM-$+=");
      assertEquals("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '9', (-1433), 774);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1433
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      String string1 = StringUtils.unwrap(")7J8", '/');
      assertFalse(string1.equals((Object)string0));
      assertEquals(")7J8", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) ")7J8";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width is %d";
      String string2 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is %d", "", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-581);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short) (-2568);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)139;
      shortArray0[5] = (short) (-919);
      shortArray0[6] = (short)1066;
      shortArray0[7] = (short)219;
      shortArray0[8] = (short) (-1316);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '/', (int) (short) (-1316), 2121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1316
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBeforeLast("66ZZ1j|2(", "org.apache.commons.lang3.StringUtils");
      assertEquals("66ZZ1j|2(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("kmhZe zG;gL5'", "66ZZ1j|2(");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "66ZZ1j|2(", (CharSequence) "org.apache.commons.lang3.StringUtils", 16);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("66ZZ1j|2(");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.trimToEmpty("66ZZ1j|2(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("66ZZ1j|2(", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("66ZZ1j|2(", supplier0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("66ZZ1j|2(", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "66ZZ1j|2(", (CharSequence[]) stringArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2);
      
      String string3 = StringUtils.uncapitalize("66ZZ1j|2(");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("66ZZ1j|2(", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("q3P=rLV1}C?H", "maxWith cannot be negative");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("q3P=rLV1}C?H", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("", "Xboo:'*11J`bl2EW.", "66ZZ1j|2(", 122);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.endsWithAny("maxWith cannot be negative", stringArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3);
      
      String string6 = StringUtils.removeStartIgnoreCase("maxWith cannot be negative", "maxWith cannot be negative");
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)80;
      String string2 = StringUtils.join(byteArray0, 'M', 1189, 1189);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, byteArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)56, (byte)56, (byte)56, (byte)80}, byteArray0);
      
      String string3 = StringUtils.defaultString("csmRXYg5SU>yuY!");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("csmRXYg5SU>yuY!", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "{'T)G+A!ttO=k02", (CharSequence) "csmRXYg5SU>yuY!", (-2290));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("{'T)G+A!ttO=k02", "csmRXYg5SU>yuY!");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("{'T)G+A!ttO=k02", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{'T)G+A!ttO=k02", "maxWith cannot be negative", 321);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isNumericSpace("csmRXYg5SU>yuY!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, 45);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      stringArray0[2] = "...";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("~e@3YMYZ\"&kq:java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null");
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.rightPad("=W3]0p", (-6713), "=W3]0p");
      assertFalse(string1.equals((Object)string0));
      assertEquals("=W3]0p", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "=W3]0p", (CharSequence) "~e@3YMYZ\"&kq:java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay(" vs ", " vs ", 14, 14);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs  vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase(" vs  vs ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" vs  vs ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric(" vs ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string3 = StringUtils.substring("org.apache.commons.lang3.StringUtils", 1045);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("#");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.startsWith("#", "#");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (char[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.countMatches((CharSequence) " vs  vs ", (CharSequence) " vs ");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) " vs ", charSequenceArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("org.apache.commons.lang3.StringUtils", "66ZZ1j|2(", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("L{[,", "Dk_>T!v]=7");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase("org.apache.commons.lang3.StringUtils", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate((String) null, 2747);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.strip("Object varargs must not be null", "Dk_>T!v]=7");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 821);
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      String string0 = StringUtils.center("^h_/QwOf#@^F<ma", 16, 'R');
      assertEquals("^h_/QwOf#@^F<maR", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("^h_/QwOf#@^F<maR", "^h_/QwOf#@^F<maR", 16);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(16, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 3);
      assertEquals(", L", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ", L", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = ", Length: 0";
      stringArray0[3] = ", L";
      stringArray0[4] = ", Length: 0";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing(", Length: 0", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) ", L");
      assertEquals((-1), int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      String string3 = StringUtils.join(charArray0, 'J');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, charArray0.length);
      assertEquals("aJa", string3);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'a', 'a'}, charArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) ", L", (CharSequence[]) stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean1);
      
      String string4 = StringUtils.stripToEmpty("java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance(", Length: 0", "java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0");
      assertEquals(0.38, double0, 0.01);
      
      String string5 = StringUtils.getDigits("iA%R/Fcu");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Iterator<?>) null, ", Length: 0");
      assertNull(string6);
      
      String string7 = StringUtils.substringAfter(", L", "DefaultTimeZone");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringBefore(", Length: 0", ", Length: 0");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = null;
      String string1 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string2 = null;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "", 1);
      assertEquals(1, int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "O=k02", false);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      String string0 = "java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0Object varargs must not be null";
      String string1 = StringUtils.removePattern("java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0Object varargs must not be null", "F9+.Dis=Nj");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0Object varargs must not be null", "java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0Object varargs must not be null");
      assertTrue(boolean0);
      
      String string2 = "=)UN!#1vL\"$8";
      int int0 = StringUtils.compareIgnoreCase("M@", "=)UN!#1vL\"$8", true);
      assertEquals(48, int0);
      
      String string3 = " vs ";
      // Undeclared exception!
      try { 
        Charset.forName("=)UN!#1vL\"$8");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =)UN!#1vL\"$8
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '|');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("", "", 2555);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("", "]{lu_t'OxC ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("]{lu_t'OxC ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("#", 2555);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("]{lu_t'OxC ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("]{lu_t'OxC ", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWith("", "]{lu_t'OxC ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.substringAfterLast(string0, "]{lu_t'OxC ");
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.right("{index}", 0);
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOf((CharSequence) "(", 2555, 1929);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("\\u", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.join(stringArray0);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertEquals(1, stringArray0.length);
      assertEquals("(", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", 1929);
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string7));
      assertEquals("", string10);
      assertNotNull(string10);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.chomp(",aBkcZir?N7t7]zQI1");
      assertEquals(",aBkcZir?N7t7]zQI1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(",aBkcZir?N7t7]zQI1");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(",aBkcZir?N7t7]zQI1");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad(",aBkcZir?N7t7]zQI1", 12);
      assertTrue(string1.equals((Object)string0));
      assertEquals(",aBkcZir?N7t7]zQI1", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ",aBkcZir?N7t7]zQI1";
      charSequenceArray0[1] = (CharSequence) ",aBkcZir?N7t7]zQI1";
      charSequenceArray0[2] = (CharSequence) ",aBkcZir?N7t7]zQI1";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing(",aBkcZir?N7t7]zQI1", ",aBkcZir?N7t7]zQI1");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(",aBkcZir?N7t7]zQI1", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(13, stringArray0.length);
      assertEquals(",", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNotBlank(charSequenceArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) ",aBkcZir?N7t7]zQI1";
      charSequenceArray1[1] = (CharSequence) ",aBkcZir?N7t7]zQI1";
      charSequenceArray1[2] = (CharSequence) ",aBkcZir?N7t7]zQI1";
      charSequenceArray1[3] = (CharSequence) ",aBkcZir?N7t7]zQI1";
      charSequenceArray1[4] = (CharSequence) ",";
      boolean boolean2 = StringUtils.containsAny((CharSequence) ",aBkcZir?N7t7]zQI1", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(5, charSequenceArray1.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.contains(charSequenceArray0[2], charSequenceArray0[0]);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean3);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(",aBkcZir?N7t7]zQI1"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-28);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((byte) (-28));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "8";
      charSequenceArray0[1] = (CharSequence) "8";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "*U4evTG4t<!i");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("^h_/QwOf#@^F<ma", "...");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertEquals("*U4evTG4t<!i", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("...", '=', '_');
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("^h_/QwOf#@^F<ma", 'c');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("c^h_/QwOf#@^F<mac", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars((String) null, " vs ", "*qSv=wx&SYS$BI");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("^h_/QwOf#@^F<ma", " vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.stripToEmpty((String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertEquals(0.38, double0, 0.01);
      
      int int0 = StringUtils.compare("c^h_/QwOf#@^F<mac", "*qSv=wx&SYS$BI");
      assertEquals(57, int0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("...", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("c6");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissing((String) null, "...", (CharSequence[]) null);
      assertNull(string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("..."));
      assertEquals(0, priorityQueue0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = priorityQueue0.add(object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains(object0));
      assertTrue(priorityQueue0.contains(object1));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains(object0));
      assertTrue(priorityQueue0.contains(object1));
      assertEquals(1, priorityQueue0.size());
      
      String string4 = StringUtils.prependIfMissing("", "", (CharSequence[]) null);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      assertFalse(treeSet1.contains(string0));
      
      NavigableSet<String> navigableSet0 = treeSet1.descendingSet();
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(navigableSet0);
      assertFalse(treeSet1.contains(string0));
      assertFalse(navigableSet0.contains(string0));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      
      String string5 = StringUtils.join((Iterable<?>) navigableSet0, '-');
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(treeSet1.contains(string0));
      assertFalse(navigableSet0.contains(string0));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("[Ly.-&R]~p_?7Ex_");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "[Ly.-&R]~p_?7Ex_", (CharSequence) "[Ly.-&R]~p_?7Ex_");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "U.", (CharSequence) "mRs1Uxdx8?nS4");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "");
      assertEquals(8, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)17;
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("Execution of '%s' took [%d] ms.");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("Execution of '%s' took [%d] ms."));
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("Execution of '%s' took [%d] ms."));
      assertEquals(2, priorityQueue0.size());
      
      boolean boolean2 = priorityQueue0.add("Execution of '%s' took [%d] ms.");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains("Execution of '%s' took [%d] ms."));
      assertEquals(3, priorityQueue0.size());
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Execution of '%s' took [%d] ms.Execution of '%s' took [%d] ms.", string1);
      assertNotNull(string1);
      assertTrue(priorityQueue0.contains("Execution of '%s' took [%d] ms."));
      assertFalse(priorityQueue0.contains(string1));
      assertEquals(3, priorityQueue0.size());
      
      String string2 = StringUtils.stripToEmpty("Execution of '%s' took [%d] ms.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Execution of '%s' took [%d] ms.", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String string0 = StringUtils.left("Minimum abbreviation width with offset is %d", 1);
      assertEquals("M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(2, priorityQueue0.size());
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "|&=,BBM~oe1?C");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d|&=,BBM~oe1?CMinimum abbreviation width with offset is %d", string2);
      assertNotNull(string2);
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(2, priorityQueue0.size());
      
      String string3 = StringUtils.substring("V*Bsg1!pr;Wz1g0ov", (-1675), (-1675));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("|o7: e-h11f\"M1", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("|o7: e-h11f\"M1", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "M";
      charSequenceArray0[1] = (CharSequence) "V*Bsg1!pr;Wz1g0ov";
      charSequenceArray0[2] = (CharSequence) "Object varargs must not be null";
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string5 = StringUtils.trim("Object varargs must not be null");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      String string6 = StringUtils.valueOf(charArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals(1, charArray0.length);
      assertEquals("O", string6);
      assertNotNull(string6);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains((-1675)));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string7 = StringUtils.join((List<?>) vector0, ']', 7, 6);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(vector0.contains((-1675)));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "8k7s", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, ']');
      assertNull(stringArray0);
      
      String string8 = StringUtils.abbreviateMiddle("jBgb6<Q93j#yx1", ",:r'F", 0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("jBgb6<Q93j#yx1", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add(" is not in the range '0' - '9' is not in the range '0' - '9'");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(" is not in the range '0' - '9' is not in the range '0' - '9'"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add(" is not in the range '0' - '9' is not in the range '0' - '9'");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(" is not in the range '0' - '9' is not in the range '0' - '9'"));
      assertEquals(2, priorityQueue0.size());
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, " is not in the range '0' - '9' is not in the range '0' - '9'");
      assertEquals(" is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9' is not in the range '0' - '9'", string0);
      assertNotNull(string0);
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains(" is not in the range '0' - '9' is not in the range '0' - '9'"));
      assertEquals(2, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.getDigits("Annotat");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("Annotat", "/.]qp4;+n[NTD5j>.ga");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Annotat", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1416);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "/.]qp4;+n[NTD5j>.ga", (CharSequence) "`GQRQ't?dFq]", 1416);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substring("D9*:Y(~", (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("~", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.deleteWhitespace(";9c");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(";9c", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = 'X';
      int int2 = StringUtils.compare(";9c", (String) null, false);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "~", (CharSequence) "Annotat");
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("_tl~", 0, (-615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 158
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '.');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("", "", 2555);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("", "]{lu_t'OxC ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("]{lu_t'OxC ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("#", 2555);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("]{lu_t'OxC ");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("]{lu_t'OxC ", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWith("", "]{lu_t'OxC ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.substringAfterLast(string0, "]{lu_t'OxC ");
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.right("{index}", 0);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOf((CharSequence) "(", 2555, 1929);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.substringAfter("", "]{lu_t'OxC ");
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.removeIgnoreCase("", "%s: Could not resolve parameter by name (%s).");
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertEquals("", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.abbreviate("", "_kR\"*", 2555);
      assertTrue(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertTrue(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertTrue(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertEquals("", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 252, 252);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 'j';
      charArray0[4] = 'I';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      boolean boolean0 = StringUtils.containsNone(charSequenceArray0[1], charArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'j', 't', 't', 'j', 'I', 'K', 'K'}, charArray0);
      
      String string1 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isNotBlank(charSequenceArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[1], (CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string2 = StringUtils.abbreviateMiddle("1<", (String) null, 51);
      assertEquals("1<", string2);
      assertNotNull(string2);
      
      boolean boolean4 = StringUtils.contains(charSequenceArray0[0], (CharSequence) null);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String string0 = StringUtils.strip(" noXclone methbd", "^h_/QwOf#@^F<ma");
      assertEquals(" noXclone methbd", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate(" noXclone methbd", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" noXclone methbd", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      int int0 = StringUtils.compare("Display name '%s' %sCart", "Display name '%s' %sCart", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.replaceOnce("{displayName}", "b", "{displayName}");
      assertEquals("{displayName}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 0, '2');
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-444);
      String string2 = StringUtils.join(intArray0, 'd');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, intArray0.length);
      assertEquals("-444", string2);
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-444)}, intArray0);
      
      String string3 = StringUtils.leftPad("-;i", (-444), '2');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("-;i", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("8z`\"^>fQWncTU5R", ":", "\r");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("8z`\"^>fQWncTU5R", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("{ym");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("{ym", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference("{[0-9]+}", "RF.NY<mTw*(D$C@#cj");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("RF.NY<mTw*(D$C@#cj", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.split("Ku}pQ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.defaultString("RB v", (String) null);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("RB v", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.length("{ym");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "b", (CharSequence) "Display name '%s' %sCart");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay(" vs ", " vs ", 14, 14);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs  vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase(" vs  vs ", "Display name '%s' %sCart");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs  vs ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars(" vs  vs ", '>', 'H');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" vs  vs ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap(" vs ", '=');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("= vs =", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("Dk_>T!v]=7", "f", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Dk_>T!v]=7", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\"mGjuc~Y6 Dg2GD";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) "= vs =";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string6 = StringUtils.right("Dk_>T!v]=7", 14);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Dk_>T!v]=7", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("Dk_>T!v]=7", " vs  vs ", charSequenceArray0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals(3, charSequenceArray0.length);
      assertEquals(" vs  vs Dk_>T!v]=7", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfter(" vs ", (String) null);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.removeIgnoreCase("org.apache.commons.lang3.StringUtils", " vs ");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.rotate("aNW7hF-019a", 1680);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertEquals("7hF-019aaNW", string10);
      assertNotNull(string10);
      
      boolean boolean0 = StringUtils.startsWithAny("Dk_>T!v]=7", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string11 = StringUtils.strip(" vs  vs ", (String) null);
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string8));
      assertEquals("vs  vs", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[H~$,jF',lxa.", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "3Ko-?70a<}");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3Ko-?70a<}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceIgnoreCase("", "Illegal range. The step cannot be zero.", "", 33);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-46);
      String string4 = StringUtils.join(byteArray0, '?', 2619, 1081);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals(5, byteArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-1), (byte)103, (byte)37, (byte) (-46)}, byteArray0);
      
      String string5 = StringUtils.lowerCase("");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-237));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String string0 = StringUtils.strip("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension");
      assertEquals("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char char0 = '}';
      char char1 = 'w';
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "#");
      assertEquals(0, int0);
      
      String string2 = "qcx_$>|Q#W";
      String string3 = StringUtils.defaultIfBlank("\n", "qcx_$>|Q#W");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("qcx_$>|Q#W", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(")~63&7I4o3m>qz}\"nT", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      
      int int1 = (-2319);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'X', (-2319), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2319
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.rightPad(" vs ", (-1953), 'q');
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, '5');
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, shortArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", 0, (-1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "!ec/7wSoB", "\n");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.reverse(" vs ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" sv ", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("4~j$p%rc3FV|uM", 'J');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'q';
      floatArray0[2] = (float) 0;
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      
      String string4 = StringUtils.join(floatArray0, '5', 1917, (-2093));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(3, floatArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertArrayEquals(new float[] {0.0F, 113.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.substring("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", (-338), 1917);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.strip("]&5-zcN*~/\"O=Pb6\"");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("]&5-zcN*~/\"O=Pb6\"", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      int int0 = StringUtils.compare("Display name '%s' %sCart", "Display name '%s' %sCart", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.replaceOnce("{displayName}", "b", "{displayName}");
      assertEquals("{displayName}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 0, '2');
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-444);
      String string2 = StringUtils.join(intArray0, 'd');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, intArray0.length);
      assertEquals("-444", string2);
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-444)}, intArray0);
      
      String string3 = StringUtils.leftPad("-;i", (-444), '2');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-;i", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("{displayName}");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("{displayName}", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '\'';
      charArray0[3] = 'd';
      charArray0[4] = '2';
      charArray0[5] = 'd';
      charArray0[6] = '2';
      charArray0[7] = 'd';
      charArray0[8] = 'd';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "-;i", charArray0);
      assertTrue(int1 == int0);
      assertEquals(9, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'2', '2', '\'', 'd', '2', 'd', '2', 'd', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '3', 2, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Search and Replace array lengths don't match: ", 7);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("4E.G");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.overlay("qw8HT8H", "4E.G", 7, 7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("qw8HT8H4E.G", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'W';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'O', (-1575), 589);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1575
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.center(string1, 49, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '>';
      floatArray0[1] = (float) 49;
      floatArray0[2] = (float) 49;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) '>';
      floatArray0[5] = (float) 0;
      floatArray0[6] = 0.0F;
      String string3 = StringUtils.join(floatArray0, '!', 49, 49);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(7, floatArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new float[] {62.0F, 49.0F, 49.0F, 0.0F, 62.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substring("offset cannot be negative", (-2139), 52);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", '!');
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("kmhZe zG;gL5'", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("", "org.junitpioneer.jupiter.params.DisableIfNameExtension", (-4041));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("", "Dk_>T!v]=7Display name '%s' %sCart");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Dk_>T!v]=7Display name '%s' %sCart", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("SXHQj=SH1", "SXHQj=SH1", "Required at least one of the following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.", (-822));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Required at least one of the following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '!';
      longArray0[1] = (long) '2';
      longArray0[2] = (long) '!';
      String string4 = StringUtils.join(longArray0, 'G', 256, (-822));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(3, longArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertArrayEquals(new long[] {33L, 50L, 33L}, longArray0);
      
      String string5 = StringUtils.substringBetween("", "#", "Xw(c[F]vGtar");
      assertNull(string5);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      String string6 = locale0.getDisplayCountry(locale0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("\uB300\uD55C\uBBFC\uAD6D", string6);
      assertNotNull(string6);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      String string7 = StringUtils.lowerCase("Required at least one of the following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.", locale0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("required at least one of the following: @disableifargument, @disableifallarguments, @disableifanyargument but found none.", string7);
      assertNotNull(string7);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      String string8 = StringUtils.center("Dk_>T!v]=7Display name '%s' %sCart", (-4041), '2');
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Dk_>T!v]=7Display name '%s' %sCart", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      objectArray0[3] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '[';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'T', '['}, charArray0);
      
      String string0 = StringUtils.substringAfter("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "Minimum abbreviation width is %d", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly(" must be static.", (String[]) null, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" must be static.", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Object varargs must not be null", "Object varargs must not be null");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)56;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)80;
      String string1 = StringUtils.join(byteArray0, '=', (-1), (-1));
      assertEquals(7, byteArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)56, (byte)0, (byte)80, (byte)56, (byte)80}, byteArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", 499);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.joinWith("Y|GvMYV @\"60@=Fj", stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "Y|GvMYV @\"60@=Fj", "njb:df8iK");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", ",nD)!v");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 64, 'y');
      assertFalse(string2.equals((Object)string0));
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'm';
      floatArray0[1] = (float) 64;
      floatArray0[2] = (float) 64;
      floatArray0[3] = (float) 64;
      floatArray0[4] = (float) 'm';
      String string3 = StringUtils.join(floatArray0, 'm');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(5, floatArray0.length);
      assertEquals("109.0m64.0m64.0m64.0m109.0", string3);
      assertNotNull(string3);
      assertArrayEquals(new float[] {109.0F, 64.0F, 64.0F, 64.0F, 109.0F}, floatArray0, 0.01F);
      
      String string4 = StringUtils.removeEnd("Illegal range. There's no way to get from %s to %s with a step of %s.", "8");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("[ 0|");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("[ 0|", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 1);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfter("T{-axme&7=S'!W_RF9H", 1);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringBefore("", "1i3$R=i.2");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'V'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay(" vs ", " vs ", 14, 14);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs  vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("Display name '%s' %sCart", " vs ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Display name '%s' %sCart", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("Display name '%s' %sCart", '>', 'H');
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Display name '%s' %sCart", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap(" vs ", '=');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("= vs =", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("Dk_>T!v]=7", "f", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Dk_>T!v]=7", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\"mGjuc~Y6 Dg2GD";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) "= vs =";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string6 = StringUtils.wrapIfMissing("Display name '%s' %sCart", "Dk_>T!v]=7");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Dk_>T!v]=7Display name '%s' %sCartDk_>T!v]=7", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.trimToEmpty("3a!Uc+. ");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("3a!Uc+.", string7);
      assertNotNull(string7);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string8 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string8);
      
      String[] stringArray0 = StringUtils.split("= vs =");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string9 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", 0);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertEquals("", string9);
      assertNotNull(string9);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '=';
      charArray0[3] = 'H';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'>', '>', '=', 'H'}, charArray0);
      
      String string10 = StringUtils.repeat("Display name '%s' %sCart", 6);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertEquals("Display name '%s' %sCartDisplay name '%s' %sCartDisplay name '%s' %sCartDisplay name '%s' %sCartDisplay name '%s' %sCartDisplay name '%s' %sCart", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("", "", 2555);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("", "]{lu_t'OxC ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("]{lu_t'OxC ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("#", "SXHQj=SH1", "SXHQj=SH1", 49);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("#", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(2555));
      assertEquals(0, priorityQueue0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = priorityQueue0.add(object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(object1));
      assertFalse(priorityQueue0.contains(""));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains(object1));
      assertFalse(priorityQueue0.contains(""));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean2 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains(""));
      assertFalse(navigableSet0.contains(""));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      
      String string7 = StringUtils.join((Iterable<?>) priorityQueue0, '2');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertTrue(priorityQueue0.contains(object1));
      assertFalse(priorityQueue0.contains(""));
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsAny(" is not in the range '0' - '9' is not in the range '0' - '9'", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<Object> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Object object0 = hashMap0.put(set0, set0);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) set0, 'r');
      assertEquals("[(this Collection)]", string0);
      assertNotNull(string0);
      assertFalse(set0.contains('r'));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "[(this Collection)]", "Search and eplace array lengths dn't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      String string0 = StringUtils.replaceChars("^h_/Qf#@^F<ma", "^h_/Qf#@^F<ma", " ");
      assertEquals("  ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "  ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) ',';
      doubleArray0[1] = (double) '=';
      doubleArray0[2] = (double) '=';
      doubleArray0[3] = (double) ',';
      doubleArray0[4] = (double) ',';
      doubleArray0[5] = (double) ',';
      doubleArray0[6] = (double) ',';
      String string0 = StringUtils.join(doubleArray0, 'u');
      assertEquals(7, doubleArray0.length);
      assertEquals("44.0u61.0u61.0u44.0u44.0u44.0u44.0", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {44.0, 61.0, 61.0, 44.0, 44.0, 44.0, 44.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '%', '`');
      assertFalse(string1.equals((Object)string0));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("4,k9S'0~8nM+ E<", "Invalid exceptionStatus");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("4,k9S'0~8nM+ E<", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("a", "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("a", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = 'u';
      charArray0[2] = '`';
      charArray0[3] = 'u';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = ',';
      int int0 = StringUtils.indexOfAny((CharSequence) "4,k9S'0~8nM+ E<", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'`', 'u', '`', 'u', '`', '`', ','}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)56;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (byte)56;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 52;
      String string1 = StringUtils.leftPad("maxWith cannot be negative", (int) (byte)56, "Minimum abbreviation width is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is maxWith cannot be negative", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'Y';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width is %d", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'>', '>', 'Y', '>', '>', '>', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("maxWith cannot be negative", "Minimum abbreviation width is %d");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %dmaxWith cannot be negativeMinimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Minimum abbreviation width is maxWith cannot be negative", (CharSequence) "Minimum abbreviation width is %dmaxWith cannot be negativeMinimum abbreviation width is %d");
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      
      Locale locale0 = new Locale("Uo'+)] vJ}:&i", "`m~p:", ">L");
      assertNotNull(locale0);
      assertEquals("uo'+)] vj}:&i", locale0.getLanguage());
      assertEquals("uo'+)] vj}:&i_`M~P:_>L", locale0.toString());
      assertEquals(">L", locale0.getVariant());
      assertEquals("`M~P:", locale0.getCountry());
      
      int int2 = StringUtils.getFuzzyDistance("'u`L0", "`m~p:", locale0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals("uo'+)] vj}:&i", locale0.getLanguage());
      assertEquals("uo'+)] vj}:&i_`M~P:_>L", locale0.toString());
      assertEquals(">L", locale0.getVariant());
      assertEquals("`M~P:", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "offset cannot be negative";
      String string1 = StringUtils.remove("/2I", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "offset cannot be negative", (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("offset cannot be negative", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "offset cannot be negative", (-2160));
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'K';
      charArray0[2] = '4';
      charArray0[3] = '=';
      charArray0[4] = 't';
      charArray0[5] = '4';
      charArray0[6] = 'K';
      charArray0[7] = '=';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'t', 'K', '4', '=', 't', '4', 'K', '='}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("8z`\"^>fQWncTU5R", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another8z`\"^>fQWncTU5RAborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another8z`\"^>fQWncTU5RAborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = "Object varargs must not be null";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("{'T)G+A!ttO=k02", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) 2446;
      floatArray0[2] = (float) 1882;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'A', (-1433), 32767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1433
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "";
      boolean boolean0 = StringUtils.equalsIgnoreCase("maxWith cannot be negative", "{'T)G+A!ttO=k02");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "{'T)G+A!ttO=k02", 2446);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("{'T)G+A!ttO=k02");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.trimToEmpty((String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("anDy`.nM\u0004", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("anDy`.nM\u0004", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "maxWith cannot be negative", (CharSequence[]) stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.chomp("{'T)G+A!ttO=k02", "fD|l)(G/r1u_FO");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("{'T)G+A!ttO=k02", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", "fD|l)(G/r1u_FO", "org.junitpioneer.v", 2446);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.endsWithAny("{'T)G+A!ttO=k02", (CharSequence[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string7 = StringUtils.removeStartIgnoreCase(")Z^ n&T[9I5h :=", "k8]h'<9sXLE)\"T");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals(")Z^ n&T[9I5h :=", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("iA%R/Fcu", "iA%R/Fcu", 12);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("kmhZe zG;gL5'");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.repeat('7', 9);
      assertEquals("777777777", string1);
      assertNotNull(string1);
      
      String string2 = "Hm?0M~rB\\u U\\L!6";
      String[] stringArray1 = StringUtils.splitByWholeSeparator(string2, "qw8HT8H");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591", "777777777", 9);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.unwrap(">vtZ-Q'wDTfG&eF", '7');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(">vtZ-Q'wDTfG&eF", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      String string0 = StringUtils.getDigits("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeFirst("/E.]jFu;U!4#UR,.S^", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("/E.]jFu;U!4#UR,.S^", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.";
      charSequenceArray0[1] = (CharSequence) "/E.]jFu;U!4#UR,.S^";
      charSequenceArray0[2] = (CharSequence) "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.";
      charSequenceArray0[3] = (CharSequence) "/E.]jFu;U!4#UR,.S^";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "/E.]jFu;U!4#UR,.S^";
      int int0 = StringUtils.indexOfAny((CharSequence) "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.rotate("/E.]jFu;U!4#UR,.S^", (-1480));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("jFu;U!4#UR,.S^/E.]", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("(", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("(", string3);
      assertNotNull(string3);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      HashSet<Object> hashSet0 = new HashSet<Object>(vector0);
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains((-1480)));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      hashSet0.clear();
      assertFalse(hashSet0.contains((-1480)));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Spliterator<Object> spliterator0 = hashSet0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(hashSet0.contains((-1480)));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("jFu;U!4#UR,.S^/E.]");
      assertTrue(boolean0);
      assertFalse(hashSet0.contains((-1480)));
      assertTrue(hashSet0.contains("jFu;U!4#UR,.S^/E.]"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      String string4 = StringUtils.join((Iterable<?>) hashSet0, "aov ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("jFu;U!4#UR,.S^/E.]", string4);
      assertNotNull(string4);
      assertFalse(hashSet0.contains((-1480)));
      assertTrue(hashSet0.contains("jFu;U!4#UR,.S^/E.]"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      String string5 = StringUtils.defaultString("");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing("jFu;U!4#UR,.S^/E.]", "(", charSequenceArray0);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("jFu;U!4#UR,.S^/E.]", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceOnceIgnoreCase(":", "{'T)G+A!ttO=k02", ")Z^ n&T[9I5h :=FwQ");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals(":", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ObjectUtils$Null", "iIhA=%1x908");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("org.apac", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly(".n<sP?M", stringArray0, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals(".n<sP?M", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull(")(g7LOVz/\"rtD5T|Y");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(")(g7LOVz/\"rtD5T|Y", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ".n<sP?M", "d Y");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.replaceAll("\n", "\n", "|GK&");
      assertFalse(string1.equals((Object)string0));
      assertEquals("|GK&", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("|GK&");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("|GK&", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("|GK&", 'o', 'o');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("|GK&", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Display name '%s' %s", "");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(4, stringArray0.length);
      assertEquals("Display", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfEmpty("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", "Display name '%s' %s");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("qv#LB$Fq1{Up", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("qv#LB$Fq1{Up", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinWith("", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      String string0 = "a~`T kS~Uvpe^lyg";
      int int0 = 2333;
      String string1 = StringUtils.right("a~`T kS~Uvpe^lyg", 2333);
      assertTrue(string1.equals((Object)string0));
      assertEquals("a~`T kS~Uvpe^lyg", string1);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase("a~`T kS~Uvpe^lyg", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "a~`T kS~Uvpe^lyg";
      charSequenceArray0[2] = (CharSequence) "a~`T kS~Uvpe^lyg";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "a~`T kS~Uvpe^lyg";
      boolean boolean1 = StringUtils.equalsAny("a~`T kS~Uvpe^lyg", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string3 = StringUtils.defaultString("a~`T kS~Uvpe^lyg", "\"d=");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("a~`T kS~Uvpe^lyg", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("a~`T kS~Uvpe^lyg", charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String string0 = StringUtils.strip("V^(:U(q?Vzv6zac", (String) null);
      assertEquals("V^(:U(q?Vzv6zac", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("V^(:U(q?Vzv6zac", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      String string0 = StringUtils.rightPad("offset cannot be negative", 0);
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "offset cannot be negative";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ", Length: ";
      stringArray0[4] = "offset cannot be negative";
      stringArray0[5] = "";
      stringArray0[6] = "offset cannot be negative";
      stringArray0[7] = "offset cannot be negative";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing("0<(=w&U?0O<,yG6YD", "", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("0<(=w&U?0O<,yG6YD", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ", Length: ", (CharSequence) "offset cannot be negative");
      assertEquals((-1), int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("0<(=w&U?0O<,yG6YD"));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("offset cannot be negative");
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains("0<(=w&U?0O<,yG6YD"));
      assertTrue(priorityQueue0.contains("offset cannot be negative"));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains("0<(=w&U?0O<,yG6YD"));
      assertTrue(priorityQueue0.contains("offset cannot be negative"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = StringUtils.equalsAny("offset cannot be negative", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean2);
      
      String string3 = StringUtils.reverse("offset cannot be negative");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("evitagen eb tonnac tesffo", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      char char0 = 'R';
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace("", "", "Oqhn54IU#NEcV'M,rgg");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">ur", (CharSequence) ">ur", 2335);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.stripAccents("Oqhn54IU#NEcV'M,rgg");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Oqhn54IU#NEcV'M,rgg", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("Oqhn54IU#NEcV'M,rgg");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeEnd("", "[L%WL");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        Locale.forLanguageTag((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultString("\nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: Search and Replace array lengths don't match: ", "{'T)G+A!ttO=k02");
      assertEquals("\nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean2 = StringUtils.isAllUpperCase("\nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: Search and Replace array lengths don't match: ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", (-805), 2446);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.abbreviate("\n", "p{InCombiningDiacriticalMarks}+", 2787, 2787);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "\n", "maxWith cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'O', 2787, 3761);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2787
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" is not in the range '0' - '9' is not in the range '0' - '9'", " is not in the range '0' - '9' is not in the range '0' - '9'");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.trimToNull(" is not in the range '0' - '9' is not in the range '0' - '9'");
      assertEquals("is not in the range '0' - '9' is not in the range '0' - '9'", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny(" is not in the range '0' - '9' is not in the range '0' - '9'", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K\u0002=]]ZLo6`";
      stringArray0[1] = "66ZZ1j|2(";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = " must be static.";
      int int0 = StringUtils.indexOf((CharSequence) "66ZZ1j|2(", (CharSequence) "K\u0002=]]ZLo6`");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "FwQ");
      assertEquals(6, stringArray0.length);
      assertEquals("K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("bx] VKa|]r", 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals("bx] VKa|]r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Strings must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, (String) null, 322, 322);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(6, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
      assertEquals(0, int1);
      
      String string4 = StringUtils.join(stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(6, stringArray0.length);
      assertEquals("K\u0002=]]ZLo6`66ZZ1j|2(Strings must not be null must be static.", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfAny("Strings must not be null", stringArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(6, stringArray0.length);
      assertEquals(0, int2);
      
      String[] stringArray1 = StringUtils.split("K\u0002=]]ZLo6`66ZZ1j|2(Strings must not be null must be static.");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K\u0002=]]ZLo6`";
      stringArray0[1] = "66ZZ1j|2(";
      stringArray0[2] = "Strings must not be null";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-96);
      String string0 = StringUtils.join(byteArray0, 'O');
      assertEquals(5, byteArray0.length);
      assertEquals("-52O18O4O44O-96", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-52), (byte)18, (byte)4, (byte)44, (byte) (-96)}, byteArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("K\u0002=]]ZLo6`", "M1x1]g# S\"5");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "66ZZ1j|2(";
      charSequenceArray0[1] = (CharSequence) "66ZZ1j|2(";
      charSequenceArray0[2] = (CharSequence) "K\u0002=]]ZLo6`";
      charSequenceArray0[3] = (CharSequence) "Strings must not be null";
      int int0 = StringUtils.lastIndexOfAny("K\u0002=]]ZLo6`", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((int[]) null, 'r', (-1593), 10);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) " must be static.", (CharSequence) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string2 = StringUtils.trim("njb:df8iK");
      assertEquals("njb:df8iK", string2);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "njb:df8iK";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, " must be static.");
      assertFalse(string3.equals((Object)string2));
      assertEquals(5, charSequenceArray0.length);
      assertEquals(" must be static. must be static. must be static. must be static.njb:df8iK", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("b|fp", 'V');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("b|fp", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull(" must be static.");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("must be static.", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "fk\"!y5AgM<%cSGC", (-788), (-1593));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.left("hpJz>[N#x|;-41", (-788));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "fk\"!y5AgM<%cSGC", (CharSequence) "b|fp", (-329));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Y:jM", (String) null);
      assertEquals("Y:jM", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("Locale must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("lOCALE MUST NOT BE NULL", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y:jM", "5BGgrW");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "5BGgrW", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("lOCALE MUST NOT BE NULL", "5BGgrW");
      assertFalse(int1 == int0);
      assertEquals(55, int1);
      
      String string2 = StringUtils.reverseDelimited("G$$\" $+r]*ao{]vl~Pw", '~');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Pw~G$$\" $+r]*ao{]vl", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("", "", "{F");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat(" ", (-1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("", string0, 2555);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace(string1);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\\u", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("#", 2555);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString(string3);
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("\\u", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.startsWith("", string5);
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.substringAfterLast(string0, string5);
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.right("{index}", 0);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOf((CharSequence) "(", 2555, 1929);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.CR;
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertEquals("\r", string8);
      assertNotNull(string8);
      
      int int2 = StringUtils.countMatches((CharSequence) "\r", '=');
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string9 = StringUtils.upperCase("", locale0);
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertEquals("", string9);
      assertNotNull(string9);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-625);
      intArray0[1] = 0;
      intArray0[4] = 0;
      intArray0[3] = (-547);
      intArray0[4] = (-625);
      intArray0[5] = 1297;
      intArray0[6] = 97;
      String string0 = StringUtils.join(intArray0, '8');
      assertEquals(7, intArray0.length);
      assertEquals("-62580808-5478-62581297897", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-625), 0, 0, (-547), (-625), 1297, 97}, intArray0);
      
      String string1 = StringUtils.toRootUpperCase("-62580808-5478-62581297897");
      assertTrue(string1.equals((Object)string0));
      assertEquals("-62580808-5478-62581297897", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("!ss1", "\"mGjuc~Y6 Dg2GD");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      String string3 = StringUtils.join(shortArray0, 'm');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, shortArray0.length);
      assertEquals("0m0m0m0m0m0m0m0", string3);
      assertNotNull(string3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      String string4 = StringUtils.overlay("vC7dOO%5:", "-62580808-5478-62581297897", (-886), 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("-62580808-5478-62581297897vC7dOO%5:", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join(shortArray0, 'm', 1222, (-625));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(8, shortArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string1 = StringUtils.defaultString("\n", "...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissing("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "\n", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider\n", string3);
      assertNotNull(string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("\n"));
      assertEquals(0, priorityQueue0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = priorityQueue0.add(object0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertFalse(priorityQueue0.contains("\n"));
      assertTrue(priorityQueue0.contains(object0));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains("\n"));
      assertTrue(priorityQueue0.contains(object0));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean5 = StringUtils.equalsAny("", charSequenceArray0);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean5);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("\n"));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains("\n"));
      assertFalse(navigableSet0.contains("\n"));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      String string4 = StringUtils.join((Iterable<?>) treeSet0, 'r');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(treeSet0.contains("\n"));
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.StdIoExtension", 'O');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 321;
      floatArray0[1] = (float) 'O';
      String string5 = StringUtils.join(floatArray0, 'O', 10, 0);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(2, floatArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new float[] {321.0F, 79.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isNumeric("d% si tesffo htiw htdiw noitaiverbba muminiM");
      assertFalse(boolean0);
      
      String string6 = StringUtils.substring("DefaultTimeZone", 11, (-1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Zon", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("%s: Could not resolve parameter by name (%s).", "BCL- #.");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("%s: Could not resolve parameter by name (%s).", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String string0 = StringUtils.unwrap(" must be static.", "Q");
      assertEquals(" must be static.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      doubleArray0[1] = 833.5;
      String string0 = StringUtils.join(doubleArray0, ',');
      assertEquals(2, doubleArray0.length);
      assertEquals("-693.28637282,833.5", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-693.28637282), 833.5}, doubleArray0, 0.01);
      
      String string1 = StringUtils.truncate("", 34);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 34;
      floatArray0[2] = 3189.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 34;
      floatArray0[6] = (float) (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '>', (int) (byte)0, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "maxWith cannot be negative", 1882);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string5 = StringUtils.join(byteArray0, 'O', 321, 54);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals(4, byteArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string6 = StringUtils.trimToEmpty("{'T)G+A!ttO=k02");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("{'T)G+A!ttO=k02", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "{'T)G+A!ttO=k02", (CharSequence) "", (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', (int) 'R', (int) 'R');
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 'R');
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "3Ko-?70a<}");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3Ko-?70a<}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substring("Illegal range. The step cannot be zero.", 96);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Illegal range. The step cannot be zero.");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Illegal range. The step cannot be zero.", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("RTp29:M~<C/V#Bs(VGy");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(15, stringArray0.length);
      assertEquals(0, int2);
      
      String string5 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("Illegal range. The step cannot be zero.", "", "");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Illegal range. The step cannot be zero.", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOf((CharSequence) "{index}", 0, 13);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("1k)XA fw-`o6u'I", "", stringArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals(15, stringArray0.length);
      assertEquals("1k)XA fw-`o6u'I", string7);
      assertNotNull(string7);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(15, stringArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int4 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals((-1), int4);
      
      String string8 = StringUtils.abbreviate("", "{index}", (-306), 707);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("lPM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", '=');
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("", "", 2555);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("", "]{lu_t'OxC ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("]{lu_t'OxC ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("#", 2555);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("]{lu_t'OxC ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("]{lu_t'OxC ", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWith("", "]{lu_t'OxC ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.substringAfterLast("", "]{lu_t'OxC ");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("{index}", 0);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertEquals(1, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfter("", "]{lu_t'OxC ");
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.removeIgnoreCase("", "%s: Could not resolve parameter by name (%s).");
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.rotate("_kR\"*", (-1520));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertEquals("_kR\"*", string10);
      assertNotNull(string10);
      
      boolean boolean2 = StringUtils.startsWithAny("", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      String string11 = StringUtils.strip("5VA(GozSI]Cmmm", (String) null);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertEquals("5VA(GozSI]Cmmm", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[0] = "i&9q3}.FnLdXu}1#";
      stringArray0[1] = "%1t;;#P3X-[v";
      stringArray0[2] = "1}Z6PSPJbpc";
      stringArray0[3] = " \" should have a parent context.";
      stringArray0[4] = "Object varargs must not be null";
      stringArray0[5] = "Object varargs must not be null";
      String string0 = StringUtils.replaceEach("i&9q3}.FnLdXu}1#", stringArray0, stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("i&9q3}.FnLdXu}1#", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1}Z6PSPJbpc", (CharSequence) "1}Z6PSPJbpc");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("#C|KT;IBm");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Iterable<?>) null, '>');
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      String string1 = StringUtils.unwrap(")7J8", '/');
      assertFalse(string1.equals((Object)string0));
      assertEquals(")7J8", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) ")7J8";
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance(")7J8", charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.rightPad("", (-891), "FwQ)Z^ n&T[9I5h :=");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^J09]\"e3u@Qj[sm<0", "", 115);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "a7`~' 77@$ZTj+", (CharSequence) "FwQ)Z^ n&T[9I5h :=", (-891));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      String string4 = StringUtils.upperCase("Minimum abbreviation width is %d", locale0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("MINIMUM ABBREVIATION WIDTH IS %D", string4);
      assertNotNull(string4);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '4';
      charArray0[2] = '^';
      boolean boolean1 = StringUtils.containsAny((CharSequence) ")7J8", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'[', '4', '^'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "e{/=TGm)h]_mg", (CharSequence) "e{/=TGm)h]_mg", 67);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("c6");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("c6");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("c6", "c6");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "c6", (CharSequence) "\r", Integer.MAX_VALUE);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("=%2*dW7dSG&fT", "=%2*dW7dSG&fT");
      assertEquals("=%2*dW7dSG&fT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("=%2*dW7dSG&fT", Integer.MAX_VALUE, 9);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("=%2*dW7dSG&fT");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("=%2*dW7dSG&fT", "\"mGjuc~Y6 Dg2GD");
      assertEquals(27, int0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.replaceEach("xc/p>K~x?P<Pa", stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals("xc/p>K~x?P<Pa", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("...", "q3P=rLV1}C?HmaxWith cannot be negative");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split("...");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.left("Minimum abbreviation width with offset is %d", 1);
      assertEquals("M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("Minimum abbreviation width with offset is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("mINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string1);
      assertNotNull(string1);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(0, priorityQueue0.size());
      
      String string2 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is %d", "Method `CartesianProductTest.Sets ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("mINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Object varargs mus not bY null", (String) null);
      assertEquals("Object varargs mus not bY null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("Object varargs mus not bY null", "Object varargs mus not bY null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = ',';
      charArray0[2] = '=';
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "", (-2160));
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string0 = StringUtils.toRootLowerCase("");
      assertTrue(string0.equals((Object)charSequence0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'4', ',', '=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", (CharSequence) "~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', (int) 'R', (int) 'R');
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 'R');
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "3Ko-?70a<}");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3Ko-?70a<}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substring("Illegal range. The step cannot be zero.", 96);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Illegal range. The step cannot be zero.");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("RTp29:M~<C/V#Bs(VGy");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(15, stringArray0.length);
      assertEquals(0, int2);
      
      String string5 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("", 0);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOf((CharSequence) "{index}", 0, 13);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("1k)XA fw-`o6u'I", "", stringArray0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals(15, stringArray0.length);
      assertEquals("1k)XA fw-`o6u'I", string7);
      assertNotNull(string7);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("RTp29:M~<C/V#Bs(VGy"));
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(15, stringArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int4 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals((-1), int4);
      
      String string8 = StringUtils.abbreviate("", "{index}", (-306), 707);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string0 = StringUtils.join(objectArray0, "");
      assertEquals(3, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string0 = StringUtils.join(objectArray0, "Sz+tdIo_System_Out");
      assertEquals(1, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.swapCase("7W@#a<dRM[");
      assertEquals("7w@#A<Drm[", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "7w@#A<Drm[", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "7w@#A<Drm[", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      boolean boolean0 = StringUtils.equalsIgnoreCase("maxWith cannot be negative", "{'T)G+A!ttO=k02");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "{'T)G+A!ttO=k02", 2446);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("{'T)G+A!ttO=k02");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "{'T)G+A!ttO=k02";
      stringArray1[1] = "{'T)G+A!ttO=k02";
      stringArray1[2] = "Arguments cannot both be null";
      String string2 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, stringArray1.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWith("", "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("{'T)G+A!ttO=k02", "", "<_8g![]Du_");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{'T)G+A!ttO=k02", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isNoneBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("doesn't contain any substring.");
      assertEquals("doesn't contain any substring.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "doesn't contain any substring.", (CharSequence) "doesn't contain any substring.");
      assertEquals(1, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("doesn't contain any substring.", "doesn't contain any substring.");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Y:jM", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = StringUtils.wrapIfMissing("FwQ", ")Z^ n&T[9I5h :=");
      assertEquals(")Z^ n&T[9I5h :=FwQ)Z^ n&T[9I5h :=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", (-32768), 'l');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      boolean boolean0 = StringUtils.equalsIgnoreCase("maxWith cannot be negative", "{'T)G+A!ttO=k02");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "{'T)G+A!ttO=k02", 2446);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("{'T)G+A!ttO=k02");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "{'T)G+A!ttO=k02";
      stringArray1[1] = "{'T)G+A!ttO=k02";
      stringArray1[2] = "Arguments cannot both be null";
      String string2 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, stringArray1.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWith("", "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int1 = StringUtils.indexOf((CharSequence) "{'T)G+A!ttO=k02", (CharSequence) "{'T)G+A!ttO=k02");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.isAllBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertFalse(boolean3);
      
      String string3 = StringUtils.join((Object[]) null, "{'T)G+A!ttO=k02");
      assertNull(string3);
      
      String string4 = StringUtils.remove("Minimum abbreviation width is %d", 'L');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull("Arguments cannot both be null");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Arguments cannot both be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join(objectArray0, ")Z^ n&T[9I5h :=FwQ", 2722, 0);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals(3, objectArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "{'T)G+A!ttO=k02", (CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertEquals(0, int2);
      
      String string7 = StringUtils.left("", 322);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "{'T)G+A!ttO=k02", (CharSequence) "Minimum abbreviation width is %d", 0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02", "84G");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string8 = StringUtils.leftPad("{'T)G+A!ttO=k02", (-922), (String) null);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertEquals("{'T)G+A!ttO=k02", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = StringUtils.rightPad("o#", (-4053), '@');
      assertEquals("o#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("z+b*F+6Go6*dUvH2");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z+B*F+6GO6*DUVH2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "z+b*F+6Go6*dUvH2", 49);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("Z+B*F+6GO6*DUVH2", "z+b*F+6Go6*dUvH2", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.reverse("z+b*F+6Go6*dUvH2");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("2HvUd*6oG6+F*b+z", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("2HvUd*6oG6+F*b+z", "o#");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("o#", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("o#", '@', '@');
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("o#", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap("=1e=ZQIs6p", '@');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("@=1e=ZQIs6p@", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceChars("\n", (String) null, "o#");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("\n", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("&,", "rqTBSe?1TXAvr;/");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("rqTBSe?1TXAvr;/&,rqTBSe?1TXAvr;/", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.trimToEmpty("o#");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertEquals("o#", string8);
      assertNotNull(string8);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string9 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string9);
      
      String[] stringArray0 = StringUtils.split("&,");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("rqTBSe?1TXAvr;/&,rqTBSe?1TXAvr;/", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "o#", (String) null);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("2HvUd*6oG6+F*b+z");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("rqTBSe?1TXAvr;/");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.endsWithAny("\n", stringArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("p$i,*.X,8^?w<J$NV", 'l');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p$i,*.X,8^?w<J$NV", (CharSequence) "p$i,*.X,8^?w<J$NV");
      assertEquals(0, int0);
      
      String string0 = StringUtils.uncapitalize("p$i,*.X,8^?w<J$NV");
      assertEquals("p$i,*.X,8^?w<J$NV", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "p$i,*.X,8^?w<J$NV", "acL5dKn0f");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("*qSv=wx&SYS$BI", '=', '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals("*qSv=wx&SYS$BI", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap((String) null, '=');
      assertNull(string2);
      
      String string3 = StringUtils.replaceChars("^h_/QwOf#@^F<ma", "rqTBSe?1TXAvr;/", "Another failed with one of the specified exceptions.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("^h_wQwOf#@^F<ma", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(3, stringArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.wrapIfMissing("*U4evTG4t<!i", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("*U4evTG4t<!i", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Threshold must not be negative", string5);
      assertNotNull(string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("^h_/QwOf#@^F<ma", supplier0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("^h_/QwOf#@^F<ma", string6);
      assertNotNull(string6);
      
      String[] stringArray2 = StringUtils.split("...");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      boolean boolean1 = StringUtils.endsWithAny("*qSv=wx&SYS$BI", stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "^h_wQwOf#@^F<ma");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("^h_/QwOf#@^F<ma");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("^h_/QwOf#@^F<ma", "^h_/QwOf#@^F<ma");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\"mGjuc~Y6 Dg2GD");
      assertEquals("\"mGjuc~Y6 Dg2GD", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("_AR A4ALp0Vn=k#d", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("_AR A4ALp0Vn=k#d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("_AR A4ALp0Vn=k#d", "_AR A4ALp0Vn=k#d");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("_AR A4ALp0Vn=k#d");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Exception cloning CloneabVe type ", "Exception cloning CloneabVe type ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'DG+A&tO=k2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "";
      int int0 = 2446;
      String string1 = StringUtils.abbreviate("{'DG+A&tO=k2", "", 2446, 321);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{'DG+A&tO=k2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, '9');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("{'DG+A&tO=k2", string2);
      assertNotNull(string2);
      
      String string3 = "org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider";
      String string4 = StringUtils.swapCase("org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ORG.JUNITPIONEER.JUPITER.JSON.aBSTRACTjSONsOURCEbASEDaRGUMENTSpROVIDER", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("t+/U,U@d5SHw}`qTR_e", 2446, '#');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean0);
      
      int int1 = (-32768);
      String string6 = StringUtils.join((Object[]) stringArray0, '9', 321, 12);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals(1, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String string0 = "K\\2=]]ZLo6`";
      String[] stringArray0 = null;
      String string1 = "org.apache.commons.lang3.StringUtils";
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "org.apache.commons.lang3.StringUtils");
      assertNull(stringArray1);
      
      String string2 = "TX}%.`Nc[)0O0y7I";
      // Undeclared exception!
      try { 
        StringUtils.unwrap("TX}%.`Nc[)0O0y7I", "TX}%.`Nc[)0O0y7I");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '/');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Y:jM", charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l', 'l', 'l', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = StringUtils.wrapIfMissing((String) null, "Y:jM");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      doubleArray0[1] = 833.5;
      String string0 = StringUtils.join(doubleArray0, ',');
      assertEquals(2, doubleArray0.length);
      assertEquals("-693.28637282,833.5", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-693.28637282), 833.5}, doubleArray0, 0.01);
      
      String string1 = StringUtils.truncate("", 34);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string2 = StringUtils.join(byteArray0, ',', (int) (byte)78, (-1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, byteArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)56, (byte)56, (byte)0, (byte)0}, byteArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = " vs ";
      stringArray0[5] = "|zbJR=H$*m|";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = " vs ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray2);
      
      String string0 = StringUtils.replaceFirst("Oq7)UuC1kFD-Za", (String) null, (String) null);
      assertEquals("Oq7)UuC1kFD-Za", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "|zbJR=H$*m|", 1027);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("org.apache.commons.lang3.StringUtils", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      String string2 = StringUtils.substringAfter("\"pqp,Xv", (-722));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("|zbJR=H$*m|", 40);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("              |zbJR=H$*m|               ", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric(stringArray0[0]);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compare(" vs ", stringArray0[2], false);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(9, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      char[] charArray0 = new char[6];
      String[] stringArray0 = StringUtils.splitByWholeSeparator("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", "_");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.substring("_", 86);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("\u0000\u0000\u0000\u0000\u0000\u0000");
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.compare("|IbR Unk8", (String) null, false);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String string0 = StringUtils.removeEnd("p{InCombiningDiacriticalMarks}+", "PUsndo");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("Object varargs must not be null");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.uncapitalize("d% si tesffo htiw htdiw noitaiverbba muminiM");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chomp("njb:df8iK", "org.junitpioneer.v");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("njb:df8iK", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceIgnoreCase("FwQ", "d% si tesffo htiw htdiw noitaiverbba muminiM", "org.junitpioneer.jupiter.params.ByteRange", (-1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertEquals("FwQ", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-591);
      intArray0[1] = 8;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (-591);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 8;
      String string0 = StringUtils.joinWith("IssueExtension", objectArray0);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "java.lang.Object@2311b6ccIssueExtension-591IssueExtensionjava.lang.Object@7c399b70IssueExtension8", 3);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("java.lang.Object@2311b6ccIssueExtension-591IssueExtensionjava.lang.Object@7c399b70IssueExtension8", "java.lang.Object@2311b6ccIssueExtension-591IssueExtensionjava.lang.Object@7c399b70IssueExtension8");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join(intArray0, 's');
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, intArray0.length);
      assertEquals("-591s8s0s0s0s0s0", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {(-591), 8, 0, 0, 0, 0, 0}, intArray0);
      
      String string2 = StringUtils.leftPad("qc/", 905, "java.lang.Object@2311b6ccIssueExtension-591IssueExtensionjava.lang.Object@7c399b70IssueExtension8");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("\n", 6, (-671));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween((String) null, "qc/", ", Length: 0");
      assertNull(string4);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "Poi2mFMOF4-\u0000/vR4");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("u_$Os#", "4M_F");
      assertEquals("u_$Os#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("OG~q%Wj,$v7", "OG~q%Wj,$v7", locale0);
      assertEquals(31, int0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove(" ", " ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) " ", 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBeforeLast("8Obo?pD", " ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8Obo?pD", string2);
      assertNotNull(string2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      String string3 = StringUtils.unwrap("~e@3YMYZ\"&kq:java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null", 'p');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      
      Locale locale2 = new Locale(" ", "~e@3YMYZ\"&kq:java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null", "Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertEquals(" ", locale2.getLanguage());
      assertEquals("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", locale2.getVariant());
      
      String string4 = StringUtils.unwrap(" ", "nJoMpCEw%");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("", locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(" ", locale2.getLanguage());
      assertEquals("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", locale2.getVariant());
      
      String string6 = StringUtils.removeStartIgnoreCase("", "The `untilDate` string '");
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "~e@3YMYZ\"&kq:java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-591);
      intArray0[1] = 0;
      intArray0[2] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-591);
      objectArray0[1] = (Object) (-591);
      objectArray0[2] = (Object) (-591);
      objectArray0[3] = object0;
      String string0 = StringUtils.join(objectArray0, ',', 2745, 1714);
      assertEquals(4, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.split("~/]&g*DSW_t'5:GV*", 'g');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripAccents("~/]&g*DSW_t'5:GV*");
      assertFalse(string1.equals((Object)string0));
      assertEquals("~/]&g*DSW_t'5:GV*", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("~/]&g*DSW_t'5:GV*", "~/]&g*DSW_t'5:GV*");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      Locale locale0 = new Locale("The `untilDate` string '", "~/]&g*DSW_t'5:GV*");
      assertNotNull(locale0);
      assertEquals("~/]&G*DSW_T'5:GV*", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("the `untildate` string '", locale0.getLanguage());
      assertEquals("the `untildate` string '_~/]&G*DSW_T'5:GV*", locale0.toString());
      
      int int0 = StringUtils.getFuzzyDistance("~/]&g*DSW_t'5:GV*", "~/]&g*DSW_t'5:GV*", locale0);
      assertEquals(52, int0);
      assertEquals("~/]&G*DSW_T'5:GV*", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("the `untildate` string '", locale0.getLanguage());
      assertEquals("the `untildate` string '_~/]&G*DSW_T'5:GV*", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K\u0002=]]ZLo6`";
      stringArray0[1] = "66ZZ1j|2(";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = " must be static.";
      int int0 = StringUtils.indexOf((CharSequence) "66ZZ1j|2(", (CharSequence) "K\u0002=]]ZLo6`");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "FwQ");
      assertEquals(6, stringArray0.length);
      assertEquals("K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("bx] VKa|]r", 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals("bx] VKa|]r", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Strings must not be null", charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("FwQ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.wrapIfMissing("K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ", "`=(");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`=(K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ`=(", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "bx] VKa|]r", (CharSequence) " must be static.");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      Locale locale0 = new Locale("`m~p:", "]D98b!]/a:)", "!(7 J*5C]5J;kZUWo0");
      assertNotNull(locale0);
      assertEquals("]D98B!]/A:)", locale0.getCountry());
      assertEquals("`m~p:", locale0.getLanguage());
      assertEquals("!(7 J*5C]5J;kZUWo0", locale0.getVariant());
      assertEquals("`m~p:_]D98B!]/A:)_!(7 J*5C]5J;kZUWo0", locale0.toString());
      
      int int3 = StringUtils.getFuzzyDistance("`=(", " must be static.", locale0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertEquals("]D98B!]/A:)", locale0.getCountry());
      assertEquals("`m~p:", locale0.getLanguage());
      assertEquals("!(7 J*5C]5J;kZUWo0", locale0.getVariant());
      assertEquals("`m~p:_]D98B!]/A:)_!(7 J*5C]5J;kZUWo0", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "3Ko-?70a<}");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\"6IGs>OB", "Display name '%s' %sCartesianProductTest can only take exactly one type of arguments source.", Integer.MAX_VALUE);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.compareIgnoreCase("", "Display name '%s' %sCartesianProductTest can only take exactly one type of arguments source.");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-92), int2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = (-51);
      intArray0[3] = (int) 'x';
      String string3 = StringUtils.join(intArray0, 'E');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, intArray0.length);
      assertEquals("2147483647E0E-51E120", string3);
      assertNotNull(string3);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, (-51), 120}, intArray0);
      
      String string4 = StringUtils.leftPad("2147483647E0E-51E120", 16, "'ykS6");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("2147483647E0E-51E120", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("2147483647E0E-51E120", "", 832);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStartIgnoreCase(string5, "d% si tesffo htiw htdiw noitaiverbba muminiM");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string6);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      int int3 = StringUtils.getFuzzyDistance("2147483647E0E-51E120", "", locale0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-591);
      intArray0[1] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (-591);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 0;
      String string0 = StringUtils.joinWith("IssueExtension", objectArray0);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0", 3);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0", "java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join(intArray0, 's');
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, intArray0.length);
      assertEquals("-591s0s0s0s0s0s0", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {(-591), 0, 0, 0, 0, 0, 0}, intArray0);
      
      String string2 = StringUtils.leftPad("qc/", 905, "java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81Issuqc/");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "qc/", "4t`Uw@5.,/.M~R<]aq");
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "E\"rnf&Eol73>T^WG(", (CharSequence) null, 0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.toRootUpperCase("c");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("C", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81IssueExtension-591IssueExtensionjava.lang.Object@3aca17deIssueExtension0java.lang.Object@5f5bab81Issuqc/", "\"mGjuc~Y6 Dg2GD\"mGjuc~Y6 Dg2GD", ", Length: 0");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase("4t`Uw@5.,/.M~R<]aq");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("lPM", "X1=M7_XH]LCf!dd^o,&", (CharSequence[]) null);
      assertEquals("X1=M7_XH]LCf!dd^o,&lPM", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = ',';
      charArray0[2] = '=';
      charArray0[3] = 'E';
      charArray0[4] = 't';
      charArray0[5] = '=';
      charArray0[6] = '4';
      charArray0[7] = '_';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'4', ',', '=', 'E', 't', '=', '4', '_'}, charArray0);
      
      String string0 = StringUtils.wrapIfMissing("CartesianProductTest can only take exactly one type of arguments source.", "Display name '%s' %s");
      assertEquals("Display name '%s' %sCartesianProductTest can only take exactly one type of arguments source.Display name '%s' %s", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.prependIfMissing("G", "Display name '%s' %s", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("Display name '%s' %sG", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("Display name '%s' %sG", "Display name '%s' %sCartesianProductTest can only take exactly one type of arguments source.Display name '%s' %s", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("Display name '%s' %sGDisplay name '%s' %sCartesianProductTest can only take exactly one type of arguments source.Display name '%s' %s", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("eX4x5PJq", "eX4x5PJq", "Minimum abbreviation width is %d");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.wrap
      assertEqualsstring0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.prependIfMissingcharSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertEqualsstring1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("*qSv=wx&SYS$BI", '=', '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals("*qSv=wx&SYS$BI", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap((String) null, '=');
      assertNull(string2);
      
      String string3 = StringUtils.replaceChars("Threshold must not be negative", "rqTBSe?1TXAvr;/", "Another failed with one of the specified exceptions.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ohAeshold must not be negatiee", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(3, stringArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.wrapIfMissing("*U4evTG4t<!i", (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("*U4evTG4t<!i", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Threshold must not be negative", string5);
      assertNotNull(string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("^h_/QwOf#@^F<ma", supplier0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("^h_/QwOf#@^F<ma", string6);
      assertNotNull(string6);
      
      String[] stringArray2 = StringUtils.split("...");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "*U4evTG4t<!i", charArray0);
      assertTrue(int1 == int0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '='}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("^h_/QwOf#@^F<ma");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string7 = StringUtils.upperCase("~/]&g*DSW_t'5:GV*", locale0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("~/]&G*DSW_T'5:GV*", string7);
      assertNotNull(string7);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string8 = StringUtils.repeat("^h_/QwOf#@^F<ma", (String) null, 0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String string0 = StringUtils.repeat("Locale must not be null", (String) null, 2539);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = StringUtils.lowerCase("java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0Object varargs must not be null");
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "java.lang.object@6eb5af84issueextension-591issueextensionjava.lang.object@70903ae6issueextension0object varargs must not be null", (CharSequence) "java.lang.object@6eb5af84issueextension-591issueextensionjava.lang.object@70903ae6issueextension0object varargs must not be null");
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      String string1 = "awAC3$l2Yq.VV@T38u";
      String string2 = ">ur";
      String string3 = StringUtils.leftPad("awAC3$l2Yq.VV@T38u", (-36), ">ur");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("awAC3$l2Yq.VV@T38u", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "java.lang.object@6eb5af84issueextension-591issueextensionjava.lang.object@70903ae6issueextension0object varargs must not be null", (CharSequence) "awAC3$l2Yq.VV@T38u", (-36));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.stripAccents((String) null);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isNumericSpace("java.lang.object@6eb5af84issueextension-591issueextensionjava.lang.object@70903ae6issueextension0object varargs must not be null");
      assertFalse(boolean0);
      
      String string5 = StringUtils.removeEnd((String) null, ">ur");
      assertNull(string5);
      
      String string6 = "yqyPD";
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        Locale.forLanguageTag((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "*U4evTG4t<!i");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("^h_/QwOf#@^F<ma", "...");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertEquals("*U4evTG4t<!i", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("...", '=', '_');
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("^h_/QwOf#@^F<ma", 'c');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("c^h_/QwOf#@^F<mac", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars((String) null, " vs ", "*qSv=wx&SYS$BI");
      assertNull(string3);
      
      String string4 = StringUtils.repeat('c', 5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("ccccc", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string5);
      
      String string6 = StringUtils.defaultIfEmpty(" vs org.apache.commons.lang3.StringUtils", (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals(" vs org.apache.commons.lang3.StringUtils", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.split("*qSv=wx&SYS$BI", '=');
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string7 = StringUtils.substring(" vs ", 5, 21);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringBetween("5JjcG ", " vs ", "");
      assertNull(string8);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      String string9 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertEquals(1, byteArray0.length);
      assertEquals("y", string9);
      assertNotNull(string9);
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("...", 3868);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 8);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Test method must declare at least one parameter: ", "Test method must declare at least one parameter: ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Test method must declare at least one parameter: ", "Test method must declare at least one parameter: ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String string0 = StringUtils.substringAfter("\n", "org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      int[] intArray0 = new int[6];
      intArray0[0] = 1297;
      intArray0[1] = (int) '8';
      intArray0[2] = (int) '8';
      intArray0[3] = 1297;
      intArray0[4] = 361;
      intArray0[5] = (-547);
      String string0 = StringUtils.join(intArray0, '1');
      assertEquals(6, intArray0.length);
      assertEquals("12971561561129713611-547", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {1297, 56, 56, 1297, 361, (-547)}, intArray0);
      
      String string1 = StringUtils.repeat("", "mfrB!ygQl8XRC'G$5", 1297);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("u", " vs org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      String string3 = StringUtils.join(shortArray0, 'y');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(7, shortArray0.length);
      assertEquals("0y0y0y0y0y0y0", string3);
      assertNotNull(string3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      String string4 = StringUtils.stripToNull("12971561561129713611-547");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("12971561561129713611-547", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-591);
      intArray0[1] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (-591);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 0;
      String string0 = StringUtils.joinWith("IssueExtension", objectArray0);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "java.lang.Object@7e2151a1IssueExtension-591IssueExtensionjava.lang.Object@42dbb46IssueExtension0", 3);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("java.lang.Object@7e2151a1IssueExtension-591IssueExtensionjava.lang.Object@42dbb46IssueExtension0", "java.lang.Object@7e2151a1IssueExtension-591IssueExtensionjava.lang.Object@42dbb46IssueExtension0");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join(intArray0, 's');
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, intArray0.length);
      assertEquals("-591s0s0s0s0s0s0", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {(-591), 0, 0, 0, 0, 0, 0}, intArray0);
      
      String string2 = StringUtils.leftPad("qc/", 905, "java.lang.Object@7e2151a1IssueExtension-591IssueExtensionjava.lang.Object@42dbb46IssueExtension0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("\n", "Search and Replace array lengths don't match: ", 3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\nSearch and Replace array lengths don't match: \nSearch and Replace array lengths don't match: \n", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("4", 's');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.center("4", (-216), "Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("4", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("Object varargs must not be null", "java.lang.Object@7e2151a1IssueExtension-591IssueExtensionjava.lang.Object@42dbb46IssueExtension0");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((int[]) null, 'r', (-1593), 10);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)18;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)67;
      longArray0[1] = 1L;
      longArray0[2] = (long) (byte)18;
      longArray0[3] = 18L;
      longArray0[4] = (long) (byte) (-52);
      longArray0[5] = (long) 10;
      longArray0[6] = (long) (byte) (-52);
      longArray0[7] = 18L;
      longArray0[8] = 18L;
      String string2 = StringUtils.join(longArray0, '&', (int) (byte)67, (-1));
      assertEquals(9, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new long[] {67L, 1L, 18L, 18L, (-52L), 10L, (-52L), 18L, 18L}, longArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string3);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      
      String string4 = locale1.getDisplayCountry(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\uC774\uD0C8\uB9AC\uC544", string4);
      assertNotNull(string4);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      
      String string5 = StringUtils.lowerCase((String) null, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNull(string5);
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, "#C|KT;IBm");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\"=QTHktWDAV ^yM@";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = linkedList0.add(locale_Category0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_Category0));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("#C|KT;IBm"));
      assertEquals(0, linkedList1.size());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = Locale.JAPANESE;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      String string1 = locale0.getDisplayName(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("\u4E2D\u56FD\u8A9E (\u4E2D\u83EF\u4EBA\u6C11\u5171\u548C\u56FD)", string1);
      assertNotNull(string1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      String string2 = StringUtils.lowerCase((String) null, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNull(string2);
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\"=QTHktWDAV ^yM@", (CharSequence) null, (-550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceIgnoreCase("", "Illegal range. The step cannot be zero.", "", 33);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 33);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase((CharSequence) null, "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~/]&g*DSW_t'5:GV*", "{index}");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("dL", "dL", "dL");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay(" vs ", " vs ", 14, 14);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs  vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric(" vs ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) " vs  vs ";
      charSequenceArray0[3] = (CharSequence) " vs ";
      String string3 = StringUtils.uncapitalize(" vs  vs ");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" vs  vs ", string3);
      assertNotNull(string3);
      
      charSequenceArray0[4] = (CharSequence) " vs  vs ";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[7] = (CharSequence) " vs  vs ";
      charSequenceArray0[8] = (CharSequence) " vs  vs ";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils", '|');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.stripAccents(":g4JOOHChu#+#u@#9");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(":g4JOOHChu#+#u@#9", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split(")Z^ n&T[9I5h :=", "");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.rightPad("n:69At(dWk'knHu", (-3260));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("n:69At(dWk'knHu", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      String string1 = "Object varargs must not be null";
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("K\u0002=]]ZLo6`"));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      boolean boolean0 = vector0.retainAll(set0);
      assertFalse(boolean0);
      assertFalse(vector0.contains("K\u0002=]]ZLo6`"));
      assertFalse(set0.contains(string1));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      vector0.ensureCapacity(1);
      assertFalse(vector0.contains("K\u0002=]]ZLo6`"));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      String string2 = StringUtils.removeIgnoreCase((String) null, ";UiUrU7f");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWith(" is not in the range '0' - '9'", "Object varargs must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("K\u0002=]]ZLo6`"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("K\u0002=]]ZLo6`"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("K\u0002=]]ZLo6`"));
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        stack0.listIterator(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String string0 = StringUtils.chomp("8");
      assertEquals("8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'U';
      String string0 = StringUtils.abbreviate("", 42, 42);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Strings must not be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter("", 400);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String string0 = StringUtils.unwrap("F", 'T');
      assertEquals("F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-128), "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("^h_/4wO#@^FHTa", "^h_/4wO#@^FHTa");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("^h_/4wO#@^FHTa", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^h_/4wO#@^FHTa", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = ", Length: 0";
      stringArray0[3] = "";
      stringArray0[4] = ", Length: 0";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing(", Length: 0", "", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains(0));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains(0));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean2 = StringUtils.equalsAny(", Length: 0", stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean2);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(navigableSet0.contains(""));
      assertFalse(treeSet0.contains(""));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      String string3 = StringUtils.join((Iterable<?>) treeSet0, 'r');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(treeSet0.contains(""));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ", Length: 0", (CharSequence) ", Length: 0", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.substringBetween("'aJ/", "'aJ/");
      assertNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("#A2?\"mrBE", (String) null);
      assertEquals("#A2?\"mrBE", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("}d_TV@");
      assertFalse(string2.equals((Object)string1));
      assertEquals("}d_TV@", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotBlank("}d_TV@");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "}d_TV@", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "#A2?\"mrBE", (CharSequence) "'aJ/");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.abbreviateMiddle("}d_TV@", "}d_TV@", (-1));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("}d_TV@", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "}d_TV@", (CharSequence) "#A2?\"mrBE");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string4 = StringUtils.trimToEmpty("MFd");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("MFd", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string5 = StringUtils.join((List<?>) arrayList0, 'x', 2000, 59);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean4 = StringUtils.equals((CharSequence) "", (CharSequence) "#A2?\"mrBE");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.center(string1, 49, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace(string1);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(string2));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0);
      assertNotNull(list0);
      assertFalse(hashSet0.contains(string2));
      assertFalse(list0.contains(string2));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(hashSet0.contains(string2));
      assertFalse(list0.contains(string2));
      assertFalse(list1.contains(string2));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join(list1, '=', 53, 8192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 8192
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String string0 = StringUtils.chomp("6_>C)[crfuH&=NXNb", "6_>C)[crfuH&=NXNb");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1}Z6PSPJbpc", (CharSequence) null, 270);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, (String) null);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.difference("LNid9i%u ", "LNid9i%u ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "LNid9i%u ", 30);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("G", "G");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(" ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "}kcLCartesianProductTest can only take exactly one type of arguments source.");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(" ", "*U4evTG4t<!i");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.difference("*U4evTG4t<!i", "}kcL");
      assertFalse(string1.equals((Object)string0));
      assertEquals("}kcL", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.startsWithAny("}kcLCartesianProductTest can only take exactly one type of arguments source.", stringArray0);
      assertSame(stringArray0, stringArray1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
      
      String string2 = StringUtils.trimToEmpty("...");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("}kcLCartesianProductTest can only take exactly one type of arguments source.", (-981), '.');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("}kcLCartesianProductTest can only take exactly one type of arguments source.", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "~/]&g*DSW_t'5:GV*", 44);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("}kcLCartesianProductTest can only take exactly one type of arguments source.", "}kcL", 44);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("QKV");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.substringBefore(")Z^ n&T[9I5h :=", "~/]&g*DSW_t'5:GV*");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(")Z^ n&T[9I5h :=", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("~/]&g*DSW_t'5:GV*", "pZyfmR*8\".UZ.m#K{-", "...");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("~/]&g*DSW_t'5:GV*", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize("]{lu_t'OxC ");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("]{lu_t'OxC ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.difference((String) null, "}kcL");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("}kcL", string7);
      assertNotNull(string7);
      
      String[] stringArray3 = StringUtils.split("]{lu_t'OxC ");
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int2 = StringUtils.length("...");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, int2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "}kcL", (CharSequence) "~/]&g*DSW_t'5:GV*");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("^h_/QwOf#@^F<ma", "62");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^h_/QwOf#@^F<ma", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^h_/QwOf#@^F<ma", 31);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "62", (CharSequence) "^h_/QwOf#@^F<ma", 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBeforeLast(":@AvzUF@%0p/K4", ":@AvzUF@%0p/K4");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      String string3 = StringUtils.join(longArray0, '5', 2769, 76);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, longArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "^h_/QwOf#@^F<ma", "y~&yUgW*8s");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.repeat("", ";TYs[%hO=[rA!F'Sm!", (-1306));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("~/]&g*DSW_t'5:GV*");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("5", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("y~&yUgW*8s", 2916);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 1);
      assertEquals(0, int0);
      
      String string0 = StringUtils.remove("2ei~;Zyj^2$h}", '_');
      assertEquals("2ei~;Zyj^2$h}", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "2ei~;Zyj^2$h}", (CharSequence) "1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X3?_X");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty("W'\"6*");
      assertFalse(string1.equals((Object)string0));
      assertEquals("W'\"6*", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.unwrap("W'\"6*", "W'\"6*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("1eGHfOg\"?$X:fV1@", "1eGHfOg\"?$X:fV1@", 9);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "1eGHfOg\"?$X:fV1@", (CharSequence) "1eGHfOg\"?$X:fV1@");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("", "", 2555);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("", "]{lu_t'OxC ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("]{lu_t'OxC ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("#", "SXHQj=SH1", "SXHQj=SH1", 49);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("#", string4);
      assertNotNull(string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '2';
      longArray0[1] = (long) '=';
      longArray0[2] = (long) 2555;
      longArray0[3] = (long) 49;
      longArray0[4] = (long) 49;
      String string5 = StringUtils.join(longArray0, '=', 49, (-3251));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals(5, longArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new long[] {50L, 61L, 2555L, 49L, 49L}, longArray0);
      
      String string6 = StringUtils.substringBetween("#", "]{lu_t'OxC ", "#");
      assertNull(string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it_IT", locale1.toString());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.ordinalIndexOf(string0, "SXHQj=SH1", 2555);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains('='));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String string7 = StringUtils.join((List<?>) vector0, '1', 2, 2);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(vector0.contains(49));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      String string0 = StringUtils.join(doubleArray0, 'd', 0, 0);
      assertEquals(1, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.center("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween(",.#0BRo2{cN", "xRVd\"''Bi=5n");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(string1));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0);
      assertNotNull(list0);
      assertFalse(hashSet0.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(hashSet0.contains(string1));
      assertFalse(list0.contains(string1));
      assertFalse(list1.contains(string1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      boolean boolean1 = hashSet0.add("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(hashSet0.contains(",.#0BRo2{cN"));
      assertTrue(hashSet0.contains(string0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list1);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertFalse(hashSet0.contains(",.#0BRo2{cN"));
      assertTrue(hashSet0.contains(string0));
      assertFalse(list0.contains(string0));
      assertFalse(list1.contains(string0));
      assertFalse(list2.contains(string0));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list1, list2);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertFalse(hashSet0.contains(",.#0BRo2{cN"));
      assertTrue(hashSet0.contains(string0));
      assertFalse(list0.contains(string0));
      assertFalse(list1.contains(string0));
      assertFalse(list3.contains(string0));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join(list3, 'E', 0, 499);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 499
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'w', (-1), 943);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String string0 = StringUtils.center(".", (-3191), "...");
      assertEquals(".", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(".");
      assertFalse(boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("."));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string1 = StringUtils.join((List<?>) stack0, 'E', 5124, 5124);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3191);
      intArray0[1] = 5124;
      intArray0[2] = 2368;
      intArray0[3] = 37;
      intArray0[4] = 37;
      intArray0[5] = 5124;
      intArray0[6] = (int) 'g';
      String string2 = StringUtils.join(intArray0, 'g');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, intArray0.length);
      assertEquals("-3191g5124g2368g37g37g5124g103", string2);
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-3191), 5124, 2368, 37, 37, 5124, 103}, intArray0);
      
      boolean boolean1 = StringUtils.isEmpty("-3191g5124g2368g37g37g5124g103");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(charSequenceArray0[0], (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.rotate("org.apache.commons.lang3.ObjectUtils$Null", (-2832));
      assertEquals(".apache.commons.lang3.ObjectUtils$Nullorg", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-2832);
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      longArray0[4] = (long) (-2832);
      longArray0[5] = (long) (-2832);
      String string1 = StringUtils.join(longArray0, 'E');
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, longArray0.length);
      assertEquals("0E-2832E1E1E-2832E-2832", string1);
      assertNotNull(string1);
      assertArrayEquals(new long[] {0L, (-2832L), 1L, 1L, (-2832L), (-2832L)}, longArray0);
      
      String string2 = StringUtils.substringBeforeLast("j=DJ7j%fN=1=8;2yBi", "k40/Yx$j7Gey~Y=8N");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("j=DJ7j%fN=1=8;2yBi", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("j=DJ7j%fN=1=8;2yBi", "org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("j=DJ7j%fN=1=8;2yB", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("j=DJ7j%fN=1=8;2yB", "(", 0, 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("(j=DJ7j%fN=1=8;2yB", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "j=DJ7j%fN=1=8;2yB";
      stringArray0[1] = "j=DJ7j%fN=1=8;2yBi";
      stringArray0[2] = "(j=DJ7j%fN=1=8;2yB";
      stringArray0[3] = "j=DJ7j%fN=1=8;2yB";
      stringArray0[4] = "j=DJ7j%fN=1=8;2yBi";
      stringArray0[5] = "0E-2832E1E1E-2832E-2832";
      stringArray0[6] = "j=DJ7j%fN=1=8;2yB";
      String string5 = StringUtils.replaceEachRepeatedly("k40/Yx$j7Gey~Y=8N", stringArray0, stringArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertEquals("k40/Yx$j7Gey~Y=8N", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      String string1 = StringUtils.join((byte[]) null, 'j');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      String string0 = StringUtils.join(byteArray0, 'K');
      assertEquals(2, byteArray0.length);
      assertEquals("0K0", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '5', 7, 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.unwrap("Strings must not be null", "");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'U';
      charArray0[2] = '7';
      charArray0[3] = 'D';
      charArray0[4] = 'n';
      charArray0[5] = 't';
      charArray0[6] = 'j';
      charArray0[7] = 'K';
      charArray0[8] = 'I';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Strings must not be null", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'u', 'U', '7', 'D', 'n', 't', 'j', 'K', 'I'}, charArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Strings must not be null";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string2 = StringUtils.abbreviateMiddle("Strings must not be null", "b6+Cko@{c''aa6Aw4", 27);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("'S>Vyd&Y={", "90", 29);
      assertEquals("'S>Vyd&Y={", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("kmhZe zG;gL5'");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('7', 9);
      assertFalse(string1.equals((Object)string0));
      assertEquals("777777777", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("6d@PWy  04\"uKHeJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = ',';
      charArray0[2] = '=';
      charArray0[3] = 'E';
      charArray0[4] = 't';
      charArray0[5] = '=';
      charArray0[6] = '4';
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 16);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.toRootLowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'4', ',', '=', 'E', 't', '=', '4', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "3Ko-?70a<}");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3Ko-?70a<}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substring("Illegal range. The step cannot be zero.", 96);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Illegal range. The step cannot be zero.");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Illegal range. The step cannot be zero.", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("RTp29:M~<C/V#Bs(VGy");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(15, stringArray0.length);
      assertEquals(0, int2);
      
      boolean boolean2 = StringUtils.startsWith("3Ko-?70a<}", "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("", 0);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOf((CharSequence) "{index}", 0, 13);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("1k)XA fw-`o6u'I", "", stringArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals(15, stringArray0.length);
      assertEquals("1k)XA fw-`o6u'I", string7);
      assertNotNull(string7);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string2));
      
      Stream<String> stream0 = treeSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(treeSet0.contains(string2));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains(string2));
      assertFalse(navigableSet0.contains(string2));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = new Locale("Locale must not be null");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("locale must not be null", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("locale must not be null", locale1.toString());
      
      Locale locale2 = locale1.stripExtensions();
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("locale must not be null", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("locale must not be null", locale1.toString());
      assertEquals("locale must not be null", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("locale must not be null", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      
      String string8 = locale0.getDisplayCountry(locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Italy", string8);
      assertNotNull(string8);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("locale must not be null", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("locale must not be null", locale1.toString());
      
      String string9 = StringUtils.lowerCase("1k)XA fw-`o6u'I", locale1);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertEquals("1k)xa fw-`o6u'i", string9);
      assertNotNull(string9);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("locale must not be null", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("locale must not be null", locale1.toString());
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" is not in the range '0' - '9' is not in the range '0' - '9'", " is not in the range '0' - '9' is not in the range '0' - '9'");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center(" is not in the range '0' - '9' is not in the range '0' - '9'", (-1));
      assertEquals(" is not in the range '0' - '9' is not in the range '0' - '9'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", (-2747));
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("8", "8", (-873));
      assertEquals("8", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, '7');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      char char0 = 'e';
      String string0 = StringUtils.substringBetween("#C|KT;IBm", "#C|KT;IBm");
      assertNull(string0);
      
      String string1 = StringUtils.chomp((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("#C|KT;IBm", (CharSequence) null, 'e');
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "#C|KT;IBm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "6NT{PiC;", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.mid(string0, '=', '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", 1353);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String string0 = StringUtils.removePattern(".", "...");
      assertEquals(".", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      boolean boolean0 = StringUtils.containsAny((CharSequence) ".", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {',', ',', ',', ','}, charArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "...";
      stringArray0[1] = "FwQ)Z^ n&T[9I5h :=";
      stringArray0[2] = ".";
      stringArray0[3] = "...";
      stringArray0[4] = ".";
      stringArray0[5] = ".";
      stringArray0[6] = "...";
      stringArray0[7] = "...";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("maxWith cannot be negative", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, (-1344));
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("K`R8", (-1344), (-364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 252, 252);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(252, comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string1 = priorityQueue0.poll();
      assertNull(string1);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add(" or any enclosing class.");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(" or any enclosing class."));
      assertEquals(1, priorityQueue0.size());
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "V*Bsg1!pr;Wz1g0ov");
      assertEquals(" or any enclosing class.", string2);
      assertNotNull(string2);
      assertFalse(priorityQueue0.contains("V*Bsg1!pr;Wz1g0ov"));
      assertTrue(priorityQueue0.contains(string2));
      assertEquals(1, priorityQueue0.size());
      
      String string3 = StringUtils.substring("8k7s", 252, (-1675));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("", "PAcX>IxS#{");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("PAcX>IxS#{", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string3));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(string3));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, 'O');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(arrayList0.contains(string3));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'O');
      assertEquals(0, int0);
      
      String string6 = StringUtils.mid("org.junitpioneer.vintage.ExpectedExceptionExtension", 0, 7);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("org.jun", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string7 = StringUtils.trim(" or any enclosing class.");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("or any enclosing class.", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      charArray0[7] = 'O';
      charArray0[8] = 'O';
      String string8 = StringUtils.valueOf(charArray0);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals(9, charArray0.length);
      assertEquals("OOOOOOOOO", string8);
      assertNotNull(string8);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, charArray0);
      
      String string9 = StringUtils.join((List<?>) arrayList0, 'O', 321, 116);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertEquals("", string9);
      assertNotNull(string9);
      assertFalse(arrayList0.contains(string3));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "OOOOOOOOO", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "D", (CharSequence) "D");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.removeStart("iip2|lo*iip2|lo*", "4F3]4'P");
      assertEquals("iip2|lo*iip2|lo*", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "iip2|lo*iip2|lo*", (CharSequence) "iip2|lo*iip2|lo*");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "iip2|lo*iip2|lo*", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Minimum abbreiationwidth with offset is%d");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("d%si tesffo htiw htdiwnoitaierbba muminiM", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.StdIoExtension", 'O');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreiationwidth with offset is%d", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 321;
      floatArray0[1] = (float) 'O';
      String string5 = StringUtils.join(floatArray0, 'O', 10, 0);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals(2, floatArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new float[] {321.0F, 79.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isNumeric("d%si tesffo htiw htdiwnoitaierbba muminiM");
      assertFalse(boolean0);
      
      String string6 = StringUtils.substring("DefaultTimeZone", 11, (-1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Zon", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.valueOf(charArray0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals(1, charArray0.length);
      assertEquals("O", string7);
      assertNotNull(string7);
      assertArrayEquals(new char[] {'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.StdIoExtension", 'O');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 321;
      boolean boolean0 = StringUtils.containsNone((CharSequence) "d% si tesffo htiw htdiw noitaiverbba muminiM", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("maxWith cannot be negative", "", 1882);
      assertFalse(int1 == int0);
      assertEquals(26, int1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "{'T)G+A!ttO=k02", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("Minimum abbreviation width with offset is %d", "d% si tesffo htiw htdiw noitaiverbba muminiM");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Extension context \"", "Extension context \"");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("Parameter of type %s must reference an Enum type", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("|4~w5f3lEd");
      assertEquals("|4~w5f3led", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L2|4~w5f3lEd", "L2|4~w5f3lEd");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chomp("L2|4~w5f3lEd", "L2|4~w5f3lEd");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("L2|4~w5f3lEd", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "#@U", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "[l-\"\"E", (CharSequence) "[l-\"\"E");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "StdIo_System_Out";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string0 = StringUtils.unwrap(stringArray0[0], 'C');
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("org.junitpioneer.v", string0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right(" vs ", (-68));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) " ", (-68), 1);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase(":Oh*5#", string0, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(9, stringArray0.length);
      assertEquals(":Oh*5#", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      String string1 = StringUtils.unwrap(")7J8", '/');
      assertFalse(string1.equals((Object)string0));
      assertEquals(")7J8", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) ")7J8";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width is %d";
      String string2 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is %d", "", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast(" vs org.apache.commons.lang3.StringUtils", "org.junitpioneer.v");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right(" ", 18);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1807, 61);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("j[OCl`(Y'sNtX", ")7J8", charSequenceArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("j[OCl`(Y'sNtX", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("No instructions to disable");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("No instructions to disable", 9, " ");
      assertEquals("No instructions to disable", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay(" vs ", " vs ", 14, 14);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs  vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric(" vs ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) " vs  vs ";
      charSequenceArray0[3] = (CharSequence) " vs ";
      String string3 = StringUtils.uncapitalize(" vs  vs ");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals(" vs  vs ", string3);
      assertNotNull(string3);
      
      charSequenceArray0[4] = (CharSequence) " vs  vs ";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[7] = (CharSequence) " vs  vs ";
      charSequenceArray0[8] = (CharSequence) " vs  vs ";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string4 = StringUtils.rightPad("The type must not be null", 14, (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("The type must not be null", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "The type must not be null", charSequenceArray0[0]);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)69;
      String string0 = StringUtils.defaultString("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("Minimum abbreviation width with offset is %d", "-}J\"");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 501);
      assertEquals(0, int0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedList0.add(locale_Category0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_Category0));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = linkedList1.containsAll(linkedList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(locale_Category0));
      assertFalse(linkedList1.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      String string2 = StringUtils.substringBetween("FwQ)Z^ n&T[9I5h :=", "%s was not annotated with %s or %s but should have been.");
      assertNull(string2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) (byte) (-128);
      objectArray0[2] = (Object) (byte)69;
      String string3 = StringUtils.joinWith("-}J\"", objectArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("[FORMAT]-}J\"-128-}J\"69", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join(objectArray0, "Minimum abbreviation width with offset is %d", (int) (byte) (-128), (-1493));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(3, objectArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = "D";
      int int0 = (-3753);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("D", (-3753));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 24);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      String string1 = StringUtils.unwrap(")7J8", '/');
      assertFalse(string1.equals((Object)string0));
      assertEquals(")7J8", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) ")7J8";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width is %d";
      String string2 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is %d", "", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split(")7J8");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      String string3 = StringUtils.valueOf(charArray1);
      assertNotSame(charArray1, charArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new char[] {}, charArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" vs ", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = ", Length: 0";
      stringArray0[3] = "";
      stringArray0[4] = ", Length: 0";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing(", Length: 0", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(", Length: 0"));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains(", Length: 0"));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains(", Length: 0"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean2 = StringUtils.equalsAny(", Length: 0", stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumeric(", Length: 0");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.leftPad("1}Z6PSPJbpc", 3736, "1}Z6PSPJbpc");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      String string0 = StringUtils.joinWith("", objectArray0);
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Mtr|\",,rv?A^~j", "Mtr|\",,rv?A^~j", (-51));
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("}kcL", "%g9ofo");
      assertEquals(88, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-51);
      intArray0[1] = (-51);
      intArray0[2] = (-51);
      intArray0[3] = 88;
      intArray0[4] = (-51);
      intArray0[5] = (-51);
      String string1 = StringUtils.join(intArray0, 'x');
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, intArray0.length);
      assertEquals("-51x-51x-51x88x-51x-51", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {(-51), (-51), (-51), 88, (-51), (-51)}, intArray0);
      
      String string2 = StringUtils.leftPad("", 88, "%g9ofo");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9ofo%g9o", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("...", "...", (-51));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      String string0 = StringUtils.chomp("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension");
      assertEquals("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String string0 = StringUtils.swapCase("Sz+tdIo_System_Out");
      assertEquals("sZ+TDiO_sYSTEM_oUT", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Sz+tdIo_System_Out", "sZ+TDiO_sYSTEM_oUT");
      assertEquals(0.45, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String string0 = StringUtils.leftPad("...", 314);
      assertEquals("                                                                                                                                                                                                                                                                                                                       ...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "                                                                                                                                                                                                                                                                                                                       ...", (CharSequence) "...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("7#r1aDc-\"g0 m0)ab");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Psu", "Psu");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Psu", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("5!i4LJ", "No instructions to disable");
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Fyt]f=?uXdv,MJ");
      assertEquals("Fyt]f=?uXdv,MJ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Fyt]f=?uXdv,MJ", (CharSequence) "Fyt]f=?uXdv,MJ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEnd("Fyt]f=?uXdv,MJ", "ej7@Z]yoV");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Fyt]f=?uXdv,MJ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("ej7@Z]yoV", "Fyt]f=?uXdv,MJ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      String string0 = StringUtils.truncate("", 34);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((char[]) null, 'u');
      assertNull(string1);
      
      String string2 = StringUtils.overlay("Locale must not be null", (String) null, 2575, 34);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("\r");
      assertNull(string3);
      
      String string4 = StringUtils.defaultString("YZwueLT_p_uM9YY:\"f", "BvuR2b! @Bwj3#");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("YZwueLT_p_uM9YY:\"f", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "YZwueLT_p_uM9YY:\"f", (CharSequence) "Locale must not be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      String string0 = StringUtils.substring("org.junitpioneer.v", (-2218), (-2218));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, doubleArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("aLA!G%4ia", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("aLA!G%4ia", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = vector0.retainAll(linkedHashSet0);
      assertFalse(boolean0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      vector0.ensureCapacity(2415);
      assertFalse(vector0.contains(2415));
      assertEquals(2415, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.removeIgnoreCase(" is not in the range '0' - '9'", "");
      assertEquals(" is not in the range '0' - '9'", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.endsWith("", " is not in the range '0' - '9'");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(" is not in the range '0' - '9'"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean2 = arrayList0.add((String) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayList0.contains(" is not in the range '0' - '9'"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(" is not in the range '0' - '9'"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, " is not in the range '0' - '9'");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(arrayList0.contains(" is not in the range '0' - '9'"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string2 = StringUtils.removeIgnoreCase("No @DisabledUntil annotation found on element", "...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("No @DisabledUntil annotation found on element", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Charset.forName("6%O-");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 6%O-
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      String string0 = StringUtils.unwrap("Strings must not be null", "");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'U';
      charArray0[2] = '7';
      charArray0[3] = 'D';
      charArray0[4] = 'n';
      charArray0[5] = 't';
      charArray0[6] = 'j';
      charArray0[7] = 'K';
      charArray0[8] = 'I';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Strings must not be null", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'u', 'U', '7', 'D', 'n', 't', 'j', 'K', 'I'}, charArray0);
      
      String string1 = StringUtils.trimToEmpty("J}b`4W#xLDvFRH][_4x");
      assertFalse(string1.equals((Object)string0));
      assertEquals("J}b`4W#xLDvFRH][_4x", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("Strings must not be null", supplier0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string2));
      assertEquals("Strings must not be null", charSequence0);
      assertNotNull(charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      String string3 = StringUtils.substringBeforeLast("Strings must not be null", "Strings must not be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "J}b`4W#xLDvFRH][_4x";
      String string4 = StringUtils.removeIgnoreCase("Object varargs must not be null", "Strings must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      charSequenceArray0[3] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      
      try { 
        StringUtils.getBytes("1-`t}x;[fG_m9b", "Object varargs must not be null");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 2376);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("org.junitpioneer.jupiter.AbstractEntryBasedExtension", 'h', 'o');
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Display name '%s' %s");
      assertNull(stringArray0);
      
      String string3 = StringUtils.capitalize("Display name '%s' %s");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Display name '%s' %s", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", "");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.params.LongRange");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.AbstractEntryBasedExtension", "maxWith cannot be negative");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.replace("", "org.junitpioneer.v", "Display name '%s' %s");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.remove("/2I", '@');
      assertEquals("/2I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("/2I");
      assertTrue(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate((String) null, 1);
      assertNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "/2I", (CharSequence) null);
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("/2I", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "/2I", (CharSequence) null, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.toRootLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "K\u0002=]]ZLo6`", (char[]) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("/2I", "/2I");
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/2I", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      int int4 = StringUtils.length("/2I");
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(3, int4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("/2I", "$lA],i%O]YVw)k", 3658);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.mid("w!R{y4d", (-706), 1);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals("w", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.mid("Fyt]f?Xd,MJ", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = StringUtils.rightPad(" vs ", (-1953), 'q');
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, '5');
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, shortArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", 0, (-1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "!ec/7wSoB", "\n");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.reverse(" vs ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" sv ", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("4~j$p%rc3FV|uM", 'J');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.rightPad("java.lang.Object@3a83c2f0IssueExtension-591IssueExtensionjava.lang.Object@16a850f0IssueExtension-591", 0, "EOpLN$DbR&O;c");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("tW%Dc&pBf+<2", "\n", "\r");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("tW%Dc&pBf+<2", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", 2, 1543);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("efaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(" ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 2446);
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeStart(">;q=mL8nW+VV&", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(">;q=mL8nW+VV&", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = '!';
      charArray0[5] = 'O';
      charArray0[6] = '!';
      charArray0[7] = '!';
      boolean boolean1 = StringUtils.containsNone((CharSequence) ">;q=mL8nW+VV&", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'2', 'O', 'O', 'O', '!', 'O', '!', '!'}, charArray0);
      
      String string5 = StringUtils.remove("Locale must not be null", "6}2f&U;{{-8&3THH-");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Locale must not be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.remove("", "Locale must not be null");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.compareIgnoreCase("{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String string0 = StringUtils.removeStart("oHP.Lp/UL%$", (String) null);
      assertEquals("oHP.Lp/UL%$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("oHP.Lp/UL%$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("K\u0002=]]ZLo6`", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.defaultIfBlank("Object varargs must not be null", "~/]&g*DSW_t'5:GV*");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("~/]&g*DSW_t'5:GV*", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String string0 = StringUtils.substring("Extension context \"", 598, 4);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null);
      assertEquals(1, int0);
      
      String string1 = StringUtils.substringBefore("Extension context \"", "Extension context \"");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, (String) null, " ");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "n2*wy^5");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.swapCase("e{/=TGm)h]_mg");
      assertEquals("E{/=tgM)H]_MG", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "e{/=TGm)h]_mg", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 3);
      assertEquals(", L", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ", L", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = ", Length: 0";
      stringArray0[3] = ", L";
      stringArray0[4] = ", Length: 0";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing(", Length: 0", "", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) ", L");
      assertEquals((-1), int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(3));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add(", L");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains(3));
      assertTrue(priorityQueue0.contains(", L"));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains(3));
      assertTrue(priorityQueue0.contains(", L"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean2 = StringUtils.equalsAny(", Length: 0", stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean3);
      
      String string3 = StringUtils.reverse(", Length: 0");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0 :htgneL ,", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String string0 = StringUtils.rotate("Br.$G5u,q:?iXl0 I:", 10);
      assertEquals("q:?iXl0 I:Br.$G5u,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("Br.$G5u,q:?iXl0 I:", '`');
      assertFalse(string1.equals((Object)string0));
      assertEquals("`Br.$G5u,q:?iXl0 I:`", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "`Br.$G5u,q:?iXl0 I:`", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "_a3W9I8}\"R%5A`S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("%`nh1:r)OrpM", "%`nh1:r)OrpM");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6
         // %`nh1:r)OrpM
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.removePattern(".", "...");
      assertEquals(".", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      boolean boolean0 = StringUtils.containsAny((CharSequence) ".", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {',', ',', ',', ','}, charArray0);
      
      int int0 = StringUtils.compare("Display name '%s' %s", ".");
      assertEquals(22, int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "...", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {',', ',', ',', ','}, charArray0);
      
      String string1 = StringUtils.mid("Minimum abbreviation width with offset is %d", (-3191), (-189));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ".";
      charSequenceArray0[1] = (CharSequence) "Display name '%s' %s";
      charSequenceArray0[2] = (CharSequence) "Display name '%s' %s";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean2 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) ',';
      doubleArray0[1] = (-3547.4112);
      doubleArray0[2] = (double) (-2501);
      doubleArray0[3] = (double) ',';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, ',', (-189), 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -189
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      String string0 = StringUtils.join(doubleArray0, 'd', 0, 0);
      assertEquals(1, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.center("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween(",.#0BRo2{cN", "xRVd\"''Bi=5n");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(""));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0);
      assertNotNull(list0);
      assertFalse(hashSet0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(hashSet0.contains(""));
      assertFalse(list0.contains(""));
      assertFalse(list1.contains(""));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      boolean boolean1 = hashSet0.add("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(hashSet0.contains("xRVd\"''Bi=5n"));
      assertTrue(hashSet0.contains(""));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      String string3 = StringUtils.join(list0, 'E', 5124, 37);
      assertNotSame(list0, list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(hashSet0.contains("xRVd\"''Bi=5n"));
      assertTrue(hashSet0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'd';
      intArray0[1] = 0;
      intArray0[2] = (int) 'd';
      intArray0[3] = (int) 'E';
      String string4 = StringUtils.join(intArray0, 'g');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4, intArray0.length);
      assertEquals("100g0g100g69", string4);
      assertNotNull(string4);
      assertArrayEquals(new int[] {100, 0, 100, 69}, intArray0);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("i&9q3}.FnLdXu}1#");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("i&9q3}.FnLdXu}1#", "i&9q3}.FnLdXu}1#");
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertEquals(14, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "offset cannot be negative");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "offset cannot be negative";
      String string1 = StringUtils.remove("/2I", 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals("/2I", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfter("o#8x=mXNFp*'~_Yb-", (-1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("X5", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("X5", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase((String) null, charSequenceArray0[1], charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.repeat('K', (-255));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/2I";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "CartesianProductTest can only take exactly one type of arguments source.";
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(5, stringArray0.length);
      assertEquals("/2I", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultIfEmpty("/2I", "X5");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertEquals("/2I", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.split("/2I", '#');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "X5", (CharSequence) "offset cannot be negative");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.substring("Xm0G~c9^_NN/'", (-1), (-255));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'q', (-1879048189), 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1879048189
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, 'm');
      assertEquals(6, stringArray0.length);
      assertEquals("mmmmm", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("mmmmm", 51);
      assertFalse(string1.equals((Object)string0));
      assertEquals("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.StdIoExtension", 'O');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 321;
      boolean boolean0 = StringUtils.containsNone((CharSequence) "d% si tesffo htiw htdiw noitaiverbba muminiM", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("maxWith cannot be negative", "", 1882);
      assertFalse(int1 == int0);
      assertEquals(26, int1);
      
      try { 
        StringUtils.getBytes("{'T)G+A!ttO=k02", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{NlgOB{|s", "org.");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase(">", "Sv{C");
      assertEquals((-53), int0);
      
      String string0 = StringUtils.defaultString(">", "{NlgOB{|s");
      assertEquals(">", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(":z*f>}", (-1423));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      String string0 = StringUtils.replaceChars("...", "iywd+s+<,`Odq", "...");
      assertEquals("...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-591);
      intArray0[1] = 0;
      intArray0[2] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-591);
      objectArray0[1] = (Object) (-591);
      objectArray0[2] = (Object) (-591);
      objectArray0[3] = object0;
      String string0 = StringUtils.join(objectArray0, ',', 2745, 1714);
      assertEquals(4, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.split("~/]&g*DSW_t'5:GV*", 'g');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Minimum abbreviation width with offset is %d");
      assertEquals("minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.rightPad(" vs ", (-1953), 'q');
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, '5');
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, shortArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", 0, (-1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "!ec/7wSoB", "\n");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.join(objectArray0, 'f', 0, (-1953));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, objectArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((long[]) null, '$', 14, 1882);
      assertNull(string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfBlank("Q.", supplier0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Q.", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("IT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string7 = locale1.getDisplayCountry(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("\uC774\uD0C8\uB9AC\uC544", string7);
      assertNotNull(string7);
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string8 = StringUtils.lowerCase("...", locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertEquals("...", string8);
      assertNotNull(string8);
      assertEquals("IT", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      boolean boolean0 = StringUtils.equals((CharSequence) "...", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("{[0-9]+}");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("{[0-9]+}");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "{[0-9]+}", (CharSequence[]) stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" K)9", "4Oy tl8IP`*XR4");
      assertEquals(" K)9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      String string0 = StringUtils.leftPad("1}Z6PSPJbpc", 10, "1}Z6PSPJbpc");
      assertEquals("1}Z6PSPJbpc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("1}Z6PSPJbpc", 2725, 72);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("'u`L0", 2001);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("...", "");
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      stringArray0[2] = "...";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("...", "]{lu_t'OxC ");
      assertEquals("]{lu_t'OxC ", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWithAny("^h_/QwOf#@^F<ma", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("~/]&g*DSW_t'5:GV*", (-981), '.');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("~/]&g*DSW_t'5:GV*", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "...", (-981));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("~/]&g*DSW_t'5:GV*", "~/]&g*DSW_t'5:GV*", (-981));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("\"mGjuc~Y6 Dg2GD");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.substringBefore("~/]&g*DSW_t'5:GV*", "}kcL");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("~/]&g*DSW_t'5:GV*", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("...", "\"mGjuc~Y6 Dg2GD", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("~/]&g*DSW_t'5:GV*");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("~/]&g*DSW_t'5:GV*", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference("\"mGjuc~Y6 Dg2GD", "~/]&g*DSW_t'5:GV*");
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("~/]&g*DSW_t'5:GV*", string6);
      assertNotNull(string6);
      
      String[] stringArray3 = StringUtils.split("4a|,^GB=pI'js^J4a");
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int2 = StringUtils.length("~/]&g*DSW_t'5:GV*");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(18, int2);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "~/]&g*DSW_t'5:GV*");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String string0 = StringUtils.removePattern(".", "...");
      assertEquals(".", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      String string1 = StringUtils.replaceIgnoreCase((String) null, ".", (String) null);
      assertNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string2 = StringUtils.join(objectArray0, ';', (-3191), (-1610612734));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("pOO=?>QLqTtctF");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("pOO=?>QLqTtctF", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("~/]&g*DSW_t'5:GV*");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("*VG:5't_WSD*g&]/~", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'r');
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "pOO=?>QLqTtctF", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ".", charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("*VG:5't_WSD*g&]/~", (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "ZKS*8tv/`7T$P/_");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String string0 = StringUtils.left("Minimum abbreviation width with offset is %d", 1);
      assertEquals("M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertFalse(priorityQueue0.contains(string1));
      assertEquals(2, priorityQueue0.size());
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "|&=,BBM~oe1?C");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d|&=,BBM~oe1?CMinimum abbreviation width with offset is %d", string2);
      assertNotNull(string2);
      assertTrue(priorityQueue0.contains("Minimum abbreviation width with offset is %d"));
      assertFalse(priorityQueue0.contains(string1));
      assertEquals(2, priorityQueue0.size());
      
      String string3 = StringUtils.substring("V*Bsg1!pr;Wz1g0ov", (-1675), (-1675));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("M", "");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("M", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string5 = StringUtils.substringBefore("Euh BV", (String) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Euh BV", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isMixedCase("V*Bsg1!pr;Wz1g0ov");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "Object varargs must not be null", "Euh BV");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "M", (CharSequence) "", (-1675));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s", "s");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("#M*`-V~oW]Ie\u0007M");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Iterator<?>) null, "#M*`-V~oW]Ie\u0007M");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 8192);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, "Array element ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "Object varargs must not be null");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Object varargs must not be null", 24);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Object varargs must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeFirst("Object varargs must not be null", "Object varargs must not be null");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trim("");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween((String) null, (String) null, "FwQ");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "FwQ";
      boolean boolean1 = StringUtils.startsWithAny("Object varargs must not be null", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string6 = StringUtils.trimToEmpty("");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center((String) null, (-981), '5');
      assertNull(string7);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 3);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "", 24);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string8 = StringUtils.substringBefore("&0So{M%@i1\"B", "~/]&g*DSW_t'5:GV*");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertEquals("&0So{M%@i1\"B", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.replace("WG4H8^M{^r3Uh}z3g", ":@'o<K\">QthQ= ", "FwQ)Z^ n&T[9I5h :=");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertEquals("WG4H8^M{^r3Uh}z3g", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.capitalize("%s was not annotated with @ArgumentsSource but should have been.");
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.difference("%s was not annotated with @ArgumentsSource but should have been.", "Object varargs must not be null");
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertEquals("Object varargs must not be null", string11);
      assertNotNull(string11);
      
      String[] stringArray1 = StringUtils.split("~/]&g*DSW_t'5:GV*");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int3 = StringUtils.length("WG4H8^M{^r3Uh}z3g");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(18, int3);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "FwQ", (CharSequence) "WG4H8^M{^r3Uh}z3g");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("", "", 2555);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("", "]{lu_t'OxC ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("]{lu_t'OxC ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("#", 2555);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("]{lu_t'OxC ");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("]{lu_t'OxC ", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWith("", "]{lu_t'OxC ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.substringAfterLast(string0, "]{lu_t'OxC ");
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.right("{index}", 0);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.substringAfter("", "]{lu_t'OxC ");
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.removeIgnoreCase("", "%s: Could not resolve parameter by name (%s).");
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string9));
      assertEquals("", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.rotate("_kR\"*", (-1512));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertEquals("R\"*_k", string11);
      assertNotNull(string11);
      
      boolean boolean2 = StringUtils.startsWithAny("", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      String string12 = StringUtils.strip("5VA(GozSI]Cmmm", (String) null);
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string5));
      assertEquals("5VA(GozSI]Cmmm", string12);
      assertNotNull(string12);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("yEHHD=6;5D[l!hc6@*)", "yEHHD=6;5D[l!hc6@*)");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // yEHHD=6;5D[l!hc6@*)
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, 3);
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("eR(P bnz7`0l", "");
      assertEquals("eR(P bnz7`0l", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "[YLJjx_^";
      charSequenceArray0[1] = (CharSequence) "[YLJjx_^";
      String string0 = StringUtils.prependIfMissingIgnoreCase("[YLJjx_^", "X1=M7_XH]LCf!dd^o,&", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("[YLJjx_^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.prependIfMissingIgnoreCase("lPM", "el+W6]", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("el+W6]lPM", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      stringArray0[2] = "...";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("...", "]{lu_t'OxC ");
      assertEquals("]{lu_t'OxC ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("^h_/QwOf#@^F<ma", 1045);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("#");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.startsWith("]{lu_t'OxC ", "]{lu_t'OxC ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.substringAfterLast("#", "*U4evTG4t<!i");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("#", 0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "^h_/QwOf#@^F<ma", 1807, 26);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("Object varargs must not be null", "(", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = StringUtils.rotate("(7/?$Ib>[5zN", 24);
      assertEquals("(7/?$Ib>[5zN", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Display name '%s' %s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Display name '%s' %s", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '{', 'o');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Display name '%s' %s", (-1), (-1));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter("[:KAEs", "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeIgnoreCase("Display name '%s' %s", "Display name '%s' %s");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("", (-574));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst("{'T)G+A!ttO=k02", "");
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "{'T)G+A!ttO=k02", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("{'T)G+A!ttO=k02", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("{'T)G+A!ttO=k02", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, "{'T)G+A!ttO=k02");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("{'T)G+A!ttO=k02", string2);
      assertNotNull(string2);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      HashSet<Object> hashSet0 = new HashSet<Object>(vector0);
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("{'T)G+A!ttO=k02"));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      HashSet hashSet1 = (HashSet)hashSet0.clone();
      assertNotNull(hashSet1);
      assertFalse(hashSet0.contains("{'T)G+A!ttO=k02"));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      
      hashSet0.clear();
      assertFalse(hashSet0.contains("{'T)G+A!ttO=k02"));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Spliterator<Object> spliterator0 = hashSet0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(hashSet0.contains("{'T)G+A!ttO=k02"));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("");
      assertTrue(boolean0);
      assertFalse(hashSet0.contains("{'T)G+A!ttO=k02"));
      assertTrue(hashSet0.contains(""));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string3 = StringUtils.join((Iterable<?>) vector0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      String string4 = StringUtils.defaultString("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissing("XZpP", "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, stringArray0.length);
      assertEquals("XZpPThis extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceOnceIgnoreCase(" ", ":", "M1x1]g# S\"5");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      double[] doubleArray0 = new double[0];
      String string7 = StringUtils.join(doubleArray0, '$');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals(0, doubleArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.rotate("", 24);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 24);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.substring(" vs ", 132, 132);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-5973L);
      longArray0[1] = (long) 132;
      longArray0[2] = (long) 132;
      longArray0[3] = (long) 132;
      char char0 = 'Y';
      int int0 = 1918;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'Y', 132, 1918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 132
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String string0 = StringUtils.substring(" vs ", 132, 132);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("x='x?,~G~6]rmU/5:E", '`', '`');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("x='x?,~G~6]rmU/5:E", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string3 = StringUtils.join(objectArray0, ',', 3709, 394);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, objectArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = '`';
      charArray0[5] = ',';
      charArray0[6] = '';
      charArray0[7] = 'N';
      charArray0[8] = '`';
      String[] stringArray0 = StringUtils.split("x='x?,~G~6]rmU/5:E", 'k');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.remove("x='x?,~G~6]rmU/5:E", 'Z');
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("x='x?,~G~6]rmU/5:E", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase((String) null, charSequenceArray0[0], stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, charSequenceArray0.length);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, "", (CharSequence[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string1 = StringUtils.normalizeSpace("S|Qs");
      assertEquals("S|Qs", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("  ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.junitpioner.jupiter.DefaultLocaleExtension", "org.junitpioner.jupiter.DefaultLocaleExtension");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Wf/Y3gIF[jNn2?\"", 'I');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "lG@H,[_}(*J,");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("{'T)G+A!ttO=k02", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      String string2 = StringUtils.join(charArray0, 'l', 2446, 1518);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(3, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'+', '+', '+'}, charArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((byte[]) null, 'N', 2446, (int) (byte)43);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'V');
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " `GQRQ't?dFB:]";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("3%C5hT>!M1RPYk%");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(14, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string0 = StringUtils.replaceFirst(" `GQRQ't?dFB:]", (String) null, "Comparator should not be null.");
      assertEquals(" `GQRQ't?dFB:]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 31);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("org.junitpioneer.vintage.TimeoutExtension", "~/]&g*DSW_t'5:GV*");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'q';
      charArray0[2] = '!';
      charArray0[3] = '!';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'K', 'q', '!', '!'}, charArray0);
      
      String string2 = StringUtils.remove(", Length: 0, Length: 0", " `GQRQ't?dFB:]");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", Length: 0, Length: 0", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)3;
      String string3 = StringUtils.join(byteArray0, '!', 32767, (int) (byte)31);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, byteArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-9), (byte)6, (byte)25, (byte)27, (byte)16, (byte)31, (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", 639);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("i&9q3}.FnLdXu}1#", "", "");
      assertEquals("i&9q3}.FnLdXu}1#", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("i&9q3}.FnLdXu}1#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.center(".", (-3191), "...");
      assertEquals(".", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(".");
      assertFalse(boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("."));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0);
      assertNotNull(list0);
      assertFalse(hashSet0.contains("."));
      assertFalse(list0.contains("."));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(hashSet0.contains("."));
      assertFalse(list0.contains("."));
      assertFalse(list1.contains("."));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      char char0 = 'E';
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("...", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "a~`T kS~Uvpe^lyg";
      String[] stringArray0 = new String[8];
      stringArray0[3] = "`I({]RH6(0";
      stringArray0[4] = "`I({]RH6(0";
      stringArray0[5] = "a~`T kS~Uvpe^lyg";
      stringArray0[6] = "`I({]RH6(0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissing("`I({]RH6(0", "a~`T kS~Uvpe^lyg", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("`I({]RH6(0", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "`I({]RH6(0", (CharSequence) "a~`T kS~Uvpe^lyg");
      assertEquals((-1), int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("`I({]RH6(0"));
      assertEquals(0, priorityQueue0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      Stream<String> stream0 = treeSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(treeSet0.contains(string0));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(navigableSet0.contains(string0));
      assertFalse(treeSet0.contains(string0));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      String string2 = StringUtils.left("X%hw9jiALq", 36);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("X%hw9jiALq", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "`I({]RH6(0", charSequenceArray0[0], 16);
      assertTrue(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "`I({]RH6(0";
      charSequenceArray1[1] = (CharSequence) "a~`T kS~Uvpe^lyg";
      charSequenceArray1[2] = (CharSequence) "X%hw9jiALq";
      charSequenceArray1[3] = (CharSequence) "`I({]RH6(0";
      charSequenceArray1[4] = (CharSequence) "a~`T kS~Uvpe^lyg";
      String string3 = StringUtils.toRootLowerCase("a~`T kS~Uvpe^lyg");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("a~`t ks~uvpe^lyg", string3);
      assertNotNull(string3);
      
      charSequenceArray1[5] = (CharSequence) "a~`t ks~uvpe^lyg";
      charSequenceArray1[6] = (CharSequence) "X%hw9jiALq";
      charSequenceArray1[7] = (CharSequence) "`I({]RH6(0";
      charSequenceArray1[8] = (CharSequence) "a~`T kS~Uvpe^lyg";
      boolean boolean0 = StringUtils.endsWithAny("`I({]RH6(0", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(9, charSequenceArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "3Ko-?70a<}");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3Ko-?70a<}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substring("Illegal range. The step cannot be zero.", 96);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Illegal range. The step cannot be zero.");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Illegal range. The step cannot be zero.", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("RTp29:M~<C/V#Bs(VGy");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(15, stringArray0.length);
      assertEquals(0, int2);
      
      boolean boolean2 = StringUtils.startsWith("3Ko-?70a<}", "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string5 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("", 0);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOf((CharSequence) "{index}", 0, 13);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("1k)XA fw-`o6u'I", "", stringArray0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals(15, stringArray0.length);
      assertEquals("1k)XA fw-`o6u'I", string7);
      assertNotNull(string7);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("Illegal range. The step cannot be zero."));
      
      Stream<String> stream0 = treeSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(treeSet0.contains("Illegal range. The step cannot be zero."));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains("Illegal range. The step cannot be zero."));
      assertFalse(navigableSet0.contains("Illegal range. The step cannot be zero."));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      String string8 = StringUtils.left((String) null, 36);
      assertNull(string8);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "1k)XA fw-`o6u'I", 0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      
      boolean boolean3 = StringUtils.endsWithAny("", stringArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(15, stringArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 1276);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.DefaultLocaleExtension", "Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }");
      assertEquals("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }org.junitpioneer.jupiter.DefaultLocaleExtensionReport entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.repeat("ZvS.c}{_d/.", "ZvS.c}{_d/.", 2555);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("ZvS.c}{_d/.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ZvS.c}{_d/.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("org.apache.commons.lang3.RegExUtils", (-3191));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.RegExUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("J");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("J", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("ZvS.c}{_d/.");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWith(string0, "J");
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfterLast("(", "q@z]w4Z{D\"HQJ5<-<");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.right("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1655));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) string0, 1929, 32767);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertEquals((-1), int0);
      
      String string6 = StringUtils.CR;
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("\r", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '!');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      String string7 = StringUtils.upperCase("#", locale0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("#", string7);
      assertNotNull(string7);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = ", Length: 0";
      stringArray0[3] = "";
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = (-16);
      String string2 = StringUtils.substring("org.junitpioneer.jupiter.params.ShortRange", (-16));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("arams.ShortRange", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("gUcKynT1<},R1>t");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(14, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, int1);
      
      String string4 = "...";
      // Undeclared exception!
      try { 
        StringUtils.truncate("...", (-16), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.substringBetween("doesn't contain any substring.", "doesn't contain any substring.");
      assertNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("#A2?\"mrBE", (String) null);
      assertEquals("#A2?\"mrBE", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("8tJL=`i;NF1", (-574));
      assertFalse(string2.equals((Object)string1));
      assertEquals("JL=`i;NF18t", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "%s does not implement %s interface.");
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'w');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(linkedList0.contains('w'));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.truncate("Expected exception %s was not thrown.", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      LinkedList<Locale.Category> linkedList1 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean1 = linkedList1.add(locale_Category0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList1.contains(locale_Category0));
      assertEquals(1, linkedList1.size());
      
      boolean boolean2 = linkedList0.containsAll(linkedList1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(linkedList0.contains("Expected exception %s was not thrown."));
      assertTrue(linkedList1.contains(locale_Category0));
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      
      String string2 = StringUtils.substringBetween("Search and Replace array lengths don't match: ", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.joinWith("", stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) listIterator0;
      objectArray0[2] = (Object) linkedList1;
      objectArray0[3] = (Object) locale_Category0;
      String string4 = StringUtils.join(objectArray0, "", (-1493), (-1493));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals(4, objectArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("|4~w5f3lEd", "|4~w5f3lEd");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("|4~w5f3lEd", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.capitalize("|4~w5f3lEd");
      assertEquals("|4~w5f3lEd", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.startsWithAny("n2*wy^5", stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("mRs1Uxdx8?nS4", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " `GQRQ't?dFB:]";
      stringArray0[1] = " vs ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("3%C5hT>!M1RPYk%");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(14, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string0 = StringUtils.replaceFirst((String) null, "", " vs ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " `GQRQ't?dFB:]", 31);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("", "wV#^0L");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      String string2 = StringUtils.remove("", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove(", Length: 0, Length: 0", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(", Length: 0, Length: 0", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3%C5hT>!M1RPYk%", (CharSequence) " `GQRQ't?dFB:]", 19);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " `GQRQ't?dFB:]";
      charSequenceArray0[1] = (CharSequence) " `GQRQ't?dFB:]";
      charSequenceArray0[2] = (CharSequence) ", Length: 0, Length: 0";
      charSequenceArray0[3] = (CharSequence) " `GQRQ't?dFB:]";
      charSequenceArray0[4] = (CharSequence) " vs ";
      boolean boolean2 = StringUtils.startsWithAny(", Length: 0, Length: 0", charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String string0 = StringUtils.swapCase("org.apache.commons.lang3.Charsets");
      assertEquals("ORG.APACHE.COMMONS.LANG3.cHARSETS", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.params.LongRange");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("org.junitpioneer.jupiter.AbstractEntryBasedExtension", 'h', 'o');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.params.LongRange", "Display name '%s' %s");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.capitalize("Display name '%s' %s");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Display name '%s' %s", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.params.LongRange");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.AbstractEntryBasedExtension", "maxWith cannot be negative");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.params.LongRange", (CharSequence) "", (-1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string5 = StringUtils.mid("Display name '%s' %s", 0, (-2035));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("maxWith cannot be negative", 8192);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("CRQN", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Fyt]f?Xd,MJ");
      assertEquals("Fyt]f?Xd,MJ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "Fyt]f?Xd,MJ", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 's';
      charArray0[4] = '#';
      charArray0[5] = 'J';
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("", "...");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "...");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("...", charSequence0);
      assertNotNull(charSequence0);
      
      charSequenceArray0[2] = (CharSequence) "...";
      String string3 = StringUtils.substringBeforeLast("", (String) null);
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "", 68);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.mid("", 0, (-2035));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string5 = StringUtils.difference((String) null, (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kmhZe zG;gL5'", "org.apache.commons.lang3.StringUtils");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("k", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.forLanguageTag("_MyB3t:iQvG>+[x;|%J");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      int int0 = StringUtils.getFuzzyDistance("kmhZe zG;gL5'", "kmhZe zG;gL5'", locale0);
      assertEquals(37, int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      String string1 = StringUtils.removeStart("Mm+`", "_MyB3t:iQvG>+[x;|%J");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mm+`", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " `GQRQ't?dFB:]";
      stringArray0[1] = " vs ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("3%C5hT>!M1RPYk%");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(14, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string0 = StringUtils.replaceFirst((String) null, "", " vs ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " `GQRQ't?dFB:]", 31);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("", "wV#^0L");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      String string2 = StringUtils.remove("", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove(", Length: 0, Length: 0", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(", Length: 0, Length: 0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(2, stringArray0.length);
      assertEquals(14, stringArray2.length);
      assertNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) ", Length: 0, Length: 0", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "\r ", (-134));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String string0 = StringUtils.removeStart("hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT hcT 2UG=rHB*|[DvM-$+=", "8}S9\"|2M^Ld0oZno]s+");
      assertEquals("hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT 2hcT hcT 2UG=rHB*|[DvM-$+=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = " vs ";
      stringArray0[5] = "|zbJR=H$*m|";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = " vs ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray2);
      
      String string0 = StringUtils.replaceFirst("Oq7)UuC1kFD-Za", (String) null, (String) null);
      assertEquals("Oq7)UuC1kFD-Za", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "|zbJR=H$*m|", 1027);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("org.apache.commons.lang3.StringUtils", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      boolean boolean1 = StringUtils.containsNone((CharSequence) stringArray0[1], charArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(9, stringArray0.length);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'!', '!', '!'}, charArray0);
      
      String string2 = StringUtils.remove(stringArray0[1], "|zbJR=H$*m|");
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(9, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.remove("org.junitpioneer.jupiter.params.DisableIfNameExtension", string2);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(9, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.params.DisableIfNameExtension", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String string0 = StringUtils.removeStart("ReportEntry", "ReportEntry");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-2313), 337);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", '[');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("^h_/QwOf#@^F<ma", "62");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^h_/QwOf#@^F<ma", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^h_/QwOf#@^F<ma", 31);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("\"mGjuc~Y6 Dg2GD");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase((String) null);
      assertNull(string2);
      
      int int1 = StringUtils.compare("^h_/QwOf#@^F<ma", "6Ih:^5sg[L)52oK");
      assertFalse(int1 == int0);
      assertEquals(40, int1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = (int) ':';
      intArray0[2] = (int) ':';
      intArray0[3] = 40;
      intArray0[4] = (-1);
      intArray0[5] = 40;
      String string3 = StringUtils.join(intArray0, 'q');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(6, intArray0.length);
      assertEquals("10q58q58q40q-1q40", string3);
      assertNotNull(string3);
      assertArrayEquals(new int[] {10, 58, 58, 40, (-1), 40}, intArray0);
      
      boolean boolean1 = StringUtils.isWhitespace("\"mGjuc~Y6 Dg2GD");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.center("^h_/QwOf#@^F<ma", (int) ':');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("                     ^h_/QwOf#@^F<ma                      ", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = ':';
      charArray0[3] = ']';
      charArray0[4] = ':';
      charArray0[5] = 'q';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "                     ^h_/QwOf#@^F<ma                      ", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'q', 'q', ':', ']', ':', 'q'}, charArray0);
      
      String string5 = StringUtils.defaultString("maxWith cannot be negative");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("maxWith cannot be negative", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("__");
      assertEquals("__", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("__");
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {95, 95}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 252, 252);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(252, comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string1 = priorityQueue0.poll();
      assertNull(string1);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add(" or any enclosing class.");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(" or any enclosing class."));
      assertEquals(1, priorityQueue0.size());
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "V*Bsg1!pr;Wz1g0ov");
      assertEquals(" or any enclosing class.", string2);
      assertNotNull(string2);
      assertFalse(priorityQueue0.contains("V*Bsg1!pr;Wz1g0ov"));
      assertTrue(priorityQueue0.contains(string2));
      assertEquals(1, priorityQueue0.size());
      
      String string3 = StringUtils.substring("8k7s", 252, (-1675));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("", "PAcX>IxS#{");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("PAcX>IxS#{", string4);
      assertNotNull(string4);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string4));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(string4));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, 'O');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(arrayList0.contains(string4));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'O');
      assertEquals(0, int0);
      
      String string6 = StringUtils.toRootUpperCase("tcb_|7%HS2M\"~OT");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("TCB_|7%HS2M\"~OT", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 252, 252);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(252, comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string1 = priorityQueue0.poll();
      assertNull(string1);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = StringUtils.contains((CharSequence) " or any enclosing class.", 252);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "V*Bsg1!pr;Wz1g0ov");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(priorityQueue0.contains("V*Bsg1!pr;Wz1g0ov"));
      assertEquals(0, priorityQueue0.size());
      
      String string3 = StringUtils.substring("8k7s", 252, (-1675));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty(" or any enclosing class.", "...");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" or any enclosing class.", string4);
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1675);
      doubleArray0[1] = (double) (-1675);
      String string5 = StringUtils.join(doubleArray0, 'O', 252, 79);
      assertFalse(string5.equals((Object)string4));
      assertEquals(2, doubleArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new double[] {(-1675.0), (-1675.0)}, doubleArray0, 0.01);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '?');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 646.8841F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'o', 1996, 5594);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1996
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = StringUtils.containsWhitespace("3Ko-?70a<}");
      assertFalse(boolean0);
      
      String string0 = StringUtils.reverse("Illegal range. The step cannot be zero.");
      assertEquals(".orez eb tonnac pets ehT .egnar lagellI", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'R';
      floatArray0[3] = (float) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'R', (-2016), (int) 'R');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2016
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = "{'T)G+A!ttO=k02";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "{'T)G+A!ttO=k02", (CharSequence) "{'T)G+A!ttO=k02");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap((String) null, 'e');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissing(" vs ", "...", (CharSequence[]) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" vs ...", string4);
      assertNotNull(string4);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains('e'));
      assertEquals(0, priorityQueue0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        priorityQueue0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.stripEnd("5L>T3u", "5L>T3u");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 's', Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("{'T)G+A!ttO=k02", "", 2446, 321);
      assertEquals("{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string2 = StringUtils.join(objectArray0, 'O', 2446, 1882);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((long[]) null, '2', (-2824), (-1715));
      assertNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string5);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      
      String string6 = locale1.getDisplayCountry(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("\uC774\uD0C8\uB9AC\uC544", string6);
      assertNotNull(string6);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      
      String string7 = StringUtils.lowerCase("", locale0);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = StringUtils.equals((CharSequence) "{'T)G+A!ttO=k02", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "Bge@>%,U$p%CK$.Un3", "Search and Replace array lengths don't match: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.removeAll((String) null, "hE.g?3*4E<d");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Bge@>%,U$p%CK$.Un3");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, "Bge@>%,U$p%CK$.Un3", (String) null, 18);
      assertNull(string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'W';
      longArray0[1] = (long) 'W';
      longArray0[2] = (long) 'W';
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      String string5 = StringUtils.join(longArray0, 'P', (-1), (-1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals(5, longArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new long[] {87L, 87L, 87L, (-1L), 0L}, longArray0);
      
      String string6 = StringUtils.getIfBlank((String) null, (Supplier<String>) null);
      assertNull(string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string7 = locale0.getDisplayCountry(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Corea del Sud", string7);
      assertNotNull(string7);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      
      String string8 = StringUtils.removeStartIgnoreCase("Locale must not be null", (String) null);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertEquals("Locale must not be null", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Locale must not be null");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      String string0 = StringUtils.upperCase("Search 3nd eplace array lengths dn't match: ");
      assertEquals("SEARCH 3ND EPLACE ARRAY LENGTHS DN'T MATCH: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("c6");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substring("c6", (-486), (-486));
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("c6", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.wrap("", ' ');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("c6");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("c6", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("&L\"N(-)sd5:V", "HP8#$nIGD");
      assertEquals("&L\"N(-)sd5:V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.difference("R", "R");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "R", (-2773));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("[d=n/)iKDbnv", "[d=n/)iKDbnv");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another8z`\"^>fQWncTU5R", 30);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "@x[r4PI$X");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("}kcLCartesianProductTest can only take exactly one type of arguments source.", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}kcLCartesianProductTest can only take exactly one type of arguments source.", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "@x[r4PI$X";
      stringArray0[3] = "";
      stringArray0[4] = "@x[r4PI$X";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "}kcLCartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[8] = "}kcLCartesianProductTest can only take exactly one type of arguments source.";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(">");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'I', 9, 1560);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 'V');
      assertEquals(1, byteArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)38;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '-', (-1636), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1636
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" LNid9i%u LNid9i%u{'T)G+A!ttO=k02");
      assertEquals(" LNid9i%u LNid9i%u{'T)G+A!ttO=k02", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("\n", "...");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("-d!?", "", charSequenceArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("-d!?", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("\n", "Z@R~2z@}rQcm-F4I#{'");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.right("maxWith cannot be negative", (-920));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", 31, 25);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String string7 = StringUtils.join((Iterable<?>) null, '\"');
      assertNull(string7);
      
      String string8 = StringUtils.defaultString((String) null, "...");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("...", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("V0/A7QHW2}", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "3Ko-?70a<}");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3Ko-?70a<}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substring("Illegal range. The step cannot be zero.", 96);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Illegal range. The step cannot be zero.");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Illegal range. The step cannot be zero.", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("RTp29:M~<C/V#Bs(VGy");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(15, stringArray0.length);
      assertEquals(0, int2);
      
      boolean boolean2 = StringUtils.startsWith("3Ko-?70a<}", "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("", 0);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOf((CharSequence) "{index}", 0, 13);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("1k)XA fw-`o6u'I", "", stringArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals(15, stringArray0.length);
      assertEquals("1k)XA fw-`o6u'I", string7);
      assertNotNull(string7);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string2));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains(string2));
      assertFalse(navigableSet0.contains(string2));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      String string8 = StringUtils.join((Iterable<?>) navigableSet0, 'R');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(treeSet0.contains(string8));
      assertFalse(navigableSet0.contains(string8));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "1k)XA fw-`o6u'I", (-658));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) stack0);
      assertNotNull(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = StringUtils.join((Iterable<?>) list0, 'h');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(stack0.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("...");
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {46, 46, 46}, intArray0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "...", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      String string0 = StringUtils.remove("2tg&", "OEo2sdjuYVOm");
      assertEquals("2tg&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      String string0 = StringUtils.substringBetween("h 2", "#", "#");
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String string0 = StringUtils.rotate("Br.$G5u,q:?iXl0 I:", 10);
      assertEquals("q:?iXl0 I:Br.$G5u,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("Br.$G5u,q:?iXl0 I:", ',');
      assertFalse(string1.equals((Object)string0));
      assertEquals(",Br.$G5u,q:?iXl0 I:,", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ",Br.$G5u,q:?iXl0 I:,", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {','}, charArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":?iXl0 I:Br.$G5u,q");
      assertNotNull(charBuffer0);
      assertEquals(18, charBuffer0.capacity());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(18, charBuffer0.limit());
      assertEquals(":?iXl0 I:Br.$G5u,q", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(18, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean1 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) ":?iXl0 I:Br.$G5u,q");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(18, charBuffer0.capacity());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(18, charBuffer0.limit());
      assertEquals(":?iXl0 I:Br.$G5u,q", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(18, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("", "", 2555);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("", "]{lu_t'OxC ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("]{lu_t'OxC ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("#", "SXHQj=SH1", "SXHQj=SH1", 49);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("#", string4);
      assertNotNull(string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '2';
      longArray0[1] = 0L;
      longArray0[2] = (long) 2555;
      longArray0[3] = (long) 49;
      longArray0[4] = (long) 49;
      String string5 = StringUtils.join(longArray0, '=', 49, (-3251));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(5, longArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertArrayEquals(new long[] {50L, 0L, 2555L, 49L, 49L}, longArray0);
      
      String string6 = StringUtils.substringBetween("#", "]{lu_t'OxC ", "#");
      assertNull(string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      
      String string7 = locale1.getDisplayCountry(locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("\uC774\uD0C8\uB9AC\uC544", string7);
      assertNotNull(string7);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      
      String string8 = StringUtils.lowerCase(", Length: 0, Length: 0", locale1);
      assertNotSame(locale1, locale0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(", length: 0, length: 0", string8);
      assertNotNull(string8);
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      
      String string9 = StringUtils.center(string0, 2555, '2');
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "SXHQj=SH1", (CharSequence) string9);
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string9));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("^h_/QwOf#@^F<ma");
      assertEquals("^h_/QwOf#@^F<ma", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "h)0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("Aborting to protect against StackOverflowError - output of one loop is the input of another", 8192);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 61, 8192);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string4 = StringUtils.deleteWhitespace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("AbortingtoprotectagainstStackOverflowError-outputofoneloopistheinputofanother", string4);
      assertNotNull(string4);
      
      charSequenceArray0[3] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.v";
      charSequenceArray0[5] = (CharSequence) "-ce(FXr2OB@Y] ";
      charSequenceArray0[6] = (CharSequence) ")7J8";
      String string5 = StringUtils.prependIfMissingIgnoreCase("-ce(FXr2OB@Y] ", ")7J8", charSequenceArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("-ce(FXr2OB@Y] ", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("", "", 2555);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace(string1);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\\u", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("#", 2555);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString(string3);
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("\\u", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWith("", string5);
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.substringAfterLast(string0, string5);
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.right("{index}", 0);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOf((CharSequence) "(", 2555, 1929);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.CR;
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertEquals("\r", string8);
      assertNotNull(string8);
      
      int int2 = StringUtils.countMatches((CharSequence) "\r", '=');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string9 = StringUtils.upperCase("", locale0);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string7));
      assertEquals("", string9);
      assertNotNull(string9);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", 'l');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String string0 = StringUtils.substringAfter("%s: Could not resolve parameter by name (%s).", (-185));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[4] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[5] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      String string1 = StringUtils.remove("#C|KT;IBm", '>');
      assertFalse(string1.equals((Object)string0));
      assertEquals("#C|KT;IBm", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "#C|KT;IBm";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter("D", (-185));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("", ":vYM$H8r9G%hHz");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(":vYM$H8r9G%hHz", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("#C|KT;IBm", "", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("#C|KT;IBm", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat('>', (-255));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "#C|KT;IBm";
      stringArray0[3] = ":vYM$H8r9G%hHz";
      stringArray0[4] = "";
      stringArray0[0] = "#C|KT;IBm";
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals(6, stringArray0.length);
      assertEquals("#C|KT;IBm", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultIfEmpty("", "");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.split("", '>');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], (CharSequence) "");
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      String string0 = StringUtils.remove("Cannot clear and set the following entries at the same time: ", 't');
      assertEquals("Canno clear and se he following enries a he same ime: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      String string0 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertEquals("Org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("Org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "*U4evTG4t<!i");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("^h_/QwOf#@^F<ma", "...");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertEquals("*U4evTG4t<!i", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("...", '=', '_');
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("^h_/QwOf#@^F<ma", 'c');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("c^h_/QwOf#@^F<mac", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = '9';
      charArray0[2] = 'c';
      String string3 = StringUtils.join(charArray0, 'c');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(3, charArray0.length);
      assertEquals("Nc9cc", string3);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'N', '9', 'c'}, charArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.join((short[]) null, 'a');
      assertNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string5 = StringUtils.abbreviateMiddle(" #ZU", "fD|l)(G/r1u_FO", 160);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" #ZU", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 3);
      assertEquals(", L", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ", L", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = ", Length: 0";
      stringArray0[3] = ", L";
      stringArray0[4] = ", Length: 0";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing(", Length: 0", "", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) ", L");
      assertEquals((-1), int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(", L"));
      assertEquals(0, priorityQueue0.size());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      String string3 = StringUtils.join(charArray0, 'J');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(2, charArray0.length);
      assertEquals("aJa", string3);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'a', 'a'}, charArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) ", L", (CharSequence[]) stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean1);
      
      int[] intArray0 = StringUtils.toCodePoints(", L");
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {44, 32, 76}, intArray0);
      
      String string4 = StringUtils.abbreviateMiddle("java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0", ", Length: 0", (-3238));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("", "`I({]RH6(0");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith(", Length: 0", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("z");
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {122}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.substring(" vs ", 132, 132);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("x='x?,~G~6]rmU/5:E", '`', '`');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("x='x?,~G~6]rmU/5:E", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string3 = StringUtils.join(objectArray0, ',', 3709, 394);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals(1, objectArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = '`';
      charArray0[5] = ',';
      charArray0[6] = '';
      charArray0[7] = 'N';
      charArray0[8] = '`';
      String string4 = StringUtils.join(charArray0, 'a');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("`a,a,a,a`a,aaNa`", string4);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'`', ',', ',', ',', '`', ',', '', 'N', '`'}, charArray0);
      
      charSequenceArray0[2] = (CharSequence) "`a,a,a,a`a,aaNa`";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("x='x?,~G~6]rmU/5:E");
      assertEquals(18, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.abbreviateMiddle((String) null, " vs ", 132);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("...", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "GAE");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.remove(" noXclone methbd", " noXclone methbd");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("R#7db%#EUKfu&$");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'\\'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("+eBfHfxCannot clear and set the following entries at the same time: ");
      assertEquals(27, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "org.apache.commons.lang3.StringUtils");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("org.apache.commons.lang3.StringUtils", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) null, '=');
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrapIfMissing((String) null, 'f');
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isEmpty("-;i");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '8';
      doubleArray0[1] = (double) '=';
      doubleArray0[2] = (double) '=';
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("(^mQ&5yC:jxm?!V@2<", '2');
      assertEquals("<2(^mQ&5yC:jxm?!V@", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "<2(^mQ&5yC:jxm?!V@", "Extension context \"");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("@CartesianTest not found.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("@CartesianTest not found.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "Minimum abbreviation width is %d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.CartesianValueArgumentsProvider");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("Minimum abbreviation width is %d", "@CartesianTest not found.");
      assertEquals(0.51, double0, 0.01);
      
      String string3 = StringUtils.stripToNull("J+M");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("J+M", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider", (CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("@CartesianTest not found.", 53, (-2260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      String string0 = StringUtils.truncate("B", 48, 48);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0, Length: 0", 89, 331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("XFEf=/");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.chomp("O S-", "O S-");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String string0 = StringUtils.remove("", 'w');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "\n");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.rightPad("maxWith cannot be negative", 875, "a7`~' 77@$ZTj+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negativea7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((List<?>) null, 's', 875, 875);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      String string0 = StringUtils.join((List<?>) stack0, 'z', 8185, 8185);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(stack0.contains(8185));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      String string0 = StringUtils.center(".", (-3191), "...");
      assertEquals(".", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(".");
      assertFalse(boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("..."));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0);
      assertNotNull(list0);
      assertFalse(hashSet0.contains("..."));
      assertFalse(list0.contains("..."));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(hashSet0.contains("..."));
      assertFalse(list0.contains("..."));
      assertFalse(list1.contains("..."));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      String string1 = StringUtils.join(list1, 'E', 32, 31);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(hashSet0.contains("..."));
      assertFalse(list0.contains("..."));
      assertFalse(list1.contains("..."));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("lPM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String string0 = StringUtils.unwrap("", 'Y');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, (-10), (-10));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String string0 = StringUtils.substringAfter("%s: Could not resolve parameter by name (%s).", (-185));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[4] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[5] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      String string1 = StringUtils.remove("#C|KT;IBm", '^');
      assertFalse(string1.equals((Object)string0));
      assertEquals("#C|KT;IBm", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "#C|KT;IBm";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter("", (-185));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("", ":vYM$H8r9G%hHz");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(":vYM$H8r9G%hHz", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("#C|KT;IBm", "", charSequenceArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("#C|KT;IBm", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat('^', (-255));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[5], charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, charArray0.length);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {']'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '<');
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (-722));
      assertNull(string0);
      
      String string1 = StringUtils.replacePattern((String) null, (String) null, "Threshold must not be negative");
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnce((String) null, (String) null, ", Length: 0, Length: 0");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String string0 = StringUtils.replacePattern("cg/;", "cg/;", "cg/;");
      assertEquals("cg/;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("nISU|gy8f<Uf", "Y");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("_", "_");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(0, priorityQueue0.size());
      
      String string1 = StringUtils.rotate("_", 128);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "_", (CharSequence) "_", 128);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string1 = StringUtils.defaultString("\n", "c6");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("\n", "...");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[2], charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("maxWith cannot be negative", 875, "a7`~' 77@$ZTj+");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("maxWith cannot be negativea7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@$ZTj+a7`~' 77@", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("(]H \"j=@$", "\n", 875);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) "maxWith cannot be negative", (-1594));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      String string5 = StringUtils.upperCase(", Length: 0, Length: 0", locale0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(", LENGTH: 0, LENGTH: 0", string5);
      assertNotNull(string5);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = 'S';
      charArray0[2] = ' ';
      boolean boolean5 = StringUtils.containsAny((CharSequence) "(]H \"j=@$", charArray0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean5);
      assertArrayEquals(new char[] {'[', 'S', ' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.overlay("Fc$$8/<o#x]{;", "", (-201), 160);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "Fc$$8/<o#x]{;");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      int int0 = StringUtils.indexOf((CharSequence) "", (-74), 125);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.swapCase("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.right("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 2333);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2333;
      longArray0[1] = (long) 2333;
      String string1 = StringUtils.join(longArray0, 'C');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, longArray0.length);
      assertEquals("2333C2333", string1);
      assertNotNull(string1);
      assertArrayEquals(new long[] {2333L, 2333L}, longArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 2838, 700);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2333C2333";
      stringArray0[1] = "oR%OW@V";
      stringArray0[2] = "2333C2333";
      stringArray0[3] = "2333C2333";
      String string2 = StringUtils.replaceEach("...", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("2333C2333");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("2333c2333", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      String string0 = StringUtils.swapCase("9,8%AX[I]9PH2vU]qO");
      assertEquals("9,8%ax[i]9ph2Vu]Qo", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "StdIo_System_Out", (CharSequence) "#@U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      String string1 = StringUtils.stripAccents("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("\n", "b Dq,M");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("b Dq,M\nb Dq,M", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("Array and element cannot both be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "`I({]RH6(0";
      stringArray0[2] = ", Length: 0";
      stringArray0[3] = "";
      stringArray0[4] = ", Length: 0";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing(", Length: 0", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(", Length: 0"));
      assertEquals(0, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains(", Length: 0"));
      assertEquals(0, priorityQueue0.size());
      
      char char0 = 'Y';
      char char1 = '7';
      String string3 = StringUtils.join(iterator0, '7');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(priorityQueue0.contains(", Length: 0"));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(", Length: 0", 0, (-2409));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.endsWithAny("8", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      PriorityQueue<Locale.LanguageRange> priorityQueue0 = new PriorityQueue<Locale.LanguageRange>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = vector0.addAll((Collection<? extends Locale.LanguageRange>) priorityQueue0);
      assertFalse(boolean0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = Locale.lookupTag(vector0, arrayList0);
      assertNull(string0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = locale0.getDisplayLanguage();
      assertEquals("French", string1);
      assertNotNull(string1);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      String string2 = StringUtils.upperCase("a~`T kS~Uvpe^lyg", locale0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("A~`T KS~UVPE^LYG", string2);
      assertNotNull(string2);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      String string3 = StringUtils.wrapIfMissing("a~`T kS~Uvpe^lyg", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("a~`T kS~Uvpe^lyg", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap((String) null, "a~`T kS~Uvpe^lyg");
      assertNull(string4);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("a~`T kS~Uvpe^lyg"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Vector<Object> vector1 = new Vector<Object>(priorityQueue0);
      assertNotNull(vector1);
      assertFalse(vector1.contains("a~`T kS~Uvpe^lyg"));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, vector1.size());
      assertEquals(0, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      vector1.ensureCapacity((-2658));
      assertFalse(vector1.contains((-2658)));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, vector1.size());
      assertEquals(0, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      String string5 = StringUtils.join((Iterable<?>) priorityQueue0, (String) null);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = StringUtils.endsWith((CharSequence) null, "French");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(string2));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(string2));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string6 = StringUtils.join((Iterator<?>) listIterator0, "...");
      assertNotSame(arrayList0, arrayList1);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(arrayList0.contains(string6));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.getIfEmpty("4J", (Supplier<String>) null);
      assertEquals("4J", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = vector0.retainAll(linkedHashSet0);
      assertFalse(boolean0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      vector0.ensureCapacity(2415);
      assertFalse(vector0.contains(2415));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(2415, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string0 = StringUtils.removeIgnoreCase(" is not in the range '0' - '9'", "");
      assertEquals(" is not in the range '0' - '9'", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.endsWith("", " is not in the range '0' - '9'");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(" is not in the range '0' - '9'"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(" is not in the range '0' - '9'"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, " is not in the range '0' - '9'");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(arrayList0.contains(" is not in the range '0' - '9'"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string2 = StringUtils.removeIgnoreCase("No @DisabledUntil annotation found on element", "...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("No @DisabledUntil annotation found on element", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("No @DisabledUntil annotation found on element", (-3241));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ", Length: 0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing(", Length: 0", ", Length: 0");
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: 0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", ", Length: 0");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Vector<Object> vector0 = new Vector<Object>(arrayDeque0);
      assertNotNull(vector0);
      assertFalse(arrayDeque0.contains(0));
      assertFalse(vector0.contains(0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      
      vector0.ensureCapacity((-2658));
      assertFalse(arrayDeque0.contains(0));
      assertFalse(vector0.contains(0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string3 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWith("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(", Length: 0"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(", Length: 0"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(arrayList0.contains(string4));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string5 = StringUtils.removeIgnoreCase("", ", Length: 0");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "n2*wy^5";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "n2*wy^5", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte) (-90);
      String string0 = StringUtils.substring("org.apache.commons.lang3.StringUtils", (int) (byte)4, (int) (byte)4);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", (int) (byte)4, 3656);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviate("", "Invalid exceptionStatus", 920);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kmhZe zG;gL5'", "org.apache.commons.lang3.StringUtils");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("k", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "k", (CharSequence) "k", 218);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", ']');
      assertFalse(string1.equals((Object)string0));
      assertEquals("]org.apache.commons.lang3.StringUtils]", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "kmhZe zG;gL5'", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      String string0 = StringUtils.unwrap("Strings must not be null", "");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'U';
      charArray0[2] = '7';
      charArray0[3] = 'D';
      charArray0[4] = 'n';
      charArray0[5] = 't';
      charArray0[6] = 'j';
      charArray0[7] = 'K';
      charArray0[8] = 'I';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Strings must not be null", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'u', 'U', '7', 'D', 'n', 't', 'j', 'K', 'I'}, charArray0);
      
      String string1 = StringUtils.trimToEmpty("J}b`4W#xLDvFRH][_4x");
      assertFalse(string1.equals((Object)string0));
      assertEquals("J}b`4W#xLDvFRH][_4x", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("Strings must not be null", supplier0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("Strings must not be null");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String string0 = StringUtils.right("...", 2333);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      boolean boolean1 = StringUtils.equalsAny("...", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("...", "...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("...", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("...");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("...", 2333, "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAllUpperCase("...");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$E!J", "yL'}Dsa5:to,X^0+m", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "...", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      boolean boolean0 = StringUtils.containsIgnoreCase("D", (CharSequence) null);
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("D"));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.left("Minimum abbreviation width with offset is %d", 1);
      assertEquals("M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = 'M';
      charArray0[2] = 'p';
      charArray0[3] = 'U';
      charArray0[4] = 'C';
      charArray0[5] = ';';
      charArray0[6] = '*';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Object varargs must not be null", charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'M', 'p', 'U', 'C', ';', '*'}, charArray0);
      
      String string2 = StringUtils.wrap((String) null, 'e');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.removeStart("QKV", "Minimum abbreviation width with offset is %d");
      assertEquals("QKV", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left("QKV", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L\"-s5:V", "h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase("L\"-s5:V", "h", " \" sould have a parent context.");
      assertEquals("L\"-s5:V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r", (-282));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.left("\r ", 8192);
      assertEquals("\r ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("\r ", "\r ", "\r ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jeB-*5AG__--9,";
      stringArray0[1] = "+<U&t}RG)";
      String string0 = StringUtils.replaceEach("}(VC({", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("}(VC({", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = StringUtils.center("1}Z6PSPJbpc", 48, "i&9q3}.FnLdXu}1#");
      assertEquals("i&9q3}.FnLdXu}1#i1}Z6PSPJbpci&9q3}.FnLdXu}1#i&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("1}Z6PSPJbpc", "1}Z6PSPJbpc", 48, 48);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1}Z6PSPJbpc1}Z6PSPJbpc", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.center("1}Z6PSPJbpc", 1739, "Dk_>T!v]=7");
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("&L\"N-s5:VgEp%%gEp%%", "1}Z6PSPJbpc", (-1), 1739);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1}Z6PSPJbpc", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      String string0 = StringUtils.overlay("Fhv", "Fhv", 1, 1);
      assertEquals("FFhvhv", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("FFhvhv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = "/VXbY(__OI";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("/VXbY(__OI", "/VXbY(__OI");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("8F#IC.*YXJ");
      assertEquals("8F#IC.*YXJ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String string0 = StringUtils.chomp("1ywp!!F/", "'T)G+A!ttO=k02");
      assertEquals("1ywp!!F/", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("1ywp!!F/", "1ywp!!F/");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "1ywp!!F/";
      String string1 = StringUtils.joinWith("1ywp!!F/", objectArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      assertEquals("1ywp!!F/", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("1ywp!!F/");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.unwrap("Display na", "1ywp!!F/");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Display na", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("", (String) null, "J%");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isBlank("'T)G+A!ttO=k02");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("1ywp!!F/", "1ywp!!F/", charSequenceArray0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("1ywp!!F/", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("", (-2225));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("Display na");
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.isWhitespace("Display na");
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2225);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'x', 0, 2778);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8";
      charSequenceArray0[1] = (CharSequence) "8";
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "8");
      assertEquals(3, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase(")", charSequenceArray0[1], charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(")8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      int int0 = StringUtils.compare("Display name '%s' %sCart", "Display name '%s' %sCart", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("b", "{displayName}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "{displayName}", "Display name '%s' %sCart");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("{displayName}", "Display name '%s' %sCart");
      assertEquals(0.69, double0, 0.01);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly(":`.D!EKuO=tkRIe0O75", (String[]) null, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":`.D!EKuO=tkRIe0O75", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("b");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOf((CharSequence) "b", (CharSequence) "b", (-223));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertNull(string2);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String[] stringArray0 = StringUtils.split("sV`QMa8j+B t03aC");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "`I({]RH6(0");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("\r", 'P');
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String string0 = StringUtils.abbreviate(" ", (-2313), 337);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(" ", '[');
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, '[');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean1 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.chomp(" ");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits(" ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = '[';
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(5, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', '['}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(" vs org.apache.commons.lang3.StringUtils", (-1739), (-1739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.truncate("", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing("", "", stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>();
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.contains(""));
      assertEquals(0, priorityQueue1.size());
      
      Iterator<Object> iterator0 = priorityQueue1.iterator();
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(iterator0);
      assertFalse(priorityQueue1.contains(""));
      assertEquals(0, priorityQueue1.size());
      
      String string3 = StringUtils.join(iterator0, 'Y');
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(priorityQueue1.contains(""));
      assertEquals(0, priorityQueue1.size());
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("Classpath resource [", (-1118), (-1118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("M-E}uAY:YA?~Tu{V6", "Supplied value must be avalid byte literal between -128 and 127: [");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("8", "1'A8Y`~L4Oz~!,");
      assertEquals(0.69, double0, 0.01);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("8", "1'A8Y`~L4Oz~!,", (CharSequence[]) null);
      assertEquals("81'A8Y`~L4Oz~!,", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      String string0 = StringUtils.upperCase("\r", locale0);
      assertEquals("\r", string0);
      assertNotNull(string0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      PriorityQueue<Locale.LanguageRange> priorityQueue0 = new PriorityQueue<Locale.LanguageRange>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = vector0.addAll((Collection<? extends Locale.LanguageRange>) priorityQueue0);
      assertFalse(boolean0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, priorityQueue0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = Locale.lookupTag(vector0, arrayList0);
      assertNull(string0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = locale0.getDisplayLanguage();
      assertEquals("French", string1);
      assertNotNull(string1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string2 = StringUtils.upperCase("a~`T kS~Uvpe^lyg", locale0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("A~`T KS~UVPE^LYG", string2);
      assertNotNull(string2);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "a~`T kS~Uvpe^lyg";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A~`T KS~UVPE^LYG";
      stringArray0[1] = "A~`T KS~UVPE^LYG";
      stringArray0[2] = "French";
      stringArray0[3] = "`I({]RH6(0";
      stringArray0[4] = "`I({]RH6(0";
      stringArray0[5] = "a~`T kS~Uvpe^lyg";
      stringArray0[6] = "`I({]RH6(0";
      stringArray0[7] = "A~`T KS~UVPE^LYG";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "`I({]RH6(0";
      String string4 = StringUtils.appendIfMissing("`I({]RH6(0", "a~`T kS~Uvpe^lyg", charSequenceArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("`I({]RH6(0", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "`I({]RH6(0", (CharSequence) "a~`T kS~Uvpe^lyg");
      assertEquals((-1), int0);
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.contains("a~`T kS~Uvpe^lyg"));
      assertEquals(0, priorityQueue1.size());
      
      Iterator<Object> iterator0 = priorityQueue1.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue1.contains("a~`T kS~Uvpe^lyg"));
      assertEquals(0, priorityQueue1.size());
      
      char char0 = 'Y';
      String string5 = StringUtils.join(iterator0, 'Y');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(priorityQueue1.contains("a~`T kS~Uvpe^lyg"));
      assertEquals(0, priorityQueue1.size());
      
      boolean boolean1 = StringUtils.isNumericSpace("`I({]RH6(0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("French", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" is not in the range '0' - '9' is not in the range '0' - '9'", " is not in the range '0' - '9' is not in the range '0' - '9'");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" is not in the range '0' - '9' is not in the range '0' - '9'", " is not in the range '0' - '9' is not in the range '0' - '9'");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("0W", ")", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("0W", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.appendIfMissing("njb:df8iK", "njb:df8iK", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("njb:df8iK", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("njb:df8iK");
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {110, 106, 98, 58, 100, 102, 56, 105, 75}, intArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "njb:df8iK", (CharSequence) "njb:df8iK");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ", Length: 0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing(", Length: 0", ", Length: 0");
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: 0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", ", Length: 0");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(", Length: 0"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Vector<Object> vector0 = new Vector<Object>(arrayDeque0);
      assertNotNull(vector0);
      assertFalse(arrayDeque0.contains(", Length: 0"));
      assertFalse(vector0.contains(", Length: 0"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      vector0.ensureCapacity((-2658));
      assertFalse(arrayDeque0.contains(", Length: 0"));
      assertFalse(vector0.contains(", Length: 0"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      String string3 = StringUtils.join((Iterable<?>) vector0, " is not in the range '0' - '9'");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(arrayDeque0.contains(", Length: 0"));
      assertFalse(vector0.contains(", Length: 0"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = StringUtils.endsWith("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      String string0 = StringUtils.wrap("", "rD/HrmrumQ~yuxB@a");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.compareIgnoreCase("rD/HrmrumQ~yuxB@a", "");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-5);
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertEquals(2, byteArray0.length);
      assertEquals(" \uFFFD", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-5)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String string0 = StringUtils.replaceChars("#C|KT;IBm", "org.apache.commons.lang3.Charsets", "org.apache.commons.lang3.Charsets");
      assertEquals("#C|KT;IBm", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String[] stringArray0 = new String[8];
      stringArray0[4] = "`I({]RH6(0";
      stringArray0[5] = "a~`T kS~Uvpe^lyg";
      String string0 = StringUtils.upperCase("a~`T kS~Uvpe^lyg");
      assertEquals("A~`T KS~UVPE^LYG", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("a~`T kS~Uvpe^lyg", stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      String string1 = StringUtils.replaceIgnoreCase("b~9'~R", "qr8HT8H", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("b~9'~R", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "\"fEIh#16;5j@*");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\"fEIh#16;5j@*", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("qr8HT8H");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replaceChars("b~9'~R", "b~9'~R", "");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 33);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("b~9'~R", charSequenceArray0[0]);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutExtension", "\"fEIh#16;5j@*");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, stringArray1.length);
      assertEquals("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutExtension", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("", (-2323));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 1575);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("i&9q3}.FnLdXu}1#");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(14, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String string0 = StringUtils.strip("#", "U ");
      assertEquals("#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" is not in the range '0' - '9' is not in the range '0' - '9'", " is not in the range '0' - '9' is not in the range '0' - '9'");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "a~`T kS~Uvpe^lyg";
      String[] stringArray0 = new String[8];
      stringArray0[3] = "`I({]RH6(0";
      stringArray0[4] = "`I({]RH6(0";
      stringArray0[5] = "a~`T kS~Uvpe^lyg";
      stringArray0[6] = "`I({]RH6(0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissing("`I({]RH6(0", "a~`T kS~Uvpe^lyg", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("`I({]RH6(0", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "`I({]RH6(0", (CharSequence) "a~`T kS~Uvpe^lyg");
      assertEquals((-1), int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("`I({]RH6(0"));
      assertEquals(0, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains("`I({]RH6(0"));
      assertEquals(0, priorityQueue0.size());
      
      String string2 = StringUtils.join(iterator0, 'Y');
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(priorityQueue0.contains("`I({]RH6(0"));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = StringUtils.isNumericSpace("`I({]RH6(0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\"mGjuc~Y6 Dg2GD");
      assertEquals("\"mGjuc~Y6 Dg2GD", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("\"mGjuc~Y6 Dg2GD", "\"mGjuc~Y6 Dg2GD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 51, "}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}}}}}}}}}}}}}}}}}}}}p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars(" ", " ", " ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(";gYD", (String) null);
      assertEquals(";gYD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Locale must not be null", "Locale must not be null");
      assertEquals(24, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Locale must not be null", stringArray0);
      assertEquals(24, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String string0 = StringUtils.stripStart("%s does not implement the CartesianAnnotationConsumer<T> interface.", "%s does not implement the CartesianAnnotationConsumer<T> interface.");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = StringUtils.stripEnd("org.junitpioneer.jupiter.StdIoExtension", "org.junitpioneer.jupiter.StdIoExtension");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "D", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("...", "...");
      assertEquals("...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: 0", 3);
      assertEquals(", L", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ", L", ", Length: 0");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[2] = ", Length: 0";
      stringArray0[3] = "`I({]RH6(0";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing(", Length: 0", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(", Length: 0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "`I({]RH6(0");
      assertEquals((-1), int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(", Length: 0"));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = StringUtils.containsWhitespace(", L");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank("`I({]RH6(0");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.replaceIgnoreCase("Dk_>T!v]=7", "Xf3j8H@=8>'", "Xf3j8H@=8>'", 54);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Dk_>T!v]=7", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(", Length: 0", ", Length: 0", 5);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase(", Length: 0", "Illegal range. The step cannot be zero.");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints
      assertEquals(674, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.compareIgnoreCase
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("8", ")sY4nQa%<',1P");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Q9[uw`T", "Q9[uw`T");
      assertEquals("Q9[uw`T", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("iip2|lo*", "p{InCombiningDiacriticalMarks}+");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kmhZe zG;gL5'", "org.apache.commons.lang3.StringUtils");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.StringUtils", "Extension context \"");
      assertEquals(10, int0);
      
      String string0 = StringUtils.defaultIfBlank("n3", "Extension context \"");
      assertEquals("n3", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("n3", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String string0 = StringUtils.rightPad("h 2", 875, "h 2");
      assertEquals("h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("h 2", (String) null, 875);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "a7`~' 77@$ZTj+", (CharSequence) "h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.wrapIfMissing("h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h ", "h 2");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h 2h h 2", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'Z';
      charArray0[2] = 's';
      charArray0[3] = '8';
      charArray0[4] = 's';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'/', 'Z', 's', '8', 's'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      String string0 = StringUtils.truncate("~J94JycnEK}Ki-_/", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "~J94JycnEK}Ki-_/");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 101);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "6NT{PiZC;", (CharSequence) "6NT{PiZC;", (-3249));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      String string0 = StringUtils.truncate("", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStart("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension");
      assertEquals("~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension", (CharSequence) "~/]&g*DSW_t'5:GV*org.junitpioneer.vintage.TimeoutE*tension");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'Q');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = StringUtils.substringBetween("-srM@-.8Y,^=r$. <G", "-srM@-.8Y,^=r$. <G");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1749));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      String string0 = StringUtils.substringBetween("#", "#", "#");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      int int0 = StringUtils.compare("", "", true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("", (-731));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("\n", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isWhitespace("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("9n:");
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("9n:"));
      assertEquals(1, priorityQueue0.size());
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "9n:");
      assertEquals("9n:", string0);
      assertNotNull(string0);
      assertTrue(priorityQueue0.contains("9n:"));
      assertEquals(1, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*U4evTG4t<!i";
      stringArray0[1] = "*U4evTG4t<!i";
      stringArray0[2] = "Minimum abbreviation width with offset is %d";
      stringArray0[3] = "*U4evTG4t<!i";
      stringArray0[4] = "java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null~e@3YMYZ\"&kq:";
      stringArray0[5] = "^h_/QwOf#@^F<ma";
      stringArray0[6] = "...";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "^h_/QwOf#@^F<ma");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "...");
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("~e@3YMYZ\"&kq:java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null");
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.rightPad("Minimum abbreviation width with offset is %d", (-940), (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence) "=W3]0p");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.params.LongRange");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("org.junitpioneer.jupiter.AbstractEntryBasedExtension", 'h', 'o');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.params.LongRange", "Display name '%s' %s");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.capitalize("Display name '%s' %s");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Display name '%s' %s", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.params.LongRange");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.AbstractEntryBasedExtension", "maxWith cannot be negative");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.params.LongRange", (CharSequence) "", (-1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string5 = StringUtils.mid("Display name '%s' %s", 0, (-2035));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String string0 = "#C|KT;IBm";
      String string1 = StringUtils.center("#C|KT;IBm", (int) 'e', 'e');
      assertFalse(string1.equals((Object)string0));
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("#C|KT;IBm", "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("#C|KT;IBm", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring((String) null, 2074, 56);
      assertNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf("#C|KT;IBm", (CharSequence) null, (-861));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "#C|KT;IBm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "\" should have a parent context.");
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(priorityQueue0.contains("\" should have a parent context."));
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "Cannot clear and set the following entries at the same time: ", 't');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 252, 252);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(252, comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string1 = priorityQueue0.poll();
      assertNull(string1);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add(" or any enclosing class.");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(" or any enclosing class."));
      assertEquals(1, priorityQueue0.size());
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "V*Bsg1!pr;Wz1g0ov");
      assertEquals(" or any enclosing class.", string2);
      assertNotNull(string2);
      assertTrue(priorityQueue0.contains(string2));
      assertFalse(priorityQueue0.contains("V*Bsg1!pr;Wz1g0ov"));
      assertEquals(1, priorityQueue0.size());
      
      String string3 = StringUtils.substring("8k7s", 252, (-1675));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("", "Threshold must not be negative");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "V*Bsg1!pr;Wz1g0ov", 'O');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String string0 = StringUtils.center("iCk", 8249, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", 'a');
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("Search and Replace array lengths don't match: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("Search and Replace array lengths don't match: "));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.join((List<?>) arrayList0, "Search and Replace array lengths don't match: ", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(arrayList0.contains("Search and Replace array lengths don't match: "));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string2 = StringUtils.defaultString("", "Search and Replace array lengths don't match: ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("2j^6mt9^2", 0, (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("2j^6mt9^2", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAllUpperCase("Search and Replace array lengths don't match: ");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.exception.CloneFailedException", "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals(38, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "$E!J", 322);
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" Js ", "*v$)ZBB`VEk-6~");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      int int0 = 31;
      String string0 = StringUtils.rightPad((String) null, 31, "lNYk>xp");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("lNYk>xp");
      assertFalse(boolean0);
      
      String string1 = "@b?o3<H6JTF";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@b?o3<H6JTF", (String) null, 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = "FwQ";
      String string3 = StringUtils.stripToEmpty("FwQ");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("FwQ", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "FwQ", (CharSequence) null, (-2096));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      String string0 = StringUtils.rotate("", 40);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 91, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                           ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("e{/=TG)h]_mg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D";
      stringArray0[1] = "D";
      stringArray0[2] = "D";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("D", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("ww", "+-&Bqtu@J5E[LZV?");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ww", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("S.?L8e?>oy", "S.?L8e?>oy");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      String string0 = StringUtils.center("?Q*PN#", 56, "?Q*PN#");
      assertEquals("?Q*PN#?Q*PN#?Q*PN#?Q*PN#??Q*PN#?Q*PN#?Q*PN#?Q*PN#?Q*PN#?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String string0 = StringUtils.stripToNull("%s does not implement the CartesianAnnotationConsumer<T> interface.");
      assertEquals("%s does not implement the CartesianAnnotationConsumer<T> interface.", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("%s does not implement the CartesianAnnotationConsumer<T> interface.", "6", 1079);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "6", (CharSequence) "6");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      String string0 = StringUtils.right("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 2333);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider";
      boolean boolean1 = StringUtils.equalsAny("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultString("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 2333, "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAllUpperCase("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$E!J", "yL'}Dsa5:to,X^0+m", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(")SmLVLN3vXQX", ")SmLVLN3vXQX");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "[?zuqMwO6C%U*";
      String string0 = StringUtils.appendIfMissingIgnoreCase("[?zuqMwO6C%U*", "[?zuqMwO6C%U*", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("[?zuqMwO6C%U*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = StringUtils.replace("|4~w5f3lEd", "RA4U", (String) null);
      assertEquals("|4~w5f3lEd", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'e');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" is not in the range '0' - '9' is not in the range '0' - '9'", " is not in the range '0' - '9' is not in the range '0' - '9'");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare(" is not in the range '0' - '9' is not in the range '0' - '9'", (String) null);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string1 = StringUtils.reverseDelimited((String) null, '~');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '~', 533, 3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(16, stringArray0.length);
      assertNull(string0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "\n\n");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isBlank("\n");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = StringUtils.trimToEmpty("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("\n");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("\n", "$%i%", "", 40);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate("5E", 40);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("5E", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("q3P=rLV1}C?H", "");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("q3P=rLV1}C?H", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'p', 2860, 2860);
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", (int) 'p');
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("", 'p');
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null, (-5059));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '$';
      longArray0[1] = (long) '$';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '$', 1, 1386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      String string0 = StringUtils.center("#C|KT;IBm", (int) 'e', 'e');
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("#C|KT;IBm", "#C|KT;IBm");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("#C|KT;IBm", "", 'e');
      assertEquals(9, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Y^n`(>}", (CharSequence) "Y^n`(>}");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Psu", "Psu");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = StringUtils.contains((CharSequence) "a~`T kS~Uvpe^lyg", (CharSequence) "a~`T kS~Uvpe^lyg");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'C';
      longArray0[1] = (long) 'C';
      longArray0[2] = (long) 'C';
      String string0 = StringUtils.join(longArray0, 'Y');
      assertEquals(3, longArray0.length);
      assertEquals("67Y67Y67", string0);
      assertNotNull(string0);
      assertArrayEquals(new long[] {67L, 67L, 67L}, longArray0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (int) 'C', 556);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "67Y67Y67";
      String string2 = StringUtils.replaceEach("org.junitpioneer.jupiter.DisableIfTestFailsExtension", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-163));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.strip("", "P1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X1b-3?_X3?_X");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 1);
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'R', 1967, 1967);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1967);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "3Ko-?70a<}");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3Ko-?70a<}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = "";
      String string4 = StringUtils.replaceIgnoreCase("", "Illegal range. The step cannot be zero.", "", 33);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 33;
      longArray0[4] = 0L;
      longArray0[5] = (long) 33;
      longArray0[6] = (long) 'R';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '2', 0, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, " vs ", "/2IJ+Mx\u0004H<{G");
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars("/2IJ+Mx\u0004H<{G", '!', 'n');
      assertEquals("/2IJ+Mx\u0004H<{G", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("#C|KT;IBm", "org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("#C|KT;IBm", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      String string0 = StringUtils.chop("i6{3B");
      assertEquals("i6{3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      char char0 = 'l';
      String string0 = StringUtils.repeat('l', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-1);
      longArray0[6] = 0L;
      longArray0[7] = (long) (-1);
      int int1 = (-1266);
      String string1 = StringUtils.join(longArray0, 'l', (-1), (-1266));
      assertEquals(8, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L), 0L, (-1L), 0L, (-1L)}, longArray0);
      
      String string2 = "offset cannot be negative";
      String string3 = StringUtils.chop("offset cannot be negative");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("offset cannot be negativ", string3);
      assertNotNull(string3);
      
      try { 
        StringUtils.getBytes("JcxH]", "offset cannot be negative");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ", (-2313));
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(" ", '[');
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[12];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, '[');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean1 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.chomp(" ");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits(" ");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = '[';
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(12, charSequenceArray0.length);
      assertEquals(5, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', '['}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(" vs org.apache.commons.lang3.StringUtils", (-1739), (-1739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", "~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", "~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension");
      assertEquals("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String string0 = StringUtils.leftPad("_m_0+[Hs.80", (-946), '^');
      assertEquals("_m_0+[Hs.80", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      String string0 = "-15A4u); !R~";
      String string1 = StringUtils.leftPad("-15A4u); !R~", (-2442), 'O');
      assertTrue(string1.equals((Object)string0));
      assertEquals("-15A4u); !R~", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-15A4u); !R~";
      String string2 = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("-15A4u); !R~", "-15A4u); !R~", "Bi3_yV8&-^bVd");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Bi3_yV8&-^bVd", string3);
      assertNotNull(string3);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>(0, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      String string0 = StringUtils.strip("^zQ`N7vJH", "^zQ`N7vJH");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(">K", "Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(">K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.trimToEmpty("J}b`4W#xLDFRH][_4x");
      assertFalse(string1.equals((Object)string0));
      assertEquals("J}b`4W#xLDFRH][_4x", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("J}b`4W#xLDFRH][_4x", 'D');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("FRH][_4xDJ}b`4W#xL", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "lG@H,[_}(*J,", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string3 = StringUtils.substringAfter("', has a length less than 2", 116);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("h less than 2", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("FRH][_4xDJ}b`4W#xL");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 116);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 's';
      charArray0[4] = '#';
      charArray0[5] = 'J';
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = null;
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty(string0, "");
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'U', 'U', 'U', 's', '#', 'J', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      String string0 = StringUtils.repeat('u', (-1250));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", (-2149));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequenceharSequence
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.abbreviate("`mi|RL?FBHmwE~", 337, 28);
      assertEquals("`mi|RL?FBHmwE~", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("`mi|RL?FBHmwE~", "`mi|RL?FBHmwE~");
      assertTrue(boolean0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertTrue(boolean1);
      
      String string2 = StringUtils.rightPad((String) null, 12, "...");
      assertNull(string2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'L';
      intArray0[1] = (int) 'L';
      intArray0[2] = (int) 'L';
      intArray0[3] = 337;
      intArray0[4] = (-2313);
      intArray0[5] = 997;
      String string3 = StringUtils.join(intArray0, 'L');
      assertFalse(string3.equals((Object)string0));
      assertEquals(6, intArray0.length);
      assertEquals("76L76L76L337L-2313L997", string3);
      assertNotNull(string3);
      assertArrayEquals(new int[] {76, 76, 76, 337, (-2313), 997}, intArray0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "`mi|RL?FBHmwE~", (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.rightPad((String) null, 4527);
      assertNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "!Q<<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(11, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", charSequenceArray0[1], charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("] does not exist", "] does not exist");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) " ", (-1));
      assertEquals((-1), int0);
      
      String string0 = " vs ";
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " vs ", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = "jYULjz=R_J-Z";
      Locale locale0 = new Locale(" vs ");
      assertNotNull(locale0);
      assertEquals(" vs ", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(" vs ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      int int2 = 1638;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("\n", 1638);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=1638.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      String string0 = StringUtils.rightPad(" vs ", (-1953), 'q');
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, '5');
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, shortArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", 0, (-1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "!ec/7wSoB", "\n");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) " vs ", (-1953));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAlpha("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.startsWith(" vs ", "\n");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean3 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string4 = StringUtils.trimToNull("Invalid exceptionStatus");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Invalid exceptionStatus", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) null, "", 322, (-1));
      assertNull(string5);
      
      String string6 = StringUtils.left("...", (-1953));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "!ec/7wSoB", (CharSequence) " ", (-1));
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String string0 = StringUtils.replace("Br.$G5u,q:?iXl0 I:", "Br.$G5u,q:?iXl0 I:", "Br.$G5u,q:?iXl0 I:");
      assertEquals("Br.$G5u,q:?iXl0 I:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, ',');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      String string0 = StringUtils.center("*.pf$a", (-3328), "*.pf$a");
      assertEquals("*.pf$a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.joinWith("Sj*jd'o", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Sj*jd'o", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      String string0 = StringUtils.wrap("h 2", '+');
      assertEquals("+h 2+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.joinWith((String) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "d^He2!|Q'=k;[Z4";
      objectArray0[1] = (Object) "d^He2!|Q'=k;[Z4";
      objectArray0[2] = (Object) "d^He2!|Q'=k;[Z4";
      objectArray0[3] = (Object) "d^He2!|Q'=k;[Z4";
      objectArray0[4] = (Object) "d^He2!|Q'=k;[Z4";
      objectArray0[5] = (Object) "d^He2!|Q'=k;[Z4";
      objectArray0[6] = (Object) "d^He2!|Q'=k;[Z4";
      String string0 = StringUtils.joinWith("d^He2!|Q'=k;[Z4", objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4d^He2!|Q'=k;[Z4", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("Method `Stream<? extends Arguments> ", "d^He2!|Q'=k;[Z4");
      assertEquals((-23), int0);
      
      String string1 = StringUtils.wrap("Method `Stream<? extends Arguments> ", 'I');
      assertFalse(string1.equals((Object)string0));
      assertEquals("IMethod `Stream<? extends Arguments> I", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Search and eplace array lengths dn't match: ", (String) null);
      assertEquals("Search and eplace array lengths dn't match:", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      String string0 = StringUtils.join(charArray0, 'l');
      assertEquals(9, charArray0.length);
      assertEquals("llll\u0000l\u0000l\u0000l\u0000l\u0000l\u0000l\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'l', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.overlay("<olC+w[QNN", "<olC+w[QNN", 'l', 2575);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<olC+w[QNN<olC+w[QNN", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("\r");
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "<olC+w[QNN<olC+w[QNN");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2535);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.unwrap("2B134f^]ZEOU)J", 'K');
      assertEquals("2B134f^]ZEOU)J", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "2B134f^]ZEOU)J", "ExceptionWasThrown");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "2B134f^]ZEOU)J", (CharSequence) "ExceptionWasThrown");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "2B134f^]ZEOU)J", 90);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("o'{bBl.Vo0XE\u0001!C", "o'{bBl.Vo0XE\u0001!C", "o'{bBl.Vo0XE\u0001!C");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1
         // o'{bBl.Vo0XE\u0001!C
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "0VoEMrf l3K$", "y.;mJ,7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\"mGjuc~Y6 Dg2GD");
      assertEquals("\"mGjuc~Y6 Dg2GD", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("\"mGjuc~Y6 Dg2GD");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\"mGjuc~Y6 Dg2GD", "\"mGjuc~Y6 Dg2GD");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart("\"mGjuc~Y6 Dg2GD", "\"mGjuc~Y6 Dg2GD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "z% 7*";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = " vs ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string0 = StringUtils.replaceFirst("wV#^0L", "", "");
      assertEquals("wV#^0L", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "z% 7*", 0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("", "Strings must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'C';
      charArray0[2] = 'R';
      charArray0[3] = '!';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Strings must not be null", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'1', 'C', 'R', '!'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = 'l';
      String string0 = StringUtils.join(charArray0, 'l');
      assertEquals(6, charArray0.length);
      assertEquals("llllllalall", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'a', 'a', 'l'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "p$i,*.X,8^?w<J$NV";
      charSequenceArray0[1] = (CharSequence) "llllllalall";
      String string1 = StringUtils.leftPad("", 2575, 'a');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) string1;
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p$i,*.X,8^?w<J$NV", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '}');
      assertNull(string0);
      
      String string1 = StringUtils.leftPad("", (-564), 'n');
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "66ZZ1j|2(";
      charSequenceArray0[3] = (CharSequence) "Strings must not be null";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = 'h';
      String string0 = StringUtils.join(charArray0, '\u0000');
      assertEquals(7, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'h', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      stringArray0[2] = "...";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("*qSv=wx&SYS$BI", '=', '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals("*qSv=wx&SYS$BI", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap((String) null, 'c');
      assertNull(string2);
      
      String string3 = StringUtils.replaceChars("Threshold must not be negative", "rqTBSe?1TXAvr;/", "Another failed with one of the specified exceptions.");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ohAeshold must not be negatiee", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(3, stringArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.wrapIfMissing("*U4evTG4t<!i", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("*U4evTG4t<!i", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonEmpty(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertEquals("^h_/QwOf#@^F<ma", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNotBlank("Threshold must not be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "...", (CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "rqTBSe?1TXAvr;/", (CharSequence) "^h_/QwOf#@^F<ma");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'p');
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequencew                                                                                                                               X                                          ", (CharSequencew                                                                                                                               X                                          ");
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " `GQRQ't?dFB:]";
      stringArray0[1] = " `GQRQ't?dFB:]";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(" `GQRQ't?dFB:]", string0);
      assertNotNull(string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(" `GQRQ't?dFB:]"));
      assertEquals(0, priorityQueue0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      SortedSet<String> sortedSet0 = treeSet0.subSet(".", ".");
      assertNotNull(sortedSet0);
      assertFalse(treeSet0.contains(string0));
      assertFalse(sortedSet0.contains(string0));
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      
      boolean boolean0 = treeSet0.add(" `GQRQ't?dFB:]");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains("."));
      assertTrue(treeSet0.contains(string0));
      
      Stream<String> stream0 = treeSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(treeSet0.contains("."));
      assertTrue(treeSet0.contains(string0));
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains("."));
      assertTrue(treeSet0.contains(string0));
      assertFalse(navigableSet0.contains("."));
      assertTrue(navigableSet0.contains(string0));
      assertEquals(1, navigableSet0.size());
      assertFalse(navigableSet0.isEmpty());
      
      String string1 = StringUtils.left(" `GQRQ't?dFB:]", 6);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" `GQRQ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " `GQRQ't?dFB:]", (CharSequence) " `GQRQ't?dFB:]", 102);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("}gXQV_?");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}gxqv_?", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " `GQRQ't?dFB:]", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" `GQRQ't?dFB:]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "}gxqv_?", (CharSequence) " `GQRQ't?dFB:]");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(13, int2);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang3.ObjectUtils$Null", 8249, 'c');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "X1=M7_XH]LCf!dd^o,&", (CharSequence) "X1=M7_XH]LCf!dd^o,&");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      String string0 = StringUtils.leftPad("F", 3736, "F");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      String string0 = "Minimum abbreviation width is %d";
      char char0 = '6';
      String string1 = StringUtils.leftPad("Minimum abbreviation width is %d", 321, '6');
      assertFalse(string1.equals((Object)string0));
      assertEquals("6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666Minimum abbreviation width is %d", (CharSequence) "6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666Minimum abbreviation width is %d");
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      String string0 = StringUtils.difference("Nnh(D0bAg8", "...");
      assertEquals("...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      String string0 = StringUtils.substring("6d@PWy  04\"uKHeJ", 4142);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      String string0 = StringUtils.stripEnd("C8vKT{?Sqw[dyLW|", "C8vKT{?Sqw[dyLW|");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "C8vKT{?Sqw[dyLW|");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      String string0 = StringUtils.trim(" `GQRQ't?dFB:]");
      assertEquals("`GQRQ't?dFB:]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right(" `GQRQ't?dFB:]", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("`GQRQ't?dFB:]");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter((String) null, (-722));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String string0 = StringUtils.chomp(",aBkcZir?N7t7]zQI1");
      assertEquals(",aBkcZir?N7t7]zQI1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(",aBkcZir?N7t7]zQI1");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(",aBkcZir?N7t7]zQI1");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad(",aBkcZir?N7t7]zQI1", 12);
      assertTrue(string1.equals((Object)string0));
      assertEquals(",aBkcZir?N7t7]zQI1", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(",aBkcZir?N7t7]zQI1", ",aBkcZir?N7t7]zQI1");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripToEmpty("iA%R/Fcu");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("iA%R/Fcu", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(",aBkcZir?N7t7]zQI1", "iA%R/Fcu");
      assertEquals(0.29, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.mid(string0, '=', '=');
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore(string0, string0);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat(string0, 10);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBefore("", "");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("null/empty items");
      assertEquals("null/empty items", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("null/empty items", "null/empty items");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.swapCase("is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("IS %D", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right((String) null, 97);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "null/empty items");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "is %d", 'b');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      String string0 = StringUtils.right(".", 1501);
      assertEquals(".", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("...", ".");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      String string0 = StringUtils.overlay("Fc$$8/<o#x]{;", "", (-201), 160);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Fc$$8/<o#x]{;";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "Fc$$8/<o#x]{;", 0);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.mid("", 0, (-201));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String string0 = StringUtils.substring("Extension context \"", 598, 4);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Extension context \"");
      assertFalse(boolean0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean1 = linkedList0.add(locale_Category0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(locale_Category0));
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.join((List<?>) linkedList0, "", 102, 4);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(linkedList0.contains(locale_Category0));
      assertEquals(1, linkedList0.size());
      
      String string2 = StringUtils.reverseDelimited((String) null, '(');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 2555);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 2555, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("7#r1aDc-\"g0 m0)ab", "$=/C&fO8)%&{sG|2% ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("\n", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      String string0 = StringUtils.right("s@+", (-603));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      String string0 = StringUtils.defaultString("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee`");
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee#C|KT;IBmeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("i&9q3<.FnLdXu}1#");
      assertEquals(17, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", "~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("b", "{displayName}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "{displayName}", "Display name '%s' %sCart");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("{displayName}", "Display name '%s' %sCart");
      assertEquals(0.69, double0, 0.01);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("{displayName}", "(Aqk.:");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{displayName}", string1);
      assertNotNull(string1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.repeat(" Wxin an array of ", "\r", 738);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("b", 2916);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Suppled value must be a valid byte literl between -128 and 127: [", "Display name '%s' %sCart");
      assertEquals(44, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) string3, (CharSequence) "{displayName}");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isEmpty(" Wxin an array of ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.difference("6", (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("6", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      String string0 = StringUtils.difference(";S$=BT8Od.LSA4R#", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String string0 = StringUtils.unwrap("  ", "i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#i&9q3}.FnLdXu}1#");
      assertEquals("  ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      String string0 = StringUtils.unwrap(")7J8", '/');
      assertEquals(")7J8", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) ")7J8";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width is %d";
      String string1 = StringUtils.substringAfterLast(" vs org.apache.commons.lang3.StringUtils", "org.junitpioneer.v");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right(" ", 18);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1807, 61);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("j[OCl`(Y'sNtX", ")7J8", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertEquals(")7J8j[OCl`(Y'sNtX", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase("", "{'T)G+A!ttO=k02", "lG@H,[_}(*J,");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "lG@H,[_}(*J,", 2446, 2446);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("Minimum abbreviation width is %d", "Object varargs must not be null", "6Kj74DDp");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils", '{');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "6Kj74DDp");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("Minimum abbreviation width is %d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.left("Object varargs must not be null", 98);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("kmhZe zG;gL5'");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((float[]) null, 'P');
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.split("org.apache.commons.lang3.StringUtils");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      String string0 = StringUtils.substringAfter("%s: Could not resolve parameter by name (%s).", (-185));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[4] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[5] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      String string1 = StringUtils.remove("#C|KT;IBm", '^');
      assertFalse(string1.equals((Object)string0));
      assertEquals("#C|KT;IBm", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "#C|KT;IBm";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter("", (-185));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("", ":vYM$H8r9G%hHz");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(":vYM$H8r9G%hHz", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("#C|KT;IBm", "", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("#C|KT;IBm", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat('^', (-255));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "#C|KT;IBm";
      stringArray0[3] = ":vYM$H8r9G%hHz";
      stringArray0[4] = "";
      stringArray0[5] = "#C|KT;IBm";
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals(6, stringArray0.length);
      assertEquals("#C|KT;IBm", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      String string0 = StringUtils.joinWith("^h_/QwOf#@^F<ma", stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("^h_/QwOf#@^F<ma^h_/QwOf#@^F<ma^h_/QwOf#@^F<ma", string0);
      assertNotNull(string0);
      
      char char0 = 'y';
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.rightPad("", 65536, 'y');
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-2442));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (-128));
      assertNull(string0);
      
      String string1 = StringUtils.remove("\"=QTHktWDAV ^yM@", '^');
      assertEquals("\"=QTHktWDAV yM@", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "#C|KT;IBm";
      charSequenceArray0[1] = (CharSequence) "\"=QTHktWDAV yM@";
      charSequenceArray0[2] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\"=QTHktWDAV yM@", (CharSequence) null, (-1470));
      assertEquals((-1), int0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedList0.add(locale_Category0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_Category0));
      assertEquals(1, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("\"=QTHktWDAV yM@"));
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = linkedList1.containsAll(linkedList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(locale_Category0));
      assertFalse(linkedList1.contains("\"=QTHktWDAV yM@"));
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      String string2 = StringUtils.substringBetween((String) null, "\"=QTHktWDAV yM@");
      assertNull(string2);
      
      String string3 = StringUtils.joinWith("\"=QTHktWDAV yM@", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("#C|KT;IBm\"=QTHktWDAV yM@\"=QTHktWDAV yM@\"=QTHktWDAV yM@", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, (String) null, 345, (-128));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      String string0 = StringUtils.replacePattern("7", "/lDA@bfdA^", (String) null);
      assertEquals("7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "7", (CharSequence) "/lDA@bfdA^");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '8');
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "The `untilDate` string '", (-1689), (-1689));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.defaultString("...", (String) null);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("c6");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("c6", 1967);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("c6"));
      assertEquals(0, priorityQueue0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = priorityQueue0.add(object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains(object0));
      assertTrue(priorityQueue0.contains(object1));
      assertEquals(1, priorityQueue0.size());
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains(object0));
      assertTrue(priorityQueue0.contains(object1));
      assertEquals(1, priorityQueue0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      assertFalse(treeSet1.contains(string0));
      
      NavigableSet<String> navigableSet0 = treeSet1.descendingSet();
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(navigableSet0);
      assertFalse(treeSet1.contains(string0));
      assertFalse(navigableSet0.contains(string0));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      String string3 = StringUtils.join((Iterable<?>) navigableSet0, '-');
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(treeSet1.contains(string3));
      assertFalse(navigableSet0.contains(string3));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String string0 = StringUtils.getDigits("\"mGjuc~Y6 Dg2GD");
      assertEquals("62", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\"mGjuc~Y6 Dg2GD", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) "62", (-1207));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.substring("dk6#`}a|", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("k6#`}a|", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("k6#`}a|");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.abbreviate((String) null, "62", (-1), (-1));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.trimToNull("1n`r`^-*ewbO\";F=e!Q");
      assertEquals("1n`r`^-*ewbO\";F=e!Q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kmhZe zG;gL5'", "org.apache.commons.lang3.StringUtils");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("k", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.StringUtils", (String[]) null, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("kmhZe zG;gL5'");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("k");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substringBeforeLast("Locale must not be null", "6cC2IkCe>4.Kgi]y");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      String string0 = StringUtils.center("", 9);
      assertNotNull(string0);
      assertEquals("         ", string0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      StringUtils.substringsBetween("mRs1Uxdx8?nS4", "mRs1Uxdx8?nS4", "dUt~");
      String string0 = StringUtils.join((Object[]) null, "dUt~", (-365), (-365));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.indexOf((CharSequence) " vs ", (-16), (-1));
      String string0 = StringUtils.replaceOnceIgnoreCase("", "!ec/7wSoB", "\n");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", " vs ", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.repeat(" ", (-1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      int int0 = (-1953);
      StringUtils.rightPad(" vs ", (-1953), 'q');
      StringUtils stringUtils0 = new StringUtils();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'q';
      floatArray0[1] = 456.21F;
      short[] shortArray0 = new short[0];
      StringUtils.join(shortArray0, '5');
      floatArray0[2] = (float) (-1);
      StringUtils.indexOf((CharSequence) " vs ", 0, (-1));
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1953);
      StringUtils.join(floatArray0, 'q');
      StringUtils.replaceOnceIgnoreCase("", "!ec/7wSoB", "\n");
      StringUtils.equalsIgnoreCase("", "");
      StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) " vs ", (-1953));
      StringUtils.isAlpha("\r");
      StringUtils.getCommonPrefix((String[]) null);
      StringUtils.startsWith(" vs ", "\n");
      StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      StringUtils.isAllBlank((CharSequence[]) null);
      StringUtils.trimToNull("Invalid exceptionStatus");
      StringUtils.join((Object[]) null, "", 322, (-1));
      try { 
        StringUtils.getBytes("PR82,jgxnqpK", "113.0q456.21q-1.0q-1.0q-1953.0");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 's';
      charArray0[4] = '#';
      charArray0[5] = 'J';
      charArray0[6] = 'E';
      charArray0[7] = '(';
      charArray0[8] = ']';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-2313), 337);
      String string1 = StringUtils.unwrap("", '[');
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfter("", (-128));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      String string0 = StringUtils.stripToNull("g");
      StringUtils.isAllLowerCase("g");
      String string1 = StringUtils.leftPad("fFkM6#1i(MfWEX(B9", 1925, "");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("matches '%s'.", "7j~e3+RcpR%E");
      assertEquals("7j~e3+RcpR%Ematches '%s'.7j~e3+RcpR%E", string0);
      
      String string1 = StringUtils.wrap("&hw2N'ak;o", (String) null);
      assertNotNull(string1);
      assertEquals("&hw2N'ak;o", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Vector<Object> vector0 = new Vector<Object>();
      String string2 = StringUtils.truncate("&hw2N'ak;o", 8, 8);
      assertEquals(";o", string2);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      String string0 = StringUtils.unwrap("YSmI]qOx)TRm0`{Ye7", 'J');
      assertEquals("YSmI]qOx)TRm0`{Ye7", string0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("[m0:\"fYL`");
      assertEquals("[m0:\"fYL`", string0);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("=A9{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      StringUtils.isEmpty((CharSequence) null);
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      String string0 = StringUtils.stripAccents("&*\"N(-)sd5 V");
      assertEquals("&*\"N(-)sd5 V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      String string0 = StringUtils.wrap("Tc#}9}TSp61H-s.Rh", "Tc#}9}TSp61H-s.Rh");
      assertEquals("Tc#}9}TSp61H-s.RhTc#}9}TSp61H-s.RhTc#}9}TSp61H-s.Rh", string0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      String string0 = StringUtils.join((List<?>) stack0, "j+Xv5?hGxxF:a{Hl", 1657, 1657);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", 'a');
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Search and Replace array lengths don't match: ");
      boolean boolean1 = StringUtils.isEmpty("Search and Replace array lengths don't match: ");
      assertTrue(boolean1 == boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string1 = StringUtils.join((List<?>) arrayList0, "Search and Replace array lengths don't match: ", 0, 0);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("Locale must not be null");
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("offset cannot be negative", "");
      assertEquals("offset cannot be negative", string3);
      
      String string4 = StringUtils.trimToEmpty("@CartesianProductTest not found.");
      assertEquals("@CartesianProductTest not found.", string4);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Minimum abbreviation width is %d");
      String string1 = StringUtils.chomp("@CartesianTest not found.");
      assertEquals("@CartesianTest not found.", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Minimum abbreviation width is %d");
      StringUtils.equalsIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      String string2 = StringUtils.stripToEmpty("Minimum abbreviation width is %d");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripToNull("J+M");
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceEach("Illegal range. There's no way to get from %s to %s with a step of %s.", stringArray0, stringArray0);
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string4);
      
      String string5 = StringUtils.joinWith("Illegal range. There's no way to get from %s to %s with a step of %s.", stringArray0);
      assertEquals("MinimumIllegal range. There's no way to get from %s to %s with a step of %s. Illegal range. There's no way to get from %s to %s with a step of %s.abbreviationIllegal range. There's no way to get from %s to %s with a step of %s. Illegal range. There's no way to get from %s to %s with a step of %s.widthIllegal range. There's no way to get from %s to %s with a step of %s. Illegal range. There's no way to get from %s to %s with a step of %s.isIllegal range. There's no way to get from %s to %s with a step of %s. Illegal range. There's no way to get from %s to %s with a step of %s.%Illegal range. There's no way to get from %s to %s with a step of %s.d", string5);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"~{k83<mKOo-g.junitpioneer.jupiter.AbstractEntryBasedExtension";
      stringArray0[1] = "Object varargs must not be null";
      stringArray0[2] = "Display name '%s' %s";
      stringArray0[3] = "Object varargs must not be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Object varargs must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kmhZe zG;gL5'", "org.apache.commons.lang3.StringUtils");
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.StringUtils", stringArray0, stringArray0);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      String string0 = StringUtils.LF;
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("\n");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '(');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      StringUtils.normalizeSpace("#t39A,:jk~k$R/N3qM");
      StringUtils.trimToEmpty("J}b`4W#xLDFRH][_4x");
      StringUtils.remove("#t39A,:jk~k$R/N3qM", "H)+j=M");
      StringUtils.containsAny((CharSequence) "H)+j=M", (char[]) null);
      String string0 = StringUtils.join((long[]) null, '2');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kmhZe zG;gL5'", "org.apache.commons.lang3.StringUtils");
      String string0 = "66ZZ1j|2(";
      StringUtils.firstNonBlank(stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("FwQ)Z^ n&T[9I5h :=", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String string0 = StringUtils.chop(" vs ");
      assertEquals(" vs", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("{vL)MI%i-I", stringArray0, stringArray0);
      assertEquals("{vL)MI%i-I", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " vs", (CharSequence) "{vL)MI%i-I");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("=O,).)_!;@Y@;QZ", "-56S");
      StringUtils.firstNonBlank(stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("=O,).)_!;@Y@;QZ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 16, (-2073));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      long[] longArray0 = new long[4];
      String string0 = StringUtils.join(longArray0, 'B');
      assertNotNull(string0);
      assertEquals("0B0B0B0", string0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("{arguments}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kmhZe zG;gL5'", "kmhZe zG;gL5'");
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("kmhZe zG;gL5'", (String[]) null, stringArray0);
      assertEquals("kmhZe zG;gL5'", string0);
      assertEquals(14, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("kmhZe zG;gL5'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      String string0 = StringUtils.abbreviate("&L\"N-s5:V", 7, 7);
      assertEquals("...s5:V", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "...s5:V", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("&L\"N-)sd5:V", 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      String string0 = StringUtils.abbreviate("&L\"-s5:V", 7, 7);
      assertEquals("&L\"-...", string0);
      
      String string1 = StringUtils.wrapIfMissing("&L\"-s5:V", "&L\"-...");
      assertEquals("&L\"-...&L\"-s5:V&L\"-...", string1);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      String string0 = StringUtils.abbreviate(" ", 7, 7);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      String string0 = StringUtils.unwrap("Y:)", "");
      assertEquals("Y:)", string0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", "~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      String string0 = StringUtils.center("Cannot clear and set the following entries at the same time: ", 252, "Cannot clear and set the following entries at the same time: ");
      String string1 = StringUtils.unwrap("Cannot clear and set the following entries at the same time: Cannot clear and set the followingCannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following ", "Cannot clear and set the following entries at the same time: ");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("Cannot clear and set the following entries at the same time: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      String string0 = StringUtils.repeat("n2nwy^5", (-867));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      StringUtils.join((short[]) null, 'O');
      int int0 = StringUtils.indexOf((CharSequence) null, 106);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      int[] intArray0 = new int[7];
      String string0 = StringUtils.join(intArray0, '}');
      assertEquals("0}0}0}0}0}0}0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = objectArray0[4];
      String string0 = StringUtils.joinWith("", objectArray0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Mtr|\",,rv?A^~j", "Mtr|\",,rv?A^~j", (-51));
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("}kcL", "%g9ofo");
      assertEquals(88, int0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (-51);
      intArray0[2] = (-51);
      intArray0[3] = 88;
      intArray0[4] = (-51);
      intArray0[5] = (-51);
      String string1 = StringUtils.join(intArray0, 'x');
      assertEquals("0x-51x-51x88x-51x-51", string1);
      
      String string2 = StringUtils.leftPad("Mtr|\",,rv?A^~j", (-51), "}kcL");
      assertEquals("Mtr|\",,rv?A^~j", string2);
      
      String string3 = StringUtils.repeat("}kcL", "", 1223);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '=');
      assertEquals("\\u", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string1);
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("", "", 2555);
      String string3 = StringUtils.difference("", "]{lu_t'OxC ");
      StringUtils.substring("#", 2555);
      String string4 = StringUtils.defaultString("]{lu_t'OxC ");
      assertTrue(string4.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("(");
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      boolean boolean1 = StringUtils.startsWith("", "]{lu_t'OxC ");
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.substringAfterLast(string0, "]{lu_t'OxC ");
      String string6 = StringUtils.right("{index}", 0);
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      
      StringUtils.indexOf((CharSequence) "(", 2555, 1929);
      String string7 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string7.equals((Object)string1));
      
      StringUtils.substringAfter("", "]{lu_t'OxC ");
      String string8 = StringUtils.removeIgnoreCase("", "%s: Could not resolve parameter by name (%s).");
      assertEquals("", string8);
      
      String string9 = StringUtils.rotate("_kR\"*", (-1512));
      assertEquals("R\"*_k", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      boolean boolean0 = StringUtils.isNumeric(" ");
      StringUtils.getDigits("\r");
      String string1 = StringUtils.remove("", "");
      StringUtils.lastIndexOf((CharSequence) " ", 10);
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 10);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBeforeLast("8Obo?pD", " ");
      assertEquals("8Obo?pD", string2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      StringUtils.join(longArray0, '5', 76, (-1));
      boolean boolean1 = StringUtils.isAsciiPrintable("8Obo?pD");
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "8Obo?pD", "ebBUzn1$j-6hZ[9M");
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.repeat((String) null, "w!qc M$.Z1l}--kne", 0);
      assertNull(string3);
      
      String string4 = StringUtils.getDigits("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringUtils.containsNone((CharSequence) "Y:jM", charArray0);
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1852.1635F;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("j", "Y:jM", (-952));
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("j", "tVAVO");
      assertEquals((-10), int0);
      
      StringUtils.join((int[]) null, '/');
      String string0 = StringUtils.leftPad("tVAVO", (-10), "Pp7S");
      assertEquals("tVAVO", string0);
      
      String string1 = StringUtils.repeat("qc/", "\n", 8);
      assertEquals("qc/\nqc/\nqc/\nqc/\nqc/\nqc/\nqc/\nqc/", string1);
      
      String[] stringArray1 = StringUtils.split("j", 's');
      String string2 = StringUtils.center("^tq3", 129, "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertNotNull(string2);
      assertEquals("Illegal range. There's no way to get from %s to %s with a step^tq3Illegal range. There's no way to get from %s to %s with a step ", string2);
      
      StringUtils.removeStart("Illegal range. There's no way to get from %s to %s with a step of %s.", "Illegal range. There's no way to get from %s to %s with a step^tq3Illegal range. There's no way to get from %s to %s with a step ");
      StringUtils.firstNonEmpty(stringArray1);
      boolean boolean0 = StringUtils.isAllBlank(stringArray1);
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("tVAVO", (-10));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      short[] shortArray0 = new short[2];
      String string0 = StringUtils.join(shortArray0, 'F');
      assertNotNull(string0);
      assertEquals("0F0", string0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String string0 = StringUtils.substringAfter("sion", "sion");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      String string0 = StringUtils.repeat("6W'", "6W'", 2539);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-591);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-547);
      intArray0[4] = 361;
      intArray0[5] = 1297;
      intArray0[6] = 97;
      String string0 = StringUtils.join(intArray0, '8');
      assertEquals("-59180808-547836181297897", string0);
      
      String string1 = StringUtils.repeat("-59180808-547836181297897", "mfrB!ygQl8XRC'G$5", 0);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter("!ss1", "");
      assertEquals("!ss1", string2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)90;
      shortArray0[4] = (short) (-1279);
      shortArray0[5] = (short)16;
      shortArray0[6] = (short) (-2336);
      String string3 = StringUtils.join(shortArray0, 'm');
      assertNotNull(string3);
      assertEquals("0m5m0m90m-1279m16m-2336", string3);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'D');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      int int0 = StringUtils.indexOfAny((CharSequence) "JoI>GqXU", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEnd("JoI>GqXU", "DefaultLocale");
      assertEquals("JoI>GqXU", string0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("{_n.e-?HzaH3Y7y", "{_n.e-?HzaH3Y7y");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("\"mGjuc~Y6 Dg2GD\"mGjuc~Y6 Dg2GD", "{_n.e-?HzaH3Y7y", "{_n.e-?HzaH3Y7y");
      String string1 = StringUtils.replaceIgnoreCase("\"mGjuc~Y6 Dg2GD\"mGjuc~Y6 Dg2GD", "java.lang.Object@5aa43e1IssueExtension-591IssueExtensionjava.lang.Object@2ed545a9IssueExtension-591Object varargs must not be null", "7YW", 391);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Search and Replace array lengths don't match: ", "5ne`o3voH$TD&?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, 'V');
      assertEquals("0.0V0.0V0.0V0.0V0.0", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "0.0V0.0V0.0V0.0V0.0", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean0 = StringUtils.containsAny((CharSequence) "[", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      String string0 = StringUtils.overlay("Fc$$8/<o#x]{;", "", (-201), 160);
      String string1 = StringUtils.stripToEmpty("");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "Fc$$8/<o#x]{;");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'v';
      charArray0[2] = 'k';
      charArray0[3] = 'P';
      charArray0[4] = '@';
      charArray0[5] = '!';
      charArray0[6] = 'W';
      StringUtils.valueOf(charArray0);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Fc$$8/<o#x]{;");
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      
      StringUtils.remove("", 'I');
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfEmpty("", supplier0);
      Locale locale0 = Locale.forLanguageTag("Fc$$8/<o#x]{;");
      String string2 = StringUtils.lowerCase("(n>;neS9}V", locale0);
      assertEquals("(n>;nes9}v", string2);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      StringUtils.getDigits((String) null);
      StringUtils.remove("\"mGjuc~Y6 Dg2GD", (String) null);
      StringUtils.lastIndexOf((CharSequence) null, (-1182));
      StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) null, 5);
      StringUtils.substring("Hop:V'^`JsncR", (-258));
      String string0 = "Display name '%s' %sDisplay name '%s' %s";
      StringUtils.defaultString("");
      String[] stringArray0 = StringUtils.splitByCharacterType("(XW&aB8)pgSTLzi[");
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      StringUtils.startsWith("\"mGjuc~Y6 Dg2GD", "");
      StringUtils.containsAny((CharSequence) "", (char[]) null);
      StringUtils.countMatches((CharSequence) "(XW&aB8)pgSTLzi[", (CharSequence) "");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("P^&\">6;o%/wze{z", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K\u0002=]]ZLo6`";
      stringArray0[1] = "66ZZ1j|2(";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = " must be static.";
      StringUtils.indexOf((CharSequence) "66ZZ1j|2(", (CharSequence) "K\u0002=]]ZLo6`");
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "FwQ");
      assertEquals("K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("bx] VKa|]r", 'L');
      assertEquals("bx] VKa|]r", string1);
      
      String string2 = StringUtils.trimToNull("Strings must not be null");
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
      
      StringUtils.join((Object[]) stringArray0, (String) null, 322, 322);
      int int0 = StringUtils.indexOfAny((CharSequence) "K\u0002=]]ZLo6`FwQ66ZZ1j|2(FwQStrings must not be nullFwQ must be static.FwQFwQ", (CharSequence[]) stringArray0);
      String string3 = StringUtils.left("CartesianProductTest", 77);
      assertEquals("CartesianProductTest", string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "CartesianProductTest", (CharSequence) "CartesianProductTest", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      String string0 = StringUtils.capitalize("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension");
      assertEquals("~/]&g*DSW_t5:GV*org.junitpioneer.vinage.TimeoutE*tension", string0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.indexOf((CharSequence) " vs ", (-16), (-1));
      String string0 = StringUtils.replaceOnceIgnoreCase("", "!ec/7wSoB", "\n");
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '|');
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      String string2 = StringUtils.trimToNull("\n");
      assertNull(string2);
      
      String string3 = StringUtils.left("...", 17);
      assertEquals("...", string3);
      
      String string4 = StringUtils.substringAfterLast("!hOiWwGX9;oz$>>", (-1));
      assertTrue(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "|#]W)*,Q<xc}/#bO");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      String string0 = StringUtils.replaceAll("~'8{+(_qk1Q9{5Q", "BAoFzgOJU$", "%s was not annotated with @ArgumentsSource but should have been.");
      String string1 = StringUtils.normalizeSpace("\r ");
      assertEquals("", string1);
      
      String string2 = StringUtils.truncate("~'8{+(_qk1Q9{5Q", 321);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints("\r ");
      assertArrayEquals(new int[] {13, 32}, intArray0);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.wrap("Sz<ARrMaf}z0L1D", '1');
      assertEquals("1Sz<ARrMaf}z0L1D1", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r ", (CharSequence) "\r ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      String string0 = StringUtils.LF;
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, 'C');
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-2512), 700);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "\n";
      String string2 = StringUtils.replaceEach("\n", stringArray0, stringArray0);
      assertEquals("\n", string2);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      StringUtils.abbreviate(" ", (-2313), 346);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " ");
      StringUtils.equalsIgnoreCase(" ", " ");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.isAlphanumericSpace("...");
      StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "");
      StringUtils.isWhitespace("");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " ", 760);
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " ");
      StringUtils.capitalize("...");
      StringUtils.stripAll(stringArray1, "Search and Replace array lengths don't match: ");
      StringUtils.isMixedCase("Search and Replace array lengths don't match: ");
      StringUtils.contains((CharSequence) " ", 760);
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      StringUtils.removePattern("java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0Object varargs must not be null", "F9+.Dis=Nj");
      StringUtils.containsOnly((CharSequence) "java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0Object varargs must not be null", "java.lang.Object@6eb5af84IssueExtension-591IssueExtensionjava.lang.Object@70903ae6IssueExtension0Object varargs must not be null");
      StringUtils.replaceChars((String) null, '6', '6');
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("|7r/9=!(Gw[i^A", "$?6");
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.defaultIfEmpty("S^Q,?v(zynvA", "MgMa");
      StringUtils.remove("}c", 'u');
      int int0 = StringUtils.indexOfAny((CharSequence) "}c", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      StringUtils.substringAfter((String) null, (-128));
      StringUtils.remove("\"=QTHktWDAV ^yM@", '^');
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "#C|KT;IBm";
      charSequenceArray0[1] = (CharSequence) "\"=QTHktWDAV yM@";
      charSequenceArray0[2] = (CharSequence) null;
      StringUtils.isAllBlank(charSequenceArray0);
      StringUtils.substringAfter((String) null, (-185));
      StringUtils.containsAny(charSequenceArray0[0], (CharSequence) "#C|KT;IBm");
      StringUtils.defaultIfEmpty("", "%&T$'ygV8B% m");
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "%&T$'ygV8B% m", charSequenceArray0);
      StringUtils.repeat('g', (-128));
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":vYM$H8r9G%hHz";
      stringArray0[1] = null;
      StringUtils.firstNonEmpty(stringArray0);
      String string1 = StringUtils.defaultIfEmpty("Kk%R60)", "#C|KT;IBm");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("8", "8");
      int int0 = StringUtils.indexOfAny((CharSequence) "8", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("?pkd@ J3l;iQMQG/AV", "?pkd@ J3l;iQMQG/AV", "?pkd@ J3l;iQMQG/AV");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '?' near index 0
         // ?pkd@ J3l;iQMQG/AV
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.rightPad(" vs ", (-1953), 'q');
      assertEquals(" vs ", string0);
      
      StringUtils stringUtils0 = new StringUtils();
      short[] shortArray0 = new short[0];
      StringUtils.join(shortArray0, '5');
      StringUtils.indexOf((CharSequence) " vs ", 0, (-1));
      String string1 = StringUtils.replaceOnceIgnoreCase("", "!ec/7wSoB", "\n");
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) " vs ", (-1953));
      boolean boolean1 = StringUtils.isAlpha("\r");
      StringUtils.getCommonPrefix((String[]) null);
      boolean boolean2 = StringUtils.startsWith(" vs ", "\n");
      assertTrue(boolean2 == boolean1);
      
      StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      boolean boolean3 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean3 == boolean0);
      
      StringUtils.join((Object[]) null, "\n");
      String string2 = StringUtils.remove(" ", 'L');
      assertEquals(" ", string2);
      
      String string3 = StringUtils.trimToNull("Invalid exceptionStatus");
      assertNotNull(string3);
      
      StringUtils.join((Object[]) null, "", 322, (-1));
      StringUtils.indexOfAny((CharSequence) "!ec/7wSoB", (CharSequence[]) null);
      StringUtils.left("...", (-1953));
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "!ec/7wSoB", (CharSequence) " ", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'p', 2860, (-800));
      assertNull(string0);
      
      StringUtils.trimToEmpty((String) null);
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 0);
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      
      StringUtils.getBytes((String) null, "");
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap((String) null, 'P');
      assertNull(string1);
      
      String string2 = StringUtils.stripStart("", "Minimum abbreviation width is %d");
      assertEquals("", string2);
      
      String string3 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" noXclone methbd");
      assertEquals("noXclone methbd", string0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      StringUtils.stripAll((String[]) null, "*U4evTG4t<!i");
      boolean boolean0 = StringUtils.equalsIgnoreCase("^h_/QwOf#@^F<ma", "...");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertEquals("*U4evTG4t<!i", string0);
      
      String string1 = StringUtils.replaceChars("...", '=', '_');
      String string2 = StringUtils.wrap("^h_/QwOf#@^F<ma", 'c');
      assertEquals("c^h_/QwOf#@^F<mac", string2);
      
      StringUtils.replaceChars((String) null, " vs ", "*qSv=wx&SYS$BI");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.wrapIfMissing("...", "");
      assertTrue(string3.equals((Object)string1));
      
      StringUtils.firstNonEmpty((String[]) null);
      boolean boolean1 = StringUtils.isNotBlank("...");
      StringUtils.containsAny((CharSequence) "^h_/QwOf#@^F<ma", (CharSequence[]) null);
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.getDigits("~a<gEx]]7GA[&7J5");
      assertEquals("775", string4);
      
      Vector<Object> vector0 = new Vector<Object>();
      String string5 = StringUtils.join((Iterable<?>) vector0, "9UGT.$]HGS(rI");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "owni-", "owni-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)65;
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertEquals("\u00059\uFFFD\u0000B\uFFFD\u0004A", string0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "@.J.Kk?$X", (CharSequence) "@.J.Kk?$X");
      boolean boolean1 = StringUtils.isBlank("@.J.Kk?$X");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '{', 'o');
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split(" vs ");
      StringUtils.endsWithAny("", stringArray0);
      int int0 = StringUtils.indexOfAny((CharSequence) "o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", "...");
      assertEquals(3, int0);
      
      String string3 = StringUtils.substringAfter(".x6bTbsm", "");
      assertEquals(".x6bTbsm", string3);
      
      StringUtils.isAllLowerCase("Display name '%s' %s");
      StringUtils.defaultIfEmpty("}bo@GX+.'jG@cHHmT", "offset cannot be negative");
      boolean boolean0 = StringUtils.endsWithAny(" vs ", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) " ", (CharSequence) " ");
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 2411);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      String string0 = StringUtils.remove("^h_/QwOf#@^F<mo", ']');
      assertEquals("^h_/QwOf#@^F<mo", string0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      String string0 = StringUtils.replaceChars("!V", 'a', '&');
      assertEquals("!V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("\n");
      String string1 = StringUtils.upperCase("\n");
      assertEquals("\n", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToEmpty("V#NHxjEVP[wANg.I|X(");
      assertEquals("V#NHxjEVP[wANg.I|X(", string2);
      
      String string3 = StringUtils.wrapIfMissing("\n", "doU=@&_/t|OnaJ`;");
      assertEquals("doU=@&_/t|OnaJ`;\ndoU=@&_/t|OnaJ`;", string3);
      
      StringUtils.getIfEmpty("", (Supplier<String>) null);
      String string4 = StringUtils.stripEnd("", "CartesianProductTest can only take exactly one type of arguments source.");
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      String string1 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.params.LongRange");
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string1);
      
      StringUtils.replaceChars("org.junitpioneer.jupiter.AbstractEntryBasedExtension", 'h', 'o');
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.params.LongRange", "Display name '%s' %s");
      assertEquals(1, stringArray0.length);
      
      StringUtils.capitalize("Display name '%s' %s");
      String string2 = StringUtils.substringAfterLast("", "");
      assertTrue(string2.equals((Object)string0));
      
      StringUtils.countMatches((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.params.LongRange");
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.AbstractEntryBasedExtension", "maxWith cannot be negative");
      assertFalse(boolean0);
      
      StringUtils.contains((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.params.LongRange");
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      StringUtils.valueOf(charArray0);
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Display name '%s' %s");
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.params.LongRange", (CharSequence[]) stringArray1);
      assertEquals((-1), int0);
      assertEquals(4, stringArray1.length);
      
      StringUtils.remove("Display name '%s' %s", 'h');
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfEmpty("", supplier0);
      Locale locale0 = Locale.forLanguageTag("org.junitpioneer.jupiter.AbstractEntryBasedExtension");
      String string3 = StringUtils.lowerCase("VLo|'F,\"", locale0);
      assertEquals("vlo|'f,\"", string3);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("Method `CartesianProductTest.Sets ");
      String string0 = StringUtils.lowerCase("owni-", locale0);
      assertEquals("owni-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      String string0 = StringUtils.overlay("Fc$$8/<o#x]{;", "", (-201), 160);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "Fc$$8/<o#x]{;");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[3] = 'P';
      charArray0[4] = '@';
      charArray0[5] = '!';
      charArray0[6] = 'W';
      StringUtils.valueOf(charArray0);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Fc$$8/<o#x]{;");
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another8z`\"^>fQWncTU5R", 73, "8U)`r\n");
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("o* /VUDg%", "Parameter has to be annotated with ", (-1059));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 73);
      assertFalse(int1 == int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("$pdcpQtU?/", "");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.capitalize("org.junitpioneer.jupiter.params.IntRange");
      assertEquals("Org.junitpioneer.jupiter.params.IntRange", string2);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String string0 = "7]}V||]McvXO!\\Dn#";
      String string1 = "|?[L";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("7]}V||]McvXO!Dn#", "|?[L");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '?' near index 1
         // |?[L
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeAll("[2*wy^5", "[2*wy^5");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 6
         // [2*wy^5
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      String string0 = "nISU|gy8f<Uf";
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.40170940170940167;
      int int0 = (-5534);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '=', (-5534), 3006);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5534
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.abbreviateMiddle("", "", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\"mGjuc~Y6 Dg2GD");
      String string1 = StringUtils.stripAccents("\"mGjuc~Y6 Dg2GD");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("\"mGjuc~Y6 Dg2GD", "4vA");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceChars("4vA", ", Length: 0, Length: 0", "\n");
      assertEquals("4vA", string2);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      String string0 = StringUtils.mid("}7p&|de/K'Vh", (-1), (-2632));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEnd("Ff", "T");
      assertEquals("Ff", string1);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = 'l';
      charArray0[2] = 'J';
      charArray0[3] = '(';
      charArray0[4] = '#';
      charArray0[5] = 'J';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p$i,*.X,8^?w<J$NV", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1207);
      shortArray0[2] = (short)6;
      String string0 = StringUtils.join(shortArray0, ',');
      boolean boolean0 = StringUtils.isWhitespace("0,-1207,6");
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0,-1207,6");
      String string1 = StringUtils.leftPad("y", (int) (short)6);
      assertEquals("     y", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("     y", "     y");
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("y");
      assertArrayEquals(new int[] {121}, intArray0);
      
      String string2 = StringUtils.abbreviateMiddle("0,-1207,6", "     y", (short) (-1207));
      assertEquals("0,-1207,6", string2);
      
      String string3 = StringUtils.substringBeforeLast("=\"qB(W\"Ae>le/!&4X", "U/OS");
      assertEquals("=\"qB(W\"Ae>le/!&4X", string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("=\"qB(W\"Ae>le/!&4X");
      assertEquals(13, stringArray1.length);
      
      String string4 = StringUtils.joinWith("", stringArray0);
      assertTrue(string4.equals((Object)string0));
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "0,-1207,6", charArray0);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" `GQRQ't?dFB:]", 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      int int0 = StringUtils.compare("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      StringUtils.splitPreserveAllTokens("{'T)G+A!ttO=k02");
      StringUtils.compare("[", "Hz<1p`P");
      StringUtils.containsOnly((CharSequence) null, (char[]) null);
      StringUtils.mid("{'T)G+A!ttO=k02", 321, 76);
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "[";
      charSequenceArray0[2] = (CharSequence) "Display name '%s' %s";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Hz<1p`P";
      charSequenceArray0[5] = (CharSequence) "[";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      StringUtils.isNoneEmpty(charSequenceArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 76;
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      String string0 = StringUtils.abbreviate("&L\"-s5:V", 7, 7);
      assertEquals("&L\"-...", string0);
      
      String string1 = StringUtils.mid("&L\"-s5:V", 7, 7);
      assertNotNull(string1);
      assertEquals("V", string1);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      String string0 = StringUtils.CR;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", "\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      int int0 = StringUtils.compare(" `GQRQ't?dFB:]", "Duplicate enum constant name(s) found in ", true);
      assertEquals((-36), int0);
      
      Locale locale0 = Locale.JAPANESE;
      String string0 = StringUtils.upperCase("'96(", locale0);
      assertEquals("'96(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Cannot store ", "Cannot store ", (-1022));
      assertEquals("Cannot store ", string0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      StringUtils.join(doubleArray0, 'd', 0, 0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = ',';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      charArray0[6] = 'd';
      charArray0[7] = 'd';
      StringUtils.containsAny((CharSequence) "", charArray0);
      StringUtils.compare("", "c7X=UO4]BLa{)31");
      StringUtils.containsOnly((CharSequence) "", charArray0);
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      StringUtils.mid("c7X=UO4]BLa{)31", 0, (-15));
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "c7X=UO4]BLa{)31";
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.isNoneEmpty(charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'd', (-2501), 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2501
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^h_/QwOf#@^F<ma";
      stringArray0[1] = "*U4evTG4t<!i";
      stringArray0[2] = "...";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "...");
      boolean boolean0 = StringUtils.equalsIgnoreCase("*U4evTG4t<!i", "^h_/QwOf#@^F<ma");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("...", "]{lu_t'OxC ");
      assertEquals("]{lu_t'OxC ", string0);
      
      String string1 = StringUtils.substring("^h_/QwOf#@^F<ma", 1045);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("#");
      assertEquals("#", string2);
      
      String[] stringArray2 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      StringUtils.startsWith("]{lu_t'OxC ", "]{lu_t'OxC ");
      StringUtils.containsAny((CharSequence) "(", (char[]) null);
      int int1 = StringUtils.countMatches((CharSequence) "^h_/QwOf#@^F<ma", (CharSequence) "]{lu_t'OxC ");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K\u0002=]]ZLo6`";
      stringArray0[1] = "66ZZ1j|2(";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = " must be static.";
      stringArray0[4] = "Y:jM";
      stringArray0[5] = "Strings must not be null";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("66ZZ1j|2(", "Strings must not be null", "66ZZ1j|2(");
      assertEquals("66ZZ1j|2(", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("|4~w5f3lEd", "Extension context \"");
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("|4~w5f3lEd", string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      String string0 = "66ZZ1j|2(";
      StringUtils.firstNonBlank(stringArray0);
      byte byte0 = (byte)56;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'I', (int) (byte)0, 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kmhZe zG;gL5'", "org.apache.commons.lang3.StringUtils");
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("k", string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.StringUtils", (String[]) null, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      String string2 = StringUtils.substringAfterLast("Locale must not be null", 322);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      String string0 = StringUtils.LF;
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, 'C');
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isBlank("\n");
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs org.apache.commons.lang3.StringUtils", " vs org.apache.commons.lang3.StringUtils");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 116);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("&*\"N(-)sd5 V");
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[?zuqMwO6C%U*", 42);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("=O,).)_!;@Y@;QZ", "=O,).)_!;@Y@;QZ");
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(16, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("=O,).)_!;@Y@;QZ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("&L\"N-)sd5:V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K\u0002=]]ZLo6`";
      stringArray0[1] = "66ZZ1j|2(";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = " must be static.";
      stringArray0[4] = "Y:jM";
      stringArray0[5] = "Strings must not be null";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("K\u0002=]]ZLo6`", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      String string2 = StringUtils.substringAfterLast("", 0);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width with offset is %d", "r");
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "r", (CharSequence) "Minimum abb", 4018);
      assertEquals(11, int0);
      
      StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", "");
      String string1 = StringUtils.abbreviate("Minimum abb", "Could not find parameter named %s in test %s", 108);
      assertEquals("Minimum abb", string1);
      
      int int1 = StringUtils.ordinalIndexOf("Minimum abb", "Minimum abb", 5);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", 5, 108);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot clear and set the following entries at the same time: ", "4*W/cbT#{(Oh=Pb7r");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      StringUtils.isNumeric(" ");
      StringUtils.getDigits("\r");
      String string1 = StringUtils.remove("", "");
      assertEquals("", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 10);
      assertEquals(0, int1);
      
      StringUtils.substringBeforeLast("8Obo?pD", " ");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      StringUtils.join(longArray0, '5', 76, (-1));
      StringUtils.isAsciiPrintable("8Obo?pD");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8Obo?pD";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", (String) null);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.toRootLowerCase("8Obo?pD");
      assertEquals("8obo?pd", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("8obo?pd");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      String string0 = StringUtils.substring("", 3839, 3839);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("VG0dicm6aDPzHB^]", "7/tw*'@,3Yr0B1KoG`");
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("q%hap=>H4kp/uv}", "", 12, 12);
      assertEquals("q%hap=>H4kp/", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "&L\"-s5:V", " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string1 = StringUtils.abbreviate("C", "", (-1));
      assertEquals("C", string1);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      String string0 = StringUtils.LF;
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertTrue(boolean2);
      
      String string1 = StringUtils.defaultString("\n", "...");
      assertEquals("\n", string1);
      
      boolean boolean3 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean3 == boolean0);
      
      String string2 = StringUtils.stripStart("\n", "\n");
      assertEquals("", string2);
      
      String string3 = StringUtils.appendIfMissing("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", "\n", charSequenceArray0);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider\n", string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Object object0 = new Object();
      priorityQueue0.stream();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      priorityQueue0.removeIf(predicate0);
      priorityQueue0.add(object0);
      priorityQueue0.iterator();
      String string4 = StringUtils.EMPTY;
      boolean boolean4 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[3], charSequenceArray0);
      assertTrue(boolean4 == boolean1);
      
      StringUtils.join((Object[]) null, 'X', 64, 256);
      String string5 = StringUtils.rightPad("", 2, ']');
      assertEquals("]]", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      StringUtils.substringAfter("%s: Could not resolve parameter by name (%s).", (-185));
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[4] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      charSequenceArray0[5] = (CharSequence) "%s: Could not resolve parameter by name (%s).";
      StringUtils.join((Object[]) charSequenceArray0, 'A');
      StringUtils.wrap("A%s: Could not resolve parameter by name (%s).AA%s: Could not resolve parameter by name (%s).A%s: Could not resolve parameter by name (%s).A%s: Could not resolve parameter by name (%s).A", 'A');
      StringUtils.leftPad("j+ya", (-185), '<');
      char[] charArray0 = null;
      StringUtils.containsNone(charSequenceArray0[0], (char[]) null);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'F', (-32768), (-2652));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " ";
      String string1 = StringUtils.join(objectArray0, '~', 814, 814);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      String string0 = StringUtils.rotate("v*VLAcj", 317);
      assertNotNull(string0);
      assertEquals("cjv*VLA", string0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'P');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      boolean boolean0 = StringUtils.isNumeric(" ");
      String string1 = StringUtils.getDigits("\r");
      StringUtils.remove("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      String string2 = StringUtils.right(" ", 16);
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1, 1);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("", charSequenceArray0[1], charSequenceArray0);
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) " ", charSequenceArray0);
      assertTrue(boolean3 == boolean1);
      
      StringUtils.reverse((String) null);
      boolean boolean4 = StringUtils.isBlank(" ");
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      String string0 = StringUtils.defaultString("1}#27w~fU1A(Dbx4gn", "1}#27w~fU1A(Dbx4gn");
      assertEquals("1}#27w~fU1A(Dbx4gn", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("1}#27w~fU1A(Dbx4gn", "1}#27w~fU1A(Dbx4gn");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "1}#27w~fU1A(Dbx4gn";
      charSequenceArray0[1] = (CharSequence) "1}#27w~fU1A(Dbx4gn";
      charSequenceArray0[2] = (CharSequence) "1}#27w~fU1A(Dbx4gn";
      charSequenceArray0[3] = (CharSequence) "1}#27w~fU1A(Dbx4gn";
      String string1 = StringUtils.replace("1}#27w~fU1A(Dbx4gn", "1}#27w~fU1A(Dbx4gn", (String) null);
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "1}#27w~fU1A(Dbx4gn";
      charSequenceArray0[5] = (CharSequence) "1}#27w~fU1A(Dbx4gn";
      charSequenceArray0[6] = (CharSequence) "1}#27w~fU1A(Dbx4gn";
      charSequenceArray0[7] = (CharSequence) "1}#27w~fU1A(Dbx4gn";
      charSequenceArray0[8] = (CharSequence) "1}#27w~fU1A(Dbx4gn";
      String string2 = StringUtils.appendIfMissingIgnoreCase("1}#27w~fU1A(Dbx4gn", "1}#27w~fU1A(Dbx4gn", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "?pId@ J3l;iQMQ[/AV", "?pId@ J3l;iQMQ[/AV");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("yEHHD=6;5D2lyhc6@*)", "yEHHD=6;5D2lyhc6@*)", "yEHHD=6;5D2lyhc6@*)");
      assertEquals("yEHHD=6;5D2lyhc6@*)", string0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      String string0 = StringUtils.join(byteArray0, 'K');
      String string1 = StringUtils.reverse("4K16K-90K4K16K16K0");
      assertEquals("0K61K61K4K09-K61K4", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("4K16K-90K4K16K16K0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeStart("4K16K-90K4K16K16K0", ".[S");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("Display name '%s' %s");
      assertEquals("Display name '%s' %s", string1);
      
      String string2 = StringUtils.replaceChars("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", '{', 'o');
      assertEquals("o-g.junitpioneer.jupiter.AbstractEntryBasedExtension", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Display name '%s' %s", "Display name '%s' %s");
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty(" vs ", "S^Q,?v(zynvA");
      assertEquals(" vs ", string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Display name '%s' %s", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Cannot clear7an set the f;llowing ntriYs at the same time: ", 'j');
      assertEquals("Cannot clear7an set the f;llowing ntriYs at the same time: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("?pId@ J3l;iQMQ[/AV");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("fDhk", 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      String string0 = StringUtils.rotate("p$i,*.X,8^?w<J$NV", (-4220));
      assertEquals("8^?w<J$NVp$i,*.X,", string0);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      String string0 = StringUtils.reverse("QSCY6Sk");
      assertNotNull(string0);
      assertEquals("kS6YCSQ", string0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\"mGjuc~Y6 Dg2GD");
      assertEquals("\"mGjuc~Y6 Dg2GD", string0);
      
      boolean boolean0 = StringUtils.isBlank("\"mGjuc~Y6 Dg2GD");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("dh&/v+Hg~h.T1+S", 'Z');
      assertEquals("Zdh&/v+Hg~h.T1+SZ", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("doesn't contain any substring.", '&');
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.trimToEmpty("doesn't contain any substring.");
      assertEquals("doesn't contain any substring.", string2);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{[0-9]+}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("uJk_U=mi:KJbc", "uJk_U=mi:KJbc", "uJk_U=mi:KJbc");
      assertEquals("uJk_U=mi:KJbc", string0);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)6;
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("");
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.substring(">n-}7?O5j=<", (-1520), (int) (byte)47);
      assertEquals(">n-}7?O5j=<", string1);
      
      String string2 = StringUtils.replaceFirst("Threshold must not be negative", "", ">n-}7?O5j=<");
      assertEquals(">n-}7?O5j=<Threshold must not be negative", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", 'o');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertNotNull(string0);
      assertEquals("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", string0);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '\u0018');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      int int0 = StringUtils.countMatches((CharSequence) "", '\u001B');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "jJWQp1d_9D5I#-");
      boolean boolean0 = StringUtils.isAllUpperCase("");
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "jJWQp1d_9D5I#-");
      assertEquals((-1), int0);
      
      StringUtils.join((double[]) null, '7', 321, 321);
      String string1 = StringUtils.substring("", 8192, 321);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      
      StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.truncate("", 8192);
      assertTrue(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "jJWQp1d_9D5I#-";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-515.43029);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1942.551882;
      doubleArray0[4] = (-1790.0);
      doubleArray0[5] = (-719.75);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '6', (-1197), (-1197));
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '-');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.equalsAny("QKV", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      StringUtils.substringBetween("No instructions to disable", "5!i4LJ", "No instructions to disable");
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "No instructions to disable", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "8_A|sWn0yb/:xQ-N", (CharSequence) "8_A|sWn0yb/:xQ-N");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      String string0 = StringUtils.join(doubleArray0, ',');
      assertNotNull(string0);
      assertEquals("0.0,0.0,0.0,0.0", string0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.28637282);
      doubleArray0[1] = 833.5;
      char char0 = ',';
      StringUtils.join(doubleArray0, ',');
      try { 
        StringUtils.getBytes("Object varargs must not be null", "-693.28637282,833.5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      try { 
        StringUtils.getBytes("ld", "org.junitpioneer.jupiter.RetryingTestExtension");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }
}
