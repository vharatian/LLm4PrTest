/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:50:51 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.TimedSemaphore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TimedSemaphore_ESTest extends TimedSemaphore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1, timeUnit0, 1);
      timedSemaphore0.tryAcquire();
      timedSemaphore0.acquire();
      timedSemaphore0.tryAcquire();
      MockThread mockThread0 = new MockThread("AQsnzpSu;(YUO7M>A");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(mockThread0).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      TimedSemaphore timedSemaphore1 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1, timeUnit0, 1);
      timedSemaphore0.endOfPeriod();
      timedSemaphore1.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      scheduledThreadPoolExecutor0.setCorePoolSize(0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(0);
      timedSemaphore1.startTimer();
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor2 = null;
      try {
        scheduledThreadPoolExecutor2 = new ScheduledThreadPoolExecutor((-1783), threadFactory1, threadPoolExecutor_AbortPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1, timeUnit0, 1);
      timedSemaphore0.tryAcquire();
      timedSemaphore0.acquire();
      timedSemaphore0.tryAcquire();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      MockThread mockThread1 = new MockThread(mockThread0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(mockThread1).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      TimedSemaphore timedSemaphore1 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1, timeUnit0, 1);
      timedSemaphore0.endOfPeriod();
      timedSemaphore1.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      timedSemaphore0.getExecutorService();
      timedSemaphore1.startTimer();
      timedSemaphore0.isShutdown();
      timedSemaphore1.getAverageCallsPerPeriod();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      MockThread mockThread1 = new MockThread(mockThread0, "R");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(mockThread1, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3507, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 3507, timeUnit0, 3507);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit(1532);
      timedSemaphore0.getPeriod();
      timedSemaphore0.shutdown();
      timedSemaphore0.isShutdown();
      TimedSemaphore timedSemaphore1 = new TimedSemaphore(scheduledThreadPoolExecutor0, 3507L, timeUnit0, 2);
      timedSemaphore1.tryAcquire();
      timedSemaphore1.getAvailablePermits();
      timedSemaphore1.shutdown();
      timedSemaphore0.getPeriod();
      timedSemaphore1.startTimer();
      timedSemaphore0.setLimit(2);
      timedSemaphore1.getAcquireCount();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(2238L, timeUnit0, (-274));
      timedSemaphore0.shutdown();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit((-274));
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore1 = new TimedSemaphore(1L, timeUnit1, 0);
      timedSemaphore1.getPeriod();
      timedSemaphore0.shutdown();
      timedSemaphore0.isShutdown();
      timedSemaphore1.tryAcquire();
      timedSemaphore1.getAvailablePermits();
      timedSemaphore1.shutdown();
      timedSemaphore0.getPeriod();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@39a9bd73 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@26bdbc0b[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1, timeUnit1, 1746);
      timedSemaphore0.endOfPeriod();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      MockThread mockThread1 = new MockThread(mockThread0, "");
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 1746, 1, timeUnit0, linkedTransferQueue0, threadPoolExecutor_DiscardPolicy0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, threadPoolExecutor0);
      timedSemaphore0.getLimit();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(7, (ThreadFactory) null, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 1);
      timedSemaphore0.getPeriod();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(437);
      timedSemaphore0.setLimit(1881);
      timedSemaphore0.shutdown();
      TimedSemaphore timedSemaphore1 = new TimedSemaphore(437, timeUnit0, (-274));
      timedSemaphore1.tryAcquire();
      timedSemaphore1.getLimit();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@3c62835 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@35a90e36[Shutting down, pool size = 1, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1, timeUnit0, 1);
      timedSemaphore0.tryAcquire();
      timedSemaphore0.acquire();
      timedSemaphore0.tryAcquire();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      TimedSemaphore timedSemaphore1 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1, timeUnit0, 1);
      timedSemaphore0.endOfPeriod();
      timedSemaphore1.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      timedSemaphore0.getExecutorService();
      timedSemaphore1.startTimer();
      timedSemaphore0.isShutdown();
      timedSemaphore1.getAverageCallsPerPeriod();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 526;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(526, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      scheduledThreadPoolExecutor0.purge();
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.awaitTermination((-2069L), timeUnit1);
      scheduledThreadPoolExecutor0.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 526, timeUnit0, 0);
      timedSemaphore0.acquire();
      timedSemaphore0.shutdown();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getPeriod();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getAvailablePermits();
      MockThread mockThread0 = new MockThread((Runnable) null);
      Thread[] threadArray0 = new Thread[2];
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      timedSemaphore0.shutdown();
      MockThread.enumerate(threadArray0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      timedSemaphore0.endOfPeriod();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(threadArray0[0], scheduledThreadPoolExecutor0);
      timedSemaphore0.getLimit();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      scheduledThreadPoolExecutor0.getTaskCount();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      scheduledThreadPoolExecutor0.getCompletedTaskCount();
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1L, timeUnit0, (-1682));
      timedSemaphore0.shutdown();
      timedSemaphore0.getAverageCallsPerPeriod();
      timedSemaphore0.isShutdown();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.getPeriod();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1270L, timeUnit0, 25);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(64);
      timedSemaphore0.setLimit(24);
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(849, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      scheduledThreadPoolExecutor0.getThreadFactory();
      MockThread mockThread0 = new MockThread();
      scheduledThreadPoolExecutor0.submit((Runnable) mockThread0, (Object) threadPoolExecutor_CallerRunsPolicy0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 849, timeUnit0, 849);
      timedSemaphore0.shutdown();
      timedSemaphore0.getAcquireCount();
      mockThread0.getUncaughtExceptionHandler();
      // Undeclared exception!
      try { 
        timedSemaphore0.acquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(2474L, timeUnit0, 7);
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.setLimit(1479);
      timedSemaphore0.getPeriod();
      timedSemaphore0.shutdown();
      timedSemaphore0.isShutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.tryAcquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      scheduledThreadPoolExecutor0.getTaskCount();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      scheduledThreadPoolExecutor0.prestartCoreThread();
      scheduledThreadPoolExecutor0.getCompletedTaskCount();
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1L, timeUnit0, (-1682));
      timedSemaphore0.shutdown();
      timedSemaphore0.getAverageCallsPerPeriod();
      timedSemaphore0.isShutdown();
      timedSemaphore0.shutdown();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.getPeriod();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(703, threadFactory0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 703, timeUnit0, 703);
      timedSemaphore0.setLimit(703);
      timedSemaphore0.getUnit();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore((ScheduledExecutorService) null, 2610L, timeUnit0, 9);
      timedSemaphore0.endOfPeriod();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, (-47));
      timedSemaphore0.getPeriod();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.setLimit(0);
      timedSemaphore0.shutdown();
      timedSemaphore0.setLimit((-47));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1270L, timeUnit0, 25);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(1182);
      timedSemaphore0.setLimit(25);
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.tryAcquire();
      TimedSemaphore timedSemaphore1 = new TimedSemaphore(25, timeUnit0, 0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3507, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 3507, timeUnit0, 3507);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      long long0 = (-2332L);
      timedSemaphore0.tryAcquire();
      // Undeclared exception!
      try { 
        threadPoolExecutor_DiscardOldestPolicy0.rejectedExecution((Runnable) null, scheduledThreadPoolExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 5);
      timedSemaphore0.getPeriod();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.isShutdown();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.getPeriod();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(100L, timeUnit0, 1063);
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@696f8d0a rejected from java.util.concurrent.ScheduledThreadPoolExecutor@7a590545[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, 1);
      timedSemaphore0.getPeriod();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.setLimit(0);
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.tryAcquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1270L, timeUnit0, 25);
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.setLimit(1182);
      timedSemaphore0.setLimit(25);
      timedSemaphore0.getLastAcquiresPerPeriod();
      timedSemaphore0.startTimer();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.getExecutorService();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.acquire();
      timedSemaphore0.isShutdown();
      timedSemaphore0.setLimit(0);
      timedSemaphore0.tryAcquire();
      timedSemaphore0.getLimit();
      timedSemaphore0.acquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.getLimit();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1, timeUnit0, 1);
      timedSemaphore0.tryAcquire();
      timedSemaphore0.endOfPeriod();
      timedSemaphore0.acquire();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.tryAcquire();
      timedSemaphore0.startTimer();
      timedSemaphore0.shutdown();
      timedSemaphore0.setLimit((-2762));
      timedSemaphore0.setLimit(3507);
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.tryAcquire();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimedSemaphore is shut down!
         //
         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore((ScheduledExecutorService) null, 1L, timeUnit0, 10);
      timedSemaphore0.getAcquireCount();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(2474L, timeUnit0, 7);
      timedSemaphore0.startTimer();
      timedSemaphore0.acquire();
      timedSemaphore0.shutdown();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      TimedSemaphore timedSemaphore1 = new TimedSemaphore(7, timeUnit1, (-622));
      timedSemaphore1.getAcquireCount();
      timedSemaphore0.getUnit();
      assertTrue(timedSemaphore0.isShutdown());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      scheduledThreadPoolExecutor0.getTaskCount();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      scheduledThreadPoolExecutor0.getCompletedTaskCount();
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 1L, timeUnit0, (-1682));
      timedSemaphore0.shutdown();
      timedSemaphore0.getAverageCallsPerPeriod();
      timedSemaphore0.getAvailablePermits();
      timedSemaphore0.getPeriod();
      assertTrue(timedSemaphore0.isShutdown());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3601, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      scheduledThreadPoolExecutor0.isTerminated();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 3601, timeUnit0, 1490);
      timedSemaphore0.getAcquireCount();
      timedSemaphore0.acquire();
      timedSemaphore0.acquire();
      assertEquals(2, timedSemaphore0.getAcquireCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(4282L, timeUnit0, 0);
      timedSemaphore0.shutdown();
      // Undeclared exception!
      try { 
        timedSemaphore0.startTimer();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@9801e21 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@a8a9fbc[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore((ScheduledExecutorService) null, 0L, timeUnit0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater than 0!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore((-2498L), timeUnit0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater than 0!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimedSemaphore timedSemaphore0 = new TimedSemaphore(4209L, timeUnit0, 3);
      timedSemaphore0.getUnit();
      assertEquals(3, timedSemaphore0.getAvailablePermits());
      assertEquals(4209L, timedSemaphore0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimedSemaphore timedSemaphore0 = null;
      try {
        timedSemaphore0 = new TimedSemaphore(0L, timeUnit0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time period must be greater than 0!
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
