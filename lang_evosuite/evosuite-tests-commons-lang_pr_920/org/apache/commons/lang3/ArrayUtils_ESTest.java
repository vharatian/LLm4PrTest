/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:06:54 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = 2145705004;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 50;
      intArray0[1] = 128;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 50, 50);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {50, 128}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap(doubleArray0, (int) (short)2, 2108534094, 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '6';
      charArray0[0] = '6';
      int int0 = 0;
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '6';
      objectArray0[1] = (Object) '6';
      objectArray0[2] = (Object) '6';
      objectArray0[3] = (Object) '6';
      objectArray0[4] = (Object) '6';
      objectArray0[5] = (Object) '6';
      objectArray0[6] = (Object) '6';
      objectArray0[7] = (Object) '6';
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '6', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 7;
      double[] doubleArray1 = ArrayUtils.insert(7, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {7.0, 0.0, 7.0, 0.0, 0.0, 1.0, 7.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-3538), 232, 232);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3538);
      doubleArray0[1] = (double) 232;
      doubleArray0[2] = 0.1;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3538.0), 232.0, 0.1}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'o');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) 'o';
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(intArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("D");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2089;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2089}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean5 = ArrayUtils.contains(intArray1, 2089);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean5);
      assertArrayEquals(new int[] {2089}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      ArrayUtils.shift((Object[]) doubleArray0, 10);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 516.4825F;
      floatArray0[1] = (float) 10;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 10;
      floatArray0[5] = (float) 10;
      floatArray0[6] = (float) 10;
      floatArray0[7] = (float) 10;
      floatArray0[8] = (float) 10;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 516.4825F);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {516.4825F, 10.0F, 1.0F, 10.0F, 10.0F, 10.0F, 10.0F, 10.0F, 10.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(2, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-5221.6208024507), (-5221.6208024507));
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[9];
      char char0 = 'a';
      Character character0 = Character.valueOf('a');
      assertNotNull(character0);
      assertEquals('a', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('a');
      assertNotNull(character1);
      assertEquals('a', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      char char1 = 't';
      Character character2 = Character.valueOf('t');
      assertNotNull(character2);
      assertEquals('t', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character(char1);
      assertNotNull(character3);
      assertEquals('t', (char)character3);
      assertFalse(char1 == char0);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character character4 = new Character('N');
      assertNotNull(character4);
      assertEquals('N', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertNotNull(character5);
      assertEquals('a', (char)character5);
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(char0 == char1);
      
      characterArray0[5] = character5;
      Character character6 = new Character('\'');
      assertNotNull(character6);
      assertEquals('\'', (char)character6);
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('*');
      assertNotNull(character7);
      assertEquals('*', (char)character7);
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)char1));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character5));
      
      characterArray0[7] = character7;
      Character character8 = new Character('-');
      assertNotNull(character8);
      assertEquals('-', (char)character8);
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)char1));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character4));
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'a', 'a', 't', 't', 'N', 'a', '\'', '*', '-'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.getInteger("`");
      assertNull(integer0);
      
      integerArray0[0] = null;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(2, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) (byte)0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-97));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -97, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'V';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 86.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {86.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {86.0, 86.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), (int) (byte)2);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)2}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[4];
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      floatArray0[1] = 1324.0F;
      floatArray0[3] = (-4332.502F);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {1324.0F, 0.0F, (-4332.502F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockRandom0;
      Object object0 = ArrayUtils.get(objectArray0, 822);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 0.0F;
      objectArray0[5] = (Object) mockRandom0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ">'1");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      ArrayUtils.swap(floatArray0, 4, 61, 822);
      assertArrayEquals(new float[] {1324.0F, 0.0F, (-4332.502F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)116, 1);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)116}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = ArrayUtils.insert(0, booleanArray0, booleanArray2);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)116;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
      assertEquals(0, int1);
      assertArrayEquals(new float[] {0.0F, 116.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(int1 == int0);
      
      ArrayUtils.shift((byte[]) null, (-276), (int) (byte)116, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)116;
      doubleArray0[1] = (double) (byte)116;
      doubleArray0[2] = (double) (byte)116;
      doubleArray0[3] = (double) (byte)116;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 116.0F;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {116.0, 116.0, 116.0, 0.0, 1.0, 116.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {116.0, 116.0, 116.0, 116.0, 0.0, 1.0, 116.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-276);
      longArray0[2] = 1L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, (-276L), 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 116.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.swap(booleanArray2, 0, (-276), (-2720));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      short[] shortArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)4617);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 69.9;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 202.4467596169;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), 69.9, (-1.0), 202.4467596169}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 69.9, (-1.0), 202.4467596169}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 4274L;
      longArray0[1] = 2128L;
      longArray0[2] = 4L;
      longArray0[2] = 2128L;
      longArray0[4] = 2128L;
      longArray0[5] = 2128L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 2128L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {4274L, 2128L, 2128L, 0L, 2128L, 2128L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2128L;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 43);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1797L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {4274L, 2128L, 2128L, 0L, 2128L, 2128L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1797L), 4274L, 2128L, 2128L, 0L, 2128L, 2128L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 43;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1797L);
      floatArray0[3] = (float) 2128L;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 2128L;
      floatArray0[8] = (float) 2128L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)117;
      shortArray0[3] = (short) (-3709);
      shortArray0[4] = (short)26526;
      shortArray0[5] = (short)868;
      shortArray0[6] = (short) (-2983);
      shortArray0[7] = (short)2508;
      shortArray0[8] = (short)887;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)59, (short) (-1), (short)117, (short) (-3709), (short)26526, (short)868, (short) (-2983), (short)2508, (short)887}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)117, (short) (-3709), (short)26526, (short)868, (short) (-2983), (short)2508, (short)887}, shortArray1);
      assertEquals(2, intArray0.length);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 3925, (int) 0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), 0);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray1 = ArrayUtils.removeElements(arrayUtils0.EMPTY_DOUBLE_ARRAY, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-111);
      shortArray0[1] = (short) (-124);
      shortArray0[2] = (short)2;
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)89;
      shortArray1[1] = (short) (-111);
      shortArray1[2] = (short) (-124);
      shortArray1[3] = (short) (-111);
      shortArray1[4] = (short) (-111);
      shortArray1[5] = (short)909;
      shortArray1[6] = (short) (-124);
      shortArray1[7] = (short) (-103);
      shortArray1[8] = (short) (-124);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-111), (short) (-124), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)89, (short) (-111), (short) (-124), (short) (-111), (short) (-111), (short)909, (short) (-124), (short) (-103), (short) (-124)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F, 1525);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1525;
      doubleArray0[1] = 1525.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 2);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1525.0, 1525.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 5, (-424));
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = Integer.valueOf(3105);
      assertNotNull(integer0);
      assertEquals(3105, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 3105;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) 5;
      floatArray0[4] = (float) 3105;
      float[] floatArray1 = ArrayUtils.insert(5, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {3105.0F, 5.0F, 5.0F, 5.0F, 3105.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3105.0F, 5.0F, 5.0F, 5.0F, 3105.0F, 3105.0F, 5.0F, 5.0F, 5.0F, 3105.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      short[] shortArray0 = new short[10];
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(15);
      assertNotNull(integer2);
      assertEquals(15, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.insert(2, integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2861);
      intArray1[1] = (-1);
      intArray1[1] = (-485);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2861), (-485), 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2689);
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = 'A';
      charArray0[2] = 'a';
      charArray0[3] = '4';
      ArrayUtils.shift(charArray0, (-2689), 9, (-218));
      assertArrayEquals(new char[] {'a', '4', 't', 'A'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long(4891L);
      assertNotNull(long0);
      assertEquals(4891L, (long)long0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-95);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)45, (byte) (-95)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((byte) (-95));
      assertNotNull(short0);
      assertEquals((short) (-95), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1331));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-95), (short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'w';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'M';
      charArray0[5] = 'w';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'W', 6);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'e', 'w', 'm', 'm', 'M', 'w'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-1610), 684, (-653));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Integer integer0 = new Integer((-2887));
      assertNotNull(integer0);
      assertEquals((-2887), (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer1 = new Integer(7);
      assertNotNull(integer1);
      assertEquals(7, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[1]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) (int)integerArray0[3];
      floatArray0[2] = (float) (-653);
      floatArray0[3] = (float) (-2887);
      floatArray0[4] = (float) (int)integerArray0[3];
      floatArray0[5] = (float) (-653);
      floatArray0[6] = (float) (int)integerArray0[3];
      ArrayUtils.swap(floatArray0, (int) integerArray0[1], 7, 512);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new float[] {7.0F, (-2887.0F), (-653.0F), (-2887.0F), (-2887.0F), (-653.0F), (-2887.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'w';
      charArray0[2] = 'S';
      ArrayUtils.shift(charArray0, 11, (-653), 3311);
      assertArrayEquals(new char[] {'\'', 'w', 'S'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 3136.6614F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-68);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-113));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)10, (byte)95, (byte) (-22), (byte) (-113), (byte) (-73), (byte)0, (byte) (-67), (byte) (-68)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray1);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3064);
      longArray0[1] = (long) (-3064);
      ArrayUtils.shift(longArray0, (-3064), 83, 83);
      assertArrayEquals(new long[] {(-3064L), (-3064L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-3064);
      longArray1[1] = (long) 83;
      longArray1[2] = (long) 83;
      longArray1[3] = (long) (-3064);
      longArray1[4] = (long) 83;
      longArray1[5] = (long) (-3064);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-3064L), (-3064L)}, longArray0);
      assertArrayEquals(new long[] {(-3064L), 83L, 83L, (-3064L), 83L, (-3064L)}, longArray1);
      assertArrayEquals(new long[] {83L, 83L, 83L, (-3064L)}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-1420.17388045));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-3064L);
      doubleArray1[1] = (double) 83L;
      doubleArray1[2] = (double) 83;
      doubleArray1[3] = (double) 83L;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-3064.0), 83.0, 83.0, 83.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)76;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)20;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (int) (byte)20;
      intArray0[3] = (int) (byte)20;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 3354L;
      longArray0[1] = 3354L;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 30L;
      longArray1[1] = 0L;
      longArray1[2] = 3354L;
      longArray1[3] = (-3400L);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {3354L, 3354L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {30L, 0L, 3354L, (-3400L)}, longArray1);
      assertArrayEquals(new long[] {3354L, 0L}, longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[3];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(787);
      assertNotNull(integer0);
      assertEquals(787, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(442);
      assertNotNull(integer1);
      assertEquals(442, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      assertNotNull(byte0);
      assertEquals((byte)13, (byte)byte0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)13;
      doubleArray0[1] = (double) (byte)13;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {13.0, 13.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1281.0;
      doubleArray0[2] = (-1126.116401);
      doubleArray0[3] = (-296.4);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-296.4), (-3994));
      assertEquals(3, int0);
      assertArrayEquals(new double[] {1.0, 1281.0, (-1126.116401), (-296.4)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[4] = 0L;
      longArray0[3] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 4;
      Integer integer0 = Integer.valueOf(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.indexOf(booleanArray0, false, int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)57, 0);
      assertEquals(0, int2);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) int0);
      assertNotNull(mutableInt0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((short)4, mutableInt0.shortValue());
      assertEquals(4.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(4, (int)mutableInt0.getValue());
      assertEquals((byte)4, mutableInt0.byteValue());
      assertEquals("4", mutableInt0.toString());
      assertEquals(4, (int)mutableInt0.toInteger());
      assertEquals(4.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(4L, mutableInt0.longValue());
      assertEquals(4, mutableInt0.intValue());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals(4, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((short)4, mutableInt0.shortValue());
      assertEquals(4.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(4, (int)mutableInt0.getValue());
      assertEquals((byte)4, mutableInt0.byteValue());
      assertEquals("4", mutableInt0.toString());
      assertEquals(4, (int)mutableInt0.toInteger());
      assertEquals(4.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(4L, mutableInt0.longValue());
      assertEquals(4, mutableInt0.intValue());
      
      int int3 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer2);
      assertEquals(0, int3);
      assertEquals(6, integerArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((short)4, mutableInt0.shortValue());
      assertEquals(4.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(4, (int)mutableInt0.getValue());
      assertEquals((byte)4, mutableInt0.byteValue());
      assertEquals("4", mutableInt0.toString());
      assertEquals(4, (int)mutableInt0.toInteger());
      assertEquals(4.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(4L, mutableInt0.longValue());
      assertEquals(4, mutableInt0.intValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-345));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -345, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Short[] shortArray0 = new Short[6];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 6;
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 6}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 6}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = ArrayUtils.get(integerArray0, 6);
      assertNull(integer0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null, Integer.MAX_VALUE);
      assertEquals(5, int0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer((-1309));
      assertNotNull(integer0);
      assertEquals((-1309), (int)integer0);
      
      Object object0 = ArrayUtils.get((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 10, (Object) integer0);
      assertNotNull(object0);
      assertEquals((-1309), object0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray1 = ArrayUtils.removeAll(charArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 20, 225);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) null);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.contains(booleanArray1, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '1';
      charArray0[2] = '5';
      charArray0[3] = 'w';
      charArray0[4] = 'f';
      ArrayUtils.shift(charArray0, 2, 260, 2);
      assertArrayEquals(new char[] {'|', '1', 'w', 'f', '5'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      Double double0 = new Double((byte)4);
      assertNotNull(double0);
      assertEquals(4.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 4.0, 4.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)4;
      shortArray0[1] = (short) (byte)4;
      shortArray0[2] = (short) (byte)4;
      shortArray0[3] = (short) (byte)4;
      shortArray0[4] = (short) (byte)4;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2112), 0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)4, (short)4, (short)4, (short)4, (short)4}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\\', 3240);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '\\';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '\\';
      doubleArray0[3] = (double) 3240;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 3240;
      doubleArray0[6] = (double) 3240;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {92.0, (-1.0), 92.0, 3240.0, (-1.0), 3240.0, 3240.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {92.0, (-1.0), 92.0, 3240.0, (-1.0), 3240.0, 3240.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[2];
      longArray0[1] = 3625L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-925L), 2);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 3625L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'p';
      charArray0[3] = '^';
      charArray0[4] = 'e';
      charArray0[5] = 'A';
      charArray0[6] = ',';
      charArray0[7] = 'q';
      charArray0[8] = '|';
      int int0 = ArrayUtils.indexOf(charArray0, 'e');
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'>', '>', 'p', '^', 'e', 'A', ',', 'q', '|'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (byte) (-81), 0, 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.insert(202, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      ArrayUtils.subarray(integerArray0, Integer.MAX_VALUE, (-1803));
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      int int0 = (-2355);
      ArrayUtils.swap((short[]) null, (-2355), 38);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 38;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {38.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      int int1 = ArrayUtils.indexOf(charArray0, 'u', (-2355));
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.insert(2833, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      double double0 = 1977.9473;
      doubleArray0[0] = 1977.9473;
      doubleArray0[1] = (double) (-2355);
      doubleArray0[2] = (double) 'u';
      doubleArray0[3] = (-5.1388);
      doubleArray0[4] = (double) 'u';
      doubleArray0[5] = (double) 0;
      double double1 = 2618.1;
      doubleArray0[6] = 2618.1;
      doubleArray0[7] = (double) 'u';
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-854), (-1042.7568265957));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -854, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)63);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-67));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-67);
      doubleArray0[1] = (double) (-67);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte)63;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 1552.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-67.0), (-67.0), (-1.0), 63.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (byte)63);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {63.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      Integer integer0 = new Integer((-1674));
      assertNotNull(integer0);
      assertEquals((-1674), (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(5);
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer integer2 = new Integer(10);
      assertNotNull(integer2);
      assertEquals(10, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[4] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.subarray(integerArray0, 2146442923, (-2144711090));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, 1.3127881653408577);
      assertNull(doubleArray0);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short) (-1822));
      assertNotNull(short0);
      assertEquals((short) (-1822), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-95));
      assertNotNull(short1);
      assertEquals((short) (-95), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)1);
      assertNotNull(short2);
      assertEquals((short)1, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)160);
      assertNotNull(short3);
      assertEquals((short)160, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-507));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1822), (short) (-95), (short)1, (short)160}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.swap((double[]) null, (int) (short) (-507), (int) (short) (-1822), (int) shortArray0[3]);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-714);
      intArray0[1] = 2172;
      intArray0[2] = (-714);
      intArray0[3] = (-309);
      intArray0[4] = (-729);
      intArray0[5] = Integer.MIN_VALUE;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-714), 1038);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {(-714), 2172, (-714), (-309), (-729), Integer.MIN_VALUE}, intArray0);
      assertEquals(6, intArray0.length);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-309));
      assertNotNull(long0);
      assertEquals((-309L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2386L));
      assertNotNull(long1);
      assertEquals((-2386L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-729));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-309L), (-2386L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, (long) (-714));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {(-309L), (-2386L)}, longArray1);
      assertArrayEquals(new long[] {(-714L), (-309L), (-2386L)}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(3, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      
      int[] intArray1 = ArrayUtils.remove(intArray0, 2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-714), 2172, (-714), (-309), (-729), Integer.MIN_VALUE}, intArray0);
      assertArrayEquals(new int[] {(-714), 2172, (-309), (-729), Integer.MIN_VALUE}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(2172);
      assertNotNull(integer0);
      assertEquals(2172, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(2172, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-714));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-714.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-2001));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2001, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray2, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1752);
      intArray0[1] = 213;
      intArray0[2] = 6;
      ArrayUtils.shift(intArray0, (-2358), 6, (-2248));
      assertArrayEquals(new int[] {213, 6, (-1752)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 6;
      intArray1[1] = (-2248);
      intArray1[2] = 6;
      intArray1[3] = 5;
      intArray1[4] = 213;
      boolean boolean1 = ArrayUtils.contains(intArray1, (-1));
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {6, (-2248), 6, 5, 213}, intArray1);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'r';
      charArray0[2] = 'B';
      charArray0[3] = '^';
      charArray0[4] = 'W';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I', 'r', 'B', '^', 'W'}, charArray0);
      assertArrayEquals(new char[] {'r', 'B', '^', 'W'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)11;
      shortArray0[1] = (short)11;
      shortArray0[2] = (short)11;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)11, (short)11, (short)11}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 54L;
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {54L}, longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[5];
      try { 
        Integer.decode("6ynIJU>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6ynIJU>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 227.19F);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 1;
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 7;
      longArray0[8] = 3625L;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (-1), (-776));
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {1L, 1L, (-1L), 1L, 1L, 1L, 1L, 7L, 3625L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, (-74.0F));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '4';
      ArrayUtils.swap(charArray0, 2, (-3498), 2);
      assertArrayEquals(new char[] {'R', '4'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'R';
      intArray0[1] = 0;
      intArray0[2] = (-3498);
      intArray0[3] = (-3498);
      intArray0[4] = 0;
      intArray0[5] = (int) '4';
      intArray0[6] = (int) 'R';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {82, 0, (-3498), (-3498), 0, 52, 82}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '7');
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'R', '4'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-2060L));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Long long0 = new Long((-2060L));
      assertNotNull(long0);
      assertEquals((-2060L), (long)long0);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = long0;
      longArray1[1] = long0;
      Long long1 = new Long((-2060L));
      assertNotNull(long1);
      assertEquals((-2060L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray1[2] = long1;
      longArray1[3] = long0;
      Long long2 = new Long((long) longArray1[1]);
      assertNotNull(long2);
      assertEquals((-2060L), (long)long2);
      assertEquals(6, longArray1.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      Long long3 = Long.getLong("", long2);
      assertNotNull(long3);
      assertEquals((-2060L), (long)long3);
      assertEquals(6, longArray1.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      
      longArray1[4] = long3;
      longArray1[5] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-2060L), (-2060L), (-2060L), (-2060L), (-2060L), (-2060L)}, longArray2);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray1.length);
      
      long[] longArray3 = ArrayUtils.removeAllOccurrences((long[]) null, (long) longArray1[1]);
      assertNull(longArray3);
      assertEquals(6, longArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2060L);
      doubleArray0[1] = (double) (long)longArray1[0];
      doubleArray0[2] = 2231.4582484418224;
      doubleArray0[3] = (double) (long)longArray1[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-113);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)5, (int) (byte) (-113));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-113)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)7;
      ArrayUtils.shift(byteArray0, 4184);
      assertArrayEquals(new byte[] {(byte)3, (byte)7, (byte) (-84), (byte)0, (byte)59, (byte)59}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Integer integer0 = new Integer((byte) (-84));
      assertNotNull(integer0);
      assertEquals((-84), (int)integer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'o';
      charArray0[5] = 'm';
      charArray0[6] = 'g';
      charArray0[7] = 'g';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'o', 'm', 'g', 'g'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.reverse((long[]) null, 458, 3419);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 79);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, 1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Float[] floatArray1 = new Float[4];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 0.0F;
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = ')';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', ')'}, charArray0);
      assertArrayEquals(new char[] {'8', ')'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      ArrayUtils.reverse((long[]) null, 252, (-1489));
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray1 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, 2146469727, (-1));
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)83;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-8), (byte)50, (byte)83}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-8), (byte)50, (byte)83}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      int int0 = 40;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer[] integerArray0 = new Integer[11];
      Integer integer0 = new Integer(40);
      assertNotNull(integer0);
      assertEquals(40, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, int0);
      assertNull(integer1);
      assertEquals(11, integerArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = (-1434);
      Integer integer1 = new Integer((-1434));
      assertNotNull(integer1);
      assertEquals((-1434), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger(";");
      assertNull(integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(4891L);
      assertNotNull(long0);
      assertEquals(4891L, (long)long0);
      
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)86;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.swap((Object[]) integerArray0, 18688, 18688);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = Integer.valueOf(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertNotNull(mutableInt0);
      assertEquals(7, (int)mutableInt0.getValue());
      assertEquals((byte)7, mutableInt0.byteValue());
      assertEquals(7.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("7", mutableInt0.toString());
      assertEquals(7, (int)mutableInt0.toInteger());
      assertEquals(7L, mutableInt0.longValue());
      assertEquals(7.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)7, mutableInt0.shortValue());
      assertEquals(7, mutableInt0.intValue());
      
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, 18688, 18688, (-584));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[20];
      intArray0[1] = (-584);
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((double) (-269));
      assertNotNull(float0);
      assertEquals((-269.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(2730.903628288);
      assertNotNull(float2);
      assertEquals(2730.9036F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[0]);
      assertNotNull(float3);
      assertEquals((-269.0F), (float)float3, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-1.0F));
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) (-584));
      assertNotNull(float5);
      assertEquals((-584.0F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) floatArray0[3]);
      assertNotNull(float6);
      assertEquals((-269.0F), (float)float6, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) 18688);
      assertNotNull(float7);
      assertEquals(18688.0F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-269.0F), (-1.0F), 2730.9036F, (-269.0F), (-1.0F), (-584.0F), (-269.0F), 18688.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      ArrayUtils.shift(floatArray1, 1, 1376, (-2029));
      assertArrayEquals(new float[] {(-269.0F), 18688.0F, (-1.0F), 2730.9036F, (-269.0F), (-1.0F), (-584.0F), (-269.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      Integer integer0 = new Integer((-429));
      assertNotNull(integer0);
      assertEquals((-429), (int)integer0);
      
      Integer integer1 = new Integer((-429));
      assertNotNull(integer1);
      assertEquals((-429), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(6);
      assertNotNull(integer2);
      assertEquals(6, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[2] = integerArray0[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 6, 5);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "java.lang.Integer";
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2509L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = 5;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) integerArray0[2]);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-429), 5}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray1 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)38);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)38;
      intArray0[1] = (int) (byte)38;
      intArray0[2] = 3999;
      intArray0[3] = (int) (byte)38;
      intArray0[4] = (int) (byte)38;
      intArray0[5] = (-910);
      intArray0[6] = (int) (byte)38;
      int int0 = ArrayUtils.indexOf(intArray0, 38);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {38, 38, 3999, 38, 38, (-910), 38}, intArray0);
      assertEquals(7, intArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)38);
      assertNotNull(double1);
      assertEquals(38.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1049.20473719);
      assertNotNull(double2);
      assertEquals(1049.20473719, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (-827.6706), (-910));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 2);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3402.523F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 682L, (-3983));
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 2L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      booleanArray1[7] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, false, true}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray2, (boolean[]) null);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, false, true}, booleanArray3));
      assertEquals(1, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2301);
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)3;
      Byte byte1 = new Byte((byte)3);
      assertNotNull(byte1);
      assertEquals((byte)3, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)3);
      assertNotNull(byte2);
      assertEquals((byte)3, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)3);
      assertNotNull(byte3);
      assertEquals((byte)3, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      intArray0[0] = (int) (byte)byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[3] = (long) (byte)3;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3, (int) byte0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 3L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray2 = ArrayUtils.insert((int) byte0, byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray2);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3}, byteArray1);
      assertEquals(6, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)857;
      shortArray0[2] = (short) (-531);
      shortArray0[3] = (short)57;
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[1] = (short)57;
      shortArray1[2] = (short)57;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)857, (short) (-531), (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)57, (short)57}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)857, (short) (-531)}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)683;
      shortArray0[1] = (short) (-3704);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)683, (short) (-3704)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)683;
      objectArray0[1] = (Object) (short)683;
      objectArray0[2] = (Object) (short) (-3704);
      ArrayUtils.reverse(objectArray0, (-3299), 1671);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-3704);
      doubleArray0[1] = (double) (short)683;
      doubleArray0[2] = (double) (short)683;
      doubleArray0[3] = (double) 1671;
      doubleArray0[4] = (double) (-3299);
      doubleArray0[5] = (double) (short)683;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-3704), 1);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3704.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3704.0), 683.0, 683.0, 1671.0, (-3299.0), 683.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-6097);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 850;
      intArray0[8] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-97));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, (-6097), 0, 0, 850, 0}, intArray0);
      assertArrayEquals(new int[] {(-97), 1, 0, 0, 0, (-6097), 0, 0, 850, 0}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 1930);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {1, 0, 0, 0, (-6097), 0, 0, 850, 0}, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, (-6097), 0, 0, 850, 0}, intArray2);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 0, int0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(boolean0);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1049;
      doubleArray0[1] = (double) (-2905);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1049.0, (-2905.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '7');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'7'}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1978);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (short) (-1978);
      longArray0[2] = (long) (short) (-1);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1L), (int) (short) (-1));
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {2L, (-1978L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (long) 1;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2072;
      shortArray0[7] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (int) (short)1, 1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short)0, (short)0, (short)0, (short)2072, (short) (-1)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.reverse((Object[]) integerArray0, (int) (short) (-1), (int) (short) (-1));
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((short) (-367));
      assertNotNull(integer0);
      assertEquals((-367), (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer1 = new Integer((-1613));
      assertNotNull(integer1);
      assertEquals((-1613), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[0] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short) (-367));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1613)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1613)}, intArray0);
      assertArrayEquals(new int[] {(-1613)}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'O');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (byte) (-15));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap(longArray0, (-3922), (int) (byte) (-15));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertNotSame(longArray0, longArray1);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3922);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-3922);
      intArray1[4] = 0;
      intArray1[5] = (int) (byte) (-15);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-15), 114);
      assertNotNull(bitSet0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3922), 0, 0, (-3922), 0, (-15)}, intArray1);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-15);
      shortArray0[1] = (short) (byte) (-15);
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean2);
      assertArrayEquals(new short[] {(short) (-15), (short) (-15)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short) (-15));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-15), (short) (-15)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-15), (short) (-15), (short) (-15)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1125));
      Integer integer0 = new Integer((-1125));
      assertNotNull(integer0);
      assertEquals((-1125), (int)integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 108L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 108L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {108L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-1125), object0);
      
      objectArray0[1] = object0;
      ArrayUtils.shift(objectArray0, (-1125));
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)561;
      shortArray0[1] = (short)69;
      shortArray0[2] = (short) (-896);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)11050;
      shortArray0[5] = (short)2842;
      shortArray0[6] = (short)1084;
      shortArray0[7] = (short) (-2636);
      shortArray0[8] = (short)4;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1084, (int) (short)4);
      assertEquals(6, int0);
      assertArrayEquals(new short[] {(short)561, (short)69, (short) (-896), (short) (-1), (short)11050, (short)2842, (short)1084, (short) (-2636), (short)4}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 3332);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2461);
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '1');
      assertNull(charArray0);
      
      ArrayUtils.swap((int[]) null, (int) (short) (-2461), (-1128), 3332);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'z';
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {122.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3332, (int) (short) (-2461));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2461), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap((int[]) null, 49, 9, (int) (short) (-2461));
      int int0 = ArrayUtils.indexOf(shortArray1, (short)7, (-1128));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-2461), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 122.0, 49, (double) 3332);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {122.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-39);
      ArrayUtils.swap(byteArray0, (int) (byte)1, (int) (byte) (-40), 1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)1, (byte) (-39)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Integer integer0 = new Integer((byte)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-40);
      objectArray0[1] = (Object) (byte) (-40);
      Integer integer1 = new Integer((byte) (-39));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = ArrayUtils.get((Integer[]) null, (-1626), integer1);
      assertNotNull(integer2);
      assertEquals((-39), (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      
      Object object0 = ArrayUtils.get(objectArray0, 2146938580, (Object) integer2);
      assertNotNull(object0);
      assertEquals((-39), object0);
      assertEquals(8, objectArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      
      objectArray0[2] = object0;
      Integer integer3 = new Integer(4);
      assertNotNull(integer3);
      assertEquals(4, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer2));
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer3);
      assertNotNull(object1);
      assertEquals(4, object1);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer2));
      assertFalse(object1.equals((Object)integer1));
      assertFalse(object1.equals((Object)integer0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) (byte)1;
      Object object2 = new Object();
      assertNotNull(object2);
      
      objectArray0[5] = object2;
      objectArray0[6] = (Object) (byte) (-40);
      objectArray0[7] = (Object) (byte) (-39);
      ArrayUtils.shift(objectArray0, 84);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'c';
      charArray0[2] = 'V';
      charArray0[3] = 'D';
      charArray0[4] = 'O';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '=');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'=', 'c', 'V', 'D', 'O'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      short[] shortArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2147021326), 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2147021326));
      assertNotNull(integer0);
      assertEquals((-2147021326), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      Float[] floatArray2 = new Float[1];
      Float float0 = new Float((float) (-2147021326));
      assertNotNull(float0);
      assertEquals((-2.14702131E9F), (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {(-2.14702131E9F)}, floatArray3, 0.01F);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)777);
      assertNotNull(short1);
      assertEquals((short)777, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)3);
      assertNotNull(short2);
      assertEquals((short)3, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)13);
      assertNotNull(short3);
      assertEquals((short)13, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)3);
      assertNotNull(short4);
      assertEquals((short)3, (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      
      shortArray0[4] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)777, (short)3, (short)13, (short)3}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-157.1107288773));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-157.1107288773)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)5, (-4624));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = 'O';
      charArray0[2] = 'A';
      charArray0[3] = '/';
      charArray0[4] = 'b';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'2', 'O', 'A', '/', 'b'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils arrayUtils1 = new ArrayUtils();
      assertNotNull(arrayUtils1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(arrayUtils1.equals((Object)arrayUtils0));
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils1.EMPTY_FLOAT_OBJECT_ARRAY, (float) (byte)60);
      assertNotNull(floatArray0);
      assertNotSame(arrayUtils1, arrayUtils0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(arrayUtils1.equals((Object)arrayUtils0));
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1125));
      Integer integer0 = new Integer((-1125));
      assertNotNull(integer0);
      assertEquals((-1125), (int)integer0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 128);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 128;
      intArray0[2] = (-1125);
      intArray0[3] = 3924;
      intArray0[4] = 3924;
      intArray0[4] = 128;
      ArrayUtils.shift(intArray0, (-1125));
      assertArrayEquals(new int[] {3924, 128, 0, 128, 0, (-1125)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)67;
      ArrayUtils.shift(byteArray0, 1055);
      assertArrayEquals(new byte[] {(byte)67, (byte)66}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Integer integer0 = new Integer((byte)67);
      assertNotNull(integer0);
      assertEquals(67, (int)integer0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (byte)66;
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)66}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)66, (short)2, (short)66}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1349.54106896);
      assertNotNull(double0);
      assertEquals(1349.54106896, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2904.6794083));
      assertNotNull(double1);
      assertEquals((-2904.6794083), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 1055);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1349.54106896, (-2904.6794083), (-1.0), 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-3790.411092868);
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (-1941), (-1941));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = 0.0F;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray2));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'g';
      intArray0[1] = (int) 'g';
      intArray0[2] = (int) 'g';
      intArray0[3] = (int) 'g';
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 6;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.contains(intArray0, 3316);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {103, 103, 103, 103, Integer.MAX_VALUE, 6, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'g');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-1048), 0, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3386);
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)28937;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-3386), (short)76, (short)28937}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)28937;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28937, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 2);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-12));
      assertNotNull(integer2);
      assertEquals((-12), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3615);
      assertNotNull(integer3);
      assertEquals(3615, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      MutableInt mutableInt0 = new MutableInt((Number) (short)0);
      assertNotNull(mutableInt0);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      
      Integer integer4 = mutableInt0.toInteger();
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2);
      assertNotNull(integer6);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = Character.toChars(470);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u01D6'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 470;
      ArrayUtils.shift(intArray0, 0, 0, 1);
      assertArrayEquals(new int[] {0, 470}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) true;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1439));
      assertNotNull(integer0);
      assertEquals((-1439), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1569));
      assertNotNull(integer1);
      assertEquals((-1569), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int int0 = 1;
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertNotNull(integer3);
      assertEquals((-1439), (int)integer3);
      assertEquals(5, integerArray0.length);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", 1);
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      
      integerArray0[4] = integer4;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(5, integerArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5.0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1733.0), int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {5.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) integerArray0[0], int0, (-2012.0));
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {5.0}, doubleArray0, 0.01);
      assertEquals(5, integerArray0.length);
      assertEquals(1, doubleArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      Integer integer0 = new Integer(102);
      assertNotNull(integer0);
      assertEquals(102, (int)integer0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray1 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 12);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = ArrayUtils.insert((-3151), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'v';
      charArray0[2] = 'R';
      charArray0[3] = '$';
      charArray0[4] = 'i';
      charArray0[5] = 'e';
      ArrayUtils.shift(charArray0, (-23), 2, 6);
      assertArrayEquals(new char[] {'A', 'v', 'R', '$', 'i', 'e'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = 'F';
      charArray0[2] = 'X';
      charArray0[3] = '_';
      charArray0[4] = 'V';
      charArray0[5] = 'D';
      charArray0[6] = 't';
      charArray0[7] = 't';
      charArray0[8] = 'S';
      ArrayUtils.shift(charArray0, (-3802), 3, (-1806));
      assertArrayEquals(new char[] {'S', 'F', 'X', '_', 'V', 'D', 't', 't', 'S'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, 1, (-594));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1782.1426F);
      floatArray0[1] = 2104.837F;
      floatArray0[2] = (float) '_';
      floatArray0[3] = (float) (-1806);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1806.0F), 95.0F, 2104.837F, (-1782.1426F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[4] = 0L;
      longArray0[3] = (-5L);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-63);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1232;
      shortArray0[3] = (short) (-720);
      shortArray0[4] = (short) (-720);
      shortArray0[5] = (short) (-889);
      shortArray0[6] = (short)1232;
      ArrayUtils.shift(shortArray0, (int) (short) (-889), 43, (int) (short)1232);
      assertArrayEquals(new short[] {(short) (-63), (short)1, (short)1232, (short) (-720), (short) (-720), (short) (-889), (short)1232}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short) (-720);
      objectArray0[1] = (Object) (short) (-720);
      objectArray0[2] = (Object) (short) (-720);
      objectArray0[3] = (Object) 366L;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertFalse(boolean0);
      assertEquals(4, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2], (int) (short)1);
      assertEquals(1, int0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 78;
      intArray0[2] = 6;
      intArray0[3] = 56;
      intArray0[4] = (-1);
      intArray0[5] = (-3022);
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = 5;
      intArray0[8] = 3049;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, (-1060));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2, 78, 6, 56, (-1), (-3022), Integer.MAX_VALUE, 5, 3049}, intArray0);
      assertEquals(9, intArray0.length);
      
      Integer integer0 = new Integer(102);
      assertNotNull(integer0);
      assertEquals(102, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(102, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3049;
      floatArray0[1] = 33.57256F;
      floatArray0[2] = (float) 56;
      floatArray0[3] = (float) 102;
      floatArray0[4] = (float) 5;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-3022);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {3049.0F, 33.57256F, 56.0F, 102.0F, 5.0F, (-1.0F), (-3022.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4094);
      ArrayUtils.swap(intArray0, 5, (-4094));
      assertArrayEquals(new int[] {(-4094)}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1332.877));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)68;
      Byte byte1 = new Byte((byte)68);
      assertNotNull(byte1);
      assertEquals((byte)68, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-50));
      assertNotNull(byte2);
      assertEquals((byte) (-50), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)68);
      assertNotNull(byte5);
      assertEquals((byte)68, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)10);
      assertNotNull(byte6);
      assertEquals((byte)10, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)110);
      assertNotNull(byte7);
      assertEquals((byte)110, (byte)byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte3);
      assertNotNull(byte8);
      assertEquals((byte)0, (byte)byte8);
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte3 == byte0);
      
      byteArray0[6] = byte8;
      byte byte9 = (byte)103;
      Byte byte10 = new Byte((byte)103);
      assertNotNull(byte10);
      assertEquals((byte)103, (byte)byte10);
      assertFalse(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte0));
      assertTrue(byte10.equals((Object)byte9));
      
      byteArray0[7] = byte10;
      Byte byte11 = new Byte(byte9);
      assertNotNull(byte11);
      assertEquals((byte)103, (byte)byte11);
      assertFalse(byte9 == byte3);
      assertFalse(byte9 == byte0);
      assertFalse(byte11.equals((Object)byte2));
      assertTrue(byte11.equals((Object)byte9));
      assertFalse(byte11.equals((Object)byte5));
      assertFalse(byte11.equals((Object)byte8));
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte11.equals((Object)byte6));
      assertFalse(byte11.equals((Object)byte1));
      assertFalse(byte11.equals((Object)byte3));
      assertFalse(byte11.equals((Object)byte0));
      assertTrue(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte4));
      
      byteArray0[8] = byte11;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)10);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-50), (byte)0, (byte)68, (byte)10, (byte)110, (byte)0, (byte)103, (byte)103}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(640L);
      assertNotNull(long0);
      assertEquals(640L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(21L);
      assertNotNull(long1);
      assertEquals(21L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-20L));
      assertNotNull(long2);
      assertEquals((-20L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long(byte0);
      assertNotNull(long3);
      assertEquals(68L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(byte0 == byte9);
      assertFalse(byte0 == byte3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-2661L));
      assertNotNull(long4);
      assertEquals((-2661L), (long)long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      
      longArray0[4] = long4;
      Long long5 = Long.getLong("(", long2);
      assertNotNull(long5);
      assertEquals((-20L), (long)long5);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long4));
      assertFalse(long2.equals((Object)long3));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      
      longArray0[5] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-50));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {640L, 21L, (-20L), 68L, (-2661L), (-20L)}, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      Integer integer0 = new Integer(1887);
      assertNotNull(integer0);
      assertEquals(1887, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1518L;
      longArray0[1] = 1518L;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {1518L, 1518L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)1;
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (int) (short)1, (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-1), (short) (-1), (short)0, (short)1}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.reverse((Object[]) null, (-3193), (-152));
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean2);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-1), (short) (-1), (short)0, (short)1}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ArrayUtils.shift(longArray0, (int) (short) (-1), 0, 97);
      assertArrayEquals(new long[] {1518L, 1518L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (-152);
      boolean boolean3 = ArrayUtils.contains(intArray0, (int) (short)1);
      assertFalse(boolean3);
      assertArrayEquals(new int[] {(-1), (-152)}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      ArrayUtils.swap((boolean[]) null, (-2675), (-152), 128);
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '~';
      charArray0[2] = 'u';
      charArray0[3] = 'g';
      charArray0[4] = 'r';
      charArray0[5] = 'O';
      charArray0[6] = '';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'', 'O', 'r', 'g', 'u', '~', '8'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Float float0 = new Float((-45.0F));
      assertNotNull(float0);
      assertEquals((-45.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-45.0F), (-45.0F), (-45.0F), (-45.0F), (-45.0F), (-45.0F), (-45.0F), (-45.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-3814);
      longArray0[1] = 1618L;
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      ArrayUtils.swap(longArray0, 0, 0, 43);
      assertArrayEquals(new long[] {(-3814L), 1618L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-30839);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)8192;
      shortArray0[4] = (short)2507;
      shortArray0[5] = (short)3023;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)8192, (-1279));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)2, (short) (-30839), (short) (-1), (short)8192, (short)2507, (short)3023}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-3802));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802), (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = '`';
      charArray0[2] = 'u';
      charArray0[3] = 'D';
      charArray0[4] = 'q';
      charArray0[5] = 'O';
      charArray0[6] = 'h';
      ArrayUtils.swap(charArray0, (-3802), 0, 0);
      assertArrayEquals(new char[] {'l', '`', 'u', 'D', 'q', 'O', 'h'}, charArray0);
      assertEquals(7, charArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-154);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (short) (-154);
      ArrayUtils.swap(intArray0, (int) (short) (-154), (-11), 0);
      assertArrayEquals(new int[] {(-154), 0, 0, 0, (-154)}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-154));
      assertArrayEquals(new int[] {(-154), (-154), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      long[] longArray0 = new long[8];
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\\');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.swap(intArray0, (-154), (-1604), (-154));
      assertArrayEquals(new int[] {(-154), (-154), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-3049L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)29, (byte)84, (byte) (-1), (byte) (-1), (byte)0, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 3395);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 192);
      ArrayUtils.shift((short[]) null, 2608, 321, 321);
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'e');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1792.2016002575124));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (-2506L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, (-2506L), 0L, 0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.insert(0, longArray1, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, (-2506L), 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, (-2506L), 0L, 0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 96;
      Integer integer0 = new Integer(96);
      assertNotNull(integer0);
      assertEquals(96, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(96);
      assertNotNull(integer1);
      assertEquals(96, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(96);
      assertNotNull(integer2);
      assertEquals(96, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertEquals(96, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((-2038603457));
      assertNotNull(integer4);
      assertEquals((-2038603457), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertNotNull(integer5);
      assertEquals(96, (int)integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      Integer integer6 = Integer.valueOf(Integer.MAX_VALUE);
      assertNotNull(integer6);
      assertEquals(Integer.MAX_VALUE, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = new Integer[2];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      integerArray1[1] = integer6;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertNotNull(integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(2, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertEquals(5, integerArray2.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)8);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)21;
      longArray0[1] = (long) (byte)21;
      longArray0[2] = (long) (byte) (-15);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1920L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {21L, 21L, (-15L)}, longArray0);
      assertArrayEquals(new long[] {21L, 21L, (-15L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap(longArray0, (-3922), 4760);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {21L, 21L, (-15L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {21L, 21L, (-15L)}, longArray0);
      assertArrayEquals(new long[] {21L, 21L, (-15L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (byte)21);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3922);
      doubleArray0[1] = 3121.0;
      doubleArray0[2] = (double) 21L;
      doubleArray0[3] = (double) 4760;
      ArrayUtils.swap(doubleArray0, (int) (byte)21, 778, 10);
      assertArrayEquals(new double[] {(-3922.0), 3121.0, 21.0, 4760.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-80));
      assertNotNull(byte0);
      assertEquals((byte) (-80), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-15));
      assertNotNull(byte1);
      assertEquals((byte) (-15), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertEquals((byte) (-1), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      try { 
        Byte.decode("<%z]Y9]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<%z]Y9]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1125));
      Integer integer0 = new Integer((-1125));
      assertNotNull(integer0);
      assertEquals((-1125), (int)integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 108L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 108L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {108L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      ArrayUtils.shift(charArray0, (-1125), 83, 6);
      assertArrayEquals(new char[] {' ', ' '}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, (-1125), 12);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-374.5395189751093), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((-374.5395189751093), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[0] = (byte) (-92);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-3790.411092868);
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 1529L;
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      longArray0[7] = (-1L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1L), 1529L, (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1L), 1529L, (-1L), (-1L), (-1L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      Double double0 = new Double(0L);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1L));
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-3790.411092868), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1L), 0, 0.0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-3790.411092868), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-3802));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802), (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)7592;
      ArrayUtils.swap(shortArray0, (int) (short)7592, 0, (-3802));
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)7592}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (-3799), (-3799));
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)7592;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray2);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new long[] {7592L}, longArray0);
      assertArrayEquals(new long[] {7592L}, longArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Double double0 = new Double((-2117.703123914267));
      assertNotNull(double0);
      assertEquals((-2117.703123914267), (double)double0, 0.01);
      
      Double double1 = new Double((-1004.8));
      assertNotNull(double1);
      assertEquals((-1004.8), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      doubleArray1[3] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 2.14748309061041E9);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1004.8), (-1004.8), 2.14748309061041E9, (-1004.8)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)100;
      ArrayUtils.shift(byteArray0, (-1), 1383, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)72, (byte)97, (byte)51, (byte)8, (byte) (-15), (byte)127, (byte)100, (byte) (-5)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.insert(13, (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte byte0 = (byte) (-59);
      Byte byte1 = new Byte((byte) (-59));
      assertNotNull(byte1);
      assertEquals((byte) (-59), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-59), (byte) (-59), (byte) (-59), (byte) (-59)}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "false");
      assertNotNull(stringArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, stringArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) byte0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      Integer integer0 = new Integer(477);
      assertNotNull(integer0);
      assertEquals(477, (int)integer0);
      
      Integer integer1 = new Integer((-84));
      assertNotNull(integer1);
      assertEquals((-84), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertNotNull(short2);
      assertEquals((short)2, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[1] = short2;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)27621);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray0, (int) short0, 512, (-3267));
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-84);
      intArray0[1] = 512;
      intArray0[2] = 477;
      intArray0[3] = (int) (short)27621;
      intArray0[4] = (int) short0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-84), 1);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-84), 512, 477, 27621, 2}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-60), (int) (byte) (-60), (-1221));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(byteArray0, (-1), 3345, (-1221));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(918);
      assertNotNull(integer0);
      assertEquals(918, (int)integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-2167), integer0);
      assertNotNull(integer1);
      assertEquals(918, (int)integer1);
      assertEquals(0, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1232;
      shortArray0[1] = (short) (-720);
      shortArray0[2] = (short) (-63);
      int[] intArray0 = new int[0];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)1;
      ArrayUtils.shift(byteArray0, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-123), (byte)0, (byte)54}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-123), (byte)0, (byte)54}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      ArrayUtils.shift((double[]) null, (-1879), (int) (byte)0, (-4868));
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) (byte)54);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1403;
      intArray0[1] = (int) (byte)39;
      intArray0[2] = (int) (byte)39;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1403, 39, 39}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-764);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-764), (-764));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      
      bitSet0.set(Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(Integer.MIN_VALUE, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 2147483647}", bitSet0.toString());
      
      Double double0 = new Double(1534);
      assertNotNull(double0);
      assertEquals(1534.0, (double)double0, 0.01);
      
      Double double1 = new Double(Integer.MAX_VALUE);
      assertNotNull(double1);
      assertEquals(2.147483647E9, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-1.0));
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double2;
      doubleArray0[1] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      ArrayUtils.reverse((Object[]) doubleArray0);
      assertEquals(2, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-1467), Integer.MAX_VALUE);
      assertNull(longArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((-53), longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1214), (int) (short) (-1214));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      Integer integer0 = new Integer((-2817));
      assertNotNull(integer0);
      assertEquals((-2817), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)122;
      shortArray0[1] = (short) (-2318);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-14));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-2318);
      Integer integer0 = new Integer((byte) (-14));
      assertNotNull(integer0);
      assertEquals((-14), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences((Integer[]) null, integer0);
      assertNull(integerArray1);
      
      try { 
        Integer.decode(", Length: 0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", Length: 0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int int0 = 3247;
      char[] charArray0 = null;
      int int1 = (-60);
      ArrayUtils.reverse((char[]) null, (-60), (-2990));
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-60));
      assertNotNull(integer0);
      assertEquals((-60), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-60), object0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      assertTrue(object0.equals((Object)int1));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 706);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 706);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-724), (-606));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'L';
      charArray0[2] = '8';
      charArray0[3] = '[';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'H', 'L', '8', '['}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      ArrayUtils.reverse(intArray0, 0, 637);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1565);
      intArray0[1] = 0;
      intArray0[2] = (-1565);
      intArray0[3] = (-1565);
      intArray0[4] = (-1565);
      ArrayUtils.swap(intArray0, (int) (short) (-154), 2, (-4504));
      assertArrayEquals(new int[] {(-1565), 0, (-1565), (-1565), (-1565)}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-1565));
      assertArrayEquals(new int[] {(-1565), 0, (-1565), (-1565), (-1565)}, intArray0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1565);
      long[] longArray0 = new long[8];
      shortArray0[5] = (Short) (short) (-154);
      longArray0[1] = (long) (short) (-154);
      longArray0[2] = (long) (-1565);
      longArray0[3] = (long) (short) (-154);
      longArray0[4] = 110L;
      longArray0[5] = (-1L);
      longArray0[6] = (long) (-1565);
      longArray0[7] = (long) (-1565);
      ArrayUtils.swap(longArray0, 0, (-107), 3345);
      assertArrayEquals(new long[] {0L, (-154L), (-1565L), (-154L), 110L, (-1L), (-1565L), (-1565L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.swap((double[]) null, (int) shortArray0[5], (-1565), (int) (short) (-154));
      assertEquals(6, shortArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)40;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte) (-49);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)20;
      byteArray1[5] = (byte)40;
      byteArray1[6] = (byte)82;
      byteArray1[7] = (byte) (-28);
      byteArray1[8] = (byte)82;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)1, (byte)82, (byte) (-49), (byte)2, (byte)20, (byte)40, (byte)82, (byte) (-28), (byte)82}, byteArray1);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-65), (byte) (-49), (byte) (-28), (byte)82, (byte)1, (byte)40}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1156);
      intArray0[1] = 2329;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2329);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1156), 2329}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1156), 2329}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 2329, 2329);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 2329;
      integerArray0[1] = (Integer) 2329;
      integerArray0[2] = (Integer) (-1156);
      Integer integer0 = new Integer(3296);
      assertNotNull(integer0);
      assertEquals(3296, (int)integer0);
      
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 2329;
      integerArray0[5] = (Integer) (-1156);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) integerArray0[4], (int) integerArray0[1]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) integerArray0[2]);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertEquals(6, integerArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 1043L, 2329);
      assertNotNull(bitSet0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertEquals(6, integerArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (int)integerArray0[4];
      floatArray0[1] = (float) (-1156);
      floatArray0[2] = (float) (-1156);
      floatArray0[3] = (float) 1043L;
      floatArray0[4] = (float) 3296;
      floatArray0[5] = (float) (int)integerArray0[0];
      floatArray0[6] = (float) 2329;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2329.0F, (-1156.0F), (-1156.0F), 1043.0F, 3296.0F, 2329.0F, 2329.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {2329.0F, 2329.0F, 3296.0F, 1043.0F, (-1156.0F), (-1156.0F), 2329.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)37;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-11));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)69, (byte)12, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {(byte)69, (byte)12, (byte)37}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'g';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)24;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 973L;
      longArray0[1] = (long) '\u0000';
      ArrayUtils.shift(longArray0, (int) (byte)0, 1, (int) (byte)24);
      assertArrayEquals(new long[] {973L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 973L);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {973L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(2309.0);
      assertNotNull(float0);
      assertEquals(2309.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 973L);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2309.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-1833), (int) (byte)24);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, '#');
      assertFalse(boolean0);
      
      ArrayUtils.swap((Object[]) byteArray0, (int) (byte)1, 8, (-851));
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-851);
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) (-851);
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) (-851);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-851.0), 8.0, (-851.0), 8.0, (-851.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-851.0), 8.0, (-851.0), 8.0, (-851.0)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      Character character0 = new Character('7');
      assertNotNull(character0);
      assertEquals('7', (char)character0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) 'g';
      characterArray0[1] = character0;
      characterArray0[2] = (Character) 'g';
      characterArray0[3] = character0;
      characterArray0[4] = (Character) 'g';
      characterArray0[5] = character0;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'z');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'g', '7', 'g', '7', 'g', '7'}, charArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'z';
      floatArray0[1] = (float) (char)characterArray0[4];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (char)character0;
      characterArray0[3] = characterArray0[2];
      floatArray0[5] = (float) 'g';
      ArrayUtils.shift(floatArray0, (int) characterArray0[4]);
      assertArrayEquals(new float[] {103.0F, 122.0F, 103.0F, 0.0F, 55.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, characterArray0.length);
      assertEquals(6, floatArray0.length);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ArrayUtils.swap((Object[]) characterArray0, (-848), 194, (int) characterArray0[3]);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-3802));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802), (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802)}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      char[] charArray0 = Character.toChars(0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = 0.0F;
      ArrayUtils.swap((int[]) null, 3070, (-344), (-3802));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 3070;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 3070.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (-83), 0, (-2064));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-3802);
      longArray0[2] = (long) (-344);
      longArray0[3] = 3615L;
      longArray0[4] = (long) (-3802);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, 1335);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, (-3802L), (-344L), 3615L, (-3802L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (-29));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-29), 4565);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-1);
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 2;
      intArray3[4] = int0;
      ArrayUtils.shift(intArray3, 1, 1053, 1836);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 0, 2, 0}, intArray3);
      assertEquals(5, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-29);
      longArray0[1] = (long) 1836;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-29);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2079, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2079, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1L);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)68;
      shortArray0[1] = (short) (-811);
      shortArray0[2] = (short) (-811);
      shortArray0[3] = (short)68;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)68, (-651));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)68, (short) (-811), (short) (-811), (short)68}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'l';
      Character character0 = Character.valueOf('l');
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      characterArray0[0] = character0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)68;
      floatArray0[0] = 3233.259F;
      floatArray0[2] = (float) char0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {3233.259F, 0.0F, 108.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3233.259F, 0.0F, 108.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)68, (short) (-811), (short) (-811), (short)68}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (int) char0, 1884, 37);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = char0;
      charArray0[1] = 'l';
      charArray0[2] = char0;
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse((Object[]) characterArray0, (int) (short) (-811), 0);
      assertEquals(4, characterArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (-29));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long[] longArray0 = new Long[6];
      Long long1 = new Long((-29));
      assertNotNull(long1);
      assertEquals((-29L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long0;
      Long long2 = new Long((-3545L));
      assertNotNull(long2);
      assertEquals((-3545L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[3] = long2;
      longArray0[4] = long0;
      longArray0[5] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-29L), 0L, 0L, (-3545L), 0L, 0L}, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, 0L);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {(-29L), 0L, 0L, (-3545L), 0L, 0L}, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)50;
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = ',';
      charArray0[2] = 'b';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = '?';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',', 0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'P', ',', 'b', 'z', 'z', '?'}, charArray0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'z';
      doubleArray0[1] = (double) ',';
      doubleArray0[2] = (double) (byte)50;
      doubleArray0[3] = (double) 'z';
      doubleArray0[4] = (double) '?';
      doubleArray0[5] = (double) 'b';
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {98.0, 63.0, 122.0, 50.0, 44.0, 122.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      assertEquals(10, booleanArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)770;
      shortArray0[2] = (short) (-28);
      shortArray0[3] = (short)2298;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short) (-120);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)770, (short) (-28), (short)2298, (short)3, (short) (-120)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-120), (int) (short)2298);
      assertEquals(5, int0);
      assertArrayEquals(new short[] {(short)0, (short)770, (short) (-28), (short)2298, (short)3, (short) (-120)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (byte) (-15));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) 0, 2);
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.swap(charArray0, 0, (int) (byte) (-15), 0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(28);
      assertNotNull(integer0);
      assertEquals(28, (int)integer0);
      
      Integer integer1 = new Integer(28);
      assertNotNull(integer1);
      assertEquals(28, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.insert(28, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray2 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (-1));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1796);
      assertNotNull(integer1);
      assertEquals(1796, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(4313);
      assertNotNull(integer2);
      assertEquals(4313, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-775);
      shortArray0[1] = (short) (-95);
      shortArray0[2] = (short)1282;
      shortArray0[3] = (short)960;
      shortArray0[4] = (short)65;
      shortArray0[5] = (short)32;
      shortArray0[6] = (short) (-21846);
      shortArray0[7] = (short) (-1);
      ArrayUtils.swap(shortArray0, 8, 4313);
      assertArrayEquals(new short[] {(short) (-775), (short) (-95), (short)1282, (short)960, (short)65, (short)32, (short) (-21846), (short) (-1)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)960;
      floatArray0[1] = (float) (short)65;
      floatArray0[2] = (float) 8;
      floatArray0[3] = (float) (short) (-95);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {960.0F, 65.0F, 8.0F, (-95.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-21846);
      intArray0[1] = (int) (short) (-21846);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1796);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-21846), (-21846)}, intArray0);
      assertArrayEquals(new int[] {(-21846), (-21846)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (byte) (-1);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte) (-1);
      doubleArray1[1] = (double) (byte) (-1);
      doubleArray1[2] = 3143.782961708057;
      doubleArray1[3] = (double) (int)integerArray0[0];
      doubleArray1[4] = (double) (byte) (-1);
      doubleArray1[5] = (double) (int)integerArray0[0];
      doubleArray1[6] = (double) (byte) (-1);
      doubleArray1[7] = (double) (int)integerArray0[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 3143.782961708057, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      Float float0 = new Float((double) 20);
      assertNotNull(float0);
      assertEquals(20.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 4313);
      assertNotNull(float1);
      assertEquals(4313.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      Integer integer0 = new Integer((-429));
      assertNotNull(integer0);
      assertEquals((-429), (int)integer0);
      
      Integer integer1 = new Integer((-429));
      assertNotNull(integer1);
      assertEquals((-429), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(6);
      assertNotNull(integer2);
      assertEquals(6, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 6, 5);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "java.lang.Integer";
      ArrayUtils.swap(objectArray0, (int) integerArray0[1], (int) integerArray0[0], (-24));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-61);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)19, (int) (byte)19);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)19, (byte)2, (byte) (-32), (byte) (-61)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)6);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.shift(floatArray0, (-1), Integer.MAX_VALUE, (-4196));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'g';
      charArray0[2] = 'f';
      charArray0[3] = 'R';
      charArray0[4] = '<';
      charArray0[5] = 'Y';
      charArray0[6] = 'E';
      charArray0[7] = 'l';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'B', 829);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'B', 'g', 'f', 'R', '<', 'Y', 'E', 'l'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) '<';
      longArray0[2] = (long) 'Y';
      longArray0[3] = (long) 'E';
      longArray0[4] = (long) 'R';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 60L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2147483647L, 60L, 89L, 69L, 82L}, longArray0);
      assertArrayEquals(new long[] {2147483647L, 89L, 69L, 82L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 4;
      Integer integer0 = Integer.valueOf(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      
      integerArray0[1] = integer1;
      boolean[] booleanArray0 = new boolean[0];
      int int2 = ArrayUtils.indexOf(booleanArray0, false, int0);
      assertEquals((-1), int2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-542);
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short) (-2004);
      ArrayUtils.shift(shortArray0, (-839));
      assertArrayEquals(new short[] {(short) (-2004), (short) (-542), (short)127, (short)52}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      String string0 = ArrayUtils.toString((Object) int1);
      assertNotNull(string0);
      assertEquals("0", string0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-63), 963);
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotSame(charArray0, charArray1);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(charArray0.equals((Object)charArray1));
      
      ArrayUtils.swap(arrayUtils0.EMPTY_FLOAT_ARRAY, (int) (byte) (-63), (-202));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-63);
      intArray0[1] = (int) (byte) (-63);
      intArray0[2] = (-2674);
      intArray0[3] = (-1);
      intArray0[4] = 963;
      intArray0[5] = (-3872);
      intArray0[6] = (-1);
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, intArray0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {(-63), (-63), (-2674), (-1), 963, (-3872), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray1 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)60, 2455);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_FLOAT_ARRAY, 90, (int) (byte)60);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2674);
      intArray0[1] = (-2674);
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, (String) null);
      assertNotNull(string0);
      
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 90;
      intArray0[4] = (-404);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-2674);
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {(-2674), (-2674), Integer.MAX_VALUE, 90, (-404), (-1), (-1), (-1), (-2674)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = new Object[3];
      int int0 = (-470);
      Object object0 = ArrayUtils.get(objectArray0, (-470));
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = null;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[1] = null;
      int[] intArray0 = new int[3];
      intArray0[0] = (-470);
      intArray0[1] = (-470);
      intArray0[2] = (-470);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -470, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte0;
      byteArray2[1] = (byte)19;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)2;
      byteArray2[4] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)2, (byte)0}, byteArray2);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (int) byte0, (int) (byte)126, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1565);
      intArray0[1] = 0;
      intArray0[2] = (-1565);
      intArray0[3] = (-1565);
      intArray0[4] = (-1565);
      ArrayUtils.swap(intArray0, (int) (short) (-154), 2, (-4504));
      assertArrayEquals(new int[] {(-1565), 0, (-1565), (-1565), (-1565)}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-1565));
      assertArrayEquals(new int[] {(-1565), 0, (-1565), (-1565), (-1565)}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-4504), 80, 2127781963);
      assertArrayEquals(new int[] {(-1565), (-1565), (-1565), (-1565), 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((byte) (-35));
      assertNotNull(integer0);
      assertEquals((-35), (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object1);
      assertEquals(1, object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      
      int[] intArray0 = new int[4];
      intArray0[1] = (-2905);
      intArray0[2] = 1;
      intArray0[3] = (-2905);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, (-2905), 1, (-2905)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 9, 32);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-2905), 1, (-2905)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, object0, 98);
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-2905), 1, (-2905)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2905);
      doubleArray0[1] = (double) (-2905);
      doubleArray0[2] = (double) (-714);
      doubleArray0[3] = (double) 32;
      doubleArray0[5] = (double) 98;
      ArrayUtils.shift(doubleArray0, 5, 2127781963, 5);
      assertArrayEquals(new double[] {(-2905.0), (-2905.0), (-714.0), 32.0, 0.0, 98.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(98, (double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Integer integer2 = new Integer(32);
      assertNotNull(integer2);
      assertEquals(32, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      
      boolean boolean0 = ArrayUtils.isSameType(integer2, integer0);
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)object1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2905);
      floatArray0[1] = (float) 32;
      floatArray0[2] = (float) 9;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) 6;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-2905.0F), 32.0F, 9.0F, 6.0F, 6.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) Integer.MAX_VALUE);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(918);
      assertNotNull(integer0);
      assertEquals(918, (int)integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-2167), integer0);
      assertNotNull(integer1);
      assertEquals(918, (int)integer1);
      assertEquals(0, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1232;
      shortArray0[1] = (short) (-720);
      shortArray0[2] = (short) (-63);
      shortArray0[3] = (short) (-889);
      shortArray0[4] = (short) (-2233);
      ArrayUtils.shift(shortArray0, (-114), 2147483616, (int) (short) (-889));
      assertArrayEquals(new short[] {(short) (-2233), (short)1232, (short) (-720), (short) (-63), (short) (-889)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (int) (short)1232);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-63);
      floatArray0[1] = (float) (-114);
      floatArray0[2] = (float) (-2167);
      floatArray0[3] = (float) 1160;
      floatArray0[4] = (float) 2147483616;
      floatArray0[5] = (float) (short) (-889);
      floatArray0[6] = (float) (short) (-63);
      floatArray0[7] = (float) (short) (-63);
      floatArray0[8] = (float) 1160;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-63.0F));
      assertEquals(7, int1);
      assertArrayEquals(new float[] {(-63.0F), (-114.0F), (-2167.0F), 1160.0F, 2.14748365E9F, (-889.0F), (-63.0F), (-63.0F), 1160.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      Integer integer0 = new Integer(918);
      assertNotNull(integer0);
      assertEquals(918, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(918);
      assertNotNull(integer1);
      assertEquals(918, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-1), integer1);
      assertNotNull(integer2);
      assertEquals(918, (int)integer2);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(918, object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-889);
      shortArray0[1] = (short) (-63);
      shortArray0[2] = (short) (-889);
      ArrayUtils.shift(shortArray0, (int) (short) (-63), (int) (short) (-63), 349);
      assertArrayEquals(new short[] {(short) (-889), (short) (-63), (short) (-889)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Integer integer3 = new Integer(43);
      assertNotNull(integer3);
      assertEquals(43, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) integer3);
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, object0, (int) (short) (-889));
      assertEquals(0, int0);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer3));
      assertTrue(object0.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (byte) (-81));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-81.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)60, (-3872));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, 1707, (int) (byte) (-81), 7);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-81);
      longArray0[2] = (long) (-3872);
      longArray0[3] = (long) (-3872);
      longArray0[4] = (long) (byte)60;
      longArray0[5] = (long) (-3872);
      longArray0[6] = 0L;
      longArray0[7] = (long) (byte) (-81);
      longArray0[8] = (long) (byte) (-81);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1707);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-81L), 0L, (-3872L), (-3872L), 60L, (-3872L), 0L, (-81L), (-81L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (int) (byte) (-81), 0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '9';
      charArray0[2] = 'A';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'g', '9', 'A'}, charArray0);
      assertArrayEquals(new char[] {'g', '9', 'A', 'g', '9', 'A'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer integer0 = new Integer((-81));
      assertNotNull(integer0);
      assertEquals((-81), (int)integer0);
      
      Integer integer1 = new Integer((-81));
      assertNotNull(integer1);
      assertEquals((-81), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 'A';
      objectArray0[2] = (Object) "-p|iM`zJ!pKng= ";
      objectArray0[3] = (Object) 'g';
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) "-p|iM`zJ!pKng= ";
      objectArray0[6] = object0;
      Integer integer2 = new Integer((-1127));
      assertNotNull(integer2);
      assertEquals((-1127), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Object object1 = ArrayUtils.get(objectArray0, (-81), (Object) integer2);
      assertNotNull(object1);
      assertEquals((-1127), object1);
      assertEquals(7, objectArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer1));
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) "-p|iM`zJ!pKng= ";
      objectArray1[1] = (Object) integer0;
      objectArray1[2] = (Object) '9';
      objectArray1[3] = (Object) 'g';
      objectArray1[4] = (Object) 'g';
      objectArray1[5] = object0;
      objectArray1[6] = (Object) '9';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray1);
      assertNotNull(stringArray0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(7, objectArray1.length);
      assertEquals(7, stringArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4686;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)4686);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)4686}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(charArray0, (-1127), (-81), 2354);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'g', '9', 'A'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      Integer integer0 = new Integer(512);
      assertNotNull(integer0);
      assertEquals(512, (int)integer0);
      
      Integer integer1 = new Integer((-14));
      assertNotNull(integer1);
      assertEquals((-14), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Byte byte0 = new Byte((byte) (-68));
      assertNotNull(byte0);
      assertEquals((byte) (-68), (byte)byte0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1482.1235979;
      doubleArray0[1] = (double) 94L;
      doubleArray0[2] = (double) (byte) (-68);
      doubleArray0[3] = (double) (-2121610350);
      doubleArray0[4] = (double) 512;
      doubleArray0[5] = (double) (-14);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) '`';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1482.1235979, 94.0, (-68.0), (-2.12161035E9), 512.0, (-14.0), 2.0, 96.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(charArray0, (-14), 2, (-513));
      assertArrayEquals(new char[] {'`', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 512);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 40, 40, 40);
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)2, 4256);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, (-2651), (int) (byte)2);
      assertNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, 57);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-639);
      shortArray0[4] = (short)2314;
      shortArray0[5] = (short) (-736);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1, (short)2, (short)0, (short) (-639), (short)2314, (short) (-736)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (short)1);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short)2, (short)0, (short) (-639), (short)2314, (short) (-736)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(':');
      assertNotNull(character1);
      assertEquals(':', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('L');
      assertNotNull(character2);
      assertEquals('L', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertNotNull(character3);
      assertEquals(':', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {':', ':', 'L', ':'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[7] = (Object) false;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.swap(objectArray0, 1, 1, 1);
      assertEquals(8, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2185));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2185)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      Integer integer0 = new Integer(1887);
      assertNotNull(integer0);
      assertEquals(1887, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1518L;
      longArray0[1] = 1518L;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {1518L, 1518L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)1;
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (int) (short)1, (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-1), (short) (-1), (short)0, (short)1}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.reverse((Object[]) null, (-3193), (-152));
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift((int[]) null, (int) '\u0000');
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte0;
      byteArray2[1] = (byte)19;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)2;
      byteArray2[4] = (byte) (-68);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)2, (byte) (-68)}, byteArray2);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-118), (int) (byte)126, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, (-697), (-697), (-697));
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      Byte byte0 = new Byte((byte) (-59));
      assertNotNull(byte0);
      assertEquals((byte) (-59), (byte)byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-59)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "java.lang.Integer");
      assertNotNull(stringArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)4047);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1125));
      Integer integer0 = new Integer((-1125));
      assertNotNull(integer0);
      assertEquals((-1125), (int)integer0);
      
      Boolean boolean0 = Boolean.valueOf("S)1%");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.valueOf("S)1%");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = new Boolean("S)1%");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      
      Boolean boolean5 = new Boolean(true);
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      
      Boolean boolean6 = new Boolean(true);
      assertNotNull(boolean6);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      
      Boolean boolean7 = new Boolean("S)1%");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2773.0;
      doubleArray0[1] = 696.848912834;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-1125);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1212.461506824, (-1125), Double.NaN);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2773.0, 696.848912834, 3.0, Double.NaN, 3.0, Double.NaN, (-1125.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      Character character0 = new Character('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      Character character1 = new Character('X');
      assertNotNull(character1);
      assertEquals('X', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils.shuffle(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.hashCode(objectArray0[3]);
      assertEquals(6, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 5;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 5, 5);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {5L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) 5L;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) '#';
      doubleArray0[4] = (double) '#';
      doubleArray0[5] = (-1590.366125);
      doubleArray0[6] = (double) 5L;
      doubleArray0[7] = (double) 5;
      doubleArray0[8] = (double) '#';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-2242));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {35.0, 5.0, 5.0, 35.0, 35.0, (-1590.366125), 5.0, 5.0, 35.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-513));
      assertNotNull(integer0);
      assertEquals((-513), (int)integer0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      Object object0 = ArrayUtils.get(objectArray0, 13, (Object) integer0);
      assertNotNull(object0);
      assertEquals((-513), object0);
      assertEquals(5, objectArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 13;
      floatArray0[1] = 2844.2F;
      floatArray0[2] = (float) 13;
      ArrayUtils.shift(floatArray0, 89, 13, (-351));
      assertArrayEquals(new float[] {13.0F, 2844.2F, 13.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-513);
      doubleArray0[1] = (double) 2844.2F;
      doubleArray0[2] = (double) (-351);
      doubleArray0[3] = (double) (-513);
      doubleArray0[4] = (double) 2844.2F;
      doubleArray0[5] = (double) 2844.2F;
      doubleArray0[6] = (double) 2844.2F;
      doubleArray0[7] = 100.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2844.199951171875, 13);
      assertEquals(6, int0);
      assertArrayEquals(new double[] {(-513.0), 2844.199951171875, (-351.0), (-513.0), 2844.199951171875, 2844.199951171875, 2844.199951171875, 100.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1053), (-513), (-513));
      assertArrayEquals(new double[] {(-513.0), 2844.199951171875, (-351.0), (-513.0), 2844.199951171875, 2844.199951171875, 2844.199951171875, 100.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)118;
      shortArray0[1] = (short)1076;
      shortArray0[2] = (short) (-392);
      shortArray0[3] = (short)3590;
      shortArray0[4] = (short)64;
      shortArray0[5] = (short)7;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)33;
      shortArray0[8] = (short)1700;
      ArrayUtils.swap(shortArray0, (int) (short) (-392), (int) (short)3590);
      assertArrayEquals(new short[] {(short)118, (short)1076, (short) (-392), (short)3590, (short)64, (short)7, (short)2, (short)33, (short)1700}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)33;
      doubleArray0[1] = (double) (short)64;
      doubleArray0[2] = (double) (short)118;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {33.0, 64.0, 118.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-1776));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1776, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(475);
      assertNotNull(integer0);
      assertEquals(475, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1071L), (-1063));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(24);
      assertNotNull(integer0);
      assertEquals(24, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      BitSet bitSet0 = new BitSet(0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-121);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte) (-20);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-20), (byte) (-20), (byte) (-121), (byte)0, (byte) (-20), (byte) (-20), (byte) (-20)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (-4208L));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-4208L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1071L);
      floatArray0[1] = (float) (-1063);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) (-1));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1071.0F), (-1063.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1071.0F), (-1063.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer[] integerArray0 = new Integer[4];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertTrue(boolean0);
      assertEquals(4, integerArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, 0, 0, 0);
      assertEquals(4, integerArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) '.';
      longArray0[2] = (long) '.';
      longArray0[3] = (long) '.';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) '.';
      longArray0[6] = (long) '.';
      longArray0[7] = (long) '.';
      longArray0[8] = (long) '.';
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {0L, 46L, 46L, 46L, 0L, 46L, 46L, 46L, 46L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) (-367);
      Integer integer0 = new Integer((-2146184504));
      assertNotNull(integer0);
      assertEquals((-2146184504), (int)integer0);
      
      Integer integer1 = new Integer((short) (-367));
      assertNotNull(integer1);
      assertEquals((-367), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      Integer integer2 = new Integer((int) integerArray0[4]);
      assertNotNull(integer2);
      assertEquals((-367), (int)integer2);
      assertEquals(9, integerArray0.length);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer2);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(9, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1851);
      shortArray0[2] = (short) (-1851);
      shortArray0[3] = (short)20680;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)206);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1, (short) (-1851), (short) (-1851), (short)20680}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '/';
      charArray0[2] = 'x';
      charArray0[3] = ' ';
      charArray0[4] = '/';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'x', '/', 'x', ' ', '/'}, charArray0);
      assertEquals(5, charArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'x');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'x', '/', 'x', ' ', '/'}, charArray0);
      assertArrayEquals(new char[] {'/', 'x', ' ', '/'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      Integer integer0 = new Integer((-429));
      assertNotNull(integer0);
      assertEquals((-429), (int)integer0);
      
      Integer integer1 = new Integer((-429));
      assertNotNull(integer1);
      assertEquals((-429), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(6);
      assertNotNull(integer2);
      assertEquals(6, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = Integer.getInteger("java.lang.Integer", (-1));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer3;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 6, 5);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "java.lang.Integer";
      ArrayUtils.swap(objectArray0, 1, (int) integerArray0[0], (-1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1796);
      assertNotNull(integer1);
      assertEquals(1796, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(4313);
      assertNotNull(integer2);
      assertEquals(4313, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[3] = 4313;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (int) (short)2;
      intArray0[8] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2, Integer.MAX_VALUE, 0, 4313, Integer.MAX_VALUE, 0, 0, 2, 0}, intArray1);
      assertArrayEquals(new int[] {2, Integer.MAX_VALUE, 0, 4313, Integer.MAX_VALUE, 0, 0, 2, 0}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      Object object0 = ArrayUtils.get((Object[]) null, 11, (Object) integer0);
      assertNotNull(object0);
      assertEquals(11, object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      ArrayUtils.shift(floatArray0, (-513), 0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 18L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {18L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = '-';
      charArray0[2] = 's';
      charArray0[3] = ')';
      charArray0[4] = 'Z';
      charArray0[5] = 'B';
      charArray0[6] = '7';
      charArray0[7] = '$';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '?');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'L', '-', 's', ')', 'Z', 'B', '7', '$'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 3332);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2461);
      shortArray0[1] = (short) (-1189);
      shortArray0[2] = (short)34;
      shortArray0[3] = (short) (-1674);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)4);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-573));
      assertNotNull(integer0);
      assertEquals((-573), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-573), object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray1, object0, 3466);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)4);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = 0.7;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.7, 0.7}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.7, 0.7}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3049);
      doubleArray1[1] = (double) (-2146884293);
      doubleArray1[2] = (double) 36;
      doubleArray1[3] = (double) 36;
      doubleArray1[4] = 0.7;
      doubleArray1[5] = (double) (-3049);
      doubleArray1[6] = 1913.0;
      doubleArray1[7] = (double) (-3049);
      doubleArray1[8] = (double) (-2146884293);
      ArrayUtils.shift(doubleArray1, 36, (-2146884293), (-246));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3049.0), (-2.146884293E9), 36.0, 36.0, 0.7, (-3049.0), 1913.0, (-3049.0), (-2.146884293E9)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '}');
      assertNull(charArray0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, 2.147483647E9);
      assertNull(doubleArray2);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = 1791.1105105882052;
      Integer integer0 = new Integer(3978);
      assertNotNull(integer0);
      assertEquals(3978, (int)integer0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 1791.1105105882052;
      objectArray0[2] = (Object) 1791.1105105882052;
      Integer integer1 = new Integer(1292);
      assertNotNull(integer1);
      assertEquals(1292, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.get(objectArray0, (int) 4, (Object) integer1);
      assertNotNull(object0);
      assertEquals(1292, object0);
      assertEquals(3, objectArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1609));
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 4.0, (-2135), 1034.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {4.0, 1791.1105105882052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1292;
      intArray0[2] = 0;
      intArray0[3] = (-2135);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1566);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {0, 1292, 0, (-2135)}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 2521, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2521, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(1.5);
      assertNotNull(double1);
      assertEquals(1.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 0.1;
      doubleArray0[2] = 1.5;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.1, 1.5, 0.1}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte byte0 = (byte)52;
      ArrayUtils.shift(doubleArray0, 0, 83, 367);
      assertArrayEquals(new double[] {0.1, 0.1, 1.5}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-5492), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5492, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-35);
      shortArray0[2] = (short) (byte) (-35);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (int) (short) (-35), (int) (short) (-35), 4119);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[2] = (int) (short) (-35);
      intArray0[3] = (int) (short) (-35);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, (-35), (-35)}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, (-35), (-35), Integer.MAX_VALUE, 0, (-35), (-35)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (int) (byte) (-35));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -35, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-3494);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-925);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (-925);
      longArray0[7] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-3494L), 2L, 2L, (-925L), 2L, 2L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)14;
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)35, (byte) (-39), (byte)14}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 2L);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)14;
      shortArray0[1] = (short) (byte)14;
      shortArray0[2] = (short) (byte)14;
      shortArray0[3] = (short) (byte)14;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)14, (short)14, (short)14, (short)14}, shortArray0);
      assertArrayEquals(new short[] {(short)14, (short)14, (short)14, (short)14}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-1152L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-3494L), 2L, 2L, (-925L), 2L, 2L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '|';
      charArray0[2] = '%';
      charArray0[3] = '|';
      charArray0[4] = '%';
      charArray0[5] = '<';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '%', 5);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'?', '|', '%', '|', '%', '<'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object1);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)7);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Integer integer1 = new Integer((-20));
      assertNotNull(integer1);
      assertEquals((-20), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      
      int int0 = mutableInt0.incrementAndGet();
      assertEquals((-1595), int0);
      assertEquals((-1595.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1595", mutableInt0.toString());
      assertEquals((-1595), (int)mutableInt0.getValue());
      assertEquals((-1595), (int)mutableInt0.toInteger());
      assertEquals((-1595L), mutableInt0.longValue());
      assertEquals((byte) (-59), mutableInt0.byteValue());
      assertEquals((-1595.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1595), mutableInt0.shortValue());
      assertEquals((-1595), mutableInt0.intValue());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1595), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals((-1595.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1595", mutableInt0.toString());
      assertEquals((-1595), (int)mutableInt0.getValue());
      assertEquals((-1595), (int)mutableInt0.toInteger());
      assertEquals((-1595L), mutableInt0.longValue());
      assertEquals((byte) (-59), mutableInt0.byteValue());
      assertEquals((-1595.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1595), mutableInt0.shortValue());
      assertEquals((-1595), mutableInt0.intValue());
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(1796);
      assertNotNull(integer4);
      assertEquals(1796, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      int int1 = mutableInt0.getAndIncrement();
      assertEquals((-1595), int1);
      assertTrue(int1 == int0);
      assertEquals((-1594L), mutableInt0.longValue());
      assertEquals("-1594", mutableInt0.toString());
      assertEquals((-1594.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-58), mutableInt0.byteValue());
      assertEquals((-1594), (int)mutableInt0.getValue());
      assertEquals((-1594), (int)mutableInt0.toInteger());
      assertEquals((-1594.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1594), mutableInt0.intValue());
      assertEquals((short) (-1594), mutableInt0.shortValue());
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1596);
      longArray0[1] = 50L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-20);
      longArray0[4] = (long) (-1596);
      int int2 = ArrayUtils.lastIndexOf(longArray0, (-1596L));
      assertEquals(4, int2);
      assertArrayEquals(new long[] {(-1596L), 50L, 0L, (-20L), (-1596L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = ArrayUtils.lastIndexOf((char[]) null, 'M', 2351);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 678);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'g';
      intArray1[1] = (int) 'g';
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {103, 103}, intArray1);
      assertArrayEquals(new int[] {103, 103}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray1, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-81);
      byteArray0[4] = (byte)0;
      Float float0 = new Float((double) (byte)21);
      assertNotNull(float0);
      assertEquals(21.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (byte) (-81));
      assertNotNull(float1);
      assertEquals((-81.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      float[] floatArray3 = ArrayUtils.removeElements(floatArray1, floatArray2);
      assertNotNull(floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-81), (int) (byte) (-81));
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-81), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-81);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (byte) (-81);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = 28;
      Integer integer0 = new Integer(28);
      assertNotNull(integer0);
      assertEquals(28, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(28);
      assertNotNull(integer1);
      assertEquals(28, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int1 = (-3056);
      char[] charArray0 = ArrayUtils.insert((-3056), arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 4346L;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 2344);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2344}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)4);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (byte)4);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 2);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 4777.378F;
      floatArray0[1] = 1430.6F;
      floatArray0[2] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (short)0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {4777.378F, 1430.6F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {4777.378F, 1430.6F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 1952257861, (-2796), 2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = 2;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = 'J';
      charArray0[4] = '';
      charArray0[5] = 'J';
      charArray0[6] = '';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'j');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'j', '', '', 'J', '', 'J', ''}, charArray0);
      assertEquals(7, charArray0.length);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("^%qh", integer0);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(2, object0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      Integer integer2 = new Integer(217);
      assertNotNull(integer2);
      assertEquals(217, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer2);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 1626, int0, (int) (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(int0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '';
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-1), 68, (double) int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {127.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = ArrayUtils.lastIndexOf(floatArray0, (float) int0);
      assertEquals((-1), int3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-106);
      ArrayUtils.swap(byteArray0, (-1736), (int) (byte) (-5));
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-106), (byte) (-5), (byte) (-106), (byte) (-106), (byte) (-106), (byte) (-106), (byte) (-106), (byte) (-106)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)118);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-3834), 81, (-889));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2368.8467536347;
      doubleArray0[1] = (double) (byte) (-5);
      doubleArray0[2] = (double) (byte) (-106);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2368.8467536347, (-5.0), (-106.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2368.8467536347, (-5.0), (-106.0), 2368.8467536347, (-5.0), (-106.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1401.521F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte)4);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1401.521F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 84.0;
      doubleArray1[1] = 84.0;
      doubleArray1[2] = (-248.15962666);
      doubleArray1[3] = (double) (-1401.521F);
      doubleArray1[4] = (double) (-1401.521F);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {84.0, 84.0, (-248.15962666), (-1401.52099609375), (-1401.52099609375)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)4);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1401.521F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 1;
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      
      Integer integer2 = new Integer(4152);
      assertNotNull(integer2);
      assertEquals(4152, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'>'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (char)character0;
      doubleArray0[1] = (double) '>';
      doubleArray0[2] = (double) '>';
      doubleArray0[3] = (double) (char)character0;
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) '>';
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) '>';
      doubleArray1[2] = (double) (char)character0;
      doubleArray1[3] = (double) '>';
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {62.0, 62.0, 62.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {62.0, 62.0, 62.0, 62.0, 62.0, 62.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 62.0, 62.0, 62.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(28);
      assertNotNull(integer0);
      assertEquals(28, (int)integer0);
      
      Integer integer1 = new Integer(28);
      assertNotNull(integer1);
      assertEquals(28, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-889), 2145484128);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2145484128;
      doubleArray0[1] = (double) (-889);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 2145484128;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.145484128E9, (-889.0), 0.0, 0.0, 2.145484128E9}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Double double0 = new Double((-5025.0));
      assertNotNull(double0);
      assertEquals((-5025.0), (double)double0, 0.01);
      
      Double double1 = new Double((-889));
      assertNotNull(double1);
      assertEquals((-889.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-1738.69900181));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {2.145484128E9, (-889.0), 0.0, 0.0, 2.145484128E9}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.145484128E9, (-889.0), 0.0, 0.0, 2.145484128E9}, doubleArray0, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)42;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)95, (byte) (-114), (byte) (-34), (byte)55, (byte)3, (byte) (-96), (byte)42}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)95, (byte) (-114), (byte) (-34), (byte)55, (byte)3, (byte) (-96), (byte)42}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1887;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2), 1524);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1887.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2959, 13);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1887.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '5';
      charArray0[2] = '?';
      charArray0[3] = 'u';
      charArray0[4] = '$';
      charArray0[5] = 'j';
      charArray0[6] = 'l';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'l', 'j', '$', 'u', '?', '5', 'K'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-925);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (-925);
      longArray0[7] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2L, 2L, 2L, (-925L), 2L, 2L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)38;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)38, 18);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)38, (byte)21, (byte)38}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)38, (byte)21, (byte)38, (byte)38, (byte)21, (byte)38}, byteArray1);
      assertArrayEquals(new byte[] {(byte)38, (byte)21, (byte)38}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2L;
      floatArray0[1] = (float) 2L;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1651);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-81));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81), (byte) (-81), (byte) (-81)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((long[]) null, 2555, 359, 124);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-81);
      longArray0[1] = (long) (byte) (-81);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2966L);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-81L), (-81L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1332, 1);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'{', 'Q'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 4416, 4416, 8192);
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3423);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1179, (int) (short) (-3423));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-3423)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Integer integer0 = new Integer(787);
      assertNotNull(integer0);
      assertEquals(787, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer1);
      assertEquals(Integer.MIN_VALUE, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(499, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 499, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)2587;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short) (-3215);
      shortArray0[5] = (short)813;
      shortArray0[6] = (short)19;
      shortArray0[7] = (short)16;
      shortArray0[8] = (short)722;
      ArrayUtils.shift(shortArray0, (-6037), (-1), (-750));
      assertArrayEquals(new short[] {(short)0, (short)2587, (short)15, (short)16, (short) (-3215), (short)813, (short)19, (short)16, (short)722}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '|';
      charArray0[4] = 'A';
      ArrayUtils.shift((int[]) null, (int) (short)15);
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'M', '|', '\u0000', '\u0000', 'A', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'M', '|', '\u0000', '\u0000', 'A', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)813;
      doubleArray0[1] = (double) (short)15;
      doubleArray0[2] = 1.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {813.0, 15.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)53, (-3538));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)2587, (short)15, (short)16, (short) (-3215), (short)813, (short)19, (short)16, (short)722}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 3332);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2461);
      shortArray0[1] = (short) (-1189);
      shortArray0[2] = (short)34;
      shortArray0[3] = (short) (-1674);
      shortArray0[4] = (short) (-501);
      shortArray0[5] = (short)43;
      shortArray0[6] = (short)1311;
      shortArray0[7] = (short)13;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2461), (short) (-1189), (short)34, (short) (-1674), (short) (-501), (short)43, (short)1311, (short)13}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'W';
      charArray0[2] = '&';
      charArray0[3] = '*';
      charArray0[4] = '}';
      charArray0[5] = 'L';
      ArrayUtils.swap(charArray0, (int) (short)34, 1);
      assertArrayEquals(new char[] {'<', 'W', '&', '*', '}', 'L'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-5), 316);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte) (-81), (byte) (-5), (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("S)1%");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("S)1%");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("S)1%");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean1);
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean((boolean) boolean0);
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean3));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean(false);
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean3));
      
      booleanArray0[7] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 316;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (double) (byte) (-81);
      doubleArray0[3] = (double) 316;
      doubleArray0[4] = (double) (byte) (-81);
      doubleArray0[5] = (double) (byte)21;
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) (byte)21;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-5), (int) (byte) (-1), Double.NaN);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {316.0, 3.0, (-81.0), 316.0, (-81.0), 21.0, (-1.0), 21.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[4] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)4;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)50, (byte)4}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)4;
      floatArray0[1] = (float) (byte)50;
      floatArray0[2] = (float) (byte)50;
      floatArray0[3] = (float) (byte)50;
      floatArray0[4] = (float) (byte)4;
      floatArray0[5] = (float) (byte)4;
      floatArray0[6] = (float) (byte)50;
      floatArray0[7] = (float) (byte)4;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-905.6F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {4.0F, 50.0F, 50.0F, 50.0F, 4.0F, 4.0F, 50.0F, 4.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {4.0F, 50.0F, 50.0F, 50.0F, 4.0F, 4.0F, 50.0F, 4.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) (byte)4);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-243);
      shortArray0[1] = (short) (-1172);
      shortArray0[2] = (short)265;
      shortArray0[3] = (short) (-1178);
      shortArray0[4] = (short) (-1941);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-243), (short) (-1172), (short)265, (short) (-1178), (short) (-1941)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-243), (short) (-1172), (short)265, (short) (-1178), (short) (-1941), (short) (-243), (short) (-1172), (short)265, (short) (-1178), (short) (-1941)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-1941);
      intArray0[1] = (int) (short) (-1172);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (short) (-1178);
      intArray0[4] = (int) (short) (-243);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1941), (-1172), Integer.MAX_VALUE, (-1178), (-243)}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 3411.29030098009);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift(charArray0, (int) (short) (-1941), (-1279), 6);
      assertArrayEquals(new char[] {'l', 'l'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1941), (int) (short) (-1941));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1941), (-1172), Integer.MAX_VALUE, (-1178), (-243)}, intArray0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1595));
      assertNotNull(integer0);
      assertEquals((-1595), (int)integer0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[2] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[11] = (byte)62;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-70);
      ArrayUtils.shift(byteArray0, (int) (byte)62);
      assertEquals(15, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      Integer integer1 = new Integer((byte)0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3248, (int) (byte)127);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 8192.0F;
      floatArray0[1] = 84.0F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      Integer integer2 = new Integer((byte)62);
      assertNotNull(integer2);
      assertEquals(62, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      int int0 = ArrayUtils.indexOf((Object[]) classArray1, (Object) null, (int) (byte)62);
      assertEquals((-1), int0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      Boolean[] booleanArray2 = new Boolean[0];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertSame(booleanArray3, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte) (-25), (int) (byte)127);
      assertNotNull(bitSet0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)65);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) shortArray0[1];
      objectArray0[1] = (Object) shortArray0[2];
      objectArray0[2] = (Object) 'l';
      objectArray0[3] = (Object) shortArray0[1];
      objectArray0[4] = (Object) shortArray0[0];
      objectArray0[5] = (Object) shortArray0[0];
      objectArray0[6] = (Object) shortArray0[2];
      objectArray0[7] = (Object) short0;
      objectArray0[8] = (Object) 'l';
      int int0 = 17;
      ArrayUtils.shift(objectArray0, 17, 17, 17);
      assertEquals(9, objectArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)65;
      floatArray0[1] = (float) (short)65;
      floatArray0[2] = (float) 'l';
      floatArray0[3] = (float) (short)shortArray0[1];
      floatArray0[4] = (float) 17;
      floatArray0[5] = (float) (short)shortArray0[0];
      floatArray0[6] = (float) (short)shortArray0[2];
      floatArray0[7] = (float) 'l';
      floatArray0[8] = (float) 'l';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (short)65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      byte byte0 = (byte)124;
      Byte byte1 = new Byte((byte)124);
      assertNotNull(byte1);
      assertEquals((byte)124, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte)2;
      Byte byte3 = new Byte((byte)2);
      assertNotNull(byte3);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte3;
      byteArray0[1] = byte3;
      byteArray0[2] = byte3;
      byteArray0[3] = byte1;
      byteArray0[4] = byte3;
      byteArray0[5] = byte3;
      byteArray0[6] = byte3;
      byteArray0[7] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte2);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)124, (byte)2, (byte)2, (byte)2, (byte)124}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byte2 == byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) byte2;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte2;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)124;
      shortArray0[2] = (short) byte2;
      ArrayUtils.swap(shortArray0, (int) byte2, (-1900));
      assertArrayEquals(new short[] {(short)2, (short)124, (short)2}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(byte2 == byte0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) byte2;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      ArrayUtils.shift(floatArray0, (int) byte2, (int) byte2, (int) byte2);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(byte2 == byte0);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1709.747775);
      doubleArray0[1] = (-1195.9741453790623);
      doubleArray0[2] = 0.1;
      doubleArray0[3] = 2886.755698;
      doubleArray0[4] = (-3602.9969);
      doubleArray0[5] = (-1.0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 84, 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(doubleArray0, 2, 2, 2);
      assertArrayEquals(new double[] {(-1709.747775), (-1195.9741453790623), 0.1, 2886.755698, (-3602.9969), (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-189.800571), (-174.0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, (-1550), (-1432), (-1550));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      ArrayUtils.swap((Object[]) byteArray1, (int) (byte)0, (-780), (int) (byte)0);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)68;
      shortArray0[1] = (short) (-811);
      shortArray0[2] = (short)1535;
      shortArray0[3] = (short)1404;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)68, (-651));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)68, (short) (-811), (short)1535, (short)1404}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('l');
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('_');
      assertNotNull(character1);
      assertEquals('_', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('l');
      assertNotNull(character2);
      assertEquals('l', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character(':');
      assertNotNull(character3);
      assertEquals(':', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ':');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'l', '_', 'l', ':'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      
      ArrayUtils.reverse((int[]) null);
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)68;
      shortArray0[1] = (short) (-811);
      shortArray0[2] = (short)1535;
      shortArray0[3] = (short)1404;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)68, (-651));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)68, (short) (-811), (short)1535, (short)1404}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('l');
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('_');
      assertNotNull(character1);
      assertEquals('_', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('l');
      assertNotNull(character2);
      assertEquals('l', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = new Character(':');
      assertNotNull(character3);
      assertEquals(':', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ':');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'l', '_', 'l', ':'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      
      ArrayUtils.reverse((int[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-811);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short) (-811));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-811.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-811.0F), (-811.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1404, (int) (short)1535);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)68, (short) (-811), (short)1535, (short)1404}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 4;
      Integer integer0 = Integer.valueOf(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      
      integerArray0[1] = integer1;
      boolean[] booleanArray0 = new boolean[0];
      int int2 = ArrayUtils.indexOf(booleanArray0, false, int0);
      assertEquals((-1), int2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) integerArray0, (Random) mockRandom0);
      assertEquals(6, integerArray0.length);
      
      int int3 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertEquals(5, int3);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4073.401F);
      floatArray0[1] = (float) int1;
      int int4 = ArrayUtils.lastIndexOf(floatArray0, (-1163.0F), 5);
      assertEquals((-1), int4);
      assertArrayEquals(new float[] {(-4073.401F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1152);
      intArray0[1] = 0;
      intArray0[2] = 5;
      int int5 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(1, int5);
      assertArrayEquals(new int[] {(-1152), 0, 5}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      
      int int6 = ArrayUtils.lastIndexOf(longArray1, (long) (-1152), 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int6);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {(-1152), 0, 5}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = '{';
      charArray0[2] = 'C';
      charArray0[3] = '{';
      charArray0[4] = '/';
      charArray0[5] = '\'';
      charArray0[6] = '@';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-4630), 'p');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4630, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.insert((-3202), arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-1), 1248, (-1));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, 'A');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'N', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (-28497);
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-3074.64F));
      assertNull(floatArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short)5, (int) (short)5, (int) (short) (-28497));
      assertArrayEquals(new short[] {(short)5, (short) (-28497), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils.shift((int[]) null, 52);
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'N');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'N', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, (-2594), 'l');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2594, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)2587;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short) (-3215);
      shortArray0[5] = (short)813;
      shortArray0[6] = (short)19;
      shortArray0[7] = (short)2059;
      shortArray0[8] = (short)722;
      ArrayUtils.shift(shortArray0, (-6037), (-1), (-750));
      assertArrayEquals(new short[] {(short)0, (short)2587, (short)15, (short)16, (short) (-3215), (short)813, (short)19, (short)2059, (short)722}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '|';
      charArray0[2] = 'A';
      ArrayUtils.shift((int[]) null, (int) (short)15);
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'M', '|', 'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'M', '|', 'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)813;
      doubleArray0[1] = (double) (short)15;
      doubleArray0[2] = 1.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {813.0, 15.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1.0F);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3095.5938850759);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)34);
      assertNotNull(byte0);
      assertEquals((byte)34, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-120));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) integer0, Integer.MIN_VALUE);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift(floatArray0, Integer.MIN_VALUE, Integer.MIN_VALUE, (int) (byte) (-120));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-824L);
      longArray0[1] = (long) (byte) (-120);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2112L));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-824L), (-120L)}, longArray1);
      assertArrayEquals(new long[] {(-824L), (-120L)}, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-1.0);
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 0.0F);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      ArrayUtils.swap(doubleArray2, Integer.MAX_VALUE, (-3104), (int) (byte)34);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 'g';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-81));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-81);
      ArrayUtils.swap(doubleArray0, (-955), (int) 'g', 485);
      assertArrayEquals(new double[] {(-81.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-806.361103);
      doubleArray0[1] = (double) (byte)4;
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = (double) (byte)4;
      doubleArray0[4] = (double) (byte)4;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0, (-806.361103)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0, (-806.361103)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, 108, (int) (byte)4, 36);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0, (-806.361103)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'U');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, (double) (-3049));
      assertNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 3087);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 107.451578);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1049);
      assertNotNull(integer0);
      assertEquals(1049, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(6);
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2645);
      assertNotNull(integer2);
      assertEquals(2645, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null, (-2905));
      assertNotNull(integer3);
      assertEquals((-2905), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 1049, 1049);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (int)integerArray0[2];
      doubleArray0[2] = (double) (int)integerArray0[0];
      doubleArray0[3] = (double) 2645;
      doubleArray0[4] = (double) 0.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {6.0, 2645.0, 1049.0, 2645.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      Double double0 = new Double((byte)117);
      assertNotNull(double0);
      assertEquals(117.0, (double)double0, 0.01);
      
      Double double1 = new Double((-3116.24));
      assertNotNull(double1);
      assertEquals((-3116.24), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 2645);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {6.0, 2645.0, 1049.0, 2645.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {6.0, 2645.0, 1049.0, 2645.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte)117);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertTrue(boolean1);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 52.8F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Integer integer0 = new Integer(115);
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt(2124);
      assertNotNull(mutableInt0);
      assertEquals(2124, (int)mutableInt0.getValue());
      assertEquals((short)2124, mutableInt0.shortValue());
      assertEquals("2124", mutableInt0.toString());
      assertEquals(2124.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2124L, mutableInt0.longValue());
      assertEquals(2124, mutableInt0.intValue());
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals(2124, (int)mutableInt0.toInteger());
      assertEquals(2124.0F, mutableInt0.floatValue(), 0.01F);
      
      int int0 = mutableInt0.incrementAndGet();
      assertEquals(2125, int0);
      assertEquals(2125, (int)mutableInt0.getValue());
      assertEquals((byte)77, mutableInt0.byteValue());
      assertEquals("2125", mutableInt0.toString());
      assertEquals((short)2125, mutableInt0.shortValue());
      assertEquals(2125, mutableInt0.intValue());
      assertEquals(2125.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2125L, mutableInt0.longValue());
      assertEquals(2125.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2125, (int)mutableInt0.toInteger());
      
      Integer integer1 = new Integer(115);
      assertNotNull(integer1);
      assertEquals(115, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.valueOf(486);
      assertNotNull(integer2);
      assertEquals(486, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(2125);
      assertNotNull(integer3);
      assertEquals(2125, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      
      int int1 = mutableInt0.getAndIncrement();
      assertEquals(2125, int1);
      assertTrue(int1 == int0);
      assertEquals((byte)78, mutableInt0.byteValue());
      assertEquals(2126, (int)mutableInt0.toInteger());
      assertEquals(2126.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2126, mutableInt0.intValue());
      assertEquals((short)2126, mutableInt0.shortValue());
      assertEquals(2126.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2126L, mutableInt0.longValue());
      assertEquals("2126", mutableInt0.toString());
      assertEquals(2126, (int)mutableInt0.getValue());
      
      int[] intArray0 = new int[4];
      floatArray0[0] = (float) 115;
      intArray0[1] = 2125;
      intArray0[2] = 2125;
      intArray0[3] = 486;
      int int2 = ArrayUtils.lastIndexOf(intArray0, 486);
      assertEquals(3, int2);
      assertArrayEquals(new int[] {0, 2125, 2125, 486}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Float float0 = new Float((double) 2125);
      assertNotNull(float0);
      assertEquals(2125.0F, (float)float0, 0.01F);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 486;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {486}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, (float[]) null);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {115.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 52.8F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 52.8F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) integerArray0[1], 115);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '8';
      charArray0[2] = 'L';
      charArray0[3] = ']';
      charArray0[4] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'0', '8', 'L', ']', 'i'}, charArray0);
      assertEquals(5, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2098;
      ArrayUtils.shift(shortArray0, (-636));
      assertArrayEquals(new short[] {(short)2098}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1769.325776796;
      doubleArray0[1] = (double) '8';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 34.009122, (int) (short)2098, 1769.325776796);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {1769.325776796, 56.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-81);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)9;
      shortArray0[2] = (short)9;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, 923, (-1767), 682);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)9, (short)9, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.shift((int[]) null, 682);
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'p');
      assertNull(charArray0);
      
      ArrayUtils.shift((float[]) null, (int) (short)9, 1034, 2503);
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (byte) (-81));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[7];
      ArrayUtils.shuffle(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      doubleArray1[0] = (double) (byte)52;
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 0.7);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {52.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      byte byte0 = (byte) (-114);
      Byte byte1 = new Byte((byte) (-114));
      assertNotNull(byte1);
      assertEquals((byte) (-114), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte2 = new Byte((byte)52);
      assertNotNull(byte2);
      assertEquals((byte)52, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-123));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114)}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, byte0);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)52, (byte) (-114), (byte) (-114), (byte) (-114), (byte) (-114)}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      ArrayUtils.swap(doubleArray2, Integer.MAX_VALUE, (int) (byte) (-123), (int) (byte) (-123));
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (-29));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short)2098;
      shortArray0[2] = (short)2098;
      shortArray0[3] = (short)2098;
      shortArray0[4] = (short)2098;
      shortArray0[5] = (short)2098;
      shortArray0[6] = (short)2098;
      shortArray0[7] = (short)2098;
      ArrayUtils.shift(shortArray0, (int) (short)2098);
      assertArrayEquals(new short[] {(short)2098, (short)2098, (short)2098, (short)2098, (short)2098, (short)2098, (short)2098, (short)2098}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2098;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray1);
      assertNotNull(floatArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2098.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2101;
      shortArray0[1] = (short)2101;
      shortArray0[2] = (short)2101;
      shortArray0[3] = (short)2101;
      shortArray0[4] = (short)2101;
      shortArray0[5] = (short)2101;
      shortArray0[6] = (short)2101;
      shortArray0[7] = (short)2101;
      ArrayUtils.shift(shortArray0, (-2124141433));
      assertArrayEquals(new short[] {(short)2101, (short)2101, (short)2101, (short)2101, (short)2101, (short)2101, (short)2101, (short)2101}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 104, 187);
      assertEquals(0, objectArray0.length);
      
      Integer integer0 = Integer.valueOf(1353);
      assertNotNull(integer0);
      assertEquals(1353, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-81);
      byteArray0[4] = (byte)0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((byte) (-81));
      assertNotNull(short0);
      assertEquals((short) (-81), (short)short0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1419.647F);
      floatArray0[1] = (float) (byte)21;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (-2204), 2, 2);
      assertArrayEquals(new float[] {(-1419.647F), 21.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-1419.647F);
      doubleArray0[4] = (double) (short)2077;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {2.0, 0.0, (-1419.64697265625), 2077.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, (-1419.64697265625), 2077.0}, doubleArray0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)0;
      intArray1[1] = Integer.MAX_VALUE;
      intArray1[2] = (int) (byte)0;
      intArray1[3] = (int) (byte)0;
      intArray1[4] = 2;
      intArray1[5] = (int) (short)2077;
      intArray1[6] = 1975;
      ArrayUtils.swap(intArray1, 17, (int) (byte)0, (-4418));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, 0, 0, 2, 2077, 1975}, intArray1);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 83;
      floatArray0[1] = (float) (-1333);
      floatArray0[2] = (float) 83;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1333.0F));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {83.0F, (-1333.0F), 83.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, 1, 1, 1);
      assertArrayEquals(new float[] {83.0F, (-1333.0F), 83.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = (-81);
      Integer integer0 = new Integer((-81));
      assertNotNull(integer0);
      assertEquals((-81), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-10));
      assertNotNull(intArray0);
      assertSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) '\u0000';
      floatArray0[2] = (float) '%';
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) (-10);
      floatArray0[5] = (float) 154;
      floatArray0[6] = (float) '\u0000';
      floatArray0[7] = (float) '%';
      floatArray0[8] = (float) int0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1430.878F, (-81));
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {(-81.0F), 0.0F, 37.0F, (-81.0F), (-10.0F), 154.0F, 0.0F, 37.0F, (-81.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, int0);
      assertNotNull(intArray1);
      assertSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81), (-81)}, intArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(int0 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift(intArray0, (-1));
      assertSame(integerArray0, integerArray1);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '%');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      ArrayUtils.shift(intArray0, (-1), 99, (-1));
      assertSame(integerArray0, integerArray1);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      ArrayUtils.reverse(intArray0, (-770), (-1));
      assertSame(integerArray0, integerArray1);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)838;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)877;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (-5666);
      shortArray0[7] = (short)2;
      shortArray0[8] = (short) (-3872);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)838, (short)2, (short)3, (short)877, (short)2, (short)2, (short) (-5666), (short)2, (short) (-3872)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      Float float0 = new Float((float) (byte)41);
      assertNotNull(float0);
      assertEquals(41.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'w';
      charArray0[2] = 'p';
      charArray0[3] = '&';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)41);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 'j';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (-1L));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 106.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {106.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 3017, 3017);
      assertNull(intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 3017);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-2163);
      shortArray0[2] = (short)99;
      shortArray0[3] = (short) (-704);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-58));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short) (-2163), (short)99, (short) (-704)}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short) (-2163), (short)99, (short) (-704)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (-393.4912047086);
      doubleArray0[2] = (double) (short) (-704);
      doubleArray0[3] = (double) (int)integerArray0[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, (-1.0), (-393.4912047086), (-704.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-393.4912047086), (-704.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray1, (int)  (-58));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -58, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'n';
      charArray0[3] = '5';
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean1));
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {',', 'n', '5', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-68);
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)89, (byte)64, (byte)2, (byte)5, (byte)2, (byte)126, (byte) (-118), (byte) (-68)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.shift(booleanArray1, (int) (byte) (-118), (int) (byte)89, 217);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      
      ArrayUtils.swap(booleanArray1, (int) (byte)2, (-1798), (-1653));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = 1791.1105105882052;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 84.0, (int) (byte)4);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {4.0, 1791.1105105882052, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 84.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.0, 1791.1105105882052, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 1791.1105105882052, 0.0, 0.0, 84.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray0, (int) (byte)4, (int) (byte)4);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {4.0, 1791.1105105882052, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Integer integer0 = new Integer((-4650));
      assertNotNull(integer0);
      assertEquals((-4650), (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, (int) 4, (Object) integer0);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 4.0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) 4.0;
      Integer integer1 = new Integer(10);
      assertNotNull(integer1);
      assertEquals(10, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer1, (-794));
      assertEquals((-1), int0);
      assertEquals(7, objectArray0.length);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer integer1 = new Integer(4313);
      assertNotNull(integer1);
      assertEquals(4313, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Float float0 = new Float((double) 3);
      assertNotNull(float0);
      assertEquals(3.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 4313);
      assertNotNull(float1);
      assertEquals(4313.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)4;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)4;
      shortArray0[6] = (short)4;
      shortArray0[7] = (short) (-5025);
      shortArray0[8] = (short) (-5025);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'c';
      doubleArray0[1] = (double) 6256;
      doubleArray0[2] = (double) (short) (-5025);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 864.79542, 3, (double) (short) (-5025));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {99.0, 6256.0, (-5025.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte byte0 = (byte)2;
      byte byte1 = (byte) (-30);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      Integer integer0 = new Integer(1569);
      assertNotNull(integer0);
      assertEquals(1569, (int)integer0);
      
      Integer integer1 = new Integer((byte)10);
      assertNotNull(integer1);
      assertEquals(10, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert((int) 10, integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte)44);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = '';
      charArray0[3] = 'w';
      charArray0[4] = '_';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'a');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'g', 'g', '', 'w', '_'}, charArray0);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)44;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'Q';
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 'Q';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 11, 11);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 81.0F, 0.0F, 81.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-104);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-104), 6256);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-104), (byte) (-104), (byte) (-104), (byte) (-104), (byte) (-104)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-104), (byte) (-104), (byte) (-104), (byte) (-104), (byte) (-104)}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte) (-104);
      doubleArray0[5] = (double) (byte) (-104);
      doubleArray0[6] = (double) (byte) (-104);
      doubleArray0[7] = 0.0;
      ArrayUtils.swap(doubleArray0, (-54), (-54));
      assertArrayEquals(new double[] {0.0, 0.0, 84.0, 0.0, (-104.0), (-104.0), (-104.0), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-54);
      intArray0[1] = (int) (byte) (-104);
      intArray0[2] = (int) (byte) (-104);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-104), (-104), (-54)}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-104);
      longArray0[1] = (long) (byte) (-104);
      longArray0[2] = (long) (-54);
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) 'T';
      longArray0[5] = (long) (byte) (-104);
      longArray0[6] = (long) 'Q';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-104L), (-104L), (-54L), 81L, 84L, (-104L), 81L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1977), 778);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, 264L);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-71);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)51);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-104), (byte) (-36), (byte) (-71)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)40, (byte) (-104), (byte) (-36), (byte) (-71)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte) (-71));
      assertNotNull(integer0);
      assertEquals((-71), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)40);
      assertNotNull(integer1);
      assertEquals(40, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("{}", (int) (byte) (-36));
      assertNotNull(integer2);
      assertEquals((-36), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer2);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Byte[] byteArray2 = new Byte[1];
      byteArray2[0] = (Byte) (byte)40;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertNotNull(byteArray3);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-120));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2113.3796539127);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4094.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2113.3796539127), 0.0, (-4094.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-15));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-15), (byte) (-15), (byte) (-15), (byte) (-15), (byte) (-15), (byte) (-15), (byte) (-15)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-15), (byte) (-15), (byte) (-15), (byte) (-15), (byte) (-15), (byte) (-15)}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      ArrayUtils.reverse(charArray0, (-489), (int) (byte) (-15));
      assertArrayEquals(new char[] {')'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-15);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte) (-15), (-5296));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-15L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) (-4094.0);
      objectArray0[2] = (Object) (byte) (-15);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "java.lang.Integer");
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 189);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-305L), 8176);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      BitSet bitSet0 = new BitSet(5);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shift(booleanArray0, 189, 8176, (int) (byte) (-20));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 2, 4, 1930);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 4570, 3720);
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 8176;
      doubleArray0[1] = (double) (byte) (-20);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 3720;
      doubleArray0[4] = (-2944.30505159589);
      doubleArray0[5] = (double) 3720;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 1108.78771496, 3720, (double) 0);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {8176.0, (-20.0), (-1.0), 3720.0, (-2944.30505159589), 3720.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = ArrayUtils.insert(12, (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert((-2419), (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2419));
      assertNotNull(double1);
      assertEquals((-2419.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals((-2419.0), (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.1);
      assertNotNull(double3);
      assertEquals(0.1, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      assertNotNull(double4);
      assertEquals((-2419.0), (double)double4, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(Double.NaN);
      assertNotNull(double5);
      assertEquals(Double.NaN, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(3299.7264921529836);
      assertNotNull(double6);
      assertEquals(3299.7264921529836, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1274.3737105436137);
      assertNotNull(double7);
      assertEquals(1274.3737105436137, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[6]);
      assertNotNull(double8);
      assertEquals(3299.7264921529836, (double)double8, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      
      doubleArray0[8] = double8;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-2419.0), (-2419.0), 0.1, (-2419.0), Double.NaN, 3299.7264921529836, 1274.3737105436137, 3299.7264921529836}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 103.0F;
      floatArray0[1] = (-316.83124F);
      floatArray0[2] = 3143.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-316.83124F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {103.0F, (-316.83124F), 3143.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {103.0F, (-316.83124F), 3143.0F, (-316.83124F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(16, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 59;
      intArray0[2] = (-1048);
      intArray0[3] = 745;
      intArray0[4] = 588;
      ArrayUtils.shift(intArray0, (-1048), 122, (-464));
      assertArrayEquals(new int[] {588, Integer.MAX_VALUE, 59, (-1048), 745}, intArray0);
      assertEquals(5, intArray0.length);
      
      Integer integer0 = new Integer((-1048));
      assertNotNull(integer0);
      assertEquals((-1048), (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(35, object0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, ';', 1640);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) ';';
      doubleArray0[3] = (double) (-859);
      doubleArray0[4] = (double) (-859);
      doubleArray0[5] = (double) (short)107;
      int int1 = ArrayUtils.indexOf(doubleArray0, 2927.503639, 1, 2927.503639);
      assertEquals(2, int1);
      assertArrayEquals(new double[] {35.0, (-1.0), 59.0, (-859.0), (-859.0), 107.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2950);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2950;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2950}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 2950;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-3686L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 2950L}, longArray0);
      assertArrayEquals(new long[] {0L, 2950L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 2950;
      integerArray0[1] = (Integer) 2950;
      integerArray0[2] = (Integer) 2950;
      longArray0[1] = (long) 2950;
      integerArray0[4] = (Integer) 2950;
      integerArray0[5] = (Integer) 2950;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[2];
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) 5576;
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short)2950);
      assertNull(shortArray1);
      
      ArrayUtils.reverse((short[]) null, 1424, 3373);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)88;
      shortArray0[1] = (short)98;
      shortArray0[2] = (short)1973;
      shortArray0[3] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)88, (short)98, (short)1973, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0, (int) (short)0, 17);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[24];
      shortArray0[0] = (short)630;
      shortArray0[1] = (short)722;
      shortArray0[2] = (short)2059;
      shortArray0[3] = (short)813;
      shortArray0[4] = (short)722;
      shortArray0[5] = (short)2059;
      shortArray0[6] = (short)722;
      shortArray0[7] = (short)2059;
      ArrayUtils.shift(shortArray0, 1, 1522, (int) (short)0);
      assertEquals(24, shortArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'n');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(24, shortArray0.length);
      assertEquals(23, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)2059;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 5, 0.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 2059.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, 1073741830);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '?';
      ArrayUtils.shift(charArray0, 0);
      assertArrayEquals(new char[] {'`', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'`', '?'}, charArray0);
      assertArrayEquals(new char[] {'`', '?', '`', '?'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'`', '?'}, charArray0);
      assertArrayEquals(new char[] {'`', '?', '`', '?'}, charArray1);
      assertArrayEquals(new char[] {'`', '?', '`', '?'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((short[]) null, (short)12, 13);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      int int0 = 3;
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-526));
      assertNotNull(integer1);
      assertEquals((-526), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger("-#2C", integer1);
      assertNotNull(integer2);
      assertEquals((-526), (int)integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, int0, (Integer) int0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '~';
      charArray0[5] = '`';
      charArray0[6] = 'V';
      charArray0[7] = '~';
      charArray0[8] = 'V';
      boolean boolean0 = ArrayUtils.contains(charArray0, '=');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'f', 'f', '`', '`', '~', '`', 'V', '~', 'V'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)57, (-108));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)57;
      shortArray0[1] = (short) (byte)57;
      shortArray0[2] = (short) (byte)57;
      shortArray0[3] = (short) (byte)57;
      shortArray0[4] = (short) (byte)57;
      shortArray0[5] = (short) (byte)57;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)57, (short)57, (short)57, (short)57, (short)57, (short)57}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[31];
      booleanArray0[0] = false;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("lfM&kovX*5fA");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y', 'Y', 'Y'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)80, (int) (byte)3);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)80;
      intArray0[4] = (int) (byte)3;
      boolean boolean3 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean3);
      assertArrayEquals(new int[] {89, 3, 0, 80, 3}, intArray0);
      assertEquals(5, intArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3;
      objectArray0[1] = null;
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 8);
      assertEquals((-1), int1);
      assertEquals(2, objectArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      ArrayUtils.swap(charArray0, 1034, (-367), (-291));
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      ArrayUtils.reverse((float[]) null, 734, (-229));
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-367));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-3948.49233));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-3948.49233)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Integer integer1 = new Integer((-20));
      assertNotNull(integer1);
      assertEquals((-20), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1596), (int)mutableInt0.getValue());
      
      int int0 = mutableInt0.incrementAndGet();
      assertEquals((-1595), int0);
      assertEquals((short) (-1595), mutableInt0.shortValue());
      assertEquals((-1595), mutableInt0.intValue());
      assertEquals((-1595.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1595", mutableInt0.toString());
      assertEquals((-1595), (int)mutableInt0.getValue());
      assertEquals((byte) (-59), mutableInt0.byteValue());
      assertEquals((-1595), (int)mutableInt0.toInteger());
      assertEquals((-1595.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1595L), mutableInt0.longValue());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1595), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((short) (-1595), mutableInt0.shortValue());
      assertEquals((-1595), mutableInt0.intValue());
      assertEquals((-1595.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1595", mutableInt0.toString());
      assertEquals((-1595), (int)mutableInt0.getValue());
      assertEquals((byte) (-59), mutableInt0.byteValue());
      assertEquals((-1595), (int)mutableInt0.toInteger());
      assertEquals((-1595.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1595L), mutableInt0.longValue());
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      
      Integer integer4 = new Integer(1796);
      assertNotNull(integer4);
      assertEquals(1796, (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      int int1 = mutableInt0.getAndIncrement();
      assertEquals((-1595), int1);
      assertTrue(int1 == int0);
      assertEquals((-1594), mutableInt0.intValue());
      assertEquals((-1594.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1594), mutableInt0.shortValue());
      assertEquals("-1594", mutableInt0.toString());
      assertEquals((byte) (-58), mutableInt0.byteValue());
      assertEquals((-1594), (int)mutableInt0.toInteger());
      assertEquals((-1594), (int)mutableInt0.getValue());
      assertEquals((-1594L), mutableInt0.longValue());
      assertEquals((-1594.0), mutableInt0.doubleValue(), 0.01);
      
      byte[] byteArray0 = new byte[0];
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-65), (-1));
      assertEquals((-1), int2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer integer5 = new Integer(1796);
      assertNotNull(integer5);
      assertEquals(1796, (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      
      int int3 = ArrayUtils.indexOf((boolean[]) null, false, 1263);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(0, objectArray0.length);
      
      int int4 = ArrayUtils.lastIndexOf((long[]) null, 0L);
      assertEquals((-1), int4);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-925);
      intArray0[0] = 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (-925);
      longArray0[7] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2L, 2L, 2L, (-925L), 0L, 2L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-1);
      ArrayUtils.shift(byteArray0, 2, 2, 2277);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.swap((double[]) null, 2, (-2205), 183);
      float[] floatArray0 = new float[2];
      floatArray0[1] = 2863.45F;
      floatArray0[1] = (float) 183;
      ArrayUtils.shift(intArray0, 0, (-2147301457), (int) (byte) (-1));
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2277;
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = 2;
      intArray1[3] = 0;
      int[] intArray2 = ArrayUtils.subarray(intArray1, (-104), 492);
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {2277, (-1), 2, 0}, intArray1);
      assertArrayEquals(new int[] {2277, (-1), 2, 0}, intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 2146892119);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3136.6614F;
      floatArray0[1] = (float) 2146892119;
      floatArray0[2] = (float) 2146892119;
      floatArray0[3] = 488.69644F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 3136.6614F;
      floatArray0[7] = (float) 0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 2146892119);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3136.6614F, 2.14689216E9F, 2.14689216E9F, 488.69644F, 0.0F, 0.0F, 3136.6614F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[7] = true;
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 5);
      assertNotNull(intArray0);
      assertSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 154);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1565);
      intArray0[1] = 0;
      intArray0[2] = (-1565);
      ArrayUtils.shift(intArray0, (-1565));
      assertArrayEquals(new int[] {(-1565), 0, (-1565), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'M');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M'}, charArray0);
      assertArrayEquals(new char[] {'M', 'M', 'M'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'M';
      floatArray0[1] = (float) (-1565);
      floatArray0[2] = (float) (short)shortArray0[0];
      floatArray0[3] = (float) 'M';
      floatArray0[4] = (float) 'M';
      floatArray0[5] = (float) (short)shortArray0[0];
      ArrayUtils.shift(floatArray0, 0, 963, 2434);
      assertArrayEquals(new float[] {(-154.0F), 77.0F, 77.0F, (-154.0F), 77.0F, (-1565.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1974.23, 2092.735407793938);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 0, (-1));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1707.2407786077786);
      doubleArray1[1] = 2092.735407793938;
      doubleArray1[2] = (-1707.2407786077786);
      doubleArray1[3] = 2092.735407793938;
      int int1 = ArrayUtils.indexOf(doubleArray1, 83.20788253722, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1707.2407786077786), 2092.735407793938, (-1707.2407786077786), 2092.735407793938}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1595));
      assertNotNull(integer0);
      assertEquals((-1595), (int)integer0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[2] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[11] = (byte)62;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-70);
      ArrayUtils.shift(byteArray0, (int) (byte)62);
      assertEquals(15, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      Integer integer1 = new Integer((byte)0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3248, (int) (byte)127);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 8192.0F;
      floatArray0[1] = 84.0F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(doubleArray1, (int) (byte)0, (int) (byte)0, 17);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)8);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)0, (byte) (-24), (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)0, (byte) (-24), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)0, (byte) (-24), (byte)2, (byte)2, (byte)8, (byte)0, (byte) (-24), (byte)2}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false, (-1));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 84.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-24);
      shortArray0[1] = (short) (byte)8;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)8;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short)804;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)8;
      shortArray0[8] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-24), (short)8, (short)0, (short)8, (short)2, (short)804, (short)2, (short)8, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-24), (short)8, (short)0, (short)8, (short)2, (short)804, (short)2, (short)8, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-781), byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-781));
      assertNotNull(integer0);
      assertEquals((-781), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-781));
      assertNotNull(integer1);
      assertEquals((-781), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertNotNull(integer2);
      assertEquals((-781), (int)integer2);
      assertEquals(7, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2146549244));
      assertNotNull(integer3);
      assertEquals((-2146549244), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1212);
      assertNotNull(integer4);
      assertEquals(1212, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1246);
      assertNotNull(integer5);
      assertEquals(1246, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2028);
      assertNotNull(integer6);
      assertEquals(2028, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-827));
      assertNotNull(integer7);
      assertEquals((-827), (int)integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer7);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '>';
      charArray0[2] = '.';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)12, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&', '>', '.'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-640L);
      charArray0[0] = '>';
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '>';
      doubleArray0[1] = (-1707.2407786077786);
      doubleArray0[2] = (double) (byte)12;
      doubleArray0[3] = 2180.6212778298827;
      doubleArray0[4] = (double) (-640L);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-640L), (int) (byte)12);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {62.0, (-1707.2407786077786), 12.0, 2180.6212778298827, (-640.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int[] intArray0 = new int[0];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      Boolean boolean0 = new Boolean("$g|/KwyKHn,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      
      Boolean boolean4 = Boolean.valueOf(",3Zt!GU*uy!~qEJ~JjL");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)4;
      intArray0[3] = 2144025542;
      intArray0[4] = 1199;
      intArray0[5] = (int) 'Y';
      intArray0[6] = 2143;
      intArray0[7] = (int) (byte)4;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {4, 0, 4, 2144025542, 1199, 89, 2143, 4}, intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)119, 44);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[3] = (-3078L);
      longArray0[2] = (-712L);
      int[] intArray0 = new int[2];
      intArray0[0] = 1518;
      intArray0[1] = 1518;
      ArrayUtils.swap(intArray0, 113, 113);
      assertArrayEquals(new int[] {1518, 1518}, intArray0);
      assertEquals(2, intArray0.length);
      
      Integer integer0 = new Integer((-1272));
      assertNotNull(integer0);
      assertEquals((-1272), (int)integer0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer1 = new Integer(1518);
      assertNotNull(integer1);
      assertEquals(1518, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1272));
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short)1078;
      shortArray0[2] = (short) (-1681);
      shortArray0[3] = (short)124;
      shortArray0[4] = (short)20340;
      shortArray0[5] = (short)684;
      shortArray0[6] = (short)20;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)800);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)1078, (short) (-1681), (short)124, (short)20340, (short)684, (short)20}, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)1078, (short) (-1681), (short)124, (short)20340, (short)684, (short)20}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer((-513));
      assertNotNull(integer0);
      assertEquals((-513), (int)integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1674), (Object) integer0);
      assertNotNull(object0);
      assertEquals((-513), object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = object0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1674), (-1674));
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = Boolean.valueOf("Array and element cannot both be null");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'e';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Y', 'e'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'e', 'Y', 'e'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)2);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)122, (byte)3, (byte)2}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1);
      intArray0[3] = (int) 'e';
      boolean boolean6 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean6);
      assertArrayEquals(new int[] {2, 0, (-1), 101}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) null, 2);
      assertEquals(3, int1);
      assertEquals(7, booleanArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = Boolean.valueOf(",3Zt!GU*uy!~qEJ~JjL");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'b';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Y', 'b'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'b', 'Y', 'b'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-35);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte) (-35));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)122, (byte)3, (byte) (-35)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean6 = ArrayUtils.contains((Object[]) booleanArray0, (Object) integer0);
      assertFalse(boolean6);
      assertEquals(7, booleanArray0.length);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-305L), 8191);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      BitSet bitSet0 = new BitSet(5);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 3810L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {3810L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)15;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)15}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      
      long[] longArray2 = ArrayUtils.insert(492, longArray0, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-10997), 1631);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)15}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short)15;
      shortArray1[1] = (Short) (short)15;
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray1[2] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)15);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)15, (short)15, (short)0}, shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u', (-2127031422));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      ArrayUtils.reverse(floatArray0, (-2127031422), 63);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (double) (-2127031422), (-2127031422));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 1171.638434935);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1171.638434935}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse((double[]) null, (-4650), (-2127031422));
      Integer integer0 = new Integer((-2144012635));
      assertNotNull(integer0);
      assertEquals((-2144012635), (int)integer0);
      
      Integer integer1 = new Integer((-4650));
      assertNotNull(integer1);
      assertEquals((-4650), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer1, (-1668));
      assertEquals((-1), int0);
      assertFalse(integer1.equals((Object)integer0));
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (float) (-1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {117.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      BitSet bitSet2 = ArrayUtils.indexesOf((double[]) null, 0.0);
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.length());
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1323L;
      longArray0[1] = (-1818L);
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      ArrayUtils.reverse(charArray0, 521, 2590);
      assertArrayEquals(new char[] {'V', 'V'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'V';
      charArray1[1] = 'V';
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertNotSame(charArray1, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'V', 'V'}, charArray1);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)120;
      shortArray0[1] = (short) (-28086);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)120, (short) (-28086)}, shortArray2);
      assertArrayEquals(new short[] {(short)120, (short) (-28086)}, shortArray0);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-28086);
      intArray0[1] = (int) (short)120;
      intArray0[2] = (int) (short) (-28086);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)120);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-28086), 120, (-28086)}, intArray0);
      assertArrayEquals(new int[] {(-28086), (-28086)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-46);
      shortArray0[1] = (short)261;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-46), (short)261}, shortArray0);
      assertArrayEquals(new short[] {(short) (-46), (short)261}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer[] integerArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-3813.480758287));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      Float float0 = new Float((double) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      Float float1 = new Float((float) floatArray0[2]);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[4] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.insert(1790, longArray0, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), 0, (-1)}, intArray1);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-3064L), (-108));
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)2);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1615L;
      longArray0[1] = (-3247L);
      longArray0[2] = 838L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1615L, (-3247L), 838L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray2);
      assertSame(longArray0, longArray2);
      assertSame(longArray2, longArray0);
      assertArrayEquals(new long[] {1615L, (-3247L), 838L}, longArray0);
      assertArrayEquals(new long[] {1615L, (-3247L), 838L}, longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray2.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)111);
      assertNull(byteArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-20));
      assertNotNull(integer0);
      assertEquals((-20), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)111);
      assertNotNull(integer1);
      assertEquals(111, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(642);
      assertNotNull(integer2);
      assertEquals(642, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-20), 111, 642}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)111;
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte)111;
      byteArray1[3] = (byte)111;
      byteArray1[4] = (byte)111;
      byteArray1[5] = (byte)111;
      byteArray1[6] = (byte)111;
      byteArray1[7] = (byte)111;
      byteArray1[8] = (byte)111;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)111, (byte)111, (byte)111, (byte)111, (byte)111, (byte)111, (byte)111, (byte)111, (byte)111}, byteArray1);
      assertEquals(18, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 2;
      ArrayUtils.swap(intArray0, 2, 2, 2);
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shift(intArray0, 1);
      assertArrayEquals(new int[] {2, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1565);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-917.1F);
      floatArray0[3] = (float) (-4504);
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 366L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 2;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1565.0F), 0.0F, (-917.1F), (-4504.0F), 1.0F, 366.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-925);
      intArray0[0] = 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (-925);
      longArray0[7] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2L, 2L, 2L, (-925L), 0L, 2L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-1);
      ArrayUtils.shift(byteArray0, 2, 2, 2277);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.swap((double[]) null, 2, (-2205), 183);
      float[] floatArray0 = new float[2];
      floatArray0[1] = 2863.45F;
      floatArray0[1] = (float) 183;
      ArrayUtils.shift(intArray0, 0, (-2147301457), (int) (byte) (-1));
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 2L;
      objectArray0[1] = (Object) (-925L);
      objectArray0[2] = (Object) (-925L);
      objectArray0[3] = (Object) 2L;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], (-2205));
      assertEquals((-1), int0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertArrayEquals(new byte[] {(byte)105}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)630;
      shortArray0[1] = (short)722;
      shortArray0[2] = (short)2059;
      shortArray0[3] = (short)813;
      shortArray0[4] = (short)722;
      shortArray0[5] = (short)2059;
      shortArray0[6] = (short)722;
      shortArray0[7] = (short)19;
      ArrayUtils.shift(shortArray0, 1, 1524, (-1));
      assertArrayEquals(new short[] {(short)630, (short)2059, (short)813, (short)722, (short)2059, (short)722, (short)19, (short)722}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.shift((int[]) null, (-1));
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'n');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 2342);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      Integer integer0 = new Integer(26);
      assertNotNull(integer0);
      assertEquals(26, (int)integer0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)40;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-392);
      shortArray0[3] = (short)9;
      ArrayUtils.shift(shortArray0, 1034, (int) (short)40, 4036);
      assertArrayEquals(new short[] {(short)40, (short)0, (short) (-392), (short)9}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      ArrayUtils.shift((int[]) null, 1034);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'M');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (short) (-392);
      floatArray0[2] = (float) (short)9;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-494);
      ArrayUtils.shift(floatArray0, (int) (short) (-392), 963, (int) (short)40);
      assertArrayEquals(new float[] {0.0F, (-392.0F), 9.0F, 0.0F, (-494.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap((boolean[]) null, 69, 114, 56);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-91);
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte) (-91), 904, 115);
      ArrayUtils.shift((boolean[]) null, (int) (byte)25, 904, 1);
      try { 
        Integer.decode("|[3o9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|[3o9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((boolean[]) null, (-2144169629), (-2144169629), (-2144169629));
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1071L), (-1063));
      assertEquals((-1), int0);
      
      int int1 = 24;
      Integer integer0 = new Integer(24);
      assertNotNull(integer0);
      assertEquals(24, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      BitSet bitSet0 = new BitSet(0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-121);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte) (-20);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-20), (byte) (-20), (byte) (-121), (byte)0, (byte) (-20), (byte) (-20), (byte) (-20)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (-4208L));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-4208L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-20), (byte) (-20), (byte) (-121), (byte)0, (byte) (-20), (byte) (-20), (byte) (-20)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, (long) (-1));
      assertNull(longArray1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, (Integer) int1);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2147483610;
      intArray0[2] = 2147483610;
      intArray0[3] = 0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 2147483610, 2147483610, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals("{0, 1, 2, 3, 5, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2147483610;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 2147483610;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.14748365E9F, 0.0F}, floatArray0, 0.01F);
      assertEquals(16, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, 3306.109012420904);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      
      ArrayUtils.shift((double[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-39);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-39)}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0, 0, (double) (-39));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift((double[]) null, (-39));
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-1));
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift((boolean[]) null, 961);
      int[] intArray0 = new int[5];
      intArray0[0] = 961;
      intArray0[1] = 961;
      intArray0[2] = 961;
      intArray0[3] = 961;
      intArray0[4] = 961;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {961, 961, 961, 961, 961}, intArray0);
      assertArrayEquals(new int[] {961, 961, 961, 961, 961, 961, 961, 961, 961, 961}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1767L;
      longArray0[1] = 1389L;
      longArray0[2] = 0L;
      longArray0[3] = (-1044L);
      longArray0[4] = 736L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1389L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1767L, 1389L, 0L, (-1044L), 736L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "\u0007uH@EV^jGk;");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-407));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)122, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 102);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1990));
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 1, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Short[] shortArray2 = new Short[0];
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short)120);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {}, shortArray3);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      boolean[] booleanArray2 = new boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      ArrayUtils.reverse(booleanArray2, (-20), (-1130));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray2));
      assertEquals(7, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('6');
      assertNotNull(character1);
      assertEquals('6', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('M');
      assertNotNull(character2);
      assertEquals('M', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('A');
      assertNotNull(character3);
      assertEquals('A', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'M', '6', 'M', 'A'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)12;
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '8';
      charArray0[2] = 'e';
      charArray0[3] = '~';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'7', '8', 'e', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, 56);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'7', '8', 'e', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1L);
      ArrayUtils.shift(longArray0, (-3538), 218, (-2386));
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 41.0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = ArrayUtils.toString((Object) null, "java.lang.Object");
      assertNotNull(string0);
      assertEquals("java.lang.Object", string0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 41.0, (-3538));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, 1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 1, 1, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.1;
      ArrayUtils.shuffle(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      doubleArray1[0] = (double) (byte)52;
      ArrayUtils.shift(doubleArray1, 0, (int) (byte)52, 0);
      assertArrayEquals(new double[] {52.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)52, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)60;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)49, 430);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)60, (byte)23, (byte)60, (byte)60, (byte)60}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 's';
      charArray0[2] = '1';
      charArray0[3] = 'm';
      charArray0[4] = '`';
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'0', 's', '1', 'm', '`'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)60;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)1614);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)60}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-2330));
      assertNotNull(integer0);
      assertEquals((-2330), (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-3561), 65536);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'5'}, charArray0);
      assertArrayEquals(new char[] {'5'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (-2330));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2330, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(9, objectArray0.length);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'P');
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'E', 'E', 'E'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)21;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)21, (byte) (-9), (byte)21, (byte)9, (byte)9, (byte)4, (byte)21}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)9;
      intArray0[1] = (int) (byte)21;
      intArray0[2] = (int) (byte)21;
      intArray0[3] = (int) (byte) (-9);
      intArray0[4] = (int) 'E';
      intArray0[5] = 2630;
      intArray0[6] = (int) (byte)21;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {9, 21, 21, (-9), 69, 2630, 21}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean2 == boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)9;
      doubleArray0[1] = (double) (byte)9;
      doubleArray0[2] = (double) (byte)21;
      doubleArray0[3] = (double) (byte)21;
      doubleArray0[4] = (double) 'E';
      doubleArray0[5] = (double) (byte)9;
      doubleArray0[6] = 803.529;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9.0, 9.0, 21.0, 21.0, 69.0, 9.0, 803.529}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '>';
      charArray0[2] = '.';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)12, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&', '>', '.'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-640L);
      charArray0[0] = '>';
      longArray0[2] = (long) 0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(14, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      int int0 = (-367);
      char[] charArray0 = new char[4];
      charArray0[1] = 'i';
      charArray0[0] = '.';
      charArray0[3] = '\"';
      ArrayUtils.swap(charArray0, 0, (-367), (-229));
      assertArrayEquals(new char[] {'.', 'i', '\u0000', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      ArrayUtils.reverse((float[]) null, 734, 3110);
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '\"';
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) 'i';
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) '\u0000';
      objectArray0[5] = (Object) 'i';
      objectArray0[6] = (Object) '\u0000';
      ArrayUtils.shift(objectArray0, (-1), Integer.MAX_VALUE, (-1));
      assertEquals(7, objectArray0.length);
      
      Integer integer1 = Integer.valueOf(524);
      assertNotNull(integer1);
      assertEquals(524, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      try { 
        Integer.valueOf("&,gC\"AB7Yv[;J!T_(_(", 3110);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 3110 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-3525L);
      longArray0[1] = (-4317L);
      ArrayUtils.shift(longArray0, 1, 1004, 1);
      assertArrayEquals(new long[] {(-3525L), 0L, (-4317L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2284L);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-3525L), 0L, (-4317L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = 'V';
      charArray0[5] = ',';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'I', (-756));
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {',', ',', ',', ',', 'V', ','}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      Double double1 = new Double(1.5);
      assertNotNull(double1);
      assertEquals(1.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 1.5, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 3783, 9);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-81));
      assertNull(byteArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (byte) (-81), 1, 293);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 293);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      int int1 = ArrayUtils.lastIndexOf(charArray0, ',', (-756));
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {',', ',', ',', ','}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-756);
      intArray0[1] = (int) ',';
      intArray0[2] = (int) (byte) (-81);
      intArray0[3] = (-756);
      intArray0[4] = (int) ',';
      intArray0[5] = (int) ',';
      intArray0[6] = (-1202);
      intArray0[7] = 1;
      intArray0[8] = 127;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-922);
      shortArray0[1] = (short)12;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)12, (short) (-922)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Integer integer0 = new Integer(444);
      assertNotNull(integer0);
      assertEquals(444, (int)integer0);
      
      Integer integer1 = new Integer((-2867));
      assertNotNull(integer1);
      assertEquals((-2867), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-20)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (byte) (-20));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-20L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)12, (short) (-922)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      long[] longArray1 = ArrayUtils.insert(254, (long[]) null, (long[]) null);
      assertNull(longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-922);
      floatArray0[1] = (float) 444;
      floatArray0[2] = (float) (-2867);
      floatArray0[3] = (float) (short) (-922);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)12);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-922.0F), 444.0F, (-2867.0F), (-922.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      Integer integer0 = new Integer(706);
      assertNotNull(integer0);
      assertEquals(706, (int)integer0);
      
      ArrayUtils.swap((short[]) null, 706, (-1), (-1));
      ArrayUtils.reverse((Object[]) null, (-1), 2987);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Integer[] integerArray0 = null;
      Integer integer0 = new Integer(1887);
      assertNotNull(integer0);
      assertEquals(1887, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 1887, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1887, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'g';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-81));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 973L;
      longArray0[1] = (long) '\u0000';
      ArrayUtils.shift(longArray0, (int) (byte) (-81), 1, (int) (byte) (-81));
      assertArrayEquals(new long[] {973L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 973L);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {973L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'g', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-614), (-614), 127);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)6);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)6}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)6;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {6.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((short)6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      assertEquals(7, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)6;
      ArrayUtils.shift(shortArray1, 0, (int) (short)6, (-750));
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)6}, shortArray1);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift((int[]) null, 12);
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'l');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'M', '|', '|', '|'}, charArray1);
      assertArrayEquals(new char[] {'M', '|', '|', '|'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) '|';
      floatArray0[2] = (float) (short)6;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 'l';
      floatArray0[5] = (float) '|';
      ArrayUtils.shift(floatArray0, 2, (-494), 963);
      assertArrayEquals(new float[] {2.0F, 124.0F, 6.0F, 0.0F, 108.0F, 124.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 878;
      intArray0[2] = (int) 'B';
      intArray0[3] = 1;
      intArray0[4] = 878;
      intArray0[5] = (int) 'B';
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1707.2407786077786), (double) 878);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 878;
      floatArray0[1] = (float) 66;
      floatArray0[2] = (float) 878;
      floatArray0[3] = 878.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 878, (-2147483647));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {878.0F, 66.0F, 878.0F, 878.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.indexOf(doubleArray1, 12.0, 66);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      ArrayUtils.reverse(charArray0, 1, 3581);
      assertArrayEquals(new char[] {'F', 'B', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-925);
      intArray0[0] = 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (-925);
      longArray0[7] = (long) (-925);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = (-1707.2407786077786);
      doubleArray0[2] = (double) (-925);
      doubleArray0[3] = (double) (-925L);
      doubleArray0[4] = (-588.0);
      doubleArray0[5] = 1974.23;
      doubleArray0[6] = (double) 2L;
      doubleArray0[7] = (double) 2L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2L, (-588.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.0, (-1707.2407786077786), (-925.0), (-925.0), (-588.0), 1974.23, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-925L), (-925));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 2L, (-925));
      assertEquals(0, int1);
      assertArrayEquals(new double[] {2.0, (-1707.2407786077786), (-925.0), (-925.0), (-588.0), 1974.23, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = (-1);
      intArray1[2] = 48;
      intArray1[3] = (-1467);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 'g';
      charArray0[2] = 's';
      charArray0[3] = 's';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-81));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = 973L;
      longArray0[1] = (long) 's';
      longArray0[2] = (long) 's';
      ArrayUtils.shift(longArray0, (int) (byte) (-81), 1, (int) (byte) (-81));
      assertArrayEquals(new long[] {973L, 115L, 115L}, longArray0);
      assertEquals(3, longArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 973L);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {973L, 115L, 115L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, ',', (-756));
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'s', 'g', 's', 's'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1565);
      intArray0[1] = 0;
      intArray0[2] = (-1565);
      intArray0[3] = (-1565);
      intArray0[4] = (-1565);
      ArrayUtils.swap(intArray0, (int) (short) (-154), 2, (-4504));
      assertArrayEquals(new int[] {(-1565), 0, (-1565), (-1565), (-1565)}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-1565));
      assertArrayEquals(new int[] {(-1565), 0, (-1565), (-1565), (-1565)}, intArray0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1565);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-154);
      longArray0[1] = (long) (short) (-154);
      longArray0[2] = (long) (-1565);
      longArray0[3] = (long) (short) (-154);
      longArray0[4] = 110L;
      longArray0[5] = (-1L);
      longArray0[6] = (long) (-1565);
      longArray0[7] = (long) (-1565);
      ArrayUtils.swap(longArray0, 0, (-107), 3345);
      assertArrayEquals(new long[] {(-154L), (-154L), (-1565L), (-154L), 110L, (-1L), (-1565L), (-1565L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[3] = (-3078L);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-3118), (-3118), (-3118));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 2146587200, 27);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[9];
      longArray0[3] = 0L;
      doubleArray0[1] = (double) 27;
      doubleArray0[2] = (double) 27;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) (-3118);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = 260.0;
      doubleArray0[8] = (double) (-3078L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 4, 1096);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 27.0, 27.0, 4.0, (-3118.0), 0.0, 0.0, 260.0, (-3078.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 27.0, 27.0, 4.0, (-3118.0), 0.0, 0.0, 260.0, (-3078.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 27.0, 27.0, 4.0, (-3118.0), 0.0, 0.0, 260.0, (-3078.0)}, doubleArray0, 0.01);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      Integer integer0 = new Integer(706);
      assertNotNull(integer0);
      assertEquals(706, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(586);
      assertNotNull(integer0);
      assertEquals(586, (int)integer0);
      
      Integer integer1 = new Integer((-336));
      assertNotNull(integer1);
      assertEquals((-336), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object1);
      assertEquals((-336), object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      
      Integer integer2 = new Integer(85);
      assertNotNull(integer2);
      assertEquals(85, (int)integer2);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      String string0 = ArrayUtils.toString((Object) integer2, "G=upJ;BBCeW`y8P:%nB");
      assertNotNull(string0);
      assertEquals("85", string0);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-336);
      intArray0[2] = 85;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, (-336), 85}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-336), 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-336), 85}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer3 = ArrayUtils.get(integerArray0, (-1307));
      assertNull(integer3);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, (-336), 85}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, 586);
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-336), 85}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      Boolean boolean0 = new Boolean("$g|/KwyKHn,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      
      Boolean boolean4 = Boolean.valueOf(",3Zt!GU*uy!~qEJ~JjL");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      
      Boolean boolean7 = new Boolean("$g|/KwyKHn,");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean2));
      
      Boolean boolean8 = Boolean.valueOf("");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean1));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2950);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      ArrayUtils.swap(charArray0, (-229), (-1049), (int) (short)2950);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '\"', '\"', '\"'}, charArray0);
      assertEquals(7, charArray0.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 8, 120);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'T';
      longArray0[1] = 1042L;
      longArray0[2] = (long) (byte) (-104);
      longArray0[3] = (long) 8;
      longArray0[4] = (long) 'T';
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (-2119951805);
      longArray0[7] = (long) (byte) (-104);
      ArrayUtils.swap(longArray0, 8, 3, 2146524581);
      assertArrayEquals(new long[] {84L, 1042L, (-104L), 8L, 84L, 0L, (-2119951805L), (-104L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2718);
      longArray0[1] = (long) (-2718);
      ArrayUtils.shift(longArray0, 1, 18, 647);
      assertArrayEquals(new long[] {(-2718L), (-2718L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2718L));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-2718L), (-2718L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-1.0F));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (-1));
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-2718L), (-2718L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(int1 == int0);
      
      ArrayUtils.swap(booleanArray0, 110, 647);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-2718L);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-2718L));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-2718.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2718.0F), (-1.0F), 1.0F, (-2718.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 2849);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2849;
      longArray0[1] = (long) 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.insert(0, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)1);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, 1857.8F, 1580);
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_LONG_ARRAY, (-1460L));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2018;
      shortArray0[1] = (short)1017;
      shortArray0[3] = (short) (-3363);
      shortArray0[3] = (short) (-131);
      shortArray0[4] = (short) (-131);
      shortArray0[5] = (short)6;
      ArrayUtils.swap(shortArray0, 60, (int) (short)2018);
      assertArrayEquals(new short[] {(short)2018, (short)1017, (short)0, (short) (-131), (short) (-131), (short)6}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1017;
      floatArray0[1] = (float) (-397);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1017.0F, (-397.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (int) (short)1017;
      intArray0[2] = 8192;
      intArray0[3] = (-397);
      intArray0[4] = (int) (short) (-3363);
      intArray0[5] = (int) (short)6;
      ArrayUtils.shift(intArray0, 2, 2, (-397));
      assertArrayEquals(new int[] {0, 1017, 8192, (-397), (-3363), 6}, intArray0);
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-3363);
      longArray0[1] = (long) (short) (-131);
      longArray0[2] = (long) (short)2018;
      longArray0[3] = (long) (short) (-131);
      longArray0[4] = (long) (-397);
      longArray0[5] = (-706L);
      longArray0[6] = (long) 2;
      longArray0[7] = (long) (short)2018;
      longArray0[8] = (long) (-3363);
      long[] longArray1 = ArrayUtils.remove(longArray0, 6);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-3363L), (-131L), 2018L, (-131L), (-397L), (-706L), 2L, 2018L, (-3363L)}, longArray0);
      assertArrayEquals(new long[] {(-3363L), (-131L), 2018L, (-131L), (-397L), (-706L), 2018L, (-3363L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short) (-154));
      assertNotNull(integer0);
      assertEquals((-154), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-2176), (-1017));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.swap((Object[]) longArray0, 0, 1913, 1);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ArrayUtils.swap((Object[]) integerArray0, 18688, (-1));
      assertEquals(6, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = 'A';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'}', 'A'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-764));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift(intArray1, (-3059));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '&');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'}', 'A'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      char[] charArray3 = ArrayUtils.removeElements(charArray1, charArray0);
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'}', 'A'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray3);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      
      int int0 = 76;
      Integer integer0 = Integer.valueOf(76);
      assertNotNull(integer0);
      assertEquals(76, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) int0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, 76, (-3245), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 1455, 1455);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = Integer.MAX_VALUE;
      bitSet0.set(160);
      assertEquals("{160}", bitSet0.toString());
      assertEquals(161, bitSet0.length());
      assertEquals(192, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      bitSet0.set(1668);
      assertEquals("{160, 1668}", bitSet0.toString());
      assertEquals(1728, bitSet0.size());
      assertEquals(1669, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      int int1 = 1534;
      byte byte0 = (byte)8;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)20;
      BitSet bitSet1 = BitSet.valueOf(byteArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-127), (byte) (-127), (byte) (-125), (byte)60, (byte) (-125), (byte)90, (byte) (-125), (byte)20}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(bitSet1.isEmpty());
      assertEquals(128, bitSet1.size());
      assertEquals(69, bitSet1.length());
      assertEquals("{0, 1, 7, 8, 15, 16, 23, 24, 25, 31, 34, 35, 36, 37, 40, 41, 47, 49, 51, 52, 54, 56, 57, 63, 66, 68}", bitSet1.toString());
      assertEquals(26, bitSet1.cardinality());
      
      // Undeclared exception!
      try { 
        bitSet1.flip((int) (byte) (-127));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -127
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1518, 111);
      Integer integer0 = new Integer((-4094));
      assertNotNull(integer0);
      assertEquals((-4094), (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-24), 16);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-24), (byte) (-24)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-24), (byte) (-24)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-24), (byte) (-24), (byte)2, (byte) (-24), (byte) (-24)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 16, (int) integerArray0[1], 48);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(5, integerArray0.length);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      ArrayUtils.reverse((int[]) null, 2, (int) integerArray0[2]);
      assertEquals(5, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1518, 111);
      Integer integer0 = new Integer((-4094));
      assertNotNull(integer0);
      assertEquals((-4094), (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-24), 16);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-24), (byte) (-24)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-24), (byte) (-24)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-24), (byte) (-24), (byte)2, (byte) (-24), (byte) (-24)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      ArrayUtils.reverse((int[]) null, 2, (int) integerArray0[2]);
      assertEquals(5, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-764);
      Integer integer0 = Integer.valueOf(1913);
      assertNotNull(integer0);
      assertEquals(1913, (int)integer0);
      
      Integer integer1 = Integer.getInteger("jav&.lang.Ineger", (-2146301112));
      assertNotNull(integer1);
      assertEquals((-2146301112), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer((-764));
      assertNotNull(integer3);
      assertEquals((-764), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertArrayEquals(new int[] {1, (-764)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift(intArray1, (-44));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertArrayEquals(new int[] {1, (-764)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', 'v'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', 'v'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Float float0 = new Float((double) (byte)21);
      assertNotNull(float0);
      assertEquals(21.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)21;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 21.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {21.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1974.23;
      doubleArray0[1] = 1974.23;
      doubleArray0[2] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      ArrayUtils.swap(floatArray0, (-2147393398), 2, (-2147393398));
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, 2.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 415.3;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {415.3}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {415.3}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      ArrayUtils.swap(charArray0, 48, (-1263), 48);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.contains(charArray0, '!');
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Short[] shortArray0 = new Short[6];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-1230), 1087, 1082);
      assertEquals(0, integerArray0.length);
      
      Integer integer1 = ArrayUtils.get(integerArray0, 106);
      assertNull(integer1);
      assertEquals(0, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(5, int0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      Integer[] integerArray0 = null;
      Integer integer0 = ArrayUtils.get((Integer[]) null, (int) 21);
      assertNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement((Integer[]) null, (Object) null);
      assertNull(integerArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)21;
      doubleArray0[1] = (double) (byte)21;
      doubleArray0[2] = (double) (byte)21;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)21;
      doubleArray0[5] = (double) (byte)21;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 21.0, 1.5);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {21.0, 21.0, 21.0, 0.0, 21.0, 21.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = (-535);
      // Undeclared exception!
      try { 
        mockRandom0.ints(11, (-535));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[2] = (short) (byte)12;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-96);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-96), 2249);
      assertEquals(5, int0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte) (-96), (byte)12, (byte) (-96)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte) (-96), (byte)12, (byte) (-96)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)12;
      floatArray0[1] = (float) (byte)3;
      floatArray0[2] = (float) (byte) (-96);
      floatArray0[3] = (float) (byte) (-96);
      floatArray0[4] = (float) (byte)3;
      floatArray0[5] = (float) (byte) (-96);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (float) (byte)12;
      ArrayUtils.swap(floatArray0, (int) (byte)3, (-2147393398), 2);
      assertArrayEquals(new float[] {(-96.0F), 3.0F, (-96.0F), 12.0F, 3.0F, (-96.0F), 0.0F, 12.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2249;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = 5;
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-96), (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)12, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte)12);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2249, 0, 3, 5}, intArray0);
      assertArrayEquals(new int[] {2249, 0, 3, 5}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = ArrayUtils.indexOf(intArray1, 5, (-2147393398));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, int1);
      assertArrayEquals(new int[] {2249, 0, 3, 5}, intArray0);
      assertArrayEquals(new int[] {2249, 0, 3, 5}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-93.405);
      Integer integer0 = new Integer(123);
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2735), 1);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift((Object[]) integerArray0, (-2735));
      assertEquals(2, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift((byte[]) null, (-1), 127, (-1));
      ArrayUtils.shift((long[]) null, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2735), 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift((Object[]) doubleArray0, (-2735));
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.shift((byte[]) null, (-2735), 3366, (int) (byte) (-28));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-83);
      longArray0[1] = (-1943L);
      ArrayUtils.shift(longArray0, (int) (byte) (-28));
      assertArrayEquals(new long[] {(-83L), (-1943L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(1261L);
      assertNotNull(long0);
      assertEquals(1261L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1261L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1261L, 1261L, 1261L, 1261L, 1261L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.shift(longArray1, 1, 927, 1969);
      assertArrayEquals(new long[] {1261L, 1261L, 1261L, 1261L, 1261L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-3505);
      float[] floatArray0 = new float[1];
      intArray0[2] = (-3505);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[2] = 'J';
      charArray0[3] = 'j';
      charArray0[5] = 'j';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'', 'j', 'J', 'j', '\u0000', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 'J');
      assertNotNull(object0);
      assertEquals('J', object0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-3505);
      integerArray0[1] = (Integer) (-3505);
      integerArray0[2] = (Integer) (-3505);
      integerArray0[3] = (Integer) (-3505);
      integerArray0[4] = (Integer) (-3505);
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[2]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-28);
      ArrayUtils.shift(byteArray0, (int) (byte) (-28), 2, 1626);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)1, (byte) (-90), (byte) (-1), (byte) (-28)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1943L);
      longArray0[1] = (long) '';
      longArray0[2] = (long) (byte) (-90);
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) (int)integerArray0[1];
      longArray0[5] = (-5155L);
      longArray0[6] = (long) (int)integerArray0[1];
      ArrayUtils.shift(longArray0, (int) integerArray0[2]);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new long[] {(-5155L), (-3505L), (-1943L), 127L, (-90L), 74L, (-3505L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)117);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1.0F);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3095.5938850759);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)34);
      assertNotNull(byte0);
      assertEquals((byte)34, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-120));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) integer0, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, (int) (byte) (-120));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)43);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)43}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3845, 3845);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(3845);
      assertNotNull(integer1);
      assertEquals(3845, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[5];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (-3003.28071103391));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte[] byteArray0 = new Byte[17];
      Byte byte0 = new Byte((byte)34);
      assertNotNull(byte0);
      assertEquals((byte)34, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)7);
      assertNotNull(byteArray1);
      assertEquals(17, byteArray0.length);
      assertEquals(17, byteArray1.length);
      
      Integer integer2 = new Integer((-222));
      assertNotNull(integer2);
      assertEquals((-222), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      String string0 = ArrayUtils.toString((Object) integer2);
      assertNotNull(string0);
      assertEquals("-222", string0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)35);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)2;
      Byte byte3 = new Byte((byte)2);
      assertNotNull(byte3);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[1] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)51, (byte)2}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) byte2;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-323), (-969));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 2L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (-323);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) byte2;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-969);
      doubleArray1[1] = (double) (byte)2;
      doubleArray1[2] = (double) (byte)0;
      doubleArray1[3] = (double) (byte)51;
      doubleArray1[4] = (double) (byte)0;
      doubleArray1[5] = (double) byte0;
      doubleArray1[6] = (double) 2L;
      doubleArray1[7] = (double) (-323);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-969.0), 2.0, 0.0, 51.0, 0.0, 51.0, 2.0, (-323.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-323.0), 0.0, 2.0, 51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(14, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2113.3796539127);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4094.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2113.3796539127), 0.0, (-4094.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = '\\';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = 'e';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'e', 'e', '\\', '~', '~', 'e'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (-2272.8362F));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray1 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-3505);
      float[] floatArray0 = new float[1];
      intArray0[2] = (-3505);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[2] = 'J';
      charArray0[3] = 'j';
      charArray0[5] = 'j';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'', 'j', 'J', 'j', '\u0000', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 'J');
      assertNotNull(object0);
      assertEquals('J', object0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      assertNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[3] = (Integer) (-3505);
      integerArray0[1] = (Integer) (-3505);
      integerArray0[2] = (Integer) (-3505);
      integerArray0[3] = (Integer) (-3505);
      integerArray0[4] = (Integer) (-3505);
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[2]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      ArrayUtils.shift(byteArray0, (int) (byte)1, 2, 1626);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)1, (byte)0, (byte) (-1), (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 'Q';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1980.0, 81.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 81L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1980.0;
      doubleArray1[1] = 1980.0;
      doubleArray1[2] = 1980.0;
      doubleArray1[3] = 1980.0;
      doubleArray1[4] = (double) 'T';
      doubleArray1[5] = (double) 'Q';
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) 81L;
      doubleArray1[8] = (-1092.0);
      ArrayUtils.swap(doubleArray1, (-2126008810), (-516));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1980.0, 1980.0, 1980.0, 1980.0, 84.0, 81.0, 0.0, 81.0, (-1092.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) 84.0;
      doubleArray2[1] = (Double) (-1092.0);
      doubleArray2[2] = (Double) (-1092.0);
      doubleArray2[3] = (Double) 1980.0;
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertNotNull(doubleArray3);
      assertSame(doubleArray2, doubleArray3);
      assertSame(doubleArray3, doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Boolean boolean0 = new Boolean("$g|/KwyKHn,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      
      Boolean boolean4 = Boolean.valueOf(",3Zt!GU*uy!~qEJ~JjL");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'Y';
      charArray0[3] = 'b';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'b', 'b', 'Y', 'b', 'Y', 'Y'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 254;
      doubleArray0[1] = (double) 'b';
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-20.0);
      ArrayUtils.shift(doubleArray0, 2, (-2345), (int) (short) (-398));
      assertArrayEquals(new double[] {254.0, 98.0, (-1.0), (-20.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'l';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'm';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 109.0, (-1707.2407786077786));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {109.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-160L);
      ArrayUtils.swap(longArray0, 959, 78, (-3871));
      assertArrayEquals(new long[] {(-160L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2077;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 959, 78);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2077}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray1, 2077);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {2077}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-3871), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3871, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1912.0);
      ArrayUtils.swap(doubleArray0, 21, 21, 304);
      assertArrayEquals(new double[] {(-1912.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1), (-1));
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1), (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (-88), (-88), 1138);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'J', 'J', 'J'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Integer integer0 = new Integer((-429));
      assertNotNull(integer0);
      assertEquals((-429), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-429), object0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (-429));
      assertNull(floatArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-90);
      ArrayUtils.shift(byteArray0, (int) (byte) (-1), (-1646), 1626);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-1), (byte) (-90)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.swap((double[]) null, (-429), (int) (byte) (-1), (int) (byte) (-1));
      ArrayUtils.swap((float[]) null, (-1), 13, (-429));
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) 'J';
      intArray0[4] = (-2895);
      intArray0[5] = 13;
      intArray0[6] = (-1);
      intArray0[7] = (int) 'J';
      intArray0[8] = (-1646);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1646), 74, (-1), 13, (-2895), 74, (-1), (-1), (-1)}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)12);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)12, (byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)12;
      longArray0[1] = (long) (byte)12;
      longArray0[2] = (long) (byte) (-104);
      longArray0[3] = (long) (byte)12;
      ArrayUtils.shift(longArray0, (int) (byte)0, (int) (byte) (-104), (int) (byte)12);
      assertArrayEquals(new long[] {12L, 12L, (-104L), 12L}, longArray0);
      assertEquals(4, longArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 3810L);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {12L, 12L, (-104L), 12L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = '0';
      charArray0[2] = 'M';
      charArray0[3] = 'W';
      charArray0[4] = 'N';
      charArray0[5] = ']';
      charArray0[6] = ',';
      charArray0[7] = '#';
      charArray0[8] = ',';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '#', 1);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'B', '0', 'M', 'W', 'N', ']', ',', '#', ','}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'l';
      intArray0[1] = 1879048192;
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) 'l';
      intArray0[4] = (int) 'l';
      intArray0[5] = (int) 'p';
      intArray0[7] = 1879048192;
      Integer integer0 = new Integer(108);
      assertNotNull(integer0);
      assertEquals(108, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = (Integer)ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) 1879048192);
      assertNotNull(float0);
      assertEquals(1.87904819E9F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1974.23);
      assertNotNull(float1);
      assertEquals(1974.23F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 112, (-754));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {108, 1879048192, 112, 108, 108, 112, 0, 1879048192, 0}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MutableInt mutableInt0 = new MutableInt((Number) integer2);
      assertNotNull(mutableInt0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      
      Integer integer3 = mutableInt0.getValue();
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) integer3, 108);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, object0, 16);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1125));
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1125));
      assertNotNull(integer0);
      assertEquals((-1125), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-1125);
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = (-4504);
      intArray0[5] = (-4504);
      intArray0[6] = (int) integerArray0[0];
      intArray0[7] = (-4504);
      ArrayUtils.swap(intArray0, 2528, (-2265), (-4504));
      assertArrayEquals(new int[] {2, 2, (-1125), (-1125), (-4504), (-4504), (-1125), (-4504)}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-2165));
      assertArrayEquals(new int[] {(-4504), (-1125), (-4504), 2, 2, (-1125), (-1125), (-4504)}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4202;
      shortArray0[1] = (short)3396;
      shortArray0[2] = (short) (-711);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)4202, (short)3396, (short) (-711)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-711);
      floatArray0[1] = (float) 2528;
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, floatArray0);
      assertNull(floatArray1);
      assertArrayEquals(new float[] {(-711.0F), 2528.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 977);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 'Q';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1980.0, 81.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      float[] floatArray2 = ArrayUtils.insert((-1), floatArray0, (float[]) null);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 112, 3, 112);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'o';
      charArray0[2] = 'J';
      charArray0[3] = '8';
      charArray0[4] = 'X';
      charArray0[5] = '';
      charArray0[6] = 'V';
      charArray0[7] = '=';
      charArray0[8] = 'a';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1), 'Y');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145285608);
      ArrayUtils.swap(intArray0, 1136, (-2144283224), (-1));
      assertArrayEquals(new int[] {(-2145285608)}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1136;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1136L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1136L}, longArray0);
      assertArrayEquals(new long[] {1136L, 1136L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2144283224);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-2144283224));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-2.14428326E9F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)0;
      ArrayUtils.swap(byteArray0, 6, (-2145285608), (int) (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte) (-83), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 's';
      charArray0[3] = 'g';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'g';
      charArray1[1] = 's';
      charArray1[2] = 'g';
      charArray1[3] = 'g';
      charArray1[4] = 'g';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'g', 'g', 's', 'g'}, charArray0);
      assertArrayEquals(new char[] {'g', 's', 'g', 'g', 'g'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-3059));
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray3 = ArrayUtils.removeElement(charArray0, 'g');
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'g', 'g', 's', 'g'}, charArray0);
      assertArrayEquals(new char[] {'g', 's', 'g'}, charArray3);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      
      char[] charArray4 = ArrayUtils.removeElements(charArray1, charArray2);
      assertNotNull(charArray4);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray4);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray4);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray4);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray4, charArray1);
      assertNotSame(charArray4, charArray3);
      assertNotSame(charArray4, charArray0);
      assertNotSame(charArray4, charArray2);
      assertArrayEquals(new char[] {'g', 'g', 's', 'g'}, charArray0);
      assertArrayEquals(new char[] {'g', 's', 'g', 'g', 'g'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'g', 's', 'g', 'g', 'g'}, charArray4);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertEquals(0, charArray2.length);
      assertEquals(5, charArray4.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray3));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray3));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray4.equals((Object)charArray2));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.valueOf((-3059));
      assertNotNull(integer0);
      assertEquals((-3059), (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)89, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) 'p', 2849);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2849;
      longArray0[1] = (long) 'l';
      int[] intArray0 = new int[4];
      intArray0[0] = (-1792);
      intArray0[1] = (int) 'l';
      intArray0[2] = 2849;
      intArray0[3] = (-1396);
      ArrayUtils.reverse(intArray0, 17, (-5));
      assertArrayEquals(new int[] {(-1792), 108, 2849, (-1396)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-1792);
      objectArray0[1] = (Object) (-1792);
      objectArray0[2] = (Object) 2849L;
      objectArray0[4] = (Object) 'l';
      objectArray0[0] = (Object) (-1396);
      objectArray0[6] = (Object) (-1792);
      objectArray0[7] = (Object) 2849L;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(8, objectArray0.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray0, 'p');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      char[] charArray3 = ArrayUtils.addFirst(charArray2, 'l');
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray2);
      assertArrayEquals(new char[] {'l', 'l'}, charArray3);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray2.length);
      assertEquals(2, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 108);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift((Object[]) doubleArray0, (-1));
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-83);
      longArray0[3] = (long) (-83);
      ArrayUtils.swap(longArray0, 5, (-1));
      assertArrayEquals(new long[] {(-1L), (-1L), (-83L), (-83L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-83L), (-83L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = '\\';
      charArray0[2] = 'E';
      charArray0[3] = '=';
      charArray0[4] = '\"';
      charArray0[5] = '.';
      charArray0[6] = 'z';
      charArray0[7] = '$';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 5);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'h', '\\', 'E', '=', '\"', '.', 'z', '$'}, charArray0);
      assertArrayEquals(new char[] {'h', '\\', 'E', '=', '\"'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'E';
      charArray0[2] = '}';
      charArray0[3] = ':';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ':';
      charArray1[1] = '';
      charArray1[2] = '';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'', 'E', '}', ':'}, charArray0);
      assertArrayEquals(new char[] {':', '', ''}, charArray1);
      assertArrayEquals(new char[] {'E', '}'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift((int[]) null, (-429));
      char[] charArray3 = ArrayUtils.removeElement(charArray1, '5');
      assertNotNull(charArray3);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertArrayEquals(new char[] {':', '', ''}, charArray1);
      assertArrayEquals(new char[] {':', '', ''}, charArray3);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray3.length);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ArrayUtils.swap(byteArray0, Integer.MAX_VALUE, (int) (byte) (-1), (-146));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-146), (-222), Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 59, (int) (byte) (-1));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = '(';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = 'H';
      charArray1[2] = 'Q';
      charArray1[3] = '(';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'H', 'H', '(', 'H', 'H', 'H'}, charArray0);
      assertArrayEquals(new char[] {'(', 'H', 'Q', '('}, charArray1);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H'}, charArray2);
      assertEquals(6, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 0, 2143);
      assertNull(doubleArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2905);
      longArray0[3] = (long) (-2905);
      longArray0[4] = (long) (-2905);
      longArray0[5] = (long) (-2905);
      longArray0[6] = (long) (-2905);
      longArray0[7] = (-191L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-2905L), 0L, 0L, (-2905L), (-2905L), (-2905L), (-2905L), (-191L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.reverse(longArray0, (-2905), 1);
      assertArrayEquals(new long[] {(-2905L), 0L, 0L, (-2905L), (-2905L), (-2905L), (-2905L), (-191L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      char[] charArray0 = new char[22];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = ')';
      charArray0[3] = '=';
      charArray0[4] = 'u';
      ArrayUtils.swap(charArray0, (-2905), (-2905));
      assertEquals(22, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2905), 1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2947;
      intArray0[1] = (int) '=';
      intArray0[2] = (int) '=';
      intArray0[3] = (int) 'o';
      intArray0[4] = (int) ')';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2905L), 0L, 0L, (-2905L), (-2905L), (-2905L), (-2905L), (-191L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 2947;
      integerArray0[1] = (Integer) 61;
      integerArray0[2] = (Integer) 61;
      integerArray0[3] = (Integer) 61;
      integerArray0[4] = (Integer) 111;
      integerArray0[5] = (Integer) 41;
      integerArray0[6] = (Integer) 41;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3716), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3716, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(0, object1);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3845, (-714));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[5];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.shift(doubleArray0, 0, 91, (-714));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1125));
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1125));
      assertNotNull(integer0);
      assertEquals((-1125), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)79;
      intArray0[1] = (int) (short)79;
      intArray0[2] = (-1125);
      intArray0[3] = 4054;
      intArray0[4] = 4054;
      intArray0[5] = 4054;
      intArray0[6] = (int) integerArray0[0];
      intArray0[7] = (int) (short)79;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 79;
      doubleArray0[2] = (double) (-1125);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 71.5456875);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 79.0, (-1125.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 79.0, (-1125.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.shift(charArray0, 0, 79, 79);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      Character character1 = new Character('#');
      assertNotNull(character1);
      assertEquals('#', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character('U');
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char char0 = '2';
      Character character0 = Character.valueOf('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('2');
      assertNotNull(character1);
      assertEquals('2', (char)character1);
      
      characterArray0[1] = character1;
      char char1 = 'm';
      Character character2 = Character.valueOf('m');
      assertNotNull(character2);
      assertEquals('m', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char1);
      assertNotNull(character3);
      assertEquals('m', (char)character3);
      assertFalse(char1 == char0);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      
      characterArray0[3] = character3;
      Character character4 = new Character('2');
      assertNotNull(character4);
      assertEquals('2', (char)character4);
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char1));
      
      characterArray0[4] = character4;
      Character character5 = new Character('j');
      assertNotNull(character5);
      assertEquals('j', (char)character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      
      characterArray0[5] = character5;
      Character character6 = new Character('#');
      assertNotNull(character6);
      assertEquals('#', (char)character6);
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char1));
      
      characterArray0[6] = character6;
      Character character7 = new Character('!');
      assertNotNull(character7);
      assertEquals('!', (char)character7);
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)char1));
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      charArray0[1] = '#';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'b');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'2', '#'}, charArray0);
      assertArrayEquals(new char[] {'2', '#'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '5';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '5';
      floatArray0[1] = (float) (-3517);
      floatArray0[2] = (float) '8';
      floatArray0[3] = (float) '8';
      floatArray0[4] = (float) '5';
      floatArray0[5] = (float) '5';
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {53.0F, 53.0F, 56.0F, 56.0F, (-3517.0F), 53.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Integer integer0 = new Integer((-1593));
      assertNotNull(integer0);
      assertEquals((-1593), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-1593), object0);
      
      Float float0 = new Float((double) 53.0F);
      assertNotNull(float0);
      assertEquals(53.0F, (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[5];
      floatArray1[0] = (Float) (-3517.0F);
      floatArray1[1] = (Float) 56.0F;
      floatArray1[2] = (Float) 53.0F;
      floatArray1[3] = (Float) 53.0F;
      floatArray0[2] = 53.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) floatArray1[2]);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-3517.0F), 56.0F, 53.0F, 53.0F, 53.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-3517));
      assertNotNull(integer1);
      assertEquals((-3517), (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[5]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      
      floatArray3[0] = (float) (int)integerArray0[5];
      floatArray3[1] = (float) floatArray1[0];
      floatArray3[2] = (float) '8';
      floatArray3[3] = (float) (int)integerArray0[5];
      floatArray3[4] = (float) '8';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {53.0F, 53.0F, 53.0F, 56.0F, (-3517.0F), 53.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1593.0F), (-3517.0F), 56.0F, (-1593.0F), 56.0F}, floatArray3, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1518, 111);
      Integer integer0 = new Integer((-4094));
      assertNotNull(integer0);
      assertEquals((-4094), (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (int)integerArray0[2];
      floatArray0[1] = (float) (-4094);
      floatArray0[2] = (float) (int)integerArray0[1];
      floatArray0[3] = (float) (-4094);
      floatArray0[4] = (float) (int)integerArray0[4];
      floatArray0[5] = 127.55213F;
      floatArray0[6] = (float) (-4094);
      floatArray0[7] = (float) (-4094);
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-4094.0F), (-4094.0F), (-4094.0F), (-4094.0F), (-4094.0F), 127.55213F, (-4094.0F), (-4094.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean3);
      assertArrayEquals(new float[] {(-4094.0F), (-4094.0F), (-4094.0F), (-4094.0F), (-4094.0F), 127.55213F, (-4094.0F), (-4094.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 2258;
      intArray0[2] = 15;
      intArray0[3] = 3538;
      intArray0[4] = (-914);
      intArray0[5] = 3538;
      ArrayUtils.swap(intArray0, 0, (-1227), 3538);
      assertArrayEquals(new int[] {0, 2258, 15, 3538, (-914), 3538}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2258, 15, 3538, (-914), 3538}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '[';
      charArray0[2] = '!';
      charArray0[3] = '_';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = '<';
      charArray0[7] = '%';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '|', 15);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'_', '[', '!', '_', 'U', 'U', '<', '%'}, charArray0);
      assertEquals(8, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'U';
      floatArray0[1] = (float) '<';
      floatArray0[2] = (float) '[';
      floatArray0[3] = (-2246.2375F);
      floatArray0[4] = (float) (-914);
      floatArray0[5] = (float) (-914);
      floatArray0[6] = (float) '_';
      floatArray0[7] = (float) 2258;
      floatArray0[8] = (float) (-914);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-4489.409F), (-914));
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {85.0F, 60.0F, 91.0F, (-2246.2375F), (-914.0F), (-914.0F), 95.0F, 2258.0F, (-914.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2128L;
      floatArray0[1] = (float) 2128L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 2128L, (-2418));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2128.0F, 2128.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 5, 5);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(6, objectArray1.length);
      assertEquals(6, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap(byteArray0, 176, 2145348547, 6);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '9';
      charArray0[2] = '\"';
      charArray0[3] = 'c';
      charArray0[4] = 'S';
      charArray0[5] = '@';
      charArray0[6] = '4';
      charArray0[7] = 'g';
      charArray0[8] = 'w';
      int int0 = ArrayUtils.indexOf(charArray0, '<');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'<', '9', '\"', 'c', 'S', '@', '4', 'g', 'w'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 189);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-1));
      assertNull(floatArray0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-305L), 8191);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      BitSet bitSet0 = new BitSet(5);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shift(booleanArray0, 189, 8191, (int) (byte) (-20));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 2, 4, 1930);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-1766), 3720);
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 8191;
      doubleArray0[1] = (double) (byte) (-20);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 3720;
      doubleArray0[4] = (-2944.30505159589);
      doubleArray0[5] = (double) 3720;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 1108.78771496, 3720, (double) (-1));
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {8191.0, (-20.0), (-1.0), 3720.0, (-2944.30505159589), 3720.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 1629, 0);
      assertNull(integerArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-922);
      shortArray0[1] = (short)12;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)12, (short) (-922)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[4] = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000', (int) (short) (-922));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'u', 'u', 'u', '\u0000', 'u'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{3}", bitSet0.toString());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-922);
      ArrayUtils.reverse(floatArray0, 6, (int) (short)12);
      assertArrayEquals(new float[] {(-922.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short) (-922);
      floatArray1[1] = (float) (-2127031422);
      floatArray1[2] = (float) 'u';
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {(-922.0F), (-2.12703142E9F), 117.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-922.0F), (-2.12703142E9F), 117.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(charArray0, 63, 63, (int) (short)12);
      assertArrayEquals(new char[] {'u', 'u', 'u', '\u0000', 'u'}, charArray0);
      assertEquals(5, charArray0.length);
      
      float[] floatArray3 = new float[2];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      
      floatArray3[0] = (float) 'u';
      floatArray3[1] = Float.NaN;
      float[] floatArray4 = ArrayUtils.addFirst(floatArray3, (-398.1F));
      assertNotNull(floatArray4);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray1);
      assertArrayEquals(new float[] {117.0F, Float.NaN}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {(-398.1F), 117.0F, Float.NaN}, floatArray4, 0.01F);
      assertEquals(2, floatArray3.length);
      assertEquals(3, floatArray4.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-374.5395189751093), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((-374.5395189751093), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)113);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray1, true);
      assertNotNull(bitSet1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(10, bitSet1.cardinality());
      assertEquals(10, bitSet1.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}", bitSet1.toString());
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte)113);
      assertNotNull(integer0);
      assertEquals(113, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(113, (int)integer1);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer1);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)113;
      shortArray0[1] = (short) (byte) (-92);
      shortArray0[2] = (short) (byte) (-92);
      shortArray0[3] = (short)10;
      shortArray0[4] = (short) (byte) (-92);
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte) (-92);
      shortArray0[8] = (short) (byte) (-92);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)113, (short) (-92), (short) (-92), (short)10, (short) (-92), (short)0, (short)0, (short) (-92), (short) (-92)}, shortArray0);
      assertEquals(18, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2274.0));
      assertNotNull(double0);
      assertEquals((-2274.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-2274.0), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2645.0));
      assertNotNull(double2);
      assertEquals((-2645.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2274.0), (-2274.0), (-2645.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2001);
      assertNotNull(integer0);
      assertEquals(2001, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2001);
      assertNotNull(integer1);
      assertEquals(2001, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1474));
      assertNotNull(integer2);
      assertEquals((-1474), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-764);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-764), (-764));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      bitSet0.set(Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("{0, 2147483647}", bitSet0.toString());
      assertEquals(Integer.MIN_VALUE, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-125);
      BitSet bitSet1 = BitSet.valueOf(byteArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-127), (byte)60, (byte)8, (byte) (-125)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(40, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(16, bitSet1.cardinality());
      assertEquals("{0, 1, 3, 4, 5, 6, 8, 15, 18, 19, 20, 21, 27, 32, 33, 39}", bitSet1.toString());
      
      bitSet0.flip(1534);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertEquals(Integer.MIN_VALUE, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1534, 2147483647}", bitSet0.toString());
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 1534;
      doubleArray0[2] = (double) (-764);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)8;
      longArray0[1] = (long) (byte) (-125);
      longArray0[2] = (long) (-764);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)60);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-127), (byte)8, (byte) (-125)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-127), (byte)60, (byte)8, (byte) (-125)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-125);
      floatArray0[1] = (float) (-764L);
      BitSet bitSet2 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-125), 2595);
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertArrayEquals(new float[] {(-125.0F), (-764.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 1534.0, (-764.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Integer integer1 = new Integer((-20));
      assertNotNull(integer1);
      assertEquals((-20), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      
      int int0 = mutableInt0.incrementAndGet();
      assertEquals((-1595), int0);
      assertEquals((-1595), (int)mutableInt0.getValue());
      assertEquals((-1595), (int)mutableInt0.toInteger());
      assertEquals((-1595L), mutableInt0.longValue());
      assertEquals((byte) (-59), mutableInt0.byteValue());
      assertEquals((-1595.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1595), mutableInt0.shortValue());
      assertEquals((-1595), mutableInt0.intValue());
      assertEquals("-1595", mutableInt0.toString());
      assertEquals((-1595.0), mutableInt0.doubleValue(), 0.01);
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1595), (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1595), (int)mutableInt0.getValue());
      assertEquals((-1595), (int)mutableInt0.toInteger());
      assertEquals((-1595L), mutableInt0.longValue());
      assertEquals((byte) (-59), mutableInt0.byteValue());
      assertEquals((-1595.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1595), mutableInt0.shortValue());
      assertEquals((-1595), mutableInt0.intValue());
      assertEquals("-1595", mutableInt0.toString());
      assertEquals((-1595.0), mutableInt0.doubleValue(), 0.01);
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(1796);
      assertNotNull(integer4);
      assertEquals(1796, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 64);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)65;
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short)65);
      assertEquals(0, int2);
      assertArrayEquals(new short[] {(short)65}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)65;
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 0, (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)65}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      int int0 = 2147483610;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2147483610;
      intArray0[2] = 2147483610;
      intArray0[3] = 0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 2147483610, 2147483610, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals("{0, 1, 3, 5, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2147483610;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer integer0 = new Integer(2147483610);
      assertNotNull(integer0);
      assertEquals(2147483610, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0, 0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      
      MutableInt mutableInt0 = new MutableInt(384);
      assertNotNull(mutableInt0);
      assertEquals(384, mutableInt0.intValue());
      assertEquals(384.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)384, mutableInt0.shortValue());
      assertEquals(384.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(384, (int)mutableInt0.getValue());
      assertEquals((byte) (-128), mutableInt0.byteValue());
      assertEquals(384, (int)mutableInt0.toInteger());
      assertEquals("384", mutableInt0.toString());
      assertEquals(384L, mutableInt0.longValue());
      
      Integer integer2 = mutableInt0.getValue();
      assertNotNull(integer2);
      assertEquals(384, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(384, mutableInt0.intValue());
      assertEquals(384.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)384, mutableInt0.shortValue());
      assertEquals(384.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(384, (int)mutableInt0.getValue());
      assertEquals((byte) (-128), mutableInt0.byteValue());
      assertEquals(384, (int)mutableInt0.toInteger());
      assertEquals("384", mutableInt0.toString());
      assertEquals(384L, mutableInt0.longValue());
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer2);
      assertNotNull(object0);
      assertEquals(384, object0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)int0));
      assertEquals(384, mutableInt0.intValue());
      assertEquals(384.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)384, mutableInt0.shortValue());
      assertEquals(384.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(384, (int)mutableInt0.getValue());
      assertEquals((byte) (-128), mutableInt0.byteValue());
      assertEquals(384, (int)mutableInt0.toInteger());
      assertEquals("384", mutableInt0.toString());
      assertEquals(384L, mutableInt0.longValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-15);
      longArray0[1] = (long) (byte) (-15);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-15L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-15L), (-15L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1069, 769);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(1069);
      assertNotNull(integer0);
      assertEquals(1069, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object1);
      assertEquals(0, object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      
      String string0 = ArrayUtils.toString(object0, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3845;
      boolean boolean0 = ArrayUtils.contains(longArray0, 113L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {3845L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, (-3976.715949));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'n';
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {',', 'n', '\u0000', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-68);
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)89, (byte)64, (byte)2, (byte)5, (byte)2, (byte)126, (byte) (-118), (byte) (-68)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.shift(booleanArray1, (int) (byte) (-118), (int) (byte)89, 217);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean2));
      
      ArrayUtils.shift(booleanArray1, (int) (byte)5, (int) (byte) (-118), (int) (byte)2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean2));
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-68));
      ArrayUtils.shift((int[]) null, (int) (byte)2, (int) (byte)2, 69);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 1293, 1293, 1293);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      Integer integer0 = new Integer((-2134165226));
      assertNotNull(integer0);
      assertEquals((-2134165226), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 1887, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1887, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), (Integer) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)6);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)6}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)6;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {6.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((short)6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      assertEquals(7, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int int0 = 2;
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(13);
      assertNotNull(integer4);
      assertEquals(13, (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(13);
      assertNotNull(integer5);
      assertEquals(13, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      assertNotNull(integer6);
      assertEquals(6, (int)integer6);
      assertEquals(7, integerArray0.length);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertNotNull(integer7);
      assertEquals(2, (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer2));
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, (int) integerArray0[6], integer7);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2258;
      intArray0[2] = 15;
      intArray0[3] = 3538;
      intArray0[4] = (-914);
      intArray0[5] = 3538;
      ArrayUtils.swap(intArray0, 0, (-1227), 3538);
      assertArrayEquals(new int[] {2, 2258, 15, 3538, (-914), 3538}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2258, 15, 3538, (-914), 3538}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '[';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '[';
      floatArray0[1] = (float) 2;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {91.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {91.0F, 2.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertNotNull(byte0);
      assertEquals((byte) (-25), (byte)byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-124L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2950);
      assertNull(shortArray0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1993L);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean3;
      booleanArray0[5] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[2] = (-1L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-659));
      assertNotNull(integer0);
      assertEquals((-659), (int)integer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-659);
      intArray0[1] = (-659);
      intArray0[2] = (-659);
      intArray0[3] = (-659);
      intArray0[4] = (-659);
      intArray0[5] = (-659);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 905;
      intArray0[2] = (-639);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1118);
      intArray0[1] = (int) (byte) (-81);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)21;
      intArray0[4] = (int) (byte) (-81);
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)21);
      assertNull(shortArray0);
      
      int int0 = 717;
      ArrayUtils.shift((Object[]) null, 717, 726, (-81));
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert(1780, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) double1;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2146142611);
      assertNotNull(integer1);
      assertEquals(2146142611, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Float float0 = new Float((-2531.9069));
      assertNotNull(float0);
      assertEquals((-2531.907F), (float)float0, 0.01F);
      
      Float float1 = new Float((-1.0));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-1.0));
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2531.907F), (-2531.907F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1879048192;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      long[] longArray1 = ArrayUtils.insert(1, (long[]) null, longArray0);
      assertNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1879048192L, 1L, 1L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[3] = (-3078L);
      longArray0[2] = (-712L);
      int[] intArray0 = new int[2];
      intArray0[0] = 1518;
      intArray0[1] = 1518;
      ArrayUtils.swap(intArray0, 113, 113);
      assertArrayEquals(new int[] {1518, 1518}, intArray0);
      assertEquals(2, intArray0.length);
      
      Integer integer0 = new Integer((-1272));
      assertNotNull(integer0);
      assertEquals((-1272), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ArrayUtils.reverse(longArray0, (-2062), 256);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-3078L), (-712L), 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-3171));
      assertNotNull(integer0);
      assertEquals((-3171), (int)integer0);
      
      Integer integer1 = Integer.valueOf((-3171));
      assertNotNull(integer1);
      assertEquals((-3171), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-403));
      assertNotNull(integer2);
      assertEquals((-403), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      
      Integer integer3 = mutableInt0.toInteger();
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      
      Integer integer4 = Integer.valueOf(1);
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = new Integer((-3171));
      assertNotNull(integer5);
      assertEquals((-3171), (int)integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-3171);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 160);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-3171)}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)65);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 64);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-3171)}, intArray0);
      assertArrayEquals(new int[] {0, (-3171)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-577), (int) (short) (-577));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = '`';
      charArray0[2] = 'f';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'V', '`', 'f'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '`';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {96.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, (-1152));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-5), (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2160;
      floatArray0[1] = (float) 2160;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2160.0F);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {2160.0F, 2160.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-305L), 8191);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      BitSet bitSet0 = new BitSet(5);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (-515.717F), 8191);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-93.405);
      int int0 = 123;
      Integer integer0 = new Integer(123);
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 154);
      assertNotNull(intArray0);
      assertSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) 154;
      floatArray0[7] = (float) int0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), int0);
      assertEquals(2, int1);
      assertArrayEquals(new float[] {123.0F, 123.0F, (-1.0F), 123.0F, 123.0F, 123.0F, 154.0F, 123.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[3] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      long[] longArray0 = new long[2];
      charArray0[2] = 'M';
      longArray0[1] = (long) 'M';
      ArrayUtils.shift(longArray0, (-2718), (int) 'M', (int) 'M');
      assertArrayEquals(new long[] {77L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-2718));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {77L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.7);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(1, int1);
      assertArrayEquals(new long[] {77L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap(booleanArray0, (-1), (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 1369, (-769));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character character0 = Character.valueOf('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      characterArray0[4] = character1;
      characterArray0[5] = character1;
      characterArray0[6] = character1;
      characterArray0[7] = character0;
      characterArray0[8] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '=');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'t', 't', 't', '!', 't', 't', 't', '!', '!'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      
      ArrayUtils.swap(intArray0, 7, 120, 881);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "java.lang.Integer");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, characterArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (char)character1;
      floatArray0[1] = (float) '!';
      floatArray0[2] = (float) 881;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-769), (int) character1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {116.0F, 33.0F, 881.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {116.0F, 33.0F, 881.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(character1.equals((Object)character0));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), 822);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      ArrayUtils.swap((int[]) null, (-3845), 2806, 1551);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3072, 2144195005);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 1551, 3110);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = 'G';
      charArray0[2] = 'Q';
      charArray0[3] = 'v';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'|', 'G', 'Q', 'v'}, charArray0);
      assertArrayEquals(new char[] {'|', 'G', 'Q', 'v', '|', 'G', 'Q', 'v'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte)84, (-1));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-2942L));
      assertNotNull(long0);
      assertEquals((-2942L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-895L));
      assertNotNull(long1);
      assertEquals((-895L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1960L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2942L), (-895L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(longArray1);
      assertFalse(boolean2);
      assertArrayEquals(new long[] {(-2942L), (-895L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-1790);
      shortArray0[3] = (short)154;
      shortArray0[4] = (short)2133;
      Integer integer0 = new Integer((short)154);
      assertNotNull(integer0);
      assertEquals(154, (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      boolean boolean3 = ArrayUtils.isSameLength(longArray2, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertFalse(boolean3);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-2942L), (-895L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertTrue(boolean3 == boolean2);
      assertFalse(longArray1.equals((Object)longArray2));
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertArrayEquals(new char[] {'P'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2976.2;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2976.2);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2976.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray1 = new long[4];
      longArray1[0] = 3509L;
      longArray1[1] = (-1889L);
      longArray1[2] = 21L;
      longArray1[3] = 2610L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {3509L, (-1889L), 21L, 2610L}, longArray1);
      assertEquals(4, longArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {2976.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      MockRandom mockRandom0 = new MockRandom(1689L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse((byte[]) null);
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)14);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-434));
      assertNotNull(short1);
      assertEquals((short) (-434), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertEquals((short)14, (short)short2);
      assertEquals(3, shortArray0.length);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)14, (short) (-434), (short)14}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)14, (short) (-434), (short)14}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      byte[] byteArray0 = ArrayUtils.insert((int) (short) (-434), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) (short) (-434);
      longArray2[1] = (long) (short)shortArray0[1];
      longArray2[2] = (long) 0;
      longArray2[3] = (long) (short) (-434);
      longArray2[4] = (long) 0;
      longArray2[5] = (long) (short)shortArray0[1];
      longArray2[6] = (long) (byte)102;
      ArrayUtils.swap(longArray2, (int) (short) (-434), (-1));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-434L), (-434L), 0L, (-434L), 0L, (-434L), 102L}, longArray2);
      assertEquals(7, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)shortArray0[1];
      doubleArray0[1] = (double) 102L;
      doubleArray0[2] = (-566.349207);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 804.9425553294335;
      doubleArray0[5] = (double) (-434L);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-434.0), 102.0, (-566.349207), 0.0, 804.9425553294335, (-434.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1980.4562F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (-1028));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2905);
      longArray0[3] = (long) (-2905);
      longArray0[4] = (long) (-2905);
      longArray0[5] = (long) (-2905);
      longArray0[6] = (long) (-2905);
      longArray0[7] = (-191L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-2905L), 0L, 0L, (-2905L), (-2905L), (-2905L), (-2905L), (-191L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.reverse(longArray0, (-2905), 1);
      assertArrayEquals(new long[] {(-2905L), 0L, 0L, (-2905L), (-2905L), (-2905L), (-2905L), (-191L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      char[] charArray0 = new char[22];
      charArray0[0] = 'o';
      charArray0[1] = 'm';
      charArray0[2] = ')';
      charArray0[3] = '=';
      charArray0[4] = 'u';
      ArrayUtils.swap(charArray0, (-2905), (-2905));
      assertEquals(22, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2905), 1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2947;
      intArray0[1] = (int) '=';
      intArray0[2] = (int) '=';
      intArray0[3] = (int) 'o';
      intArray0[4] = (int) ')';
      intArray0[5] = (int) 'o';
      intArray0[6] = (int) (short) (-1);
      intArray0[7] = (-2150);
      boolean boolean1 = ArrayUtils.contains(intArray0, 1);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {2947, 61, 61, 111, 41, 111, (-1), (-2150)}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 16.416249440376358;
      doubleArray0[2] = 0.0;
      char char0 = 'a';
      Character character0 = Character.valueOf('a');
      assertNotNull(character0);
      assertEquals('a', (char)character0);
      
      Character character1 = new Character('a');
      assertNotNull(character1);
      assertEquals('a', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character0;
      characterArray0[5] = character1;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '4');
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'a', 'a', 'a', 'a', 'a', 'a'}, charArray2);
      assertEquals(6, charArray2.length);
      assertEquals(6, characterArray0.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) char0;
      ArrayUtils.swap(intArray0, 881, 1116, (int) character1);
      assertArrayEquals(new int[] {97, 97}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-1L));
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "zZKX<");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, characterArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (char)character1;
      floatArray0[1] = (float) (char)character1;
      floatArray0[2] = (float) (char)character1;
      floatArray0[3] = (float) 881;
      floatArray0[4] = (float) (char)character1;
      floatArray0[5] = (-92.0F);
      floatArray0[6] = 4.0F;
      floatArray0[7] = (float) 97;
      floatArray0[8] = (float) (char)character1;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) character1);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {881.0F, (-92.0F), 4.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {97.0F, 97.0F, 97.0F, 881.0F, 97.0F, (-92.0F), 4.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (-1132L);
      longArray0[2] = (-1L);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1629, 1629);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1629;
      ArrayUtils.shift(intArray0, 2, 2, 69);
      assertArrayEquals(new int[] {2, 2, 2, 1629}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      Integer integer0 = new Integer(8192);
      assertNotNull(integer0);
      assertEquals(8192, (int)integer0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2018;
      shortArray0[1] = (short)1017;
      shortArray0[3] = (short) (-3363);
      shortArray0[3] = (short) (-126);
      shortArray0[4] = (short) (-126);
      shortArray0[5] = (short)6;
      ArrayUtils.swap(shortArray0, 60, (int) (short)2018);
      assertArrayEquals(new short[] {(short)2018, (short)1017, (short)0, (short) (-126), (short) (-126), (short)6}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1017;
      floatArray0[1] = (float) (-397);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1017.0F, (-397.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1017;
      intArray0[1] = (int) (short)1017;
      intArray0[2] = 8192;
      intArray0[3] = (-397);
      intArray0[4] = (int) (short) (-3363);
      intArray0[5] = (int) (short)6;
      ArrayUtils.shift(intArray0, 2, 2, (-397));
      assertArrayEquals(new int[] {1017, 1017, 8192, (-397), (-3363), 6}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-19516));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_INT_ARRAY, (int) (short) (-19516), 70, 2247);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-2251.32495291));
      assertNotNull(double3);
      assertEquals((-2251.32495291), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double((-2251.32495291));
      assertNotNull(double4);
      assertEquals((-2251.32495291), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      Double double5 = new Double((double) doubleArray0[0]);
      assertNotNull(double5);
      assertEquals(1.0, (double)double5, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      doubleArray0[1] = double5;
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.reverse((Object[]) booleanArray0, 964, Integer.MAX_VALUE);
      assertEquals(1, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)2426, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      Integer integer0 = new Integer(15);
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      Integer integer1 = new Integer(120);
      assertNotNull(integer1);
      assertEquals(120, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer2 = new Integer(120);
      assertNotNull(integer2);
      assertEquals(120, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry4);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurrences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry6);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntry6, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry6, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry6, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry6, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry6, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry6, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 2849);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2849;
      longArray0[1] = (long) 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.insert(0, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)1);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, 0.0F, 1580);
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) 2849L);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {2849.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 35L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-3491), 1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {35L}, longArray0);
      assertArrayEquals(new long[] {35L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 1389, (-769));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-769);
      longArray0[1] = (long) 1389;
      longArray0[2] = (long) (-769);
      longArray0[3] = (long) (-769);
      longArray0[4] = (long) 1389;
      longArray0[5] = (long) 1389;
      longArray0[6] = (long) 1389;
      longArray0[7] = (long) 1389;
      longArray0[8] = (long) (-769);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3078L), 2);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-769L), 1389L, (-769L), (-769L), 1389L, 1389L, 1389L, 1389L, (-769L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-769), 2320);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-769L), 1389L, (-769L), (-769L), 1389L, 1389L, 1389L, 1389L, (-769L)}, longArray1);
      assertArrayEquals(new long[] {(-769L), 1389L, (-769L), (-769L), 1389L, 1389L, 1389L, 1389L, (-769L)}, longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-3188), (long) 1389);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3188, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray1 = new long[2];
      longArray1[0] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElement(longArray1, (long) (-1));
      assertArrayEquals(new long[] {0L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2950);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2950;
      ArrayUtils.swap(intArray0, 113, 113);
      assertArrayEquals(new int[] {2950}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = new Integer((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = Boolean.valueOf("false");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean3;
      booleanArray0[2] = boolean3;
      booleanArray0[3] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(4, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2950}, intArray1);
      assertArrayEquals(new int[] {2950}, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(9, objectArray0.length);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'E';
      ArrayUtils.swap(intArray0, 0, 6, 0);
      assertArrayEquals(new int[] {69}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift(intArray0, 84);
      assertArrayEquals(new int[] {69}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 469.05362F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'E';
      floatArray0[3] = (float) 69;
      floatArray0[4] = (float) 84;
      floatArray0[5] = (float) 69;
      floatArray0[6] = (float) 69;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {469.05362F, 0.0F, 69.0F, 69.0F, 84.0F, 69.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-99), booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, true}, booleanArray2));
      assertEquals(8, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(7, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "~O/RB2Y/]M.j");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '6');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-81);
      shortArray0[1] = (short) (-1485);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2146749464));
      assertNotNull(integer0);
      assertEquals((-2146749464), (int)integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1974.23;
      doubleArray0[1] = 1974.23;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)722;
      shortArray0[1] = (short)722;
      shortArray0[2] = (short)2607;
      shortArray0[3] = (short)722;
      shortArray0[4] = (short)722;
      shortArray0[5] = (short)722;
      ArrayUtils.shift(shortArray0, (-750), (int) (short)722, (int) (short)2607);
      assertArrayEquals(new short[] {(short)722, (short)722, (short)722, (short)722, (short)722, (short)2607}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = 'A';
      charArray0[4] = 'x';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'x', '}', '}', 'A', 'x'}, charArray1);
      assertArrayEquals(new char[] {'x', '}', '}', 'A', 'x'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2607;
      intArray0[1] = (int) 'x';
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short)722);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)722, (short)722, (short)722, (short)722, (short)722, (short)2607}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-39));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte) (-81), (byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'X';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {88.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {88.0F, 88.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-81);
      intArray0[1] = (-1742);
      intArray0[2] = (int) 'X';
      ArrayUtils.shift(intArray0, (-266), (-2677), (int) (byte)0);
      assertArrayEquals(new int[] {(-81), (-1742), 88}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_INT_ARRAY, (-4826), (-2555), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-10293);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-10293));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-10293)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[3] = (-3078L);
      longArray0[2] = (-712L);
      int[] intArray0 = new int[2];
      intArray0[0] = 1518;
      intArray0[1] = 1518;
      ArrayUtils.swap(intArray0, 113, 113);
      assertArrayEquals(new int[] {1518, 1518}, intArray0);
      assertEquals(2, intArray0.length);
      
      Integer integer0 = new Integer((-1272));
      assertNotNull(integer0);
      assertEquals((-1272), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      boolean boolean2 = ArrayUtils.contains(longArray0, (long) 113);
      assertFalse(boolean2);
      assertArrayEquals(new long[] {0L, 0L, (-712L), (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 1518);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-712L), (-3078L), 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-712L), (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-712L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, (-1272));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-712.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '?');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'?'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2141;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-22182);
      shortArray0[3] = (short) (-3672);
      boolean boolean3 = ArrayUtils.contains(shortArray0, (short) (-3672));
      assertTrue(boolean3);
      assertArrayEquals(new short[] {(short)2141, (short)0, (short) (-22182), (short) (-3672)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, (-5026), 3229, 1745);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1974.23;
      doubleArray0[1] = 1974.23;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)722;
      shortArray0[1] = (short)722;
      shortArray0[2] = (short)2607;
      shortArray0[3] = (short)722;
      shortArray0[4] = (short)722;
      shortArray0[5] = (short)722;
      ArrayUtils.shift(shortArray0, (-750), (int) (short)722, (int) (short)2607);
      assertArrayEquals(new short[] {(short)722, (short)722, (short)722, (short)722, (short)722, (short)2607}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = 'A';
      charArray0[4] = 'x';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'x', '}', '}', 'A', 'x'}, charArray1);
      assertArrayEquals(new char[] {'x', '}', '}', 'A', 'x'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2607;
      intArray0[1] = (int) 'x';
      intArray0[2] = (int) 'A';
      intArray0[3] = (int) '}';
      intArray0[4] = (int) (short)722;
      int int0 = ArrayUtils.indexOf(intArray0, 2090);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2607, 120, 65, 125, 722}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-3505);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-925);
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u', 2208);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (-3505);
      floatArray0[2] = (float) (-3505);
      floatArray0[3] = (float) 2L;
      floatArray0[4] = (float) 63;
      ArrayUtils.reverse(floatArray0, 2, (-3505));
      assertArrayEquals(new float[] {2.0F, (-3505.0F), (-3505.0F), 2.0F, 63.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {2.0F, (-3505.0F), (-3505.0F), 2.0F, 63.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-3505.0F), (-3505.0F), 2.0F, 63.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(charArray0, (-4589), 63, 50);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 4.0F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {2.0F, (-3505.0F), (-3505.0F), 2.0F, 63.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {4.0F, 2.0F, (-3505.0F), (-3505.0F), 2.0F, 63.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-3505.0F), (-3505.0F), 2.0F, 63.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      ArrayUtils.shift((Object[]) byteArray0, (int) (byte)1, (int) (byte)1, (int) (byte)1);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 40, 40, 40);
      int[] intArray0 = new int[2];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 40;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '|', 2880);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 189);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-1));
      assertNull(floatArray0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-305L), 8192);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      BitSet bitSet0 = new BitSet(5);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) (-1));
      assertNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, 109.0F);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-81);
      shortArray0[1] = (short) (-1485);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)21, (-1495));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-81), (short) (-1485)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2146749464));
      assertNotNull(integer0);
      assertEquals((-2146749464), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-81));
      assertNotNull(integer1);
      assertEquals((-81), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 8, 120);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap(doubleArray0, 120, 18688);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1843.6981974525;
      ArrayUtils.swap(doubleArray0, (-1239), 547, 801);
      assertArrayEquals(new double[] {1843.6981974525}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[3] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer0 = new Integer(2143536067);
      assertNotNull(integer0);
      assertEquals(2143536067, (int)integer0);
      
      Integer integer1 = new Integer(2143536067);
      assertNotNull(integer1);
      assertEquals(2143536067, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer1;
      integerArray0[8] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(9, integerArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '.', (int) integerArray0[0]);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(9, integerArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (-875.7025);
      ArrayUtils.swap(doubleArray0, (-1), 12);
      assertArrayEquals(new double[] {2.143536067E9, 2.143536067E9, (-875.7025)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[3] = (-3078L);
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, (-32), 4643, (-3064));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-3064));
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 4643;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-3064);
      long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertEquals(24, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, 10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(9, objectArray0.length);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'P');
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'E', 'E', 'E'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)21;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)21, (byte) (-9), (byte)21, (byte)9, (byte)9, (byte)4, (byte)21}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (byte)9);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(6, int0);
      assertEquals(9, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      ArrayUtils.swap((int[]) null, 734, 3110, 8);
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)127);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 734;
      intArray0[1] = (-1799);
      intArray0[2] = (int) (byte)127;
      intArray0[3] = 3110;
      intArray0[4] = 3110;
      int int0 = ArrayUtils.indexOf(intArray0, 84, 3110);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {734, (-1799), 127, 3110, 3110}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 127;
      longArray0[1] = 0L;
      longArray0[2] = (long) (-1799);
      longArray0[3] = (long) 734;
      longArray0[4] = (long) (byte)127;
      longArray0[5] = (long) (-1799);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-1669));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1669, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 790;
      boolean boolean0 = ArrayUtils.contains(intArray0, 790);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {790}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 4346L;
      longArray0[2] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 4346L, (-1092));
      assertEquals(1, int0);
      assertArrayEquals(new long[] {(-1L), 4346L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      int int1 = (-57);
      Integer integer0 = Integer.getInteger("", (-57));
      assertNotNull(integer0);
      assertEquals((-57), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int1);
      assertNotNull(integer1);
      assertEquals((-57), (int)integer1);
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Float float0 = new Float(1339.106F);
      assertNotNull(float0);
      assertEquals(1339.106F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-1092));
      assertNotNull(float1);
      assertEquals((-1092.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, (-1227L), 1248);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {(-1L), 4346L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1983);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1983));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1, (-1983)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)122;
      shortArray0[1] = (short) (-2318);
      shortArray0[2] = (short) (-301);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 88, (int) (short) (-2318));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)122, (short) (-2318), (short) (-301)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'i';
      charArray0[2] = '.';
      charArray0[3] = '\"';
      ArrayUtils.swap(charArray0, 0, (-367), (-229));
      assertArrayEquals(new char[] {'T', 'i', '.', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ArrayUtils.reverse((float[]) null, 734, 3110);
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)3186;
      shortArray0[2] = (short)3186;
      shortArray0[3] = (short)3186;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)3186;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short)3186, (short)3186, (short)3186, (short) (-1), (short) (-1), (short)3186}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '8';
      charArray0[2] = 'L';
      charArray0[3] = ']';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = 2252;
      ArrayUtils.swap(booleanArray0, (-1366), 2252, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((-975L), (-975L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-7510);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-7510)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-7510), (short) (-7510)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-7510);
      floatArray0[1] = (float) (short) (-7510);
      floatArray0[2] = (float) (short) (-7510);
      floatArray0[3] = (float) (short) (-7510);
      floatArray0[4] = (float) (short) (-7510);
      ArrayUtils.shift(floatArray0, (-1060), 841, (-1757));
      assertArrayEquals(new float[] {(-7510.0F), (-7510.0F), (-7510.0F), (-7510.0F), (-7510.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 897.51373F;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (int) (byte) (-106), (-1736));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)6);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)65;
      shortArray0[1] = (short) (byte)65;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)65, (short)65}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.swap(booleanArray0, (int) (short)65, 1, (int) (short)65);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-374.5395189751093), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((-374.5395189751093), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)109;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)113);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray1, true);
      assertNotNull(bitSet1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(10, bitSet1.cardinality());
      assertEquals(10, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte)113);
      assertNotNull(integer0);
      assertEquals(113, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(113, (int)integer1);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer1);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (int) (byte) (-92), 56, 56);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf(intArray1, (int) (byte)109, (int) (byte) (-92));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray2 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 2115L;
      longArray0[2] = (-1525L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 135, 1704);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 2115L, (-1525L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (-39));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 1049, 0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean0);
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2905);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2905.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[3] = (byte)68;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 56;
      ArrayUtils.swap(longArray0, 8, (int) (byte)117, 1049);
      assertArrayEquals(new long[] {56L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray3 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertEquals(0, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      int int1 = ArrayUtils.indexOf(intArray0, (-1), int0);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {56L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('|');
      assertNotNull(character0);
      assertEquals('|', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('K');
      assertNotNull(character1);
      assertEquals('K', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('>');
      assertNotNull(character2);
      assertEquals('>', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = new Character('w');
      assertNotNull(character3);
      assertEquals('w', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = new Character('\'');
      assertNotNull(character4);
      assertEquals('\'', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      Character character5 = new Character('x');
      assertNotNull(character5);
      assertEquals('x', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      
      characterArray0[5] = character5;
      Character character6 = new Character('7');
      assertNotNull(character6);
      assertEquals('7', (char)character6);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf((char) character5);
      assertNotNull(character7);
      assertEquals('x', (char)character7);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character6));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character0));
      
      characterArray0[7] = character7;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, ' ');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'|', 'K', '>', 'w', '\'', 'x', '7', 'x'}, charArray1);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = Boolean.valueOf(",3Zt!GU*uy!~qEJ~JjL");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'b';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Y', 'b'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'b', 'Y', 'b'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)2);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)122, (byte)3, (byte)2}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1796);
      assertNotNull(integer1);
      assertEquals(1796, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(4313);
      assertNotNull(integer2);
      assertEquals(4313, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) 4313);
      assertNotNull(float0);
      assertEquals(4313.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 1796);
      assertNotNull(float1);
      assertEquals(1796.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      floatArray0[2] = floatArray0[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {4313.0F, 1796.0F, 1796.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'f';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'c', 'f'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (-5025);
      ArrayUtils.shift(shortArray0, (int) (short) (-5025));
      assertArrayEquals(new short[] {(short) (-5025), (short)4}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (float)floatArray0[1];
      doubleArray0[1] = 864.79542;
      doubleArray0[2] = (double) (short)4;
      doubleArray0[3] = (double) (float)floatArray0[1];
      doubleArray0[4] = (-3790.411092868);
      doubleArray0[5] = (double) 'c';
      doubleArray0[6] = (double) 'c';
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) (short)4;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (-794), (double) floatArray0[2]);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1796.0, 864.79542, 4.0, 1796.0, (-3790.411092868), 99.0, 99.0, (-1.0), 4.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-21), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -21, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      long long0 = (-895L);
      long long1 = (-2942L);
      int int0 = (-546);
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      booleanArray1[1] = (boolean) boolean0;
      booleanArray1[2] = (boolean) boolean0;
      booleanArray1[3] = (boolean) boolean1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-546), booleanArray1, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -546, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(897, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 897, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      int int0 = (-1205);
      org.evosuite.runtime.Random.setNextRandom((-1205));
      int int1 = 256;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(256, booleanArray1, booleanArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-15));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-15)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = (int) (byte) (-15);
      intArray0[2] = (int) (byte) (-15);
      intArray0[3] = (int) (byte) (-15);
      intArray0[4] = (int) (byte) (-15);
      intArray0[5] = (int) (byte) (-15);
      intArray0[6] = 5558;
      intArray0[7] = (int) (byte) (-15);
      intArray0[8] = (int) (byte) (-15);
      int[] intArray1 = ArrayUtils.add(intArray0, (-2290));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {4, (-15), (-15), (-15), (-15), (-15), 5558, (-15), (-15), (-2290)}, intArray1);
      assertArrayEquals(new int[] {4, (-15), (-15), (-15), (-15), (-15), 5558, (-15), (-15)}, intArray0);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (int) (byte) (-81));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte) (-39), (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'X';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'|', 'X'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1540));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-1540)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1796);
      assertNotNull(integer1);
      assertEquals(1796, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(4313);
      assertNotNull(integer2);
      assertEquals(4313, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4313);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short)40;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1929));
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)40, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(int1 == int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)40;
      shortArray1[1] = (short) (-335);
      shortArray1[2] = (short) (-104);
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) (-104), (int) (short)40);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)40, (short) (-335), (short) (-104)}, shortArray1);
      assertArrayEquals(new short[] {(short)40, (short) (-335), (short) (-104)}, shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(368, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      org.evosuite.runtime.Random.setNextRandom((short)65);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-81);
      floatArray0[1] = (float) (short)2077;
      floatArray0[2] = (float) (byte) (-81);
      floatArray0[3] = (float) 368;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) (byte) (-81);
      ArrayUtils.swap(floatArray0, 3531, 0, 11);
      assertArrayEquals(new float[] {(-81.0F), 2077.0F, (-81.0F), 368.0F, 1.0F, (-81.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 'P';
      Character character1 = Character.valueOf('P');
      assertNotNull(character1);
      assertEquals('P', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {')', 'P'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      ArrayUtils.swap(byteArray1, (int) (byte)0, (-83), 0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) (char)character0;
      intArray0[2] = (int) char0;
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 80, (-2290));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {41, 41, 80, 0, (-1), (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-9);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-418));
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-9)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-2466));
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short) (-9)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (short)23028, (-1));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[9] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-96);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-96), 2224);
      assertEquals(5, int0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)17, (byte) (-96), (byte)12, (byte) (-96)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)17, (byte) (-96), (byte)12, (byte) (-96)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)12;
      floatArray0[1] = (float) (byte)17;
      floatArray0[2] = (float) (byte) (-96);
      floatArray0[3] = (float) (byte) (-96);
      floatArray0[4] = (float) (byte)3;
      floatArray0[5] = (float) (byte) (-96);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (float) (byte)12;
      ArrayUtils.swap(floatArray0, (int) (byte)3, (-2147393398), 2);
      assertArrayEquals(new float[] {(-96.0F), 3.0F, (-96.0F), 12.0F, 17.0F, (-96.0F), 0.0F, 12.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2224;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = 5;
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)683;
      shortArray0[1] = (short) (-3704);
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) (short) (-3704), (int) (short) (-3704));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (short) (-3704));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3704, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 45.0F;
      floatArray0[2] = 5661.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-516.0F);
      floatArray0[5] = 96.0F;
      Boolean boolean0 = Boolean.valueOf("T:I(mXJAU6:V[");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = ';';
      charArray0[2] = '=';
      charArray0[3] = '5';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'k', ';', '=', '5'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      try { 
        Integer.valueOf("T:I(mXJAU6:V[", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-3802));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802), (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802)}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-3802);
      integerArray0[1] = (Integer) (-3802);
      integerArray0[2] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-3802);
      floatArray0[2] = (float) (-3802);
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {0.0F, (-3802.0F), (-3802.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean3 = ArrayUtils.isNotEmpty(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertTrue(boolean3);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802)}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean4);
      assertArrayEquals(new float[] {0.0F, (-3802.0F), (-3802.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-46));
      assertNotNull(byte0);
      assertEquals((byte) (-46), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-46)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1163));
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-3802), (-1413), (double) 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-3802);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) (short) (-1163);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-3802.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-1163.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-3802.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-1163.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-112));
      assertNotNull(byte0);
      assertEquals((byte) (-112), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-112)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-12);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-12);
      longArray0[0] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2038L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-12);
      intArray0[1] = (int) (byte) (-81);
      intArray0[2] = (int) (byte)0;
      byteArray0[6] = (byte)21;
      intArray0[4] = (int) (byte) (-81);
      intArray0[5] = (int) (byte) (-12);
      intArray0[6] = (int) (byte)21;
      intArray0[7] = (int) (byte) (-12);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-12), (-81), 0, 0, (-81), (-12), 21, (-12)}, intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 1395;
      floatArray0[3] = (float) 1395;
      ArrayUtils.swap(floatArray0, (-2115903005), 1746, (-1892));
      assertArrayEquals(new float[] {7.0F, 7.0F, 1395.0F, 1395.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1746;
      intArray0[1] = 1746;
      intArray0[2] = (-2115903005);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {7.0F, 7.0F, 1395.0F, 1395.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)101;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)28, 378);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)28, (byte) (-61), (byte)115, (byte)101}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'A');
      assertNull(charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)28;
      longArray0[1] = (long) 1746;
      longArray0[2] = (long) (-2115903005);
      longArray0[3] = (long) 1746;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1746L, (-2115903005L), 1746L, 28L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      ArrayUtils.swap(shortArray0, (-1531), 91, (int) (short)8);
      assertArrayEquals(new short[] {(short)12, (short)12, (short)12, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      
      Short short0 = new Short((short)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      Short short1 = new Short((short) (-3505));
      assertNotNull(short1);
      assertEquals((short) (-3505), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)12;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)12}, shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)12;
      longArray0[1] = (long) 91;
      longArray0[2] = (long) (short)shortArray1[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {12L, 91L, 12L}, longArray1);
      assertArrayEquals(new long[] {12L, 91L, 12L}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 12L;
      floatArray0[1] = (float) (short)12;
      floatArray0[2] = (float) 91;
      floatArray0[3] = (float) (short)12;
      floatArray0[4] = (float) (-1531);
      floatArray0[5] = (float) (short)8;
      ArrayUtils.shift(floatArray0, (-1531));
      assertArrayEquals(new float[] {12.0F, 91.0F, 12.0F, (-1531.0F), 8.0F, 12.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) 12.0F;
      floatArray1[1] = (Float) 12.0F;
      floatArray1[2] = (Float) 12.0F;
      floatArray1[3] = (Float) 12.0F;
      floatArray1[4] = (Float) 8.0F;
      floatArray1[5] = (Float) 8.0F;
      Float float0 = new Float(1733.4561263305);
      assertNotNull(float0);
      assertEquals(1733.4562F, (float)float0, 0.01F);
      
      floatArray1[6] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-201.72455F));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {12.0F, 12.0F, 12.0F, 12.0F, 8.0F, 8.0F, 1733.4562F}, floatArray2, 0.01F);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-2251.32495291));
      assertNotNull(double3);
      assertEquals((-2251.32495291), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double((-2251.32495291));
      assertNotNull(double4);
      assertEquals((-2251.32495291), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)107;
      shortArray0[1] = (short)13446;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)13446, (short)107}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '#', 1);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (short)13446;
      int int1 = ArrayUtils.indexOf(doubleArray1, (-2251.32495291), (-859), 84.0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {13446.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2950);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2950;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2950}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2950;
      longArray0[1] = (long) 2950;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-3686L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2950L, 2950L}, longArray0);
      assertArrayEquals(new long[] {2950L, 2950L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 2950;
      integerArray0[1] = (Integer) 2950;
      integerArray0[2] = (Integer) 2950;
      integerArray0[3] = (Integer) 2950;
      integerArray0[4] = (Integer) 2950;
      integerArray0[5] = (Integer) 2950;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[2];
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) 5576;
      doubleArray0[3] = (double) (int)integerArray0[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2950, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2950, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = 5;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 5, 5);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = false;
      booleanArray3[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray3));
      assertEquals(2, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(6, objectArray1.length);
      assertEquals(6, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      ArrayUtils.shift((byte[]) null, (-253), (int) (byte) (-28), 722);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) int0);
      assertNotNull(mutableInt0);
      assertEquals((byte)5, mutableInt0.byteValue());
      assertEquals(5, (int)mutableInt0.toInteger());
      assertEquals((short)5, mutableInt0.shortValue());
      assertEquals(5, (int)mutableInt0.getValue());
      assertEquals("5", mutableInt0.toString());
      assertEquals(5, mutableInt0.intValue());
      assertEquals(5.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(5.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5L, mutableInt0.longValue());
      
      Integer integer1 = mutableInt0.getValue();
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((byte)5, mutableInt0.byteValue());
      assertEquals(5, (int)mutableInt0.toInteger());
      assertEquals((short)5, mutableInt0.shortValue());
      assertEquals(5, (int)mutableInt0.getValue());
      assertEquals("5", mutableInt0.toString());
      assertEquals(5, mutableInt0.intValue());
      assertEquals(5.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(5.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5L, mutableInt0.longValue());
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, 1353);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1353, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 10, 3252, 10);
      org.evosuite.runtime.Random.setNextRandom(10);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (int) 'T';
      intArray0[2] = (int) 'T';
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, 1962, 904);
      assertArrayEquals(new int[] {1, 84, 84}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-1596));
      assertArrayEquals(new int[] {1, 84, 84}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 84;
      floatArray0[2] = (float) (-1596);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {84.0F, 84.0F, (-1596.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 84;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, doubleArray0);
      assertNull(doubleArray1);
      assertArrayEquals(new double[] {84.0, 100.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\'');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'T'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean1);
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      
      ArrayUtils.shift((Object[]) booleanArray0, (-2730));
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = 'i';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) (-2730);
      longArray0[2] = (long) 'i';
      longArray0[3] = (long) (-2730);
      longArray0[4] = (long) 'i';
      longArray0[5] = (long) '8';
      longArray0[6] = (long) (-2730);
      longArray0[7] = (long) (-2730);
      longArray0[8] = (long) '8';
      int int0 = new Integer('8');
      assertEquals(56, int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "Index: ");
      assertNotNull(stringArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, stringArray0.length);
      
      Double[] doubleArray1 = new Double[5];
      Double double0 = new Double((-2730L));
      assertNotNull(double0);
      assertEquals((-2730.0), (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(56L);
      assertNotNull(double1);
      assertEquals(56.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double((-2730L));
      assertNotNull(double2);
      assertEquals((-2730.0), (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double((-1348.0));
      assertNotNull(double3);
      assertEquals((-1348.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray1[3] = double3;
      Double double4 = new Double((-1386.0));
      assertNotNull(double4);
      assertEquals((-1386.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray1[4] = double4;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 105L);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2730.0), 56.0, (-2730.0), (-1348.0), (-1386.0)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1562.0814838);
      doubleArray0[1] = 138.0;
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer((-103));
      assertNotNull(integer0);
      assertEquals((-103), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-1948));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean1);
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      
      ArrayUtils.shift((Object[]) booleanArray0, (-2730));
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = (boolean) boolean3;
      booleanArray1[1] = (boolean) boolean2;
      booleanArray1[2] = (boolean) boolean0;
      booleanArray1[3] = (boolean) boolean0;
      booleanArray1[4] = (boolean) boolean3;
      booleanArray1[5] = (boolean) boolean0;
      boolean boolean6 = ArrayUtils.isNotEmpty(booleanArray1);
      assertTrue(boolean6);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-686.85049182), (-236), 100.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1);
      assertNotNull(stringArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-374.5395189751093), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((-374.5395189751093), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)109;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)109;
      shortArray0[1] = (short) (byte) (-92);
      shortArray0[2] = (short) (byte) (-92);
      ArrayUtils.shift(shortArray0, (int) (short)109);
      assertArrayEquals(new short[] {(short) (-92), (short)109, (short) (-92)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-92);
      floatArray0[1] = (float) (short)109;
      floatArray0[2] = (float) (byte) (-92);
      int int0 = ArrayUtils.indexOf(floatArray0, 895.481F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-92.0F), 109.0F, (-92.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-1601), 8, 2);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.swap(booleanArray0, 2, (-873), (int) (byte) (-92));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0);
      assertNotNull(stringArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift((int[]) null, (int) '\u0000');
      Float float0 = new Float((float) (-117));
      assertNotNull(float0);
      assertEquals((-117.0F), (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.valueOf((-3171));
      assertNotNull(integer0);
      assertEquals((-3171), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("Ne9rOsx\"uQ", 2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals((-3171), (int)integer2);
      assertEquals(6, integerArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)1017;
      shortArray0[2] = (short)2413;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-158);
      shortArray0[5] = (short)2018;
      shortArray0[6] = (short) (-126);
      shortArray0[7] = (short) (-1296);
      shortArray0[8] = (short) (-3363);
      ArrayUtils.swap(shortArray0, (int) (short) (-158), (-1561));
      assertArrayEquals(new short[] {(short)6, (short)1017, (short)2413, (short)0, (short) (-158), (short)2018, (short) (-126), (short) (-1296), (short) (-3363)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)6;
      floatArray0[1] = (float) (int)integerArray0[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {6.0F, (-3171.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift((char[]) null, 321, 1, 1);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1518, 111);
      Integer integer0 = new Integer((-4094));
      assertNotNull(integer0);
      assertEquals((-4094), (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (int)integerArray0[4];
      longArray0[1] = (long) (int)integerArray0[4];
      longArray0[2] = (long) (int)integerArray0[1];
      ArrayUtils.swap(longArray0, (int) integerArray0[1], (-5128), 631);
      assertSame(integerArray0, integerArray1);
      assertArrayEquals(new long[] {(-4094L), (-4094L), (-4094L)}, longArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 4022);
      assertNotNull(intArray0);
      assertSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {4022, (-4094), (-4094), (-4094), (-4094)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 36.83;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-93.4051829178);
      int int0 = 123;
      Integer integer0 = new Integer(123);
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 123;
      intArray0[1] = 1;
      intArray0[2] = int0;
      intArray0[3] = 123;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = 123;
      intArray0[8] = int0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1, 1);
      assertEquals(1, int1);
      assertArrayEquals(new int[] {123, 1, 123, 123, 123, 123, 123, 123, 123}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Integer integer1 = new Integer((-20));
      assertNotNull(integer1);
      assertEquals((-20), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals("-1596", mutableInt0.toString());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1596), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals("-1596", mutableInt0.toString());
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(1796);
      assertNotNull(integer4);
      assertEquals(1796, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 64);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)65;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)65);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short)65}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '8';
      charArray0[2] = 'L';
      charArray0[3] = ']';
      charArray0[4] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'0', '8', 'L', ']', 'i'}, charArray0);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      ArrayUtils.swap(byteArray0, 25, (-1736));
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)65);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 'L';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-2955.04303));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 76.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift(floatArray0, 25, 3965, 79);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 76.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 76.0, 0.0, 76.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 4346L;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 2344);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2344}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)4);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray1 = ArrayUtils.addFirst((char[]) null, 'W');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'W'}, charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, 3, (int) (byte)79);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray2.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(charArray2.equals((Object)charArray1));
      
      int[] intArray3 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertEquals(0, intArray3.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean1);
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      
      ArrayUtils.shift((Object[]) booleanArray0, (-2730));
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = 'i';
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '(');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'(', '8', 'i', '~'}, charArray1);
      assertArrayEquals(new char[] {'8', 'i', '~'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-19));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-19), (-19), (-19), (-19), (-19), (-19)}, intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 16.416249440376358;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-93.405);
      Integer integer0 = new Integer(123);
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 154);
      assertNotNull(intArray0);
      assertSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '?';
      charArray0[2] = 's';
      charArray0[3] = '(';
      charArray0[4] = 'G';
      charArray0[5] = '2';
      charArray0[6] = 'U';
      charArray0[7] = '4';
      charArray0[8] = 'w';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 't');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4', '?', 's', '(', 'G', '2', 'U', '4', 'w'}, charArray0);
      assertArrayEquals(new char[] {'4', '?', 's', '(', 'G', '2', 'U', '4', 'w'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      byte byte0 = (byte) (-81);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      boolean boolean2 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertFalse(boolean2);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNotNull(object0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals((byte)0, object0);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(object0.equals((Object)byte0));
      
      objectArray1[0] = object0;
      objectArray1[1] = (Object) (byte)0;
      objectArray1[2] = (Object) "9$i:[_^9PB?)z[HT@";
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray1[3] = object1;
      Object object2 = ArrayUtils.get(objectArray1, (int) 0, objectArray1[0]);
      assertNotNull(object2);
      assertNotSame(objectArray1, objectArray0);
      assertEquals((byte)0, object2);
      assertEquals(4, objectArray1.length);
      assertFalse(object2.equals((Object)byte0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray0[1] = object2;
      objectArray0[2] = (Object) (byte)0;
      Integer integer0 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 10, (Integer) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-1030), (-1030), (-1030));
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'n';
      charArray0[3] = '5';
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {',', 'n', '5', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'V', (-1432));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {',', 'n', '5', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray1);
      assertFalse(boolean2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) ',';
      int int1 = ArrayUtils.indexOf(doubleArray0, 3.0, 49, 126.0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {126.0, 44.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-3533);
      float[] floatArray0 = new float[1];
      intArray0[2] = (-3533);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[2] = 'J';
      charArray0[3] = 'j';
      charArray0[5] = 'j';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'', 'j', 'J', 'j', '\u0000', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 'J');
      assertNotNull(object0);
      assertEquals('J', object0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      assertNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-3533);
      integerArray0[1] = (Integer) (-3533);
      integerArray0[2] = (Integer) (-3533);
      integerArray0[3] = (Integer) (-3533);
      integerArray0[4] = (Integer) (-3533);
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[2]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'', 'j', 'J', 'j', '\u0000', 'j'}, charArray1);
      assertArrayEquals(new char[] {'', 'j', 'J', 'j', '\u0000', 'j'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 288.1205161842575;
      doubleArray0[1] = (double) (int)integerArray0[1];
      doubleArray0[2] = (double) 'j';
      doubleArray0[3] = (-96.0);
      doubleArray0[4] = (double) 'j';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, 106.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {288.1205161842575, (-3533.0), 106.0, (-96.0), 106.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {288.1205161842575, (-3533.0), 106.0, 106.0, (-96.0), 106.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-1394L);
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, (-1394L), 0L}, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, (-1394L), 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.valueOf((-139));
      assertNotNull(integer0);
      assertEquals((-139), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) integerArray0[0]);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(6, integerArray0.length);
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      ArrayUtils.shuffle((Object[]) integerArray0, (Random) mockRandom0);
      assertEquals(6, integerArray0.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null);
      assertEquals(1, int1);
      assertEquals(6, integerArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-345.99091713405);
      ArrayUtils.shuffle(doubleArray1);
      assertArrayEquals(new double[] {(-345.99091713405)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      doubleArray1[0] = (double) (byte)68;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)79;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)79;
      intArray0[1] = 1962;
      ArrayUtils.swap(intArray0, 1566, (int) (byte) (-128), 1962);
      assertArrayEquals(new int[] {79, 1962}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shift(intArray0, (int) (byte)68);
      assertArrayEquals(new int[] {79, 1962}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 994.6801F;
      floatArray0[1] = (float) 904;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (byte) (-128);
      floatArray0[4] = (float) 904;
      floatArray0[5] = (float) 904;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {994.6801F, 904.0F, (-1.0F), (-128.0F), 904.0F, 904.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {994.6801F, 904.0F, (-1.0F), (-128.0F), 904.0F, 904.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(byteArray0, 752, 1962, 1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '@';
      charArray0[6] = '@';
      charArray0[7] = '@';
      ArrayUtils.shift(charArray0, 734, 512, 2369);
      assertArrayEquals(new char[] {'@', '@', '@', '@', '@', '@', '@', '@'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 3110, 2369);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-11));
      assertNotNull(integer0);
      assertEquals((-11), (int)integer0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)26);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)26}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-1252), (int) (byte)26, (int) (byte)26);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Integer integer0 = new Integer((-1235));
      assertNotNull(integer0);
      assertEquals((-1235), (int)integer0);
      
      Integer integer1 = new Integer(2334);
      assertNotNull(integer1);
      assertEquals(2334, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1736));
      assertNotNull(integer2);
      assertEquals((-1736), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.insert((int) 0, integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, 0}, intArray0);
      assertEquals(10, intArray0.length);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, 0, (Integer) 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals("{0, 1, 3, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.14748365E9F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, 3307.273709183151);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)44);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)44}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2113.3796539127);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4094.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2113.3796539127), 0.0, (-4094.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-659));
      assertNotNull(integer0);
      assertEquals((-659), (int)integer0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-659);
      intArray0[1] = (-659);
      intArray0[2] = (-659);
      intArray0[3] = (-659);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 878;
      intArray0[3] = (int) 'B';
      intArray0[3] = 1;
      intArray0[4] = 878;
      intArray0[5] = (int) 'B';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24339;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)24339, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)24339, (short)24339, (short)2, (short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = ArrayUtils.insert((-4452), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 878;
      doubleArray0[1] = (double) (short)24339;
      doubleArray0[2] = (double) 878;
      doubleArray0[3] = (double) (short)2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 543);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {878.0, 24339.0, 878.0, 2.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)24339, (double) 543);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {878.0, 24339.0, 878.0, 2.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 878;
      floatArray0[1] = (float) (short)24339;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3182.5F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {878.0F, 24339.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {878.0F, 24339.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int2 = ArrayUtils.indexOf((char[]) null, '{', (-3538));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1542);
      shortArray0[1] = (short)16;
      ArrayUtils.shift(shortArray0, (int) (short)16, (-272), (int) (short)2587);
      assertArrayEquals(new short[] {(short) (-1542), (short)16}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '|';
      charArray0[2] = 'C';
      charArray0[3] = 'p';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'A', '|', 'C', 'p'}, charArray0);
      assertArrayEquals(new char[] {'A', '|', 'C', 'p'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(817);
      Integer integer0 = new Integer(817);
      assertNotNull(integer0);
      assertEquals(817, (int)integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(817, (int)integer1);
      assertEquals(7, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 115, 0, (-730));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 13, 817);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) (int)integerArray0[4];
      doubleArray0[2] = (double) (int)integerArray0[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 817, (-685));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {13.0, 817.0, 817.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 68.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {13.0, 817.0, 817.0, 68.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {13.0, 817.0, 817.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 3;
      intArray0[2] = 3544;
      intArray0[3] = 2143536067;
      intArray0[4] = 908;
      intArray0[5] = 114;
      ArrayUtils.shift((Object[]) stringArray0, 1609);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      Character character0 = Character.valueOf('C');
      assertNotNull(character0);
      assertEquals('C', (char)character0);
      
      Character character1 = Character.valueOf('Z');
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 1609;
      longArray0[5] = (long) 2143536067;
      ArrayUtils.reverse(longArray0, 908, 908);
      assertArrayEquals(new long[] {3L, 0L, 3L, 3L, 1609L, 2143536067L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (double) 3, (double) 1609);
      assertNotNull(bitSet0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 2143536067;
      doubleArray3[1] = (double) 2143536067;
      doubleArray3[2] = (double) 1609L;
      doubleArray3[3] = (double) 3L;
      doubleArray3[4] = (double) 908;
      doubleArray3[5] = (double) 2143536067;
      doubleArray3[6] = (double) 3;
      doubleArray3[7] = (double) 3L;
      double[] doubleArray4 = ArrayUtils.nullToEmpty(doubleArray3);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertSame(doubleArray3, doubleArray4);
      assertArrayEquals(new double[] {2.143536067E9, 2.143536067E9, 1609.0, 3.0, 908.0, 2.143536067E9, 3.0, 3.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {2.143536067E9, 2.143536067E9, 1609.0, 3.0, 908.0, 2.143536067E9, 3.0, 3.0}, doubleArray3, 0.01);
      assertEquals(8, doubleArray4.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[9] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-96);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = true;
      int int0 = 1395;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 1395;
      floatArray0[3] = (float) 1395;
      int int1 = (-1892);
      ArrayUtils.swap(floatArray0, (-2115903005), 1746, (-1892));
      assertArrayEquals(new float[] {7.0F, 7.0F, 1395.0F, 1395.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1746;
      intArray0[1] = 1746;
      intArray0[2] = (-2115903005);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(98, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 210L, 4444);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-3505);
      float[] floatArray0 = new float[1];
      intArray0[2] = (-3505);
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[3] = 'j';
      charArray0[5] = 'j';
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'', 'j', '\u0000', 'j', '\u0000', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) '\u0000');
      assertNotNull(object0);
      assertEquals('\u0000', object0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      assertNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-3505);
      integerArray0[1] = (Integer) (-3505);
      integerArray0[2] = (Integer) (-3505);
      integerArray0[3] = (Integer) (-3505);
      integerArray0[4] = (Integer) (-3505);
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[2]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-28);
      ArrayUtils.shift(byteArray0, (int) (byte) (-28), 2, 1626);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)1, (byte)1, (byte) (-1), (byte) (-28)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)12);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)12, (byte)0, (byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.valueOf("Invalid exceptionStatus");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray0, booleanArray2);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertEquals(6, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-3802));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802), (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802)}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-3802);
      integerArray0[1] = (Integer) (-3802);
      integerArray0[2] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.valueOf("Invalid exceptionStatus");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(7, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean3 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-125);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3845);
      ArrayUtils.swap(shortArray0, (-3802), 3642);
      assertArrayEquals(new short[] {(short) (-125), (short)2, (short) (-3845)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-96);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character character0 = Character.valueOf('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      Character character1 = new Character('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\\');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (int) (byte) (-96), 881, 390);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte) (-1));
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Integer integer1 = new Integer(35);
      assertNotNull(integer1);
      assertEquals(35, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(35, object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'q';
      charArray0[4] = 'i';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      charArray0[7] = '8';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'8', 'L', 'L', 'q', 'i', '0', 'N', '8'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short)2098;
      shortArray0[2] = (short)2098;
      shortArray0[3] = (short)2098;
      ArrayUtils.shift(shortArray0, (-1628));
      assertArrayEquals(new short[] {(short)2098, (short)2098, (short)2098, (short)2098}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'8', 'L', 'L', 'q', 'i', '0', 'N', '8'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) (short)2098;
      longArray0[2] = (long) 'L';
      longArray0[3] = (long) 35;
      longArray0[4] = (long) 'N';
      longArray0[5] = (-2327L);
      longArray0[6] = 12L;
      longArray0[7] = (long) '8';
      longArray0[8] = (long) 'L';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1201), (-1327));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {105L, 2098L, 76L, 35L, 78L, (-2327L), 12L, 56L, 76L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray2));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      short short0 = (short)65;
      Short short1 = new Short((short)65);
      assertNotNull(short1);
      assertEquals((short)65, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-508));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)65, (short)65, (short)65, (short)65, (short)65}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray0, (-2125344640), 338, 2167);
      assertEquals(5, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2167, (int) short0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)65;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3317, (-2145253191));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 65L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-1));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-671.789220885377);
      doubleArray0[1] = (-2442.586);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2442.586), 2252);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-671.789220885377), (-2442.586)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)3;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)3}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)3;
      floatArray0[1] = (float) (byte) (-119);
      floatArray0[2] = (float) (byte)3;
      floatArray0[3] = (float) (byte)3;
      floatArray0[4] = (float) (byte)3;
      floatArray0[5] = (float) 2252;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {3.0F, (-119.0F), 3.0F, 3.0F, 3.0F, 2252.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-671.789220885377), (-2442.586)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-671.789220885377), (-2442.586)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)3;
      longArray0[1] = (-3101L);
      longArray0[2] = (long) 1;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(boolean2);
      assertArrayEquals(new long[] {3L, (-3101L), 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1526;
      intArray0[1] = 52;
      intArray0[2] = 0;
      intArray0[3] = 4230;
      intArray0[4] = 4061;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4061, 4061);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {1526, 52, 0, 4230, 4061}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)116;
      shortArray0[2] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)116, (short) (-1)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Integer integer0 = new Integer((short)116);
      assertNotNull(integer0);
      assertEquals(116, (int)integer0);
      
      Integer integer1 = new Integer(2831);
      assertNotNull(integer1);
      assertEquals(2831, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(2831);
      assertNotNull(integer2);
      assertEquals(2831, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(321);
      assertNotNull(integer3);
      assertEquals(321, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(1);
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer(1);
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      
      MutableInt mutableInt0 = new MutableInt(doubleArray0[1]);
      assertNotNull(mutableInt0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      
      Integer integer6 = mutableInt0.getValue();
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      assertEquals(5, doubleArray0.length);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray1);
      
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      Short short1 = new Short((short) (-1636));
      assertNotNull(short1);
      assertEquals((short) (-1636), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short1;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      ArrayUtils.swap(byteArray0, 1, (int) shortArray0[2]);
      assertArrayEquals(new byte[] {(byte)55}, byteArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)55);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)55}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)shortArray0[1];
      doubleArray0[1] = (double) 25;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-1579.8672));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-154.0), 25.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 25.0;
      doubleArray1[1] = (Double) 25.0;
      doubleArray1[2] = (Double) 25.0;
      Double double0 = new Double((short) (-1636));
      assertNotNull(double0);
      assertEquals((-1636.0), (double)double0, 0.01);
      
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) 25.0;
      doubleArray1[5] = (Double) 25.0;
      doubleArray1[6] = (Double) 25.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {25.0, 25.0, 25.0, (-1636.0), 25.0, 25.0, 25.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-1984), (-1984));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, true}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1366L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (-2420L);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (-1);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-2420L), (-1L), (-1L), 1366L}, longArray0);
      assertEquals(9, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)2);
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(intArray0, (-1386));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = (double) 35;
      doubleArray0[2] = (double) (-1386);
      doubleArray0[3] = 76.0;
      doubleArray0[4] = (double) (-1386);
      doubleArray0[5] = (double) 'x';
      doubleArray0[6] = (double) 'x';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-464.0), (-464.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {120.0, 35.0, (-1386.0), 76.0, (-1386.0), 120.0, 120.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 35;
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) 35;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {35L, 120L, 35L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)1936;
      shortArray0[1] = (short)683;
      shortArray0[2] = (short)1936;
      shortArray0[3] = (short)1936;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)683, (short)1936, (short)1936}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean("WSF");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean1);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(5, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1936;
      longArray0[1] = (long) (-5128);
      longArray0[2] = (long) (short)683;
      ArrayUtils.swap(longArray0, (int) (short)683, 1940, (-3801));
      assertArrayEquals(new long[] {1936L, (-5128L), 683L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean5 = ArrayUtils.contains(floatArray0, (float) 1936L);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean5);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '{';
      charArray0[2] = 'x';
      charArray0[3] = 'E';
      charArray0[4] = '\\';
      charArray0[5] = 'O';
      charArray0[6] = 'U';
      charArray0[7] = 'd';
      charArray0[8] = 'B';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 't');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'T', '{', 'x', 'E', '\\', 'O', 'U', 'd', 'B'}, charArray1);
      assertArrayEquals(new char[] {'T', '{', 'x', 'E', '\\', 'O', 'U', 'd', 'B'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 3341);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1518, 111);
      Integer integer0 = new Integer((-4094));
      assertNotNull(integer0);
      assertEquals((-4094), (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) integerArray0[3]);
      assertSame(integerArray0, integerArray1);
      assertEquals((-1), int0);
      assertEquals(5, integerArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)65;
      shortArray0[2] = (short)65;
      shortArray0[3] = (short)65;
      shortArray0[4] = (short)65;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1639));
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)1, (short)65, (short)65, (short)65, (short)65}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(int1 == int0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (int) (short)1);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = ')';
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      char char1 = 'P';
      Character character1 = Character.valueOf('P');
      assertNotNull(character1);
      assertEquals('P', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {')', 'P'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      ArrayUtils.swap(byteArray1, (int) (byte)0, (-83), 0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) char0;
      intArray0[2] = (int) char0;
      intArray0[2] = (int) char1;
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 80, (-2290));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {41, 41, 80, 0, (-1), (-1)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)33;
      ArrayUtils.swap(byteArray0, (int) (byte) (-66), (int) (byte) (-66), (int) (byte)5);
      assertArrayEquals(new byte[] {(byte)1, (byte)5, (byte) (-66), (byte) (-22), (byte)33}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-764);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-764), (-764));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      
      bitSet0.set(Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      assertEquals("{0, 2147483647}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(Integer.MIN_VALUE, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-125);
      BitSet bitSet1 = BitSet.valueOf(byteArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-127), (byte)60, (byte)8, (byte) (-125)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 3, 4, 5, 6, 8, 15, 18, 19, 20, 21, 27, 32, 33, 39}", bitSet1.toString());
      assertEquals(40, bitSet1.length());
      assertEquals(16, bitSet1.cardinality());
      
      bitSet0.flip(1534);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      assertEquals("{0, 1534, 2147483647}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(Integer.MIN_VALUE, bitSet0.length());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 1534;
      doubleArray0[2] = (double) (-764);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)8;
      longArray0[1] = (long) (byte) (-125);
      longArray0[2] = (long) (-764);
      longArray0[3] = (long) (byte) (-125);
      longArray0[4] = (long) (byte) (-127);
      longArray0[5] = (long) (-764);
      longArray0[6] = (long) (byte) (-125);
      longArray0[7] = (long) (byte) (-125);
      ArrayUtils.swap(longArray0, (-2119951805), (int) (byte) (-127), (-764));
      assertArrayEquals(new long[] {8L, (-125L), (-764L), (-125L), (-127L), (-764L), (-125L), (-125L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.insert(0, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)12);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 2541L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {2541L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      MutableInt mutableInt0 = new MutableInt((-1.0F));
      assertNotNull(mutableInt0);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      
      Integer integer1 = new Integer(2451);
      assertNotNull(integer1);
      assertEquals(2451, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(90);
      assertNotNull(integer2);
      assertEquals(90, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(90);
      assertNotNull(integer3);
      assertEquals(90, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      
      Integer integer4 = new Integer((-1281));
      assertNotNull(integer4);
      assertEquals((-1281), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = new Integer((byte)12);
      assertNotNull(integer5);
      assertEquals(12, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      
      Integer integer6 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer6);
      assertEquals(Integer.MAX_VALUE, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      
      Integer integer7 = new Integer((byte) (-104));
      assertNotNull(integer7);
      assertEquals((-104), (int)integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      
      Integer[] integerArray0 = ArrayUtils.insert((int)  (-104), (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse((byte[]) null);
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)14);
      assertEquals((-1), int0);
      
      Short short0 = new Short((byte)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)14;
      intArray0[1] = (-1);
      intArray0[2] = 7;
      intArray0[3] = (-15);
      intArray0[4] = (int) (byte)14;
      intArray0[5] = 7;
      intArray0[6] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)14, (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {14, (-1), 7, (-15), 14, 7, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("{0, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short)4340;
      shortArray0[1] = (short)1328;
      shortArray0[2] = (short) (byte)14;
      shortArray0[3] = (short)4340;
      shortArray0[4] = (short) (byte)14;
      shortArray0[5] = (short)1328;
      shortArray0[6] = (short) (byte)14;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)16);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)16, (short)0, (short)1328, (short)14, (short)4340, (short)14, (short)1328, (short)14}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)1328, (short)14, (short)4340, (short)14, (short)1328, (short)14}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 704;
      intArray0[1] = 704;
      intArray0[2] = 704;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(704, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 704, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      int int0 = 40;
      ArrayUtils.swap((byte[]) null, 40, 40, 40);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int int1 = 2;
      int int2 = 4256;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 40;
      int int3 = 1395;
      ArrayUtils.swap(floatArray0, 7, 40, 1395);
      assertArrayEquals(new float[] {40.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = 7;
      intArray1[2] = (-2651);
      intArray1[3] = 4256;
      intArray1[4] = 7;
      intArray1[5] = 1395;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      intArray0[1] = 878;
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'G';
      charArray0[2] = 'V';
      ArrayUtils.reverse(charArray0, 217, 2146142611);
      assertArrayEquals(new char[] {'0', 'G', 'V'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'0', 'G', 'V'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'0', 'G', 'V'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short)2098;
      shortArray0[2] = (short)2098;
      shortArray0[3] = (short)2098;
      shortArray0[4] = (short)2098;
      shortArray0[5] = (short)2098;
      shortArray0[6] = (short)2098;
      shortArray0[7] = (short)2098;
      shortArray0[8] = (short)2098;
      ArrayUtils.shift(shortArray0, 2146142611);
      assertArrayEquals(new short[] {(short)2098, (short)2098, (short)2098, (short)2098, (short)2098, (short)2098, (short)2098, (short)2098, (short)2098}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'0', 'G', 'V'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-781.668143831794));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'T';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', 'T'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 84.0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {84.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'T';
      longArray0[1] = (long) 'Q';
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) 'T';
      longArray0[5] = (long) 'Q';
      longArray0[6] = 0L;
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = (boolean) boolean0;
      booleanArray1[1] = true;
      booleanArray1[2] = (boolean) boolean0;
      booleanArray1[3] = true;
      booleanArray1[4] = (boolean) boolean0;
      booleanArray1[5] = (boolean) boolean0;
      booleanArray1[6] = true;
      booleanArray1[7] = (boolean) boolean0;
      int int0 = ArrayUtils.indexOf(booleanArray1, true, (-2290));
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)13, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray2, false, (-2119951805));
      assertSame(booleanArray0, booleanArray1);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-464L), 89);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2119951805);
      doubleArray0[1] = (double) (-464L);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.1;
      doubleArray0[4] = (double) (-2119951805);
      doubleArray0[5] = (double) (-464L);
      doubleArray0[6] = (double) (-2119951805);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 0.0;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-464.0));
      assertEquals(5, int2);
      assertArrayEquals(new double[] {(-2.119951805E9), (-464.0), 0.0, 0.1, (-2.119951805E9), (-464.0), (-2.119951805E9), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurences(booleanArray2, false);
      assertNotNull(booleanArray3);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray3));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'n';
      charArray0[3] = '5';
      Boolean[] booleanArray0 = new Boolean[13];
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(13, booleanArray0.length);
      assertEquals(13, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean1));
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {',', 'n', '5', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-68);
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)0, (byte)64, (byte)2, (byte)5, (byte)2, (byte)126, (byte) (-118), (byte) (-68)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.shift(booleanArray1, (int) (byte) (-118), (int) (byte)0, 217);
      assertEquals(13, booleanArray0.length);
      assertEquals(13, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3845, 3845);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(0, object1);
      
      String string0 = ArrayUtils.toString(object1, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("0", string0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, (-735L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '2');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', 'l'}, charArray0);
      assertArrayEquals(new char[] {'l', 'l'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("-p|iM`zJ!pKng= ");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean1;
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[4] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1472.0);
      doubleArray0[1] = 1014.20712;
      doubleArray0[2] = 1.5;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1472.0), 1014.20712, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (-1L);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      boolean boolean4 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean4);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short)2098;
      shortArray0[2] = (short)2098;
      ArrayUtils.shift(shortArray0, 3);
      assertArrayEquals(new short[] {(short)2098, (short)2098, (short)2098}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (short)2098;
      ArrayUtils.swap(objectArray0, (int) (short)2098, 2560);
      assertEquals(2, objectArray0.length);
      
      Integer integer0 = Integer.valueOf((-2147301457));
      assertNotNull(integer0);
      assertEquals((-2147301457), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'n';
      charArray0[3] = '5';
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean1));
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {',', 'n', '5', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)5;
      MockRandom mockRandom0 = new MockRandom((-56L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      mockRandom0.setSeed((-1024L));
      int int0 = mockRandom0.nextInt((int) (byte)64);
      assertEquals(0, int0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream0 = mockRandom1.ints(1784L);
      assertNotNull(intStream0);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean1));
      
      ArrayUtils.swap((Object[]) null, (int) (byte)5, (int) (byte)5);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.swap((Object[]) integerArray0, 18688, (-1));
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(3926);
      assertNotNull(integer0);
      assertEquals(3926, (int)integer0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        Character.toChars((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-6);
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte) (-56);
      ArrayUtils.shuffle(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-12)}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1596);
      longArray0[1] = (long) (byte) (-6);
      longArray0[2] = (long) (byte) (-6);
      longArray0[3] = (long) (byte) (-6);
      longArray0[4] = 1L;
      longArray0[5] = (long) (byte) (-56);
      longArray0[6] = (long) (-1596);
      longArray0[7] = (long) (byte) (-12);
      longArray0[8] = (long) (byte) (-56);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1596));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1596L), (-6L), (-6L), (-6L), 1L, (-56L), (-1596L), (-12L), (-56L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 6}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 51;
      floatArray0[1] = (float) 51;
      floatArray0[2] = (float) 51;
      floatArray0[3] = (float) 53;
      floatArray0[4] = 1467.0386F;
      floatArray0[5] = (-1936.7029F);
      floatArray0[6] = (-1936.7029F);
      ArrayUtils.swap(floatArray0, 51, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {51.0F, 51.0F, 51.0F, 53.0F, 1467.0386F, (-1936.7029F), (-1936.7029F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 51.0F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 51.0F;
      doubleArray0[1] = (double) 51;
      doubleArray0[2] = (double) 51.0F;
      ArrayUtils.swap(doubleArray0, (-1596), 1);
      assertArrayEquals(new double[] {51.0, 51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.reverse(floatArray0, 51, 1080);
      assertArrayEquals(new float[] {51.0F, 51.0F, 51.0F, 53.0F, 1467.0386F, (-1936.7029F), (-1936.7029F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) 51;
      longArray0[2] = (long) (-1596);
      longArray0[3] = (long) 1080;
      longArray0[4] = (long) 53;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {2147483647L, 51L, (-1596L), 1080L, 53L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shift(floatArray0, 2542);
      assertArrayEquals(new float[] {(-1936.7029F), 51.0F, 51.0F, 51.0F, 53.0F, 1467.0386F, (-1936.7029F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79, (int) (byte)79);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-4584));
      assertNull(intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)79;
      shortArray0[1] = (short)134;
      shortArray0[2] = (short) (byte)79;
      shortArray0[3] = (short) (byte)79;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)79);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)79, (short)134, (short)79, (short)79}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 56;
      floatArray0[1] = (float) 56;
      floatArray0[2] = 475.49F;
      floatArray0[3] = (float) 56;
      floatArray0[4] = (float) 56;
      ArrayUtils.shift((short[]) null, 2357, (-114), 56);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 56.0F;
      Integer integer0 = new Integer(2357);
      assertNotNull(integer0);
      assertEquals(2357, (int)integer0);
      
      Integer integer1 = Integer.getInteger("org.apache.commons.lang3.builder.EqualsBuilder", integer0);
      assertNotNull(integer1);
      assertEquals(2357, (int)integer1);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer1);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 56);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2100;
      shortArray0[1] = (short)2587;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short) (-3215);
      shortArray0[5] = (short)813;
      shortArray0[6] = (short)19;
      shortArray0[7] = (short)2059;
      shortArray0[8] = (short)722;
      ArrayUtils.shift(shortArray0, (-6037), (-1), (-750));
      assertArrayEquals(new short[] {(short)2100, (short)2587, (short)15, (short)16, (short) (-3215), (short)813, (short)19, (short)2059, (short)722}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '|';
      charArray0[2] = 'A';
      charArray0[3] = '}';
      charArray0[4] = 'x';
      charArray0[5] = 'p';
      charArray0[6] = 't';
      charArray0[7] = '}';
      charArray0[8] = '+';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'M', '|', 'A', '}', 'x', 'p', 't', '}', '+'}, charArray1);
      assertArrayEquals(new char[] {'M', '|', 'A', '}', 'x', 'p', 't', '}', '+'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-5334), (-5334), (-5334));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[3] = (-3078L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, (-32), 4643, (-3064));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, (-3078L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, (-3078L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertEquals(18, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, (-3078L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertEquals(18, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayUtils.shift(longArray0, (-3538), 232, 232);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byte byte0 = (byte)5;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)5);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = (-2386);
      ArrayUtils.shift(longArray0, (-3538), 218, (-2386));
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-67L));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int int1 = ArrayUtils.indexOf((double[]) null, 41.0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, 1555L);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      Integer[] integerArray0 = new Integer[7];
      String string0 = "";
      try { 
        Integer.valueOf("", (-3538));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -3538 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)13446;
      shortArray0[1] = (short)13446;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)13446, (short)13446}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'J';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'w', 'J'}, charArray0);
      assertArrayEquals(new char[] {'w', 'J'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)82, (byte)82, (byte) (-1), (byte)19, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'J';
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte) (-1), 6);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {74L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[3] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      long[] longArray0 = new long[2];
      charArray0[2] = 'M';
      longArray0[1] = (long) 'M';
      ArrayUtils.shift(longArray0, (-2718), (int) 'M', (-2718));
      assertArrayEquals(new long[] {0L, 77L}, longArray0);
      assertEquals(2, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-2718));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 77L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.7);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(0, int1);
      assertArrayEquals(new long[] {0L, 77L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap(booleanArray0, 1, 1);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {77L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'M';
      intArray0[1] = (int) 'M';
      intArray0[2] = 1;
      intArray0[3] = (int) 'M';
      intArray0[4] = (int) (byte) (-114);
      intArray0[5] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 34, 217);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {77, 77, 1, 77, (-114), 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[9] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-96);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-96), 2224);
      assertEquals(5, int0);
      assertArrayEquals(new byte[] {(byte)3, (byte)12, (byte)17, (byte) (-96), (byte)12, (byte) (-96)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)12, (byte)17, (byte) (-96), (byte)12, (byte) (-96)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)12;
      floatArray0[1] = (float) (byte)17;
      floatArray0[2] = (float) (byte) (-96);
      floatArray0[3] = (float) (byte) (-96);
      floatArray0[4] = (float) (byte)12;
      floatArray0[5] = (float) (byte) (-96);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (float) (byte)12;
      ArrayUtils.swap(floatArray0, (int) (byte)12, (-2147393398), 2);
      assertArrayEquals(new float[] {12.0F, 17.0F, (-96.0F), (-96.0F), 12.0F, (-96.0F), 0.0F, 12.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2224;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = 5;
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_LONG_ARRAY, (-1), 1348);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) 1348);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-735));
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-45);
      Byte byte1 = new Byte((byte) (-45));
      assertNotNull(byte1);
      assertEquals((byte) (-45), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertEquals((byte) (-45), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)63;
      Byte byte4 = new Byte((byte)63);
      assertNotNull(byte4);
      assertEquals((byte)63, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 3.0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse((double[]) null);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) byte3;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) byte3;
      floatArray0[5] = (float) (byte)63;
      floatArray0[6] = (float) byte0;
      floatArray0[7] = (float) (byte) (-45);
      floatArray0[8] = (float) byte3;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1287.0F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-45.0F), (-45.0F), 63.0F, Float.NaN, 63.0F, 63.0F, (-45.0F), (-45.0F), 63.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf(floatArray0, 63.0F);
      assertEquals(2, int1);
      assertArrayEquals(new float[] {(-45.0F), (-45.0F), 63.0F, Float.NaN, 63.0F, 63.0F, (-45.0F), (-45.0F), 63.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(int1 == int0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(byte0);
      assertNotNull(integer0);
      assertEquals((-45), (int)integer0);
      assertFalse(byte0 == byte3);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals((-45), (int)integer2);
      assertEquals(3, integerArray0.length);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) byte0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-45), 2, (-45)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(byte0 == byte3);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Double double0 = new Double((-4336.10497394));
      assertNotNull(double0);
      assertEquals((-4336.10497394), (double)double0, 0.01);
      
      Double double1 = Double.valueOf(67.0);
      assertNotNull(double1);
      assertEquals(67.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {67.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '{';
      charArray0[2] = 'g';
      int int0 = ArrayUtils.indexOf(charArray0, 'g', (-1));
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'\"', '{', 'g'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-14);
      Short short0 = new Short((byte) (-14));
      assertNotNull(short0);
      assertEquals((short) (-14), (short)short0);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[2]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14)}, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils.shift((Object[]) shortArray0, (int) (byte) (-1), (int) shortArray0[7], (-249));
      assertEquals(9, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)shortArray0[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (int) (byte) (-14), (-3010.035400390625));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-14.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = new Integer((byte)21);
      assertNotNull(integer0);
      assertEquals(21, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      String string0 = ArrayUtils.toString((Object) integer0, "");
      assertNotNull(string0);
      assertEquals("21", string0);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[7] = (double) 1887;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(20, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 0.7;
      doubleArray0[4] = 0.7;
      doubleArray0[5] = 0.7;
      doubleArray0[6] = 0.7;
      doubleArray0[7] = 0.7;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-3049), (-2146884293), 36);
      assertArrayEquals(new double[] {0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '}');
      assertNull(charArray0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.7;
      doubleArray1[1] = (Double) 0.7;
      doubleArray1[2] = (Double) 0.7;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 572.6155895949769);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.7, 0.7, 0.7}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 3087);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)89;
      shortArray0[1] = (short)106;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)128;
      shortArray0[4] = (short)88;
      shortArray0[5] = (short)768;
      shortArray0[6] = (short)210;
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)89, (short)106, (short)5, (short)128, (short)88, (short)768, (short)210}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 2816);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1381.69);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1381.69, 1381.69}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-3802));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802), (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1800.745);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'W', 7);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1709.747775);
      doubleArray0[1] = (-1195.9741453790623);
      doubleArray0[2] = 0.1;
      doubleArray0[3] = 2886.755698;
      doubleArray0[4] = (-3602.9969);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.7;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.7, (-1.0), (-3602.9969), 2886.755698, 0.1, (-1195.9741453790623), (-1709.747775)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.7, (-1.0), (-3602.9969), 2886.755698, 0.1, (-1195.9741453790623), (-1709.747775)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(doubleArray0, (-2146884293), 652, 70);
      assertArrayEquals(new double[] {0.7, (-1.0), (-3602.9969), 2886.755698, 0.1, (-1195.9741453790623), (-1709.747775)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = '&';
      charArray0[2] = 'A';
      charArray0[3] = '<';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '7');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {')', '&', 'A', '<'}, charArray1);
      assertArrayEquals(new char[] {')', '&', 'A', '<'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-1.0);
      doubleArray1[1] = (Double) (-1195.9741453790623);
      doubleArray1[2] = (Double) (-1709.747775);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 1420.0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1195.9741453790623), (-1709.747775)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(16, booleanArray0.length);
      assertEquals(15, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2077);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray0, (int) (byte)21, (int) (byte) (-81), (-2));
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(16, booleanArray0.length);
      assertEquals(15, booleanArray1.length);
      assertEquals(15, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = '-';
      charArray0[2] = '_';
      charArray0[3] = 'g';
      charArray0[4] = 'S';
      charArray0[5] = 'r';
      charArray0[6] = 'H';
      charArray0[7] = '%';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'?', '-', '_', 'g', 'S', 'r', 'H', '%'}, charArray1);
      assertArrayEquals(new char[] {'?', '-', '_', 'g', 'S', 'r', 'H', '%'}, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-374.5395189751093), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((-374.5395189751093), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)109;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)109;
      shortArray0[1] = (short) (byte) (-92);
      shortArray0[2] = (short) (byte) (-92);
      ArrayUtils.shift(shortArray0, (int) (short)109);
      assertArrayEquals(new short[] {(short) (-92), (short)109, (short) (-92)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-92);
      floatArray0[2] = (float) (byte) (-92);
      int int0 = ArrayUtils.indexOf(floatArray0, 895.481F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-92.0F), 0.0F, (-92.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-1601), 8, 2);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)109;
      longArray0[1] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {109L, (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = 'g';
      charArray0[2] = 'w';
      charArray0[3] = '!';
      charArray0[4] = ')';
      charArray0[5] = '9';
      charArray0[6] = 'f';
      charArray0[7] = '=';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '!');
      assertEquals(3, int1);
      assertArrayEquals(new char[] {'1', 'g', 'w', '!', ')', '9', 'f', '='}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[2] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-70);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(15, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3248, (int) (byte)127);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 8192.0F;
      floatArray0[1] = 84.0F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {8192.0F, 84.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {8192.0F, 84.0F, 0.0F, 0.0F, 8192.0F, 84.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 52.8F;
      floatArray2[1] = 52.8F;
      floatArray2[2] = 52.8F;
      floatArray2[3] = 52.8F;
      floatArray2[4] = 52.8F;
      floatArray2[7] = 52.8F;
      floatArray2[6] = 52.8F;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {52.8F, 52.8F, 52.8F, 52.8F, 0.0F, 52.8F, 52.8F, 52.8F}, floatArray2, 0.01F);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-95));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) 'V';
      longArray0[2] = (long) 'V';
      ArrayUtils.shift(longArray0, (int) (byte) (-95), (int) (byte) (-95), (int) (byte) (-95));
      assertArrayEquals(new long[] {71L, 86L, 86L}, longArray0);
      assertEquals(3, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 4705L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {71L, 86L, 86L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 71L);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 86L);
      assertEquals(2, int1);
      assertArrayEquals(new long[] {71L, 86L, 86L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79, (int) (byte)79);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-4584));
      assertNull(intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'z';
      charArray0[2] = 'B';
      ArrayUtils.swap(charArray0, (-4584), 69, (-1));
      assertArrayEquals(new char[] {'`', 'z', 'B'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Integer integer0 = new Integer((byte)79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.valueOf(1294);
      assertNotNull(integer1);
      assertEquals(1294, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(9);
      assertNotNull(integer2);
      assertEquals(9, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer((-1469));
      assertNotNull(integer3);
      assertEquals((-1469), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Integer[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (-24240));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-24240);
      shortArray0[1] = (short)19;
      shortArray0[2] = (short) (byte)79;
      short[] shortArray1 = ArrayUtils.insert(1, (short[]) null, shortArray0);
      assertNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-24240), (short)19, (short)79}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0, 718, (-1469));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3521.9668F;
      floatArray0[1] = 450.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {3521.9668F, 450.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.swap(intArray0, 14, 1, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shift(intArray0, 14);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-67L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-67L), (-1L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer0 = new Integer(211);
      assertNotNull(integer0);
      assertEquals(211, (int)integer0);
      
      Integer integer1 = new Integer(211);
      assertNotNull(integer1);
      assertEquals(211, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertNotNull(mutableInt0);
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      
      MutableInt mutableInt1 = new MutableInt(0L);
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("0", mutableInt1.toString());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      
      Integer integer2 = mutableInt1.toInteger();
      assertNotNull(integer2);
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals(0, (int)integer2);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("0", mutableInt1.toString());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      
      Integer integer3 = new Integer((-1920));
      assertNotNull(integer3);
      assertEquals((-1920), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(211);
      assertNotNull(integer4);
      assertEquals(211, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer4;
      integerArray0[2] = integer2;
      Integer integer6 = ArrayUtils.get(integerArray0, 48);
      assertNull(integer6);
      assertEquals(3, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer5);
      assertNotNull(bitSet0);
      assertEquals(3, integerArray0.length);
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-733.3972F);
      floatArray0[2] = (float) 2;
      floatArray0[3] = 112.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-733.3972F), 2.0F, 112.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)1936;
      shortArray0[1] = (short)683;
      shortArray0[2] = (short)1936;
      shortArray0[3] = (short)1936;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)683, (short)1936, (short)1936}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3730));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)65);
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)683, (short)1936, (short)1936}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-374.5395189751093), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((-374.5395189751093), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)109;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)109;
      shortArray0[1] = (short) (byte) (-92);
      shortArray0[2] = (short) (byte) (-92);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)109, (short) (-92), (short) (-92), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)109, (short) (-92), (short) (-92), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-92);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1892));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-92)}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(7, int1);
      assertArrayEquals(new short[] {(short)109, (short) (-92), (short) (-92), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(int1 == int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)38);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[24];
      shortArray0[0] = (short) (byte)38;
      shortArray0[6] = (short) (byte)38;
      shortArray0[2] = (short) (byte)38;
      shortArray0[19] = (short) (-1);
      shortArray0[4] = (short)11;
      shortArray0[5] = (short) (byte) (-42);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)11, (int) (short)11);
      assertEquals(4, int1);
      assertEquals(24, shortArray0.length);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)38;
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, (-1L), (-1L), 38L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1518;
      intArray0[1] = 1518;
      intArray0[3] = 1518;
      intArray0[4] = 1518;
      intArray0[5] = 1518;
      ArrayUtils.swap(intArray0, 1518, 2570);
      assertArrayEquals(new int[] {1518, 1518, 0, 1518, 1518, 1518}, intArray0);
      assertEquals(6, intArray0.length);
      
      Integer integer0 = new Integer(1974);
      assertNotNull(integer0);
      assertEquals(1974, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1974;
      longArray0[1] = (long) 1518;
      longArray0[2] = (long) 1974;
      longArray0[3] = (long) 2570;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 113;
      ArrayUtils.reverse(longArray0, 2570, 1518);
      assertArrayEquals(new long[] {1974L, 1518L, 1974L, 2570L, 0L, 113L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1518;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1518.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1518.0, 1518.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 82;
      intArray0[1] = 3;
      intArray0[2] = 3544;
      intArray0[3] = 2143536067;
      intArray0[4] = 908;
      intArray0[5] = 114;
      ArrayUtils.shift((Object[]) stringArray0, 1609);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      Character character0 = Character.valueOf('C');
      assertNotNull(character0);
      assertEquals('C', (char)character0);
      
      Character character1 = Character.valueOf('Z');
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 82;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 1609;
      longArray0[5] = (long) 2143536067;
      longArray0[6] = (long) 2143536067;
      ArrayUtils.reverse(longArray0, 908, 908);
      assertArrayEquals(new long[] {3L, 82L, 3L, 3L, 1609L, 2143536067L, 2143536067L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 82;
      integerArray0[1] = (Integer) 82;
      integerArray0[2] = (Integer) 908;
      integerArray0[3] = (Integer) 3544;
      integerArray0[4] = (Integer) 3;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.5640795F;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '8';
      charArray0[2] = 'L';
      charArray0[3] = ']';
      charArray0[4] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'0', '8', 'L', ']', 'i'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.shift((short[]) null, (int) (short)2098);
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'0', '8', 'L', ']', 'i'}, charArray0);
      assertArrayEquals(new char[] {'0', '8', 'L', ']', 'i'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-96);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2282.068;
      doubleArray0[1] = 2282.068;
      doubleArray0[2] = 492.0162329602064;
      doubleArray0[3] = 2282.068;
      doubleArray0[4] = (double) (byte) (-96);
      doubleArray0[5] = (double) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-1), (int) (byte) (-96));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2282.068, 2282.068, 492.0162329602064, 2282.068, (-96.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1867.35534879627, 492.0162329602064);
      assertEquals(3, int1);
      assertArrayEquals(new double[] {2282.068, 2282.068, 492.0162329602064, 2282.068, (-96.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)64);
      assertEquals(1, int2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)64, (byte) (-96), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-2251.32495291));
      assertNotNull(double3);
      assertEquals((-2251.32495291), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double((-2251.32495291));
      assertNotNull(double4);
      assertEquals((-2251.32495291), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)107;
      shortArray0[1] = (short)13446;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)13446, (short)107}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)13446, (short)107}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-1), (byte)82, (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short[] shortArray0 = new Short[15];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1163));
      assertNotNull(shortArray1);
      assertEquals(15, shortArray0.length);
      assertEquals(15, shortArray1.length);
      
      int int0 = new Short((short) (-1163));
      assertEquals((short) (-1163), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1163);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1163.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1163.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(15, shortArray0.length);
      assertEquals(15, shortArray1.length);
      assertEquals(15, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1413);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1413L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, 0, (Integer) 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[2] = false;
      booleanArray0[6] = false;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.14748365E9F, 0.0F}, floatArray0, 0.01F);
      assertEquals(16, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 3307.0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 888L;
      longArray0[5] = (long) Integer.MAX_VALUE;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 888L, 2147483647L, 0L, 2147483647L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2449.484F);
      floatArray0[1] = 3766.5813F;
      floatArray0[2] = (-771.5468F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-2449.484F), 3766.5813F, (-771.5468F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      Integer integer0 = new Integer((-2862));
      assertNotNull(integer0);
      assertEquals((-2862), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("-2862", string0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)19;
      shortArray0[1] = (short)68;
      shortArray0[2] = (short) (-3292);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short) (-544);
      shortArray0[5] = (short) (-118);
      shortArray0[6] = (short)3454;
      shortArray0[7] = (short)8;
      shortArray0[8] = (short) (-1221);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)68, (short) (-3292), (short)4, (short) (-544), (short) (-118), (short)3454, (short)8, (short) (-1221), (short)19}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = '8';
      charArray0[0] = '8';
      char char1 = '5';
      charArray0[1] = '5';
      char char2 = ')';
      charArray0[3] = ')';
      charArray0[4] = '^';
      int int0 = 2885;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(2885, (boolean[]) null, booleanArray0);
      assertNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Integer integer0 = new Integer((-2496));
      assertNotNull(integer0);
      assertEquals((-2496), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      try { 
        Integer.valueOf("java.lang.Object", 2885);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2885 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      int int0 = 2;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-429));
      assertNotNull(integer0);
      assertEquals((-429), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      String string0 = "9C[C&HT]eb3 lT>!X";
      try { 
        Integer.valueOf("9C[C&HT]eb3 lT>!X", (int) integerArray0[0]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -429 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-67L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)12;
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (-1L));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) (-67L);
      floatArray2[1] = (float) (-67L);
      floatArray2[2] = (float) floatArray0[0];
      floatArray2[3] = (float) floatArray0[0];
      floatArray2[4] = (float) (-67L);
      floatArray2[5] = (float) 0L;
      floatArray2[6] = (float) (byte)12;
      floatArray2[7] = (float) (byte)41;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-67.0F), (-67.0F), (-1.0F), (-1.0F), (-67.0F), 0.0F, 12.0F, 41.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 14;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 14;
      longArray0[1] = (long) 14;
      longArray0[2] = (long) 14;
      intArray0[4] = (-925);
      longArray0[4] = (long) 14;
      longArray0[5] = (long) 14;
      longArray0[6] = (long) (-925);
      longArray0[7] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {14L, 14L, 14L, 0L, 14L, 14L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)65;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)118;
      byte[] byteArray2 = ArrayUtils.insert(1, byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte)11, (byte)65, (byte)11, (byte)11, (byte)118}, byteArray1);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)65, (byte)11, (byte)11, (byte)118, (byte)65, (byte)118, (byte)65}, byteArray2);
      assertArrayEquals(new byte[] {(byte)11, (byte)65, (byte)118, (byte)65}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {14L, 14L, 14L, 0L, 14L, 14L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)118;
      floatArray0[1] = (float) (byte)11;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 14L;
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {118.0F, 11.0F, 1.0F, 1.0F, 14.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'n';
      charArray0[3] = '5';
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean1));
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {',', 'n', '5', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-68);
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)89, (byte)64, (byte)2, (byte)5, (byte)2, (byte)126, (byte) (-118), (byte) (-68)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.shift(booleanArray1, (int) (byte) (-118), (int) (byte)89, 217);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((byte)5);
      assertNotNull(short0);
      assertEquals((short)5, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)126);
      assertNotNull(short1);
      assertEquals((short)126, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertEquals((short)5, (short)short2);
      assertEquals(9, shortArray0.length);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1349);
      assertNotNull(short3);
      assertEquals((short)1349, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      
      shortArray0[3] = short3;
      Short short4 = new Short((byte)2);
      assertNotNull(short4);
      assertEquals((short)2, (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)361);
      assertNotNull(short5);
      assertEquals((short)361, (short)short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      
      shortArray0[5] = short5;
      Short short6 = new Short((byte)89);
      assertNotNull(short6);
      assertEquals((short)89, (short)short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      
      shortArray0[6] = short6;
      Short short7 = new Short((short) shortArray0[3]);
      assertNotNull(short7);
      assertEquals((short)1349, (short)short7);
      assertEquals(9, shortArray0.length);
      assertFalse(short7.equals((Object)short2));
      assertTrue(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short6));
      
      shortArray0[7] = short7;
      Short short8 = new Short((short) shortArray0[7]);
      assertNotNull(short8);
      assertEquals((short)1349, (short)short8);
      assertEquals(9, shortArray0.length);
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short6));
      assertTrue(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short5));
      assertTrue(short8.equals((Object)short3));
      
      shortArray0[8] = short8;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray3);
      assertSame(shortArray0, shortArray3);
      assertSame(shortArray3, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2077);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray0, (int) (byte)21, (int) (byte) (-81), (-2));
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short short0 = (short)51;
      Short short1 = new Short((short)51);
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51, (short)51, (short)51, (short)51}, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      int int0 = 1;
      ArrayUtils.shift((Object[]) shortArray0, 1, (int) short0, (int) short0);
      assertEquals(6, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = Integer.valueOf(32);
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      String string0 = "/s$51woxE{Y";
      try { 
        Integer.valueOf("/s$51woxE{Y", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-1596), (-1596));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(7, objectArray1.length);
      assertEquals(7, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 453.618F;
      ArrayUtils.swap(floatArray0, 4256, 1, (-2651));
      assertArrayEquals(new float[] {Float.NaN, 453.618F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1596), 0}, intArray0);
      assertArrayEquals(new int[] {(-1596), 0, (-1596), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 591.56865943, (-1596), (double) 453.618F);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 4256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4256, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1125));
      Integer integer0 = new Integer((-1125));
      assertNotNull(integer0);
      assertEquals((-1125), (int)integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 108L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 108L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {108L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1125), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1125, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      intArray0[1] = (-1596);
      ArrayUtils.swap(intArray0, 1, (-1596), (-1596));
      assertArrayEquals(new int[] {(-1596), (-1596)}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(charArray0, ' ', 1843);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 1844.9551F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {1844.9551F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, (-25));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.shift(floatArray0, (-34));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-81));
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-6);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-6));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-6);
      shortArray0[1] = (short) (byte) (-6);
      shortArray0[2] = (short) (byte) (-6);
      shortArray0[3] = (short) (byte) (-6);
      shortArray0[4] = (short) (byte) (-6);
      shortArray0[5] = (short) (byte) (-6);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-22769));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-6), (short) (-6), (short) (-6), (short) (-6), (short) (-6), (short) (-6)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-22769), (short) (-6), (short) (-6), (short) (-6), (short) (-6), (short) (-6), (short) (-6)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short) (-6);
      objectArray0[1] = (Object) (short) (-6);
      ArrayUtils.swap(objectArray0, 2835, 2121134155, (-81));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.shift(floatArray0, (-12));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      ArrayUtils.swap(shortArray0, (-1531), 91, (int) (short)8);
      assertArrayEquals(new short[] {(short)12, (short)12, (short)12, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      
      Short short0 = new Short((short)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      Short short1 = new Short((short) (-3505));
      assertNotNull(short1);
      assertEquals((short) (-3505), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)12;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)12}, shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)12;
      longArray0[1] = (long) 91;
      longArray0[2] = (long) (short)shortArray1[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {12L, 91L, 12L}, longArray1);
      assertArrayEquals(new long[] {12L, 91L, 12L}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 12L;
      floatArray0[1] = (float) (short)12;
      floatArray0[2] = (float) 91;
      floatArray0[3] = (float) (short)12;
      floatArray0[4] = (float) (-1531);
      floatArray0[5] = (float) (short)8;
      ArrayUtils.shift(floatArray0, 101);
      assertArrayEquals(new float[] {12.0F, 91.0F, 12.0F, (-1531.0F), 8.0F, 12.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) 12.0F;
      floatArray1[1] = (Float) 12.0F;
      floatArray1[2] = (Float) 12.0F;
      floatArray1[3] = (Float) 12.0F;
      floatArray1[4] = (Float) 8.0F;
      floatArray1[5] = (Float) 8.0F;
      Float float0 = new Float(1733.4561263305);
      assertNotNull(float0);
      assertEquals(1733.4562F, (float)float0, 0.01F);
      
      floatArray1[6] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-201.72455F));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {12.0F, 12.0F, 12.0F, 12.0F, 8.0F, 8.0F, 1733.4562F}, floatArray2, 0.01F);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-426);
      shortArray0[1] = (short) (-2686);
      shortArray0[2] = (short)2750;
      shortArray0[3] = (short)78;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-426), (short) (-2686), (short)2750, (short)78}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift(booleanArray0, 115, (int) (short) (-426), 115);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'T'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Integer integer0 = new Integer(115);
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2750;
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (int) (short)2750;
      intArray0[3] = (int) (short) (-2686);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 2);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'T';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'T', '\\'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray1);
      
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      Short short1 = new Short((short) (-1636));
      assertNotNull(short1);
      assertEquals((short) (-1636), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short1;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[3]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-154), (short) (-154), (short) (-1636), (short) (-154), (short) (-154), (short) (-154)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 82, (int) shortArray0[5]);
      assertEquals((-1), int0);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) (-154), (-2144));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short) (-154), (short) (-154), (short) (-1636), (short) (-154), (short) (-154), (short) (-154)}, shortArray1);
      assertEquals(0, shortArray2.length);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Integer integer0 = new Integer((int) shortArray0[5]);
      assertNotNull(integer0);
      assertEquals((-154), (int)integer0);
      assertEquals(6, shortArray0.length);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(6, shortArray0.length);
      assertFalse(integer0.equals((Object)int0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray0, (Object) integer0, (int) shortArray0[5]);
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      Integer integer0 = new Integer((short) (-154));
      assertNotNull(integer0);
      assertEquals((-154), (int)integer0);
      
      ArrayUtils.reverse((float[]) null, 0, 256);
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      ArrayUtils.swap(shortArray0, (-1531), 91, (int) (short)8);
      assertArrayEquals(new short[] {(short)12, (short)12, (short)12, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      
      Short short0 = new Short((short)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      Short short1 = new Short((short) (-3505));
      assertNotNull(short1);
      assertEquals((short) (-3505), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)12;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)12}, shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[3];
      ArrayUtils.swap(longArray0, 1, (int) (short)12, (int) (short)12);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2915, (-3065));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)1, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (-3065);
      doubleArray0[2] = (double) (byte)1;
      ArrayUtils.swap(doubleArray0, 0, 18688);
      assertArrayEquals(new double[] {0.0, (-3065.0), 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-2370), (-2370));
      assertNull(byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElement((byte[]) null, (byte) (-62));
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.swap((int[]) null, 734, 3110, 8);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (byte)127, 8);
      assertNull(byteArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Ir$.wdQ9=LxB3";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-442.8764021), 2221.7566);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse((float[]) null);
      short[] shortArray0 = new short[9];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2651), 2877);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 388L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[3];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Integer integer0 = new Integer(787);
      assertNotNull(integer0);
      assertEquals(787, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)4, 0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1936;
      shortArray0[1] = (short)683;
      shortArray0[2] = (short)1936;
      shortArray0[3] = (short)1936;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1936, (short)683, (short)1936, (short)1936}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3730));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)65);
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)1936, (short)683, (short)1936, (short)1936}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1L);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)6);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (short)6, (int) (short)6);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_INT_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)122);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(byteArray0, (-2333), 644, 5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) 644);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      long[] longArray0 = new long[1];
      longArray0[0] = 1822L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1822L, 14);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {1822L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)12);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)12;
      longArray0[1] = (long) (byte)12;
      longArray0[2] = (long) (byte) (-104);
      longArray0[3] = (long) (byte)12;
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1654.5512296757358);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1654.5512296757358}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[3] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      long[] longArray0 = new long[2];
      charArray0[2] = 'T';
      longArray0[1] = (long) 'T';
      ArrayUtils.shift(longArray0, (-2718), (int) 'T', (-2718));
      assertArrayEquals(new long[] {0L, 84L}, longArray0);
      assertEquals(2, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-2718));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 84L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.7);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(0, int1);
      assertArrayEquals(new long[] {0L, 84L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-96);
      Integer integer0 = new Integer((byte)64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      Integer integer1 = new Integer(91);
      assertNotNull(integer1);
      assertEquals(91, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Float float0 = new Float(69.3);
      assertNotNull(float0);
      assertEquals(69.3F, (float)float0, 0.01F);
      
      Float float1 = new Float(1413.993651);
      assertNotNull(float1);
      assertEquals(1413.9937F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-325.1895));
      assertNotNull(float2);
      assertEquals((-325.1895F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {69.3F, 1413.9937F, (-325.1895F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = BitSet.valueOf(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short) (-3865);
      longArray0[4] = (long) (short) (-3865);
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, 1L, (-1L), (-3865L), (-3865L)}, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-1L), (-3865L), (-3865L), 1L, (-1L), (-3865L), (-3865L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'l';
      intArray0[1] = 1879048192;
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) 'l';
      intArray0[4] = (int) 'l';
      intArray0[5] = (int) 'p';
      intArray0[7] = 1879048192;
      Integer integer0 = new Integer(108);
      assertNotNull(integer0);
      assertEquals(108, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(0, object0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(1.294);
      assertNotNull(float0);
      assertEquals(1.294F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1974.23);
      assertNotNull(float1);
      assertEquals(1974.23F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 108);
      assertNotNull(float2);
      assertEquals(108.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.294F, 1974.23F, 108.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (long) 108;
      longArray0[2] = (long) 'p';
      longArray0[3] = (long) 'p';
      longArray0[4] = (long) 1879048192;
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1L, 1L, 108L, 112L, 112L, 1879048192L, 108L, 112L, 112L, 1879048192L}, longArray1);
      assertArrayEquals(new long[] {1L, 108L, 112L, 112L, 1879048192L}, longArray0);
      assertEquals(10, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-273));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(11, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      int[] intArray2 = ArrayUtils.insert(2, intArray0, intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, (-637.41235F));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-637.41235F), 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      int[] intArray0 = new int[2];
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.get((Object[]) null, 0, (Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertEquals(0, object1);
      
      objectArray0[1] = object1;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 4256;
      floatArray0[2] = (float) 1395;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 1395;
      floatArray0[6] = 3766.5813F;
      ArrayUtils.swap(floatArray0, 4256, (-1), 1);
      assertArrayEquals(new float[] {2.0F, 4256.0F, 1395.0F, 0.0F, 2.0F, 1395.0F, 3766.5813F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-81.0), (-2600), 8192.0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (-1), 40);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      Boolean boolean0 = new Boolean("& 8v[;DbrE/");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("fO.``FRI!qT(4LLZuw4");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '0'}, charArray0);
      assertEquals(5, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(53L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      mockRandom0.setSeed(53L);
      int int0 = mockRandom0.nextInt((-398));
      assertEquals(0, int0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      float float0 = mockRandom1.nextFloat();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextDouble();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.1, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream0 = mockRandom1.ints((int) '\u0000', (int) '0');
      assertNotNull(intStream0);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2);
      
      ArrayUtils.swap((Object[]) null, (-398), (int) (byte)39);
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.shift(floatArray0, (-23));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-23));
      assertNotNull(long0);
      assertEquals((-23L), (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1323L;
      longArray0[1] = (-1801L);
      longArray0[3] = 1518L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1323L, (-1801L), 0L, 1518L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      ArrayUtils.swap(shortArray0, (-580), (int) (short)0, (-1422));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(429);
      assertNotNull(integer0);
      assertEquals(429, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt(1313);
      assertNotNull(mutableInt0);
      assertEquals(1313L, mutableInt0.longValue());
      assertEquals(1313, mutableInt0.intValue());
      assertEquals((short)1313, mutableInt0.shortValue());
      assertEquals("1313", mutableInt0.toString());
      assertEquals(1313.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1313.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1313, (int)mutableInt0.getValue());
      assertEquals((byte)33, mutableInt0.byteValue());
      assertEquals(1313, (int)mutableInt0.toInteger());
      
      Integer integer1 = mutableInt0.toInteger();
      assertNotNull(integer1);
      assertEquals(1313, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1313L, mutableInt0.longValue());
      assertEquals(1313, mutableInt0.intValue());
      assertEquals((short)1313, mutableInt0.shortValue());
      assertEquals("1313", mutableInt0.toString());
      assertEquals(1313.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1313.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1313, (int)mutableInt0.getValue());
      assertEquals((byte)33, mutableInt0.byteValue());
      assertEquals(1313, (int)mutableInt0.toInteger());
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1313);
      assertNotNull(integer2);
      assertEquals(1313, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1184);
      assertNotNull(integer3);
      assertEquals(1184, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((short) (-1));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
      
      Long[] longArray1 = new Long[8];
      longArray1[0] = (Long) (-1801L);
      longArray1[1] = (Long) (-1801L);
      Long long0 = new Long(1518L);
      assertNotNull(long0);
      assertEquals(1518L, (long)long0);
      
      longArray1[2] = long0;
      longArray1[3] = (Long) 1518L;
      longArray1[4] = (Long) (-1801L);
      longArray1[5] = (Long) (-1801L);
      longArray1[6] = (Long) (-1801L);
      longArray1[7] = (Long) 1323L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray2, longArray1);
      assertSame(longArray1, longArray2);
      assertEquals(8, longArray2.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 8192);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 8192;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) 8192;
      floatArray0[7] = (float) 2;
      floatArray0[8] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {8192.0F, 2.0F, 2.0F, 8192.0F, 2.0F, 8192.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {8192.0F, 2.0F, 2.0F, 8192.0F, 2.0F, (-1.0F), 8192.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 8192;
      longArray0[1] = (long) 8192;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 8192;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) 8192;
      longArray0[8] = (long) 8192;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L, 2);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {8192L, 8192L, 2L, 2L, 2L, 8192L, 2L, 8192L, 8192L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-345.99091713405);
      ArrayUtils.shuffle(doubleArray1);
      assertArrayEquals(new double[] {(-345.99091713405)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      doubleArray1[0] = (double) (byte)68;
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = new Boolean((String) null);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (int) (byte) (-128), 117);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {68.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {68.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "0@M|m'!G<!Hwq}7AB");
      assertNotNull(string0);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, 2008L);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[7] = (byte)21;
      Double double0 = new Double((byte)21);
      assertNotNull(double0);
      assertEquals(21.0, (double)double0, 0.01);
      
      Double double1 = new Double(2.55239243);
      assertNotNull(double1);
      assertEquals(2.55239243, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {21.0, 2.55239243, 2.55239243}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (int) (byte) (-5), (int) (byte)21);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {21.0, 2.55239243, 2.55239243}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {21.0, 2.55239243, 2.55239243}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79, (int) (byte)79);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-4584));
      assertNull(intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)79;
      shortArray0[1] = (short)134;
      shortArray0[2] = (short) (byte)79;
      shortArray0[3] = (short) (byte)79;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1851));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)79, (short)134, (short)79, (short)79}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 56);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.1, 0.1}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-1), 5, 5);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-374.5395189751093), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((-374.5395189751093), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)109;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)109;
      shortArray0[1] = (short) (byte) (-92);
      shortArray0[2] = (short) (byte) (-92);
      ArrayUtils.shift(shortArray0, (int) (short)109);
      assertArrayEquals(new short[] {(short) (-92), (short)109, (short) (-92)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-92);
      floatArray0[1] = (float) (short)109;
      floatArray0[2] = (float) (byte) (-92);
      int int0 = ArrayUtils.indexOf(floatArray0, 895.481F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-92.0F), 109.0F, (-92.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-1601), 8, 2);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)109;
      longArray0[1] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {109L, (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = 's';
      charArray0[6] = '3';
      charArray0[7] = '2';
      charArray0[8] = '$';
      ArrayUtils.swap(charArray0, (-367), (-367), (-367));
      assertArrayEquals(new char[] {'8', '5', '\u0000', ')', ':', 's', '3', '2', '$'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 114;
      Integer integer0 = new Integer(114);
      assertNotNull(integer0);
      assertEquals(114, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(9);
      assertNotNull(integer1);
      assertEquals(9, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[2] = integer1;
      Integer integer2 = Integer.valueOf(int0);
      assertNotNull(integer2);
      assertEquals(114, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(9);
      assertNotNull(integer3);
      assertEquals(9, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(9);
      assertNotNull(integer4);
      assertEquals(9, (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      
      integerArray0[5] = integer4;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
      assertEquals(6, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (-24240));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 4643, 0, 4643);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 0);
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 4643;
      int int0 = ArrayUtils.indexOf(doubleArray0, 4643.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 4643.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 4643.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4643.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 4643);
      assertNotSame(longArray0, longArray1);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)12);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)12;
      longArray0[1] = (long) (byte)12;
      longArray0[2] = (long) (byte) (-104);
      longArray0[3] = (long) (byte)12;
      ArrayUtils.shift(longArray0, (int) (byte)12, (int) (byte) (-104), (int) (byte)12);
      assertArrayEquals(new long[] {12L, 12L, (-104L), 12L}, longArray0);
      assertEquals(4, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)12);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {12L, 12L, (-104L), 12L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      
      int int0 = ArrayUtils.indexOf((double[]) null, 101.020225253);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 3810L);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {12L, 12L, (-104L), 12L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.shift(byteArray1, 52);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, 'A');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (-28497);
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-3074.64F));
      assertNull(floatArray0);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-28497), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)5}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-28497), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)5}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'e'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'e'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)40;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-54), (byte) (-1), (byte) (-53), (byte)21, (byte)19, (byte) (-20), (byte)40}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3790.411092868);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3790.411092868));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-3790.411092868)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3790.411092868)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3790.411092868)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'N';
      charArray0[2] = '?';
      charArray0[3] = 'J';
      charArray0[4] = ',';
      charArray0[5] = 'H';
      charArray0[6] = 'C';
      charArray0[7] = '#';
      charArray0[8] = 'v';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'k');
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'t', 'N', '?', 'J', ',', 'H', 'C', '#', 'v'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 56;
      floatArray0[1] = (float) 56;
      floatArray0[2] = 475.49F;
      floatArray0[3] = (float) 56;
      floatArray0[4] = (float) 56;
      floatArray0[5] = (float) 56;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-3100.391F), (-75));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {56.0F, 56.0F, 475.49F, 56.0F, 56.0F, 56.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'd');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      ArrayUtils.swap(booleanArray0, 91, 2, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-739);
      intArray0[1] = 91;
      intArray0[2] = (int) 'm';
      intArray0[3] = 91;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray0[0] = 2;
      intArray1[2] = (-739);
      intArray1[3] = (int) 'm';
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 91, 109, 91, 2, 0, (-739), 109}, intArray2);
      assertArrayEquals(new int[] {2, 91, 109, 91}, intArray0);
      assertArrayEquals(new int[] {2, 0, (-739), 109}, intArray1);
      assertEquals(8, intArray2.length);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-126);
      ArrayUtils.swap(byteArray0, (-1736), 91);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-1), (byte) (-126)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-110));
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 2998.287638618775, (double) (-739));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      int[] intArray0 = new int[13];
      intArray0[1] = (int) (byte)4;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(13, intArray0.length);
      assertEquals(13, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)51);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[7] = (byte)21;
      byteArray0[3] = (byte)0;
      byteArray0[8] = (byte)0;
      ArrayUtils.swap(byteArray0, (int) (byte)21, (int) (byte)21);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-85));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) (byte)21;
      doubleArray0[2] = Double.NaN;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1739.49), (-0.79099819));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {65.0, 21.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)65;
      ArrayUtils.shift(floatArray0, (int) (byte)6, 0, 0);
      assertArrayEquals(new float[] {0.0F, 65.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {65.0, 21.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {65.0, 21.0, Double.NaN, 65.0, 21.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = 897.51373F;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 1, 91, (-412));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      ArrayUtils.shift(charArray0, 278);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', '\u0000', 'g'}, charArray0);
      assertEquals(6, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'g';
      floatArray0[1] = (float) 'g';
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 'g';
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {103.0F, 103.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {103.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {103.0F}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-367);
      shortArray0[1] = (short) (-367);
      shortArray0[2] = (short) (-511);
      ArrayUtils.shift(shortArray0, (int) (short) (-511));
      assertArrayEquals(new short[] {(short) (-367), (short) (-511), (short) (-367)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (short) (-367);
      floatArray1[1] = (float) (short) (-367);
      floatArray1[2] = (float) (short) (-367);
      floatArray1[3] = (float) (short) (-367);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, (float[]) null);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-367.0F), (-367.0F), (-367.0F), (-367.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-367.0F), (-367.0F), (-367.0F), (-367.0F)}, floatArray2, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.swap((int[]) null, 734, 3110, 8);
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)127);
      assertNull(byteArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Ir$.wdQ9=LxB3";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      char char0 = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u', (-2127031422));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      Integer integer0 = new Integer(2764);
      assertNotNull(integer0);
      assertEquals(2764, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 5);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'l';
      intArray0[1] = 1879048192;
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) 'l';
      intArray0[4] = (int) 'l';
      Integer integer0 = Integer.valueOf(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Integer integer1 = new Integer(108);
      assertNotNull(integer1);
      assertEquals(108, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-1993));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, 'A');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'N', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (-28497);
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-3074.64F));
      assertNull(floatArray0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, (Integer) null);
      assertNull(integerArray0);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-28497), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)5}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-28497), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)5}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'N', 'e'}, charArray0);
      assertArrayEquals(new char[] {'N', 'e'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-3), 112, (int) (short) (-28497));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_LONG_ARRAY, 70, 70, 70);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'q';
      charArray0[2] = 'x';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'T', 'q', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)21;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)10);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)91, (byte)21, (byte) (-1), (byte) (-81), (byte) (-1), (byte) (-39), (byte)21}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (byte)91);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-825), (int) (short) (-825));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      ArrayUtils.reverse(charArray0, 217, 2556);
      assertArrayEquals(new char[] {'V', 'V', 'V'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'V', 'V', 'V'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer0 = new Integer(217);
      assertNotNull(integer0);
      assertEquals(217, (int)integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)0;
      Integer integer1 = new Integer((-2492));
      assertNotNull(integer1);
      assertEquals((-2492), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object1 = ArrayUtils.get(objectArray0, 217, (Object) integer1);
      assertNotNull(object1);
      assertEquals((-2492), object1);
      assertEquals(2, objectArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      intArray0[1] = (-1596);
      ArrayUtils.swap(intArray0, 1, (-1596), (-1596));
      assertArrayEquals(new int[] {(-1596), (-1596)}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.swap(byteArray0, 0, (int) (byte)0, (-1596));
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) (-1596);
      objectArray0[2] = (Object) (byte)2;
      objectArray0[4] = (Object) (-1596);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
      assertEquals(5, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 7, 3984);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1596), (-1596)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 551, 1942);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) byteArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleImmutableEntryArray0, 2023, 53);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {0, (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (-39));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shift((int[]) null, (-2196));
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '5');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-3802);
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) (-3802);
      integerArray0[4] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 1049, 0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean0);
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2905);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2905.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)1;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte) (-74), (byte)68, (byte)22, (byte)112, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)117, (byte)117, (byte) (-74), (byte)68, (byte)22, (byte)112, (byte)1}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 59;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {59, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      int int0 = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte byte0 = (byte) (-30);
      int int1 = 2218;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      int int2 = (-1054);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-1054));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1054, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      Integer integer0 = new Integer((-4094));
      assertNotNull(integer0);
      assertEquals((-4094), (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer1 = new Integer(2342);
      assertNotNull(integer1);
      assertEquals(2342, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-614));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -614, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 82;
      intArray0[1] = 3;
      intArray0[2] = 3544;
      intArray0[3] = 2143536067;
      intArray0[4] = 908;
      intArray0[5] = 114;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {82, 3, 3544, 2143536067, 908, 114}, intArray0);
      assertEquals(6, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byte byte0 = (byte) (-30);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)93;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 2218);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2218, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 40, 40, 40);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 40;
      intArray0[1] = 40;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 886, 40);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {40, 40}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)25518;
      shortArray0[2] = (short) (-317);
      shortArray0[3] = (short) (-1764);
      shortArray0[4] = (short) (-1779);
      shortArray0[5] = (short)69;
      shortArray0[6] = (short) (-1002);
      shortArray0[7] = (short)4014;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)25518, (short) (-317), (short) (-1764), (short) (-1779), (short)69, (short) (-1002), (short)4014}, shortArray0);
      assertArrayEquals(new short[] {(short)25518, (short) (-317), (short) (-1764), (short) (-1779), (short)69, (short) (-1002), (short)4014}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = '@';
      charArray0[2] = 'q';
      charArray0[3] = '0';
      charArray0[4] = 'B';
      charArray0[5] = 'E';
      charArray0[6] = '[';
      charArray0[7] = 'p';
      charArray0[8] = '>';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'p', (int) (short) (-1764));
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'?', '@', 'q', '0', 'B', 'E', '[', 'p', '>'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)16374);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      int[] intArray0 = new int[10];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-800), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -800, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (int) (byte)79, (int) (byte)79, 110);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 4256;
      ArrayUtils.swap(floatArray0, 316, 110, 4256);
      assertArrayEquals(new float[] {4256.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(4256, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-75));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'T';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', 'T'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 'Q';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ArrayUtils.swap(floatArray1, 2, 0, (int) (byte)12);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2147393398);
      intArray0[1] = (int) 'T';
      intArray0[2] = 2;
      intArray0[3] = (int) 'T';
      intArray0[4] = (int) (byte)12;
      intArray0[5] = 0;
      intArray0[6] = (int) 'T';
      intArray0[7] = (int) (byte)12;
      intArray0[8] = 2;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2147393398), 84, 2, 84, 12, 0, 84, 12, 2}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(18, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-96);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-96), 2224);
      assertEquals(5, int0);
      assertArrayEquals(new byte[] {(byte)3, (byte)12, (byte)17, (byte) (-96), (byte)12, (byte) (-96)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)12, (byte)17, (byte) (-96), (byte)12, (byte) (-96)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)12;
      floatArray0[1] = (float) (byte)17;
      floatArray0[2] = (float) (byte) (-96);
      floatArray0[3] = (float) (byte) (-96);
      floatArray0[4] = (float) (byte)12;
      floatArray0[5] = (float) (byte) (-96);
      floatArray0[6] = (float) (short)12;
      floatArray0[7] = (float) (byte)12;
      ArrayUtils.swap(floatArray0, (int) (byte)12, (-2147393398), 2);
      assertArrayEquals(new float[] {12.0F, 17.0F, (-96.0F), (-96.0F), 12.0F, (-96.0F), 12.0F, 12.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2224;
      intArray0[1] = (int) (short)12;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = 5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-281), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -281, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 878;
      intArray0[2] = (int) 'B';
      intArray0[3] = 1;
      intArray0[4] = 878;
      intArray0[5] = (int) 'B';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24339;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)24339, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)24339, (short)24339, (short)2, (short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = ArrayUtils.insert((-4452), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 878;
      doubleArray0[1] = (double) (short)24339;
      doubleArray0[2] = (double) 878;
      doubleArray0[3] = (double) (short)2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 543);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {878.0, 24339.0, 878.0, 2.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)24339, (double) 543);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {878.0, 24339.0, 878.0, 2.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      Float float0 = new Float((double) (byte)21);
      assertNotNull(float0);
      assertEquals(21.0F, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-29), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -29, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-115));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-115)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1518, 111);
      Integer integer0 = new Integer((-4094));
      assertNotNull(integer0);
      assertEquals((-4094), (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer integer1 = new Integer(2342);
      assertNotNull(integer1);
      assertEquals(2342, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      ArrayUtils.shift((Object[]) integerArray0, 105);
      assertEquals(5, integerArray0.length);
      
      Character character0 = Character.valueOf('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      Character character1 = Character.valueOf('Z');
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 111;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 2342;
      doubleArray0[3] = (double) (int)integerArray0[3];
      doubleArray0[4] = (-1215.327114701);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      Integer integer0 = new Integer(1833);
      assertNotNull(integer0);
      assertEquals(1833, (int)integer0);
      
      Integer[] integerArray0 = new Integer[18];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integerArray0[0];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(18, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (int)integerArray0[2];
      longArray0[1] = (long) (int)integerArray0[3];
      longArray0[2] = (long) (int)integerArray0[4];
      longArray0[3] = (long) (int)integerArray0[3];
      longArray0[4] = (long) (int)integerArray0[2];
      longArray0[6] = 1L;
      longArray0[7] = (long) (int)integerArray0[2];
      longArray0[8] = (long) (int)integerArray0[4];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1833L, 1833);
      assertEquals(8, int0);
      assertArrayEquals(new long[] {1833L, 1833L, 1833L, 1833L, 1833L, 0L, 1L, 1833L, 1833L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1741);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'T';
      floatArray0[2] = (float) 'T';
      floatArray0[3] = (-5162.8F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 76.0F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, (-5162.8F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'T';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {84L}, longArray0);
      assertArrayEquals(new long[] {84L, 84L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 2915, 1982292598, 0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {84L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1684.3608F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, (-5162.8F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray1, 0L);
      assertNotNull(bitSet1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {84L}, longArray0);
      assertArrayEquals(new long[] {84L, 84L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'T';
      intArray0[1] = (int) (short) (-696);
      intArray0[2] = 2915;
      intArray0[3] = 0;
      intArray0[4] = (int) 'T';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {84, (-696), 2915, 0, 84, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {84, (-696), 2915, 0, 84, 0, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean2 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = ArrayUtils.isEmpty(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(boolean3);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("-p|iM`zJ!pKng= ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1472.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (-1472.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (-3505));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1472.0), 0.0, 1.5, (-1472.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "");
      assertNotNull(string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-3505);
      longArray0[1] = (-3505L);
      longArray0[2] = (-893L);
      boolean boolean4 = ArrayUtils.contains(longArray0, (-58L));
      assertFalse(boolean4);
      assertArrayEquals(new long[] {(-3505L), (-3505L), (-893L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_OBJECT_ARRAY, object0, (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(35, object0);
      
      char[] charArray0 = new char[8];
      charArray0[5] = 'N';
      charArray0[1] = '0';
      charArray0[3] = 'q';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Short short0 = new Short((short) (-1636));
      assertNotNull(short0);
      assertEquals((short) (-1636), (short)short0);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      short short1 = (short)2;
      Short short2 = new Short((short)2);
      assertNotNull(short2);
      assertEquals((short)2, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[1] = short2;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short) (-1636), 35);
      assertEquals((-1), int0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-2409), (int) shortArray0[2]);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Integer integer1 = new Integer((int) shortArray0[0]);
      assertNotNull(integer1);
      assertEquals((-1636), (int)integer1);
      assertEquals(5, shortArray0.length);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) object0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(5, shortArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) short1;
      objectArray0[1] = (Object) '0';
      objectArray0[2] = (Object) 'q';
      objectArray0[3] = (Object) shortArray0[2];
      objectArray0[4] = (Object) abstractMap_SimpleImmutableEntry0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) abstractMap_SimpleImmutableEntry0, (int) shortArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, shortArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift((Object[]) doubleArray0, (-1));
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-83);
      longArray0[3] = (long) (-83);
      ArrayUtils.swap(longArray0, 5, (-1));
      assertArrayEquals(new long[] {(-1L), (-1L), (-83L), (-83L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-83L), (-83L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      Integer integer0 = new Integer(4889);
      assertNotNull(integer0);
      assertEquals(4889, (int)integer0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.swap(longArray0, 4889, 4889);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-1L));
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-1), 4889, (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.shift(byteArray0, (int) (byte)1, (int) (byte)1, (int) (byte)1);
      assertEquals(17, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shift(byteArray0, (int) (byte) (-57), (int) (byte)5, (int) (byte)5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-299), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)850);
      assertNotNull(short0);
      assertEquals((short)850, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-118));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)850}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-4589);
      intArray0[1] = 2146973314;
      intArray0[2] = (-4589);
      intArray0[3] = (-4589);
      intArray0[4] = (int) (short)850;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-4589));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-4589), 2146973314, (-4589), (-4589), 850}, intArray0);
      assertArrayEquals(new int[] {2146973314, (-4589), (-4589), 850}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2125344640), (int) (short) (-118));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-4589), 2146973314, (int) (byte) (-28));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-3505);
      float[] floatArray0 = new float[1];
      intArray0[2] = (-3505);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[2] = 'J';
      charArray0[3] = 'j';
      charArray0[5] = 'j';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'', 'j', 'J', 'j', '\u0000', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 'J');
      assertNotNull(object0);
      assertEquals('J', object0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      assertNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-3505);
      integerArray0[1] = (Integer) (-3505);
      integerArray0[2] = (Integer) (-3505);
      integerArray0[3] = (Integer) (-3505);
      integerArray0[4] = (Integer) (-3505);
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[2]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-28);
      ArrayUtils.shift(byteArray0, (int) (byte) (-28), 2, 1626);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)1, (byte)0, (byte) (-1), (byte) (-28)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = new int[2];
      intArray0[1] = (-3471);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3471, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-123));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray1, true);
      assertNotNull(bitSet1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)113;
      doubleArray0[3] = (double) (byte) (-123);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)113;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte) (-123);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 113.0, (-123.0), 0.0, 113.0, 0.0, (-123.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer integer0 = new Integer((-3029));
      assertNotNull(integer0);
      assertEquals((-3029), (int)integer0);
      
      Integer integer1 = new Integer((-3029));
      assertNotNull(integer1);
      assertEquals((-3029), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3176));
      assertNotNull(integer2);
      assertEquals((-3176), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[0]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-374.5395189751093), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((-374.5395189751093), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      ArrayUtils.reverse(byteArray0, (int) (byte) (-92), 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-92);
      shortArray0[1] = (short) (byte) (-92);
      shortArray0[2] = (short) (byte) (-92);
      shortArray0[3] = (short) (byte) (-92);
      shortArray0[4] = (short) (byte) (-92);
      shortArray0[5] = (short)3;
      shortArray0[6] = (short) (byte) (-92);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-92), (short) (-92), (short) (-92), (short) (-92), (short) (-92), (short)3, (short) (-92)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-92), (short) (-92), (short) (-92), (short) (-92), (short) (-92), (short)3, (short) (-92)}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-6);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-6);
      longArray0[1] = (-4686L);
      longArray0[2] = (long) (byte) (-56);
      longArray0[3] = (long) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4589), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4589, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1183;
      longArray0[1] = (long) 1183;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1183, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1183, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2258;
      intArray0[2] = 15;
      intArray0[3] = 3538;
      intArray0[4] = (-914);
      intArray0[5] = 829;
      ArrayUtils.swap(intArray0, 0, (-1227), 3538);
      assertArrayEquals(new int[] {2, 2258, 15, 3538, (-914), 829}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2258, 15, 3538, (-914), 829}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[2] = '!';
      charArray0[3] = '?';
      charArray0[4] = 'U';
      charArray0[5] = 'N';
      charArray0[6] = '<';
      charArray0[7] = '%';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '|', 15);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'_', '\u0000', '!', '?', 'U', 'N', '<', '%'}, charArray0);
      assertEquals(8, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'U';
      longArray0[1] = (long) 15;
      longArray0[2] = 1L;
      longArray0[3] = (long) '<';
      longArray0[4] = (long) 15;
      longArray0[5] = (long) 0;
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 15;
      longArray1[1] = (long) 2;
      longArray1[2] = (long) 15;
      longArray1[3] = (long) 3538;
      longArray1[4] = (long) '?';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1340, longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1340, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-3505);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-925);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (-925);
      longArray0[7] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-3505L), 2L, 2L, (-925L), 2L, 2L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-39);
      Long long0 = new Long(752L);
      assertNotNull(long0);
      assertEquals(752L, (long)long0);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-3505L);
      longArray1[1] = (Long) (-925L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-3505L), (-925L)}, longArray2);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      ArrayUtils.swap(byteArray0, (int) (byte)35, 1136, 2897);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)35, (byte) (-39)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (-925L));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-46);
      byteArray0[8] = (byte)79;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)41, (int) (byte)2);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)64, (byte) (-96), (byte)2, (byte) (-1), (byte)18, (byte) (-16), (byte) (-46), (byte)79}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, (int) (byte) (-16));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)64;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-96);
      longArray0[4] = (long) (byte)18;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (byte)79;
      longArray0[8] = (long) (byte) (-96);
      MockRandom mockRandom0 = new MockRandom(1796L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-96L), 18L, (-1L), (-1L), 79L, (-96L), 64L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals("-1596", mutableInt0.toString());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1596), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals("-1596", mutableInt0.toString());
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = new Integer(1796);
      assertNotNull(integer4);
      assertEquals(1796, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = new Integer(4301);
      assertNotNull(integer6);
      assertEquals(4301, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      
      Integer integer7 = new Integer(0);
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      
      Integer integer8 = new Integer(0);
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer1));
      
      mutableInt0.setValue((Number) integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer1));
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      Integer integer9 = new Integer(0);
      assertNotNull(integer9);
      assertEquals(0, (int)integer9);
      assertFalse(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)int0));
      assertTrue(integer9.equals((Object)integer3));
      assertTrue(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer2));
      assertTrue(integer9.equals((Object)integer5));
      assertTrue(integer9.equals((Object)integer8));
      
      integerArray0[1] = integer9;
      integerArray0[2] = integer8;
      integerArray0[3] = integer1;
      integerArray0[4] = integer6;
      integerArray0[5] = integer5;
      integerArray0[6] = integer2;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(6, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      int int1 = ArrayUtils.indexOf(floatArray0, (-860.1F), 160);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)50;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-19));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)15, (byte)65, (byte)18, (byte) (-13), (byte)114, (byte)0, (byte)50}, byteArray1);
      assertArrayEquals(new byte[] {(byte)15, (byte)65, (byte)18, (byte) (-13), (byte)114, (byte)0, (byte)50}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift((float[]) null, 1855, (-2147021122), 1855);
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, 'A');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'N', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short) (-28497);
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-3074.64F));
      assertNull(floatArray0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, (Integer) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-28497), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'N', 'e'}, charArray0);
      assertArrayEquals(new char[] {'N', 'e'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      
      ArrayUtils.swap(booleanArray0, (-2905), (-2905));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-2905);
      longArray0[1] = (-1L);
      longArray0[2] = (long) 'T';
      longArray0[3] = (long) 'T';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-2905L), (-1L), 84L, 84L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.reverse(longArray0, (-2905), (-2146782999));
      assertArrayEquals(new long[] {(-2905L), (-1L), 84L, 84L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.swap(charArray0, (-2905), (-2146782999));
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (-1L);
      objectArray1[1] = (Object) 'T';
      objectArray1[2] = (Object) 'T';
      objectArray1[3] = (Object) 84L;
      objectArray1[4] = (Object) bitSet0;
      objectArray1[5] = (Object) false;
      objectArray1[6] = (Object) (-2905L);
      objectArray1[7] = (Object) bitSet0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray0);
      assertNotNull(map0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      Integer integer0 = new Integer(155);
      assertNotNull(integer0);
      assertEquals(155, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer1 = new Integer(155);
      assertNotNull(integer1);
      assertEquals(155, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(155);
      assertNotNull(integer2);
      assertEquals(155, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry4);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      abstractMap_SimpleImmutableEntryArray1[0] = abstractMap_SimpleImmutableEntry3;
      abstractMap_SimpleImmutableEntryArray1[1] = abstractMap_SimpleImmutableEntry6;
      abstractMap_SimpleImmutableEntryArray1[2] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray1[3] = abstractMap_SimpleImmutableEntry4;
      abstractMap_SimpleImmutableEntryArray1[4] = abstractMap_SimpleImmutableEntry6;
      abstractMap_SimpleImmutableEntryArray1[5] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray2.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2L, Integer.MAX_VALUE);
      assertEquals(4, int0);
      assertArrayEquals(new long[] {2L, 2L, 0L, 2L, 2L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.swap(booleanArray0, (-2905), (-2905));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2905);
      longArray0[2] = (long) (-2905);
      longArray0[3] = (long) (-2905);
      longArray0[4] = (long) (-2905);
      longArray0[5] = (long) (-2905);
      longArray0[6] = (long) (-2905);
      longArray0[7] = (-191L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-2905L), 0L, (-2905L), (-2905L), (-2905L), (-2905L), (-2905L), (-191L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.reverse(longArray0, (-2905), 1);
      assertArrayEquals(new long[] {(-2905L), 0L, (-2905L), (-2905L), (-2905L), (-2905L), (-2905L), (-191L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'm';
      charArray0[2] = ')';
      charArray0[3] = '=';
      charArray0[4] = 'u';
      ArrayUtils.swap(charArray0, (-2905), (-2905));
      assertArrayEquals(new char[] {'o', 'm', ')', '=', 'u'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2905));
      assertNotNull(integer0);
      assertEquals((-2905), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2905));
      assertNotNull(integer1);
      assertEquals((-2905), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4589));
      assertNotNull(integer2);
      assertEquals((-4589), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt((-191L));
      assertNotNull(mutableInt0);
      assertEquals((-191), mutableInt0.intValue());
      assertEquals((-191), (int)mutableInt0.getValue());
      assertEquals((byte)65, mutableInt0.byteValue());
      assertEquals((-191.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-191), (int)mutableInt0.toInteger());
      assertEquals((-191L), mutableInt0.longValue());
      assertEquals((-191.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-191), mutableInt0.shortValue());
      assertEquals("-191", mutableInt0.toString());
      
      Integer integer3 = mutableInt0.getValue();
      assertNotNull(integer3);
      assertEquals((-191), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-191), mutableInt0.intValue());
      assertEquals((-191), (int)mutableInt0.getValue());
      assertEquals((byte)65, mutableInt0.byteValue());
      assertEquals((-191.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-191), (int)mutableInt0.toInteger());
      assertEquals((-191L), mutableInt0.longValue());
      assertEquals((-191.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-191), mutableInt0.shortValue());
      assertEquals("-191", mutableInt0.toString());
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(787);
      assertNotNull(integer4);
      assertEquals(787, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[4]);
      assertNotNull(integer6);
      assertEquals(787, (int)integer6);
      assertEquals(8, integerArray0.length);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[2]);
      assertNotNull(integer7);
      assertEquals((-4589), (int)integer7);
      assertEquals(8, integerArray0.length);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer2));
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (byte)0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-345.99091713405);
      ArrayUtils.shuffle(doubleArray1);
      assertArrayEquals(new double[] {(-345.99091713405)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      doubleArray1[0] = (double) (byte)68;
      ArrayUtils.reverse(byteArray0, 1566, (int) (byte) (-128));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)79;
      shortArray0[2] = (short) (byte)0;
      shortArray0[2] = (short) (-2);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[4] = (short) (byte) (-128);
      shortArray0[5] = (short) (-2);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)79, (short)0, (short) (-2), (short) (-128), (short) (-128), (short) (-2), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(18, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 4054;
      intArray0[1] = 1566;
      intArray0[2] = (int) (short) (-2);
      intArray0[3] = 1566;
      intArray0[4] = 1;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {4054, 1566, (-2), 1566, 1}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 0.0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {68.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {68.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (int) (short) (-2), (-4589), (int) (short)79);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-2084), (-2084), 481);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, ';');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = '9';
      charArray0[6] = 'i';
      charArray0[7] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', '9', 'i', 'i'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-107);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-15));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)28, (byte)117, (byte) (-1), (byte)124, (byte)10, (byte) (-1), (byte) (-107)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)28, (byte)117, (byte) (-1), (byte)124, (byte)10, (byte) (-1), (byte) (-107)}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-107);
      intArray0[1] = (int) (byte)124;
      intArray0[2] = (int) 'i';
      intArray0[3] = 2146973314;
      intArray0[4] = (int) (byte)10;
      intArray0[5] = (int) (short)2098;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {(-107), 124, 105, 2146973314, 10, 2098}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 4643, 0, 4643);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 0);
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 4643;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0490072772445458);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 4643.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 4643.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4643.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 4643);
      assertNotSame(longArray0, longArray1);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-3538), 232, 232);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-3538), (-3538), (-3538));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-3538), 226, 226);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[3] = (-3078L);
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, (-32), 4643, (-3064));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-3064));
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 4643;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-3064);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) (-3064);
      doubleArray0[7] = (double) 4643;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 4643.0, 0.0, (-1.0), (-3064.0), (-1.0), (-3064.0), 4643.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)850);
      assertNotNull(short0);
      assertEquals((short)850, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)34);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)850}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap(shortArray1, (-2402), (-1648), (-32));
      assertArrayEquals(new short[] {(short)850}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Short short1 = new Short((short)1111);
      assertNotNull(short1);
      assertEquals((short)1111, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      short short2 = (short)0;
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertEquals((short)0, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      
      Short[] shortArray2 = new Short[7];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = short1;
      Short short4 = new Short((short)1945);
      assertNotNull(short4);
      assertEquals((short)1945, (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      
      shortArray2[1] = short4;
      shortArray2[2] = short3;
      shortArray2[3] = short0;
      shortArray2[4] = short3;
      shortArray2[5] = short3;
      shortArray2[6] = short3;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)1111, (short)1945, (short)0, (short)850, (short)0, (short)0, (short)0}, shortArray3);
      assertEquals(7, shortArray3.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-32);
      doubleArray0[1] = (double) (short)shortArray2[3];
      doubleArray0[2] = (-1331.765444786514);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)0, (double) short2);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-32.0), 850.0, (-1331.765444786514)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)5;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)5}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)5}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-121);
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, 684.0F);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = (-3802);
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), (-3802)}, intArray0);
      assertArrayEquals(new int[] {0, (-3802), (-3802)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (-32));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-3802), (-3802)}, intArray0);
      assertArrayEquals(new int[] {(-3802), (-3802)}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      Float float0 = new Float((-201.857));
      assertNotNull(float0);
      assertEquals((-201.857F), (float)float0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, 'A');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'N', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (-28497);
      shortArray0[2] = (short)108;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1584;
      shortArray0[6] = (short)30386;
      shortArray0[7] = (short)591;
      shortArray0[8] = (short) (-2);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)5, (short) (-28497), (short)108, (short)8, (short)1, (short)1584, (short)30386, (short)591, (short) (-2)}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)8, 77);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)8);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte)7;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, (byte[]) null);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)7}, byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)7}, byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Integer integer0 = new Integer((-29));
      assertNotNull(integer0);
      assertEquals((-29), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1089.355);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1089.355, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)21;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)10);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)91, (byte)21, (byte) (-1), (byte) (-81), (byte) (-1), (byte) (-39), (byte)21}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'X';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'d', 'X'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.1);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.1, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-60);
      doubleArray0[5] = (double) (-1092);
      doubleArray0[7] = 988.01569055206;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-2125344640), 1003.8);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-60.0), 0.0, 0.0, 0.0, 0.0, (-1092.0), 0.0, 988.01569055206}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 809);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '0');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)41;
      shortArray0[2] = (short) (byte)41;
      shortArray0[3] = (short) (byte)41;
      shortArray0[4] = (short)984;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)0);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short)0, (short)41, (short)41, (short)41, (short)984}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) shortArray0, (Object) null);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'E';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = 'G';
      charArray0[6] = '0';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'G', 'G', 'E', '0', '0', 'G', '0'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1018));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'G', 'G', 'E', '0', '0', 'G', '0'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '0';
      objectArray0[1] = (Object) 'E';
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) 'G';
      ArrayUtils.shift(objectArray0, (int) (byte)0, 1230, 2);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1596), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(1780);
      assertNotNull(integer4);
      assertEquals(1780, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer integer6 = new Integer(4301);
      assertNotNull(integer6);
      assertEquals(4301, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      
      Integer integer7 = new Integer(0);
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer3));
      
      Integer integer8 = new Integer(0);
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer1));
      
      mutableInt0.setValue((Number) integer8);
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer1));
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      Integer integer9 = new Integer(0);
      assertNotNull(integer9);
      assertEquals(0, (int)integer9);
      assertTrue(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer5));
      assertTrue(integer9.equals((Object)integer1));
      assertTrue(integer9.equals((Object)integer8));
      
      integerArray0[1] = integer9;
      integerArray0[2] = integer8;
      ArrayUtils.shift((Object[]) integerArray0, (-1596));
      assertEquals(7, integerArray0.length);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('P');
      assertNotNull(character0);
      assertEquals('P', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('\'');
      assertNotNull(character1);
      assertEquals('\'', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-5162.7998046875));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-543));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-543)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short[] shortArray0 = new Short[15];
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 5, 5);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.shift((Object[]) shortArray0, 5);
      assertEquals(15, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertSame(shortArray0, objectArray0);
      assertEquals(15, shortArray0.length);
      assertEquals(15, objectArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'E');
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 64;
      intArray0[1] = (int) 'E';
      intArray0[2] = 5;
      intArray0[3] = (int) 'E';
      intArray0[4] = (int) 'E';
      intArray0[5] = (int) 'E';
      intArray0[6] = (int) 'E';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 6036, 64);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {64, 69, 5, 69, 69, 69, 69}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      short[] shortArray1 = new short[8];
      shortArray1[0] = (short)1328;
      shortArray1[1] = (short)1973;
      shortArray1[2] = (short) (-796);
      shortArray1[3] = (short)397;
      shortArray1[4] = (short) (-1);
      shortArray1[5] = (short)16;
      shortArray1[6] = (short)4340;
      shortArray1[7] = (short) (-1325);
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (-1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {(short) (-1), (short)1328, (short)1973, (short) (-796), (short)397, (short) (-1), (short)16, (short)4340, (short) (-1325)}, shortArray2);
      assertArrayEquals(new short[] {(short)1328, (short)1973, (short) (-796), (short)397, (short) (-1), (short)16, (short)4340, (short) (-1325)}, shortArray1);
      assertEquals(9, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1167;
      intArray0[2] = (-1795);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-533));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1167, (-1795), 0}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1167, (-1795), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArrayUtils.shift(byteArray0, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)2);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-230), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -230, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 3896);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-2349), 0, (-3821));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)12;
      intArray0[1] = (-1324);
      intArray0[2] = (-1324);
      ArrayUtils.swap(intArray0, (-2407), 2, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-1324), (-1324), 12}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[4] = '0';
      ArrayUtils.reverse(charArray0, 1634, (-1324));
      assertArrayEquals(new char[] {'G', '0', '0', '\u0000', '0'}, charArray0);
      assertEquals(5, charArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) 12;
      floatArray0[3] = (float) 'V';
      floatArray0[4] = (float) '0';
      floatArray0[5] = (float) '\u0000';
      floatArray0[6] = (float) 'V';
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 12.0F, 86.0F, 48.0F, 0.0F, 86.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 12;
      integerArray0[1] = (Integer) (-1324);
      integerArray0[2] = (Integer) 12;
      integerArray0[3] = (Integer) (-1324);
      integerArray0[4] = (Integer) (-1324);
      integerArray0[5] = (Integer) (-1324);
      integerArray0[6] = (Integer) 12;
      integerArray0[7] = (Integer) (-1324);
      Integer integer0 = ArrayUtils.get(integerArray0, 12);
      assertNull(integer0);
      assertEquals(8, integerArray0.length);
      
      Integer integer1 = new Integer(2146787091);
      assertNotNull(integer1);
      assertEquals(2146787091, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      byte[] byteArray0 = null;
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 1974.23;
      doubleArray0[1] = 1974.23;
      doubleArray0[2] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = 2282.068;
      int int0 = (-84);
      ArrayUtils.shift(doubleArray0, 0, 0, 5);
      assertEquals(11, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-84), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -84, Length: 11
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(108, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      Boolean boolean0 = new Boolean("& 8v[;DbrE/");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("fO.``FRI!qT(4LLZuw4");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Float float0 = new Float(4.0F);
      assertNotNull(float0);
      assertEquals(4.0F, (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 0.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray2);
      assertNotNull(floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      double[] doubleArray0 = ArrayUtils.insert(0, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      Double double0 = new Double((-1917.0));
      assertNotNull(double0);
      assertEquals((-1917.0), (double)double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1917.0);
      doubleArray0[1] = (-1917.0);
      doubleArray0[2] = (-1917.0);
      doubleArray0[3] = (-1917.0);
      doubleArray0[4] = (-1917.0);
      doubleArray0[5] = (-1917.0);
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {(-1917.0), (-1917.0), (-1917.0), (-1917.0), (-1917.0), (-1917.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, 0, 2, 2147203320);
      assertArrayEquals(new double[] {(-1917.0), (-1917.0), (-1917.0), (-1917.0), (-1917.0), (-1917.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'s', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[11];
      longArray0[0] = (long) 'g';
      longArray0[5] = (long) 's';
      ArrayUtils.shift((int[]) null, (-1432));
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'v');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'s', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 115L;
      floatArray0[1] = (float) 'g';
      floatArray0[2] = (float) 'v';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1595));
      assertNotNull(integer0);
      assertEquals((-1595), (int)integer0);
      
      Integer integer1 = new Integer((-2905));
      assertNotNull(integer1);
      assertEquals((-2905), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(6);
      assertNotNull(integer2);
      assertEquals(6, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(2645);
      assertNotNull(integer3);
      assertEquals(2645, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = Integer.getInteger("i3Ul#/Gy^%c/", 2645);
      assertNotNull(integer4);
      assertEquals(2645, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1595), 2145484128);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertTrue(boolean0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1049;
      doubleArray0[2] = (double) 0.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1049.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = new Double(2145484128);
      assertNotNull(double0);
      assertEquals(2.145484128E9, (double)double0, 0.01);
      
      Double double1 = new Double((double) integerArray0[3]);
      assertNotNull(double1);
      assertEquals((-2905.0), (double)double1, 0.01);
      assertEquals(4, integerArray0.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 0.0F);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 1049.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1049.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1125));
      Integer integer0 = new Integer((-1125));
      assertNotNull(integer0);
      assertEquals((-1125), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1125));
      assertNotNull(integer2);
      assertEquals((-1125), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer((-1125));
      assertNotNull(integer3);
      assertEquals((-1125), (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)8);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (int) (short)8;
      intArray0[2] = (int) (short)8;
      intArray0[3] = 0;
      intArray0[4] = (int) (short)8;
      intArray0[5] = 2;
      intArray0[6] = (-487);
      intArray0[7] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 90);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 8, 8, 0, 8, 2, (-487), 0}, intArray1);
      assertArrayEquals(new int[] {1, 8, 8, 0, 8, 2, (-487), 0}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_CHAR_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-32), (-1));
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'w';
      charArray0[3] = ')';
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) '8';
      intArray0[2] = (int) '8';
      intArray0[3] = (int) ')';
      ArrayUtils.shift(intArray0, (-1432));
      assertArrayEquals(new int[] {41, 56, 56, 41}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', '5', 'w', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'5', 'w', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 56;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-2905), (-2686));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '8';
      doubleArray0[1] = (double) 41;
      doubleArray0[2] = (double) (-2905);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {56.0, 41.0, (-2905.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, Integer.MAX_VALUE);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1070.5), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'Q';
      charArray0[2] = '\u0000';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '\u0000';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'Q', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      ArrayUtils.shift((short[]) null, (-636));
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'Q';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[2] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 0, 0, (-1));
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)84;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)7, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)13, (byte)44, (byte)7, (byte) (-84), (byte)84}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-3325.67));
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      short[] shortArray1 = ArrayUtils.insert((int) (short)8, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)12, (short)12, (short)12, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = ArrayUtils.insert((int) (byte)12, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray2);
      
      short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray3);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertSame(shortArray3, shortArray1);
      assertArrayEquals(new short[] {(short)12, (short)12, (short)12, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertEquals(20, shortArray3.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) (byte)0;
      ArrayUtils.shift(doubleArray0, (int) (byte)0, (-1471), 2145206900);
      assertArrayEquals(new double[] {0.0, 0.0, 2.147483647E9, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(35, object0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = new Integer(918);
      assertNotNull(integer1);
      assertEquals(918, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-2167), integer1);
      assertNotNull(integer2);
      assertEquals(918, (int)integer2);
      assertEquals(0, integerArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1955;
      shortArray0[1] = (short)12;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)2757;
      shortArray0[5] = (short)13;
      shortArray0[6] = (short) (-603);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)12);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)1955, (short)12, (short)15, (short) (-1), (short)2757, (short)13, (short) (-603)}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'T';
      intArray0[1] = (int) 'T';
      intArray0[2] = (int) 'T';
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = 1722L;
      longArray0[2] = (long) 'T';
      longArray0[3] = (long) 'T';
      longArray0[4] = (long) 'T';
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {84L, 84L, 84L, 1722L, 1L}, longArray0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3152;
      shortArray0[1] = (short)2057;
      shortArray0[2] = (short)99;
      shortArray0[3] = (short) (-1390);
      ArrayUtils.reverse(shortArray0, (int) (short)3152, (int) (short) (-1390));
      assertArrayEquals(new short[] {(short)3152, (short)2057, (short)99, (short) (-1390)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Long long0 = new Long(366L);
      assertNotNull(long0);
      assertEquals(366L, (long)long0);
      
      Long long1 = new Long((-622L));
      assertNotNull(long1);
      assertEquals((-622L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-164));
      assertNotNull(integer2);
      assertEquals((-164), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer3);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      Float float0 = new Float((double) (-895L));
      assertNotNull(float0);
      assertEquals((-895.0F), (float)float0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertNotNull(mutableInt0);
      assertEquals((-895), mutableInt0.intValue());
      assertEquals("-895", mutableInt0.toString());
      assertEquals((-895), (int)mutableInt0.getValue());
      assertEquals((-895), (int)mutableInt0.toInteger());
      assertEquals((byte) (-127), mutableInt0.byteValue());
      assertEquals((-895L), mutableInt0.longValue());
      assertEquals((-895.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-895), mutableInt0.shortValue());
      assertEquals((-895.0), mutableInt0.doubleValue(), 0.01);
      
      Integer integer4 = mutableInt0.getValue();
      assertNotNull(integer4);
      assertEquals((-895), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals((-895), mutableInt0.intValue());
      assertEquals("-895", mutableInt0.toString());
      assertEquals((-895), (int)mutableInt0.getValue());
      assertEquals((-895), (int)mutableInt0.toInteger());
      assertEquals((byte) (-127), mutableInt0.byteValue());
      assertEquals((-895L), mutableInt0.longValue());
      assertEquals((-895.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-895), mutableInt0.shortValue());
      assertEquals((-895.0), mutableInt0.doubleValue(), 0.01);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2942L);
      floatArray0[1] = (float) 366L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-2942.0F), 366.0F, (-2942.0F), 366.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2942.0F), 366.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 'g';
      charArray0[2] = 's';
      charArray0[3] = 's';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      long[] longArray0 = new long[3];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-81);
      shortArray0[1] = (short) (byte) (-81);
      shortArray0[2] = (short) (byte) (-81);
      shortArray0[3] = (short) (byte) (-81);
      shortArray0[4] = (short) (byte) (-81);
      shortArray0[5] = (short)23;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)23, (short) (-81), (short) (-81), (short) (-81), (short) (-81), (short) (-81)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, (int) (byte) (-81), Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1651);
      ArrayUtils.reverse(shortArray0, (-892), 2864);
      assertArrayEquals(new short[] {(short) (-1651)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-922);
      shortArray0[1] = (short)12;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)12, (short) (-922)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(444);
      assertNotNull(integer0);
      assertEquals(444, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2867));
      assertNotNull(integer1);
      assertEquals((-2867), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)12);
      assertNotNull(integer2);
      assertEquals(12, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(321);
      assertNotNull(integer3);
      assertEquals(321, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertNotNull(integer4);
      assertEquals(12, (int)integer4);
      assertEquals(7, integerArray0.length);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2867));
      assertNotNull(integer5);
      assertEquals((-2867), (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      MutableInt mutableInt0 = new MutableInt((Number) integer3);
      assertNotNull(mutableInt0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(321L, mutableInt0.longValue());
      assertEquals(321, mutableInt0.intValue());
      assertEquals(321.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)321, mutableInt0.shortValue());
      assertEquals(321, (int)mutableInt0.toInteger());
      assertEquals("321", mutableInt0.toString());
      assertEquals((byte)65, mutableInt0.byteValue());
      assertEquals(321.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(321, (int)mutableInt0.getValue());
      
      Integer integer6 = mutableInt0.getValue();
      assertNotNull(integer6);
      assertEquals(321, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(321L, mutableInt0.longValue());
      assertEquals(321, mutableInt0.intValue());
      assertEquals(321.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)321, mutableInt0.shortValue());
      assertEquals(321, (int)mutableInt0.toInteger());
      assertEquals("321", mutableInt0.toString());
      assertEquals((byte)65, mutableInt0.byteValue());
      assertEquals(321.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(321, (int)mutableInt0.getValue());
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {444, (-2867), 12, 321, 12, (-2867), 321}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      int int0 = 83;
      Integer integer0 = Integer.valueOf(83);
      assertNotNull(integer0);
      assertEquals(83, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertEquals(83, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1514);
      assertNotNull(integer2);
      assertEquals(1514, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(83);
      assertNotNull(integer3);
      assertEquals(83, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertEquals(83, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1514);
      assertNotNull(integer5);
      assertEquals(1514, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      assertNotNull(integer6);
      assertEquals(1514, (int)integer6);
      assertEquals(9, integerArray0.length);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-497));
      assertNotNull(integer7);
      assertEquals((-497), (int)integer7);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      
      integerArray0[7] = integer7;
      Integer integer8 = Integer.getInteger("hEjl|A[)qV'", 1);
      assertNotNull(integer8);
      assertEquals(1, (int)integer8);
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      
      integerArray0[8] = integer8;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(35, object0);
      
      char[] charArray0 = new char[8];
      charArray0[5] = '0';
      charArray0[1] = '0';
      charArray0[3] = 'q';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Short short0 = new Short((short) (-1636));
      assertNotNull(short0);
      assertEquals((short) (-1636), (short)short0);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short) (-1636), 35);
      assertEquals((-1), int0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-2409), (int) shortArray0[2]);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 11);
      Integer integer1 = new Integer((int) shortArray0[0]);
      assertNotNull(integer1);
      assertEquals((-1636), (int)integer1);
      assertEquals(5, shortArray0.length);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) object0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(5, shortArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(444).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertFalse(boolean0);
      assertEquals(11, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2125344640);
      doubleArray0[1] = 521.54666288;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2125344640), (-3151), 1003.8);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2.12534464E9), 521.54666288}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = ArrayUtils.get(integerArray0, Integer.MAX_VALUE);
      assertNull(integer0);
      assertEquals(1, integerArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new double[] {(-2.12534464E9), 521.54666288}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      ArrayUtils.shift(doubleArray0, (-3151));
      assertArrayEquals(new double[] {521.54666288, (-2.12534464E9)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3151);
      intArray0[1] = (-2125344640);
      intArray0[2] = (-3151);
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-3151);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3151), (-2125344640), (-3151), Integer.MAX_VALUE, (-3151)}, intArray0);
      assertArrayEquals(new int[] {(-3151), (-2125344640), (-3151), Integer.MAX_VALUE, (-3151)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-1596), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-70);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(15, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1230), (int) (byte)127);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)41;
      doubleArray0[5] = (double) (-1092);
      doubleArray0[7] = 988.01569055206;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-2125344640), 1003.8);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {41.0, 0.0, 0.0, 0.0, 0.0, (-1092.0), 0.0, 988.01569055206}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-60), (int) (byte) (-60), (-1221));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)64;
      doubleArray0[3] = (double) (byte)41;
      byteArray0[7] = (byte)64;
      byte[] byteArray1 = ArrayUtils.insert(4, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte)64, (byte) (-60), (byte)41, (byte)64, (byte)0, (byte)64}, byteArray0);
      assertEquals(16, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)64;
      intArray0[1] = (int) (byte)64;
      intArray0[2] = (int) (byte)64;
      intArray0[3] = (int) (byte)64;
      intArray0[4] = 1971;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {64, 64, 64, 64, 1971}, intArray0);
      assertArrayEquals(new int[] {64, 64, 64, 64, 1971}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1114.5367516773;
      Double double0 = new Double(67.0);
      assertNotNull(double0);
      assertEquals(67.0, (double)double0, 0.01);
      
      Double double1 = Double.valueOf(1114.5367516773);
      assertNotNull(double1);
      assertEquals(1114.5367516773, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-5453);
      shortArray0[2] = (short) (-5453);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-5453);
      shortArray0[5] = (short) (-5453);
      shortArray0[6] = (short) (-5453);
      shortArray0[7] = (short) (-5453);
      shortArray0[8] = (short) (-2484);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2849);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-5453), (short) (-5453), (short) (-1), (short) (-5453), (short) (-5453), (short) (-5453), (short) (-5453), (short) (-2484)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-5453), (short) (-5453), (short) (-1), (short) (-5453), (short) (-5453), (short) (-5453), (short) (-5453), (short) (-2484)}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer((short) (-2484));
      assertNotNull(integer0);
      assertEquals((-2484), (int)integer0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-5453);
      intArray0[1] = (int) (short) (-5453);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 108);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-5453), (-5453)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-426);
      shortArray0[1] = (short) (-2686);
      shortArray0[2] = (short)2750;
      shortArray0[3] = (short)51;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-426), (short) (-2686), (short)2750, (short)51}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift(booleanArray0, 115, (int) (short) (-426), 115);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_FIELD_ARRAY, (-2942));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-2942), (-2942), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 8192);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 8192;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 8192;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) 8192;
      floatArray0[7] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {8192.0F, 2.0F, 2.0F, 8192.0F, 0.0F, (-1.0F), 8192.0F, 2.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {8192.0F, 2.0F, 2.0F, 8192.0F, 0.0F, 8192.0F, 2.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 8192;
      longArray0[1] = (long) 8192;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      ArrayUtils.shift(booleanArray0, (-1606), (-2639), 1591);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(2146854791, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2882;
      intArray0[1] = 2146854791;
      intArray0[2] = 2146854791;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2882, 2146854791, 2146854791}, intArray0);
      assertArrayEquals(new int[] {2882, 2146854791, 2146854791}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(35, object0);
      
      ArrayUtils.swap((char[]) null, 35, 3740, (-367));
      Integer integer1 = new Integer((-2085));
      assertNotNull(integer1);
      assertEquals((-2085), (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-367));
      assertNotNull(integer2);
      assertEquals((-367), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = Integer.valueOf((-308));
      assertNotNull(integer3);
      assertEquals((-308), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer((-2085));
      assertNotNull(integer4);
      assertEquals((-2085), (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)object0));
      
      Integer integer5 = new Integer(114);
      assertNotNull(integer5);
      assertEquals(114, (int)integer5);
      assertFalse(integer5.equals((Object)object0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      integerArray0[2] = integer4;
      integerArray0[3] = integer1;
      integerArray0[4] = integer4;
      integerArray0[5] = integer2;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'w';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = 's';
      charArray0[6] = '3';
      charArray0[7] = '2';
      charArray0[8] = '$';
      ArrayUtils.swap(charArray0, (-367), (-367), (-367));
      assertArrayEquals(new char[] {'8', '5', 'w', ')', ':', 's', '3', '2', '$'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 114;
      Integer integer0 = new Integer(114);
      assertNotNull(integer0);
      assertEquals(114, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(9);
      assertNotNull(integer1);
      assertEquals(9, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[2] = integer1;
      Integer integer2 = Integer.valueOf(int0);
      assertNotNull(integer2);
      assertEquals(114, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(9);
      assertNotNull(integer3);
      assertEquals(9, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(9);
      assertNotNull(integer4);
      assertEquals(9, (int)integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      
      integerArray0[5] = integer4;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 2780L;
      longArray0[2] = (-3103L);
      longArray0[3] = 2517L;
      longArray0[4] = 932L;
      longArray0[1] = (-2190L);
      longArray0[6] = (-1171L);
      longArray0[7] = 1L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1L, (-1171L), 0L, 932L, 2517L, (-3103L), (-2190L), (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray3 = new boolean[9];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = false;
      booleanArray3[1] = (boolean) boolean1;
      booleanArray3[2] = (boolean) boolean0;
      booleanArray3[3] = false;
      booleanArray3[4] = (boolean) boolean1;
      booleanArray3[5] = (boolean) boolean0;
      booleanArray3[6] = (boolean) boolean1;
      booleanArray3[7] = (boolean) boolean1;
      booleanArray3[8] = true;
      boolean[] booleanArray4 = ArrayUtils.addAll(booleanArray2, booleanArray3);
      assertNotNull(booleanArray4);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray2, booleanArray4);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true, true, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(9, booleanArray3.length);
      assertEquals(2, booleanArray2.length);
      assertEquals(11, booleanArray4.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 2517L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L, (-1171L), 0L, 932L, 2517L, (-3103L), (-2190L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {1L, (-1171L), 0L, 932L, (-3103L), (-2190L), (-1L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 2849);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2849;
      longArray0[1] = (long) 'l';
      int[] intArray0 = new int[4];
      intArray0[0] = (-1792);
      intArray0[1] = (int) 'l';
      intArray0[2] = 2849;
      intArray0[3] = (-1396);
      ArrayUtils.reverse(intArray0, 17, (-5));
      assertArrayEquals(new int[] {(-1792), 108, 2849, (-1396)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-1792);
      objectArray0[1] = (Object) (-1792);
      objectArray0[2] = (Object) 2849L;
      objectArray0[3] = (Object) 108;
      objectArray0[4] = (Object) 'l';
      objectArray0[5] = (Object) (-1396);
      objectArray0[6] = (Object) (-1792);
      objectArray0[7] = (Object) 2849L;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(8, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      int int0 = (-3059);
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-406.95F);
      floatArray0[1] = (-406.95F);
      floatArray0[2] = (-406.95F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3059), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3059, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-764);
      Integer integer0 = Integer.valueOf(1913);
      assertNotNull(integer0);
      assertEquals(1913, (int)integer0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 1913);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1913;
      doubleArray0[1] = (double) (-764);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1913, 0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1913.0, (-764.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int0 = (-32);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3845;
      longArray0[1] = (long) (-32);
      int int1 = (-4217);
      ArrayUtils.reverse(longArray0, (-4217), (-176));
      assertArrayEquals(new long[] {3845L, (-32L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap((char[]) null, 116, 0);
      short[] shortArray0 = new short[3];
      short short0 = (short)101;
      shortArray0[1] = (short)101;
      shortArray0[2] = (short)2292;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-69), (-32));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)101, (short)2292}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 3048);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3048, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'M';
      longArray0[1] = (long) 'M';
      longArray0[2] = 408L;
      ArrayUtils.shift(longArray0, (-2718), (-3802), 1465);
      assertArrayEquals(new long[] {77L, 77L, 408L}, longArray0);
      assertEquals(3, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2228L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {77L, 77L, 408L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.indexOf((double[]) null, 1.0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 408L);
      assertEquals(2, int1);
      assertArrayEquals(new long[] {77L, 77L, 408L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap(booleanArray1, 2, (-3802));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {408L, 77L, 77L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1736), (-1736));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      byte byte0 = (byte) (-35);
      short[] shortArray0 = new short[3];
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[2];
      shortArray0[1] = (short) (byte) (-35);
      longArray0[1] = (long) (-2905);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, (-2905L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.reverse(longArray0, (-32), (-2905));
      assertArrayEquals(new long[] {0L, (-2905L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = ')';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      charArray0[7] = 'o';
      charArray0[8] = '=';
      ArrayUtils.swap(charArray0, 121, (-2905));
      assertArrayEquals(new char[] {'o', 'o', ')', 'u', 'u', 'u', 'u', 'o', '='}, charArray0);
      assertEquals(9, charArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1934), 121);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-35), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-35), (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-1726));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1726, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      long[] longArray0 = new long[6];
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 886;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) 'h';
      intArray0[4] = 0;
      intArray0[5] = (int) 'h';
      intArray0[6] = 886;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1289), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {886, 0, 0, 104, 0, 104, 886}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.swap(booleanArray0, 3, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 3206, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3206, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.swap(booleanArray0, (-2905), (-2905));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2905);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (-2905);
      longArray0[3] = (long) (-2905);
      longArray0[4] = (long) (-2905);
      longArray0[5] = (long) (-2905);
      longArray0[6] = (long) (-2905);
      longArray0[7] = (-191L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-2905L), (-1L), (-2905L), (-2905L), (-2905L), (-2905L), (-2905L), (-191L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.reverse(longArray0, (-2905), 1);
      assertArrayEquals(new long[] {(-2905L), (-1L), (-2905L), (-2905L), (-2905L), (-2905L), (-2905L), (-191L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'm';
      charArray0[2] = ')';
      charArray0[3] = '=';
      charArray0[4] = 'u';
      ArrayUtils.swap(charArray0, (-2905), (-2905));
      assertArrayEquals(new char[] {'o', 'm', ')', '=', 'u'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      Double double0 = new Double(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      Double double1 = new Double(3.0);
      assertNotNull(double1);
      assertEquals(3.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)75;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte) (-5);
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)55;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)75}, byteArray2);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)14, (byte)75}, byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)14, (byte) (-5), (byte)55, (byte)0, (byte)55}, byteArray1);
      assertEquals(1, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)113}, byteArray0);
      assertArrayEquals(new byte[] {(byte)113}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((-374.5395189751093), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotNull(double2);
      assertEquals((-374.5395189751093), (double)double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)109;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)113);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray1, true);
      assertNotNull(bitSet1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(10, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(10, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}", bitSet1.toString());
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-374.5395189751093), (-374.5395189751093), (-374.5395189751093)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte)113);
      assertNotNull(integer0);
      assertEquals(113, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(113, (int)integer1);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer1);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)109}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3715);
      assertNotNull(integer0);
      assertEquals(3715, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, (-665), integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(3715, (int)integer1);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer1);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (double) (short)134;
      doubleArray0[3] = (double) (-4504);
      doubleArray0[4] = (double) (short)134;
      doubleArray0[5] = (double) (short)134;
      doubleArray0[6] = (double) (short)134;
      ArrayUtils.shift(doubleArray0, 777);
      assertArrayEquals(new double[] {0.0, 3.0, 134.0, (-4504.0), 134.0, 134.0, 134.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      Integer integer0 = new Integer(90);
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      Integer integer1 = new Integer((-1753));
      assertNotNull(integer1);
      assertEquals((-1753), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1596));
      assertNotNull(integer2);
      assertEquals((-1596), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer2);
      assertNotNull(object0);
      assertEquals((-1596), object0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer0));
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)2098;
      shortArray0[2] = (short)2098;
      shortArray0[3] = (short)2098;
      shortArray0[4] = (short)12;
      shortArray0[5] = (short)2098;
      shortArray0[6] = (short)2098;
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short)2098;
      ArrayUtils.shift(shortArray0, 9);
      assertArrayEquals(new short[] {(short)0, (short)2098, (short)2098, (short)2098, (short)12, (short)2098, (short)2098, (short) (-1), (short)2098}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 789.8, (-1562));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)2098;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short)2098);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2098, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      Short short0 = new Short((short) (-154));
      assertNotNull(short0);
      assertEquals((short) (-154), (short)short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 521.94822642, (-2478));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Integer integer0 = new Integer((-3876));
      assertNotNull(integer0);
      assertEquals((-3876), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, (Object) integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-38));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-38)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      Double double0 = new Double((-374.5395189751093));
      assertNotNull(double0);
      assertEquals((-374.5395189751093), (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Double double1 = new Double((-2567.8490118088));
      assertNotNull(double1);
      assertEquals((-2567.8490118088), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(2.147483647E9);
      assertNotNull(double2);
      assertEquals(2.147483647E9, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(1712.48378548546);
      assertNotNull(double3);
      assertEquals(1712.48378548546, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double(1927.643);
      assertNotNull(double4);
      assertEquals(1927.643, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      Double double5 = new Double(1927.643);
      assertNotNull(double5);
      assertEquals(1927.643, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(4019.2476897);
      assertNotNull(float0);
      assertEquals(4019.2478F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-92));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte) (-92)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 99;
      intArray0[1] = 128;
      intArray0[2] = (int) (byte) (-92);
      intArray0[3] = (-2819);
      intArray0[4] = 36;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 128);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {99, (-92), (-2819), 36}, intArray1);
      assertArrayEquals(new int[] {99, 128, (-92), (-2819), 36}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertSame(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 5, (-1596));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1596);
      longArray0[1] = (long) 6;
      longArray0[2] = (long) (-1596);
      longArray0[3] = (long) 6;
      longArray0[4] = (long) (-1596);
      longArray0[5] = (long) 5;
      ArrayUtils.swap(longArray0, (-83), (-83));
      assertArrayEquals(new long[] {(-1596L), 6L, (-1596L), 6L, (-1596L), 5L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {(-1596L), 6L, (-1596L), 6L, (-1596L), 5L}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray3 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 52.8F;
      floatArray0[1] = 52.8F;
      floatArray0[2] = 52.8F;
      floatArray0[3] = 52.8F;
      floatArray0[4] = 52.8F;
      floatArray0[5] = 52.8F;
      floatArray0[6] = 52.8F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 76.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 76.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shuffle(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[12];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'G';
      ArrayUtils.reverse(charArray0, 217, 68);
      assertEquals(12, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)9;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-78), (byte)9}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.swap(charArray0, (-1414), 589, 68);
      assertEquals(12, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(217, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 217, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Integer integer0 = new Integer(3336);
      assertNotNull(integer0);
      assertEquals(3336, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)1, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Byte[] byteArray1 = new Byte[2];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray1[1] = byte2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, byte0, 2488);
      assertEquals(9, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)122, (int) (byte)45);
      assertNotSame(byteArray0, byteArray1);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer integer0 = Integer.valueOf(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Integer integer1 = new Integer(1428);
      assertNotNull(integer1);
      assertEquals(1428, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)57, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shift((boolean[]) null, 0, (int) (byte)57, 1527);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {0, (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802)}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)3;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)96, (byte)0, (byte) (-1), (byte)0, (byte)0, (byte) (-96), (byte)3}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1125));
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1125));
      assertNotNull(integer0);
      assertEquals((-1125), (int)integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (-36));
      assertNull(integer1);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (-1125), (-105L));
      assertNotNull(longStream0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = 'q';
      charArray0[2] = '`';
      charArray0[3] = ' ';
      charArray0[4] = '\\';
      charArray0[5] = 'b';
      charArray0[6] = '{';
      charArray0[7] = 'W';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'`', '{', '\\', 'q', '~', ' ', 'W', 'b'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Integer integer2 = new Integer((-1125));
      assertNotNull(integer2);
      assertEquals((-1125), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) integer2);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertTrue(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-967);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-967)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) null);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-967)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '>';
      charArray0[2] = '.';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)12, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&', '>', '.'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-640L);
      longArray0[1] = (long) '>';
      longArray0[2] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 62L, (-640L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(14, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)12;
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((byte)12);
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((int) (byte)12);
      assertNotNull(mutableInt0);
      assertEquals("12", mutableInt0.toString());
      assertEquals(12L, mutableInt0.longValue());
      assertEquals(12, mutableInt0.intValue());
      assertEquals((short)12, mutableInt0.shortValue());
      assertEquals(12.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(12.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(12, (int)mutableInt0.getValue());
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals(12, (int)mutableInt0.toInteger());
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals("12", mutableInt0.toString());
      assertEquals(12L, mutableInt0.longValue());
      assertEquals(12, mutableInt0.intValue());
      assertEquals((short)12, mutableInt0.shortValue());
      assertEquals(12.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(12.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(12, (int)mutableInt0.getValue());
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals(12, (int)mutableInt0.toInteger());
      assertEquals(12.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)12, mutableInt1.byteValue());
      assertEquals((short)12, mutableInt1.shortValue());
      assertEquals(12, mutableInt1.intValue());
      assertEquals(12.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(12L, mutableInt1.longValue());
      assertEquals("12", mutableInt1.toString());
      assertEquals(12, (int)mutableInt1.toInteger());
      assertEquals(12, (int)mutableInt1.getValue());
      
      Integer integer2 = mutableInt1.toInteger();
      assertNotNull(integer2);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals(12, (int)integer2);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals("12", mutableInt0.toString());
      assertEquals(12L, mutableInt0.longValue());
      assertEquals(12, mutableInt0.intValue());
      assertEquals((short)12, mutableInt0.shortValue());
      assertEquals(12.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(12.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(12, (int)mutableInt0.getValue());
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals(12, (int)mutableInt0.toInteger());
      assertEquals(12.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)12, mutableInt1.byteValue());
      assertEquals((short)12, mutableInt1.shortValue());
      assertEquals(12, mutableInt1.intValue());
      assertEquals(12.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(12L, mutableInt1.longValue());
      assertEquals("12", mutableInt1.toString());
      assertEquals(12, (int)mutableInt1.toInteger());
      assertEquals(12, (int)mutableInt1.getValue());
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integer2);
      assertNotNull(integer3);
      assertEquals(12, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(48);
      assertNotNull(integer4);
      assertEquals(48, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(321);
      assertNotNull(integer5);
      assertEquals(321, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      Integer integer6 = ArrayUtils.get(integerArray0, (-1783));
      assertNull(integer6);
      assertEquals(6, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, (-3215), 1879048192, 908);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)41;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)4;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-1596), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-70);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)60;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)60, (byte)66, (byte)60}, byteArray1);
      assertArrayEquals(new byte[] {(byte)66, (byte)60, (byte)102, (byte)127, (byte)47, (byte) (-70)}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'T';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', 'T'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 84.0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {84.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'T';
      longArray0[1] = (long) 'Q';
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) 'T';
      longArray0[5] = (long) 'Q';
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 84L, 81L, 0L, 81L, 84L, 81L, 0L}, longArray1);
      assertArrayEquals(new long[] {84L, 81L, 0L, 81L, 84L, 81L, 0L}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean1 = ArrayUtils.isEquals(0L, 'Q');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[3] = (-3078L);
      longArray0[2] = (-712L);
      int[] intArray0 = new int[2];
      intArray0[0] = 1518;
      intArray0[1] = 1518;
      ArrayUtils.swap(intArray0, 113, 113);
      assertArrayEquals(new int[] {1518, 1518}, intArray0);
      assertEquals(2, intArray0.length);
      
      Integer integer0 = new Integer((-1272));
      assertNotNull(integer0);
      assertEquals((-1272), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("Invalid exceptionStatus");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(3, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1518, 1518}, intArray1);
      assertArrayEquals(new int[] {1518, 1518}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean3 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      Integer integer0 = new Integer(2013);
      assertNotNull(integer0);
      assertEquals(2013, (int)integer0);
      
      ArrayUtils.swap((short[]) null, (-1902), (int) (short) (-126));
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 5, (-1596));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(7, objectArray1.length);
      assertEquals(7, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'A');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2248;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)5105;
      shortArray0[4] = (short)116;
      ArrayUtils.swap(shortArray0, (-1933), 321);
      assertArrayEquals(new short[] {(short)2248, (short)1, (short)1, (short)5105, (short)116}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)348;
      ArrayUtils.swap(shortArray0, Integer.MIN_VALUE, 3);
      assertArrayEquals(new short[] {(short)348}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = 897.51373F;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (int) (byte) (-126), (-1736));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)6);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, Double.NaN);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.shift(floatArray0, (-439), Integer.MAX_VALUE, (int) (byte)65);
      assertArrayEquals(new float[] {897.51373F, 0.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'f');
      assertNull(charArray0);
      
      ArrayUtils.shift((float[]) null, (-2092), (-2092), Integer.MAX_VALUE);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2092);
      doubleArray0[1] = (double) (-2092);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) (-2092);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-2092.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2092.0), (-2092.0), 2.147483647E9, (-2092.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2092.0), (-2092.0), 2.147483647E9, (-2092.0), (-2092.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 5, (-1596));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(7, objectArray1.length);
      assertEquals(7, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'N');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift((float[]) null, (-1596), 5, 5);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ']');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[3];
      charArray0[1] = '>';
      charArray0[2] = '.';
      long[] longArray0 = new long[3];
      longArray0[0] = (-640L);
      longArray0[1] = (long) '>';
      longArray0[2] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 62L, (-640L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)0, 32);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '>', '.'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '>', '.'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse(longArray0, 0, 2867);
      assertArrayEquals(new long[] {(-640L), 62L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-3598));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)7;
      shortArray1[1] = (short) (byte)7;
      shortArray1[2] = (short) (byte)7;
      shortArray1[3] = (short) (byte)7;
      ArrayUtils.shuffle(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7}, shortArray1);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)106);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      int int0 = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {0, (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802)}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      Float float0 = new Float((-201.857));
      assertNotNull(float0);
      assertEquals((-201.857F), (float)float0, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      assertNull(floatArray0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-3802);
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      integerArray0[7] = (Integer) (-3802);
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, (Integer) int0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)96;
      shortArray0[3] = (short) (byte)96;
      shortArray0[4] = (short)5;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short)7;
      shortArray0[7] = (short) (byte) (-1);
      shortArray0[8] = (short) (byte)0;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)96, (short)96, (short)5, (short)0, (short)7, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 2;
      intArray0[1] = (-3505);
      float[] floatArray0 = new float[1];
      intArray0[2] = (-3505);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[2] = 'J';
      charArray0[3] = 'j';
      charArray0[5] = 'j';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'', 'j', 'J', 'j', '\u0000', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 'J');
      assertNotNull(object0);
      assertEquals('J', object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-8), (int) (byte) (-8));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-96), (byte)0, (byte)0, (byte) (-8), (byte) (-96), (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) (-3505);
      floatArray1[2] = (float) (-3505);
      floatArray1[3] = (float) 2;
      floatArray1[4] = (float) (byte)0;
      float[] floatArray2 = ArrayUtils.remove(floatArray1, (int) (byte)0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-3505.0F), (-3505.0F), 2.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3505.0F), (-3505.0F), 2.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      Object object0 = null;
      int[] intArray0 = new int[1];
      intArray0[0] = (-764);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-764), (-764));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      
      bitSet0.set(Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(Integer.MIN_VALUE, bitSet0.length());
      assertEquals("{0, 2147483647}", bitSet0.toString());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-125);
      BitSet bitSet1 = BitSet.valueOf(byteArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-127), (byte)60, (byte)8, (byte) (-125)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(16, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(40, bitSet1.length());
      assertEquals("{0, 1, 3, 4, 5, 6, 8, 15, 18, 19, 20, 21, 27, 32, 33, 39}", bitSet1.toString());
      
      bitSet0.flip(1534);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1534, 2147483647}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(Integer.MIN_VALUE, bitSet0.length());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 1534;
      doubleArray0[2] = (double) (-764);
      BitSet bitSet2 = ArrayUtils.indexesOf(doubleArray0, 0.7);
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertArrayEquals(new double[] {2.147483647E9, 1534.0, (-764.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      
      BitSet bitSet3 = (BitSet)bitSet2.clone();
      assertNotNull(bitSet3);
      assertNotSame(bitSet2, bitSet3);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(bitSet3, bitSet2);
      assertNotSame(bitSet3, bitSet1);
      assertArrayEquals(new double[] {2.147483647E9, 1534.0, (-764.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet3.equals((Object)bitSet0));
      assertTrue(bitSet3.equals((Object)bitSet2));
      assertFalse(bitSet3.equals((Object)bitSet1));
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet3.length());
      assertEquals("{}", bitSet3.toString());
      assertEquals(0, bitSet3.cardinality());
      assertTrue(bitSet3.isEmpty());
      assertEquals(0, bitSet3.size());
      
      bitSet0.and(bitSet2);
      assertNotSame(bitSet2, bitSet3);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet0, bitSet3);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new int[] {(-764)}, intArray0);
      assertArrayEquals(new double[] {2.147483647E9, 1534.0, (-764.0)}, doubleArray0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet3));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet0.equals((Object)bitSet2));
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet0.equals((Object)bitSet3));
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        bitSet0.clear((-2146597991), Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -2146597991
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray0, (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(booleanArray1, 2, (-1385), 5);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-60), (int) (byte) (-60), (-1221));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, 0.0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'T';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', 'T'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 'Q';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1980.0, 81.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ArrayUtils.swap(byteArray0, 1, 3984, (int) (byte)12);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (int) 'T';
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) 'Q', Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {0, 1, 84}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(int1 == int0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = (Character) 'T';
      characterArray0[1] = (Character) 'T';
      characterArray0[2] = (Character) 'T';
      characterArray0[3] = (Character) 'Q';
      characterArray0[4] = (Character) 'T';
      characterArray0[5] = (Character) 'Q';
      Character character0 = Character.valueOf('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      characterArray0[6] = character0;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'Q', 'T', 'Q', '0'}, charArray2);
      assertEquals(7, charArray2.length);
      assertEquals(7, characterArray0.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)12;
      ArrayUtils.swap(byteArray0, (-726), 3984, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-12), (byte) (-56), (byte)0, (byte)0, (byte)12}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-12), 878);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1596), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-12);
      doubleArray0[1] = (double) (byte) (-12);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte) (-12);
      doubleArray0[4] = (double) 3984;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte) (-56);
      doubleArray0[7] = 0.1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1899.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-12.0), (-12.0), 0.0, (-12.0), 3984.0, 0.0, (-56.0), 0.1}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1988410785));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1988410785, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      short short0 = (short) (-5453);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-5453);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-5453));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-5453)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = 3012;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 3012);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3012, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)14);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-434));
      assertNotNull(short1);
      assertEquals((short) (-434), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertEquals((short)14, (short)short2);
      assertEquals(3, shortArray0.length);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)shortArray0[0];
      doubleArray0[1] = 1.5;
      doubleArray0[2] = Double.NaN;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) shortArray0[0], 0.0);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {14.0, 1.5, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, shortArray0.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      int int2 = ArrayUtils.lastIndexOf((boolean[]) null, true);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte)0, (byte)0, (byte) (-1), (byte) (-39), (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((-1596L), mutableInt0.longValue());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1596), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((-1596L), mutableInt0.longValue());
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(1780);
      assertNotNull(integer4);
      assertEquals(1780, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      
      Integer integer6 = new Integer(4301);
      assertNotNull(integer6);
      assertEquals(4301, (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      
      Integer integer7 = new Integer(0);
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer5));
      
      Integer integer8 = new Integer(0);
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      
      mutableInt0.setValue((Number) integer8);
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      Integer integer9 = new Integer(0);
      assertNotNull(integer9);
      assertEquals(0, (int)integer9);
      assertTrue(integer9.equals((Object)integer7));
      assertTrue(integer9.equals((Object)integer5));
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer4));
      assertTrue(integer9.equals((Object)integer3));
      assertTrue(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)integer1));
      
      integerArray0[1] = integer9;
      integerArray0[2] = integer8;
      integerArray0[3] = integer1;
      integerArray0[4] = integer6;
      integerArray0[5] = integer5;
      integerArray0[6] = integer2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)integerArray0[4];
      doubleArray0[1] = (double) (-1596);
      doubleArray0[2] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) int0, Double.NaN);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {4301.0, (-1596.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 4301;
      longArray0[1] = (long) int0;
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(35, object0);
      
      char[] charArray0 = new char[8];
      charArray0[5] = '0';
      charArray0[1] = '0';
      charArray0[3] = 'q';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Short short0 = new Short((short) (-1636));
      assertNotNull(short0);
      assertEquals((short) (-1636), (short)short0);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short) (-1636), 35);
      assertEquals((-1), int0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-2409), (int) shortArray0[2]);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 11);
      Integer integer1 = new Integer((int) shortArray0[0]);
      assertNotNull(integer1);
      assertEquals((-1636), (int)integer1);
      assertEquals(5, shortArray0.length);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) object0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(5, shortArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(11, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-3215), 1879048192, 1420);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)4;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)12, (byte)41, (byte)4}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Integer integer1 = new Integer(35);
      assertNotNull(integer1);
      assertEquals(35, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(35, object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '8';
      floatArray0[1] = 1075.09F;
      floatArray0[2] = (float) '8';
      floatArray0[3] = (-0.032425642F);
      floatArray0[4] = (float) '8';
      floatArray0[5] = Float.NaN;
      floatArray0[6] = (-0.032425642F);
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 35);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 35, 272);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray3 = ArrayUtils.removeAllOccurences(intArray2, 13);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray3);
      assertArrayEquals(new int[] {0}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray3.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 53.90795F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {53.90795F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2950);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2950;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2950}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2950;
      longArray0[1] = (long) 2950;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-3675L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2950L, 2950L}, longArray0);
      assertArrayEquals(new long[] {2950L, 2950L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 2950;
      integerArray0[1] = (Integer) 2950;
      integerArray0[2] = (Integer) 2950;
      integerArray0[3] = (Integer) 2950;
      integerArray0[4] = (Integer) 2950;
      integerArray0[5] = (Integer) 2950;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) integerArray0[5], 3107, (-0.49545825691576945));
      assertSame(integerArray0, integerArray1);
      assertEquals((-1), int0);
      assertEquals(6, integerArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, (-837), 2950);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(35, object0);
      
      char[] charArray0 = new char[8];
      charArray0[5] = '0';
      charArray0[1] = '0';
      charArray0[3] = 'q';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Short short0 = new Short((short) (-1636));
      assertNotNull(short0);
      assertEquals((short) (-1636), (short)short0);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short) (-1636), 35);
      assertEquals((-1), int0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-2409), (int) shortArray0[2]);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Integer integer1 = new Integer((int) shortArray0[0]);
      assertNotNull(integer1);
      assertEquals((-1636), (int)integer1);
      assertEquals(5, shortArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) object0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(5, shortArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)int0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse((byte[]) null);
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)14);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-434));
      assertNotNull(short1);
      assertEquals((short) (-434), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertEquals((short)14, (short)short2);
      assertEquals(3, shortArray0.length);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)14, (short) (-434), (short)14}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)shortArray0[0];
      intArray0[1] = (int) (short) (-434);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)shortArray0[0];
      intArray0[4] = 82;
      intArray0[5] = (int) (short)shortArray0[0];
      intArray0[6] = (-1);
      intArray0[7] = (int) (byte)14;
      intArray0[8] = (int) (short)shortArray0[2];
      int int1 = ArrayUtils.lastIndexOf(intArray0, 2, (-480));
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {14, (-434), (-1), 14, 82, 14, (-1), 14, 14}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(int1 == int0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 2469, 236);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short)14, (short) (-434), (short)14}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Integer integer0 = new Integer((-509));
      assertNotNull(integer0);
      assertEquals((-509), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray0, (Object) abstractMap_SimpleImmutableEntry0, (int) shortArray0[2]);
      assertNotNull(bitSet0);
      assertEquals(3, shortArray0.length);
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      doubleArray0[5] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      Character character1 = new Character('#');
      assertNotNull(character1);
      assertEquals('#', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character('U');
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      long[] longArray0 = new long[9];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1596), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(1780);
      assertNotNull(integer4);
      assertEquals(1780, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = new Integer(4301);
      assertNotNull(integer6);
      assertEquals(4301, (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      
      Integer integer7 = new Integer(0);
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      
      Integer integer8 = new Integer(0);
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer3));
      
      mutableInt0.setValue((Number) integer8);
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer3));
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      Integer integer9 = new Integer(0);
      assertNotNull(integer9);
      assertEquals(0, (int)integer9);
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer4));
      assertTrue(integer9.equals((Object)integer5));
      assertTrue(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)integer1));
      assertTrue(integer9.equals((Object)integer7));
      assertTrue(integer9.equals((Object)int0));
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer0));
      
      integerArray0[1] = integer9;
      integerArray0[2] = integer8;
      integerArray0[3] = integer1;
      integerArray0[4] = integer6;
      integerArray0[5] = integer5;
      integerArray0[6] = integer2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)integerArray0[4];
      doubleArray0[1] = (double) (-1596);
      doubleArray0[2] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) int0, Double.NaN);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {4301.0, (-1596.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 4301;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) (int)integerArray0[4];
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1596);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4301L, 0L, 0L, 0L, 4301L, (-1L), (-1596L)}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'T';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', 'T'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 'Q';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1980.0, 81.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 84.0, 0.0, 81.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 2039);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) 4, (-1));
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {84.0, 0.0, 81.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-1596), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-70);
      ArrayUtils.shift(byteArray0, (int) (byte)102);
      assertArrayEquals(new byte[] {(byte)66, (byte)60, (byte)102, (byte)127, (byte)47, (byte) (-70)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 56, (-2145344293), (-1596));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2145344293), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145344293, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 72.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {72.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u', (-2127031422));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      ArrayUtils.reverse(floatArray0, (-2127031422), 63);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(charArray0, 63, (-4589), (-4589));
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      float[] floatArray3 = ArrayUtils.addFirst(floatArray2, (float) (-2127031422));
      assertNotNull(floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-2.12703142E9F)}, floatArray3, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2258;
      intArray0[2] = 15;
      intArray0[3] = 3538;
      intArray0[4] = (-914);
      intArray0[5] = 829;
      ArrayUtils.swap(intArray0, 0, (-1227), 3538);
      assertArrayEquals(new int[] {2, 2258, 15, 3538, (-914), 829}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2258, 15, 3538, (-914), 829}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '[';
      charArray0[2] = '!';
      charArray0[3] = '?';
      charArray0[4] = 'U';
      charArray0[5] = 'N';
      charArray0[6] = '<';
      charArray0[7] = '%';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '|', 15);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'_', '[', '!', '?', 'U', 'N', '<', '%'}, charArray0);
      assertEquals(8, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) 829);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {829.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, 0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = 1L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift((float[]) null, (-1548), (-2215), 322);
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'D', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'D', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'w';
      charArray0[3] = ')';
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray0, (int) (byte)0, (int) (short)65, 1472);
      assertEquals(0, shortArray0.length);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '5';
      charArray1[1] = 'w';
      charArray1[2] = '8';
      charArray1[3] = '5';
      charArray1[4] = ')';
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'5', 'w', '8', '5', ')'}, charArray1);
      assertArrayEquals(new char[] {'5', 'w', '8', '5', ')'}, charArray2);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.shift((long[]) null, 391, (-144), (-144));
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (-144));
      assertEquals((-1), int0);
      
      char[] charArray0 = Character.toChars(1);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0001'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.swap(charArray0, (-144), 391, (-1727));
      assertArrayEquals(new char[] {'\u0001'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short[] shortArray0 = new Short[15];
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 5, 5);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.shift((Object[]) shortArray0, 5);
      assertEquals(15, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertSame(shortArray0, objectArray0);
      assertEquals(15, shortArray0.length);
      assertEquals(15, objectArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'E');
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1049);
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)128;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-154));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1049), (short)7, (short)128}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1049), (short)7, (short)128}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)128;
      intArray0[1] = (int) (short)128;
      intArray0[2] = (int) (short)7;
      intArray0[3] = (int) (short) (-1049);
      intArray0[4] = (int) (short) (-154);
      intArray0[5] = (int) (short) (-1049);
      intArray0[6] = (int) (short)128;
      intArray0[7] = (int) (short)128;
      intArray0[8] = (int) (short)7;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {7, 128, 128, (-1049), (-154), (-1049), 7, 128, 128}, intArray0);
      assertEquals(9, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short)128);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 128;
      integerArray0[1] = (Integer) (-154);
      integerArray0[2] = (Integer) 128;
      integerArray0[3] = (Integer) (-1049);
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)7;
      doubleArray0[1] = (double) (int)integerArray0[2];
      doubleArray0[2] = (double) (int)integerArray0[3];
      doubleArray0[3] = (-201.857);
      doubleArray0[4] = (double) (short)7;
      doubleArray0[5] = (double) 7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(5614, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5614, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4094);
      ArrayUtils.swap(intArray0, 5, (-4094));
      assertArrayEquals(new int[] {(-4094)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-4094);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)108);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-4094), 53, 1436.293);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 76.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 5;
      floatArray0[4] = (float) 5;
      floatArray0[5] = (float) 5;
      floatArray0[6] = (float) (short)108;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {76.0F, 1.0F, (-1.0F), 5.0F, 5.0F, 5.0F, 108.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {76.0F, 1.0F, (-1.0F), 5.0F, 5.0F, 5.0F, 108.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (int)integerArray0[0];
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 5;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 53;
      longArray0[5] = (-1L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 53L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-4094L), (-1L), 5L, (-1L), 53L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-4094L), (-1L), 5L, (-1L), (-1L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_LONG_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)62);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[19];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(19, booleanArray0.length);
      assertEquals(19, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[9];
      booleanArray2[0] = (boolean) boolean1;
      booleanArray2[1] = (boolean) boolean1;
      booleanArray2[2] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = false;
      booleanArray2[5] = true;
      booleanArray2[6] = false;
      booleanArray2[7] = (boolean) boolean0;
      booleanArray2[8] = true;
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = 'C';
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(116, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 3307.0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'J';
      charArray0[2] = '{';
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'J', '{', ''}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Integer integer1 = new Integer(35);
      assertNotNull(integer1);
      assertEquals(35, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(35, object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '8';
      floatArray0[1] = 1075.09F;
      floatArray0[2] = (float) '8';
      floatArray0[3] = (float) 35;
      floatArray0[4] = (float) '8';
      floatArray0[5] = Float.NaN;
      floatArray0[6] = (float) '8';
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 965, 35);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte) (-15);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)13, (byte)123, (byte)5, (byte)2, (byte)2, (byte)1, (byte)83, (byte) (-15)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[3] = '\u000E';
      charArray0[4] = 'g';
      ArrayUtils.swap(charArray0, (-1596), (-1), (-1));
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u000E', 'g', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      boolean[] booleanArray0 = new boolean[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.swap(charArray0, 0, (int) (byte) (-15), 0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'w';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = 's';
      charArray0[6] = '3';
      charArray0[7] = '2';
      charArray0[8] = '$';
      ArrayUtils.swap(charArray0, (-367), (-367), (-367));
      assertArrayEquals(new char[] {'8', '5', 'w', ')', ':', 's', '3', '2', '$'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      try { 
        Integer.valueOf("The type must not be null", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.lang3.ArrayUtils";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character character0 = Character.valueOf('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Character character1 = new Character('!');
      assertNotNull(character1);
      assertEquals('!', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'r');
      assertNull(charArray0);
      
      ArrayUtils.swap((int[]) null, (-389), (-389), (-2482));
      int int0 = ArrayUtils.indexOf((long[]) null, (long) 390);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "UBR5O%1o");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0, "");
      assertNotNull(stringArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u', (-2127031422));
      assertNotNull(bitSet0);
      assertEquals(18, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      ArrayUtils.reverse(floatArray0, (-2127031422), 63);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(charArray0, 63, (-4589), (-4589));
      assertEquals(18, charArray0.length);
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      float[] floatArray3 = ArrayUtils.addFirst(floatArray2, (float) (-2127031422));
      assertNotNull(floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-2.12703142E9F)}, floatArray3, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(doubleArray1, (-1076), (-2127031422));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'N';
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap(doubleArray0, 120, 18688);
      assertArrayEquals(new double[] {0.0, 78.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.5;
      ArrayUtils.swap(doubleArray0, (-1767), (-1767), 2583);
      assertArrayEquals(new double[] {Double.NaN, 1.5}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-2766);
      doubleArray0[2] = (double) (byte)12;
      doubleArray0[3] = (double) (byte)12;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (-1817));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-2766.0), 12.0, 12.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), 1155.1340975754);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      int int0 = 4;
      int int1 = 108;
      ArrayUtils.swap(byteArray0, 4, 40, 108);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 108;
      doubleArray0[1] = (double) (byte)12;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) (byte)12;
      doubleArray0[4] = (double) (byte)12;
      doubleArray0[5] = (double) (byte)12;
      doubleArray0[6] = (double) (byte)12;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1726.9382524476443));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {108.0, 12.0, 4.0, 12.0, 12.0, 12.0, 12.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {108.0, 12.0, 4.0, 12.0, 12.0, 12.0, 12.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)12;
      longArray0[1] = (long) (byte)12;
      longArray0[2] = (long) 4;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {12L, 12L, 4L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      ArrayUtils.shuffle((Object[]) booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, 32, 0.1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Integer[]) null, 321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 321, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596), mutableInt0.intValue());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1596), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596), mutableInt0.intValue());
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(1780);
      assertNotNull(integer4);
      assertEquals(1780, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      
      Integer integer6 = new Integer(4301);
      assertNotNull(integer6);
      assertEquals(4301, (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      
      Integer integer7 = new Integer(0);
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      
      Integer integer8 = new Integer(0);
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer5));
      
      mutableInt0.setValue((Number) integer8);
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer5));
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      Integer integer9 = new Integer(0);
      assertNotNull(integer9);
      assertEquals(0, (int)integer9);
      assertTrue(integer9.equals((Object)integer5));
      assertTrue(integer9.equals((Object)integer7));
      assertTrue(integer9.equals((Object)integer1));
      assertTrue(integer9.equals((Object)int0));
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer0));
      
      integerArray0[1] = integer9;
      integerArray0[2] = integer8;
      integerArray0[3] = integer1;
      mutableInt0.increment();
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1", mutableInt0.toString());
      
      integerArray0[4] = integer6;
      integerArray0[5] = integer5;
      integerArray0[6] = integer2;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(6, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.remove(integerArray0, int0);
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertEquals(6, integerArray2.length);
      assertEquals(7, integerArray0.length);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2290));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short) (-426);
      shortArray0[2] = (short) (-4439);
      shortArray0[3] = (short)51;
      shortArray0[4] = (short)13;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short) (-426), (short) (-4439), (short)51, (short)13}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-426);
      floatArray0[1] = (float) 0;
      floatArray0[2] = 2.0F;
      floatArray0[3] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)13, (int) (short)13);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-426.0F), 0.0F, 2.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(842.5);
      assertNotNull(float0);
      assertEquals(842.5F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertNotNull(float1);
      assertEquals(842.5F, (float)float1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(246.397886256247);
      assertNotNull(float2);
      assertEquals(246.39789F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[1]);
      assertNotNull(float3);
      assertEquals(842.5F, (float)float3, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 40;
      floatArray0[1] = (float) (byte)12;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (byte)12;
      floatArray0[4] = (float) 4;
      floatArray0[6] = (float) (byte)12;
      ArrayUtils.reverse(floatArray0, 8, 1572);
      assertArrayEquals(new float[] {40.0F, 12.0F, 1.0F, 12.0F, 4.0F, 0.0F, 12.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.0F);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(12.0F);
      assertNotNull(double1);
      assertEquals(12.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(4);
      assertNotNull(double2);
      assertEquals(4.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(40.0F);
      assertNotNull(double3);
      assertEquals(40.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(3.0);
      assertNotNull(double4);
      assertEquals(3.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(4.0F);
      assertNotNull(double5);
      assertEquals(4.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1.0F);
      assertNotNull(double6);
      assertEquals(1.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(40);
      assertNotNull(double7);
      assertEquals(40.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(108);
      assertNotNull(double8);
      assertEquals(108.0, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 4.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, (-254));
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-254);
      longArray0[1] = (long) (-254);
      longArray0[2] = (long) (-254);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3810L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-254L), (-254L), (-254L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-254L);
      Integer integer1 = new Integer((-254));
      assertNotNull(integer1);
      assertEquals((-254), (int)integer1);
      
      Integer integer2 = new Integer((-3038));
      assertNotNull(integer2);
      assertEquals((-3038), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      MutableInt mutableInt0 = new MutableInt(37);
      assertNotNull(mutableInt0);
      assertEquals(37, (int)mutableInt0.toInteger());
      assertEquals(37, (int)mutableInt0.getValue());
      assertEquals(37.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)37, mutableInt0.shortValue());
      assertEquals(37, mutableInt0.intValue());
      assertEquals(37L, mutableInt0.longValue());
      assertEquals("37", mutableInt0.toString());
      assertEquals(37.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)37, mutableInt0.byteValue());
      
      Integer integer3 = mutableInt0.toInteger();
      assertNotNull(integer3);
      assertEquals(37, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(37, (int)mutableInt0.toInteger());
      assertEquals(37, (int)mutableInt0.getValue());
      assertEquals(37.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)37, mutableInt0.shortValue());
      assertEquals(37, mutableInt0.intValue());
      assertEquals(37L, mutableInt0.longValue());
      assertEquals("37", mutableInt0.toString());
      assertEquals(37.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)37, mutableInt0.byteValue());
      
      Integer integer4 = new Integer((-1844));
      assertNotNull(integer4);
      assertEquals((-1844), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer2);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = 'q';
      charArray0[4] = 'i';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'0', '0', '0', 'q', 'i', '0', 'N', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeAll(charArray1, intArray1);
      assertNotNull(charArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new char[] {'0', '0', '0', 'q', 'i', '0', 'N', '\u0000'}, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertEquals(16, charArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(914);
      assertNotNull(integer0);
      assertEquals(914, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2364);
      assertNotNull(integer1);
      assertEquals(2364, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '0';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) integerArray0[1], (int) integerArray0[1]);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {48.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, '0');
      assertNotNull(bitSet0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {'0', '0', '0', 'q', 'i', '0', 'N', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 7, 10, 13}", bitSet0.toString());
      assertEquals(14, bitSet0.length());
      assertEquals(8, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'q';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', 'q'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shift((short[]) null, (-1628));
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'y', 'q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse((byte[]) null);
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)14);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-434));
      assertNotNull(short1);
      assertEquals((short) (-434), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertEquals((short)14, (short)short2);
      assertEquals(3, shortArray0.length);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)14, (short) (-434), (short)14}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)14, (short) (-434), (short)14}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      byte[] byteArray0 = ArrayUtils.insert((int) (short) (-434), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) (short) (-434);
      longArray2[1] = (long) (short)shortArray0[1];
      longArray2[2] = (long) 0;
      longArray2[3] = (long) (short) (-434);
      longArray2[4] = (long) 0;
      longArray2[5] = (long) (short)shortArray0[1];
      longArray2[6] = (long) (byte)102;
      ArrayUtils.swap(longArray2, (int) (short) (-434), (-1));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-434L), (-434L), 0L, (-434L), 0L, (-434L), 102L}, longArray2);
      assertEquals(7, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, (float) (-1));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1);
      longArray0[4] = (-925L);
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, (-1L), (-925L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, (-1L), (-925L), (-1L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1L));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2235.0));
      assertNotNull(double1);
      assertEquals((-2235.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-2235.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = 2422.738F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (-1L);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-1));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-1.0F), 2422.738F, 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray1.length);
      assertEquals(3, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArrayUtils.shift(byteArray0, (int) (byte) (-7));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-74);
      ArrayUtils.shift(byteArray0, (-4492));
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-74), (byte) (-44), (byte)0, (byte)63, (byte) (-13), (byte)53}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.swap(booleanArray0, (int) (byte) (-13), 84, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 209.5860173, 2499.0);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1424.3533, 113, (-326.0072931));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 2849);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2849;
      longArray0[1] = (long) 'l';
      longArray0[2] = (long) 'p';
      longArray0[3] = (long) 'p';
      longArray0[4] = (long) 'l';
      longArray0[5] = (long) 'p';
      Character character0 = Character.valueOf('p');
      assertNotNull(character0);
      assertEquals('p', (char)character0);
      
      Character character1 = new Character('l');
      assertNotNull(character1);
      assertEquals('l', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) 'l';
      characterArray0[1] = character0;
      characterArray0[2] = character1;
      characterArray0[3] = (Character) 'l';
      characterArray0[4] = character1;
      characterArray0[5] = (Character) 'p';
      characterArray0[6] = (Character) 'l';
      characterArray0[7] = character0;
      characterArray0[8] = (Character) 'l';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '-');
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'l', 'p', 'l', 'l', 'l', 'p', 'l', 'p', 'l'}, charArray2);
      assertEquals(9, charArray2.length);
      assertEquals(9, characterArray0.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      ArrayUtils.swap((int[]) null, 0, 1379, 4);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'s', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'g';
      longArray0[1] = (long) 's';
      ArrayUtils.shift((int[]) null, (-1432));
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'v');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'s', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'T');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 'P';
      Character character1 = Character.valueOf('P');
      assertNotNull(character1);
      assertEquals('P', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), (-83), 8);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) (char)character0;
      intArray0[2] = (int) char0;
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 80, (-2290));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {41, 41, 80, 0, (-1), (-1)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)104, (byte)0, (byte)52}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (-357), 5128, 2147118415);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean1);
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      
      booleanArray0[0] = boolean2;
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(boolean2.equals((Object)boolean6));
      assertFalse(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 45.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-91);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)2, (byte)39, (byte)1, (byte) (-36), (byte) (-1), (byte) (-80), (byte) (-91), (byte) (-29)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'n';
      charArray0[3] = '5';
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.valueOf((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Integer integer1 = new Integer(6);
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer2);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, int0);
      assertEquals(1, integerArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = '5';
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.valueOf((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Integer integer1 = new Integer(6);
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer2);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, int0);
      assertEquals(1, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2113.3796539127);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4094.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2113.3796539127), 0.0, (-4094.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      Boolean boolean1 = Boolean.valueOf("i*T=!W64UA G`r()");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.valueOf("java.lang.Integer");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((Object[]) null, 2539, 2539);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2426, (int) (short)2426);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 154.0F;
      floatArray0[1] = (float) 2539;
      floatArray0[2] = (float) 2539;
      floatArray0[3] = (float) (short)2426;
      floatArray0[4] = (float) (short)2426;
      floatArray0[5] = (float) 2539;
      floatArray0[6] = (float) (short)2426;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)2426, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2426, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-3078L);
      longArray0[2] = (-712L);
      longArray0[4] = 742L;
      longArray0[5] = 0L;
      longArray0[6] = (-1L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-3078L), (-712L), 0L, 742L, 0L, (-1L), 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 1256, 332);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      Boolean boolean0 = new Boolean("i*T=!WUA G`r()");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("V0>#");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean0;
      booleanArray1[2] = boolean0;
      booleanArray1[3] = boolean0;
      booleanArray1[4] = boolean0;
      booleanArray1[5] = boolean0;
      booleanArray1[6] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray2));
      assertEquals(7, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.reverse((Object[]) booleanArray1, 69, 1256);
      assertEquals(7, booleanArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)38;
      shortArray0[1] = (short)2426;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)128;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2426, (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)38, (short)2426, (short) (-1), (short)128}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'T';
      floatArray0[2] = (float) 'T';
      floatArray0[3] = (-5162.8F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 76.0F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, (-5162.8F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'T';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {84L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 2915, 1982292598, 0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {84L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1684.3608F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, (-5162.8F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 84L;
      doubleArray0[2] = (double) 0L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-5162.8F));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {84.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)52;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)2, (byte)0, (byte)59, (byte) (-10), (byte)90, (byte) (-37), (byte)52}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte)2, (byte)0, (byte)59, (byte) (-10), (byte)90, (byte) (-37), (byte)52}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 40, 40, 40);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 40;
      intArray0[1] = 40;
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)114);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)114}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)114;
      shortArray0[1] = (short) (byte)114;
      shortArray0[2] = (short) (byte)114;
      shortArray0[3] = (short) (byte)114;
      shortArray0[4] = (short) (-2521);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2008, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2008, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray1);
      assertNotNull(objectArray0);
      assertSame(booleanArray1, objectArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, (-254));
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-254);
      longArray0[1] = (long) (-254);
      longArray0[2] = (long) (-254);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3810L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-254L), (-254L), (-254L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-254L);
      doubleArray0[1] = (double) (-254);
      doubleArray0[2] = (double) (-254L);
      doubleArray0[3] = (double) (-254L);
      doubleArray0[4] = (double) (-254);
      doubleArray0[5] = (double) 3810L;
      doubleArray0[6] = (double) (-254);
      doubleArray0[7] = (double) (-254L);
      doubleArray0[8] = (double) 3810L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 381, (-385));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-254.0), (-254.0), (-254.0), (-254.0), (-254.0), 3810.0, (-254.0), (-254.0), 3810.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)18;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-71), (int) (byte)12);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)2, (byte) (-74), (byte) (-50), (byte)99, (byte)18}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'K';
      charArray0[2] = '5';
      charArray0[3] = '^';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '&', (-257));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new char[] {'E', 'K', '5', '^'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (-257);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte) (-74);
      intArray0[5] = (int) (byte) (-50);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2, (-257), 2, (-74), (-50)}, intArray1);
      assertArrayEquals(new int[] {2, (-257), 0, 2, (-74), (-50)}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)84);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      byte[] byteArray0 = ArrayUtils.insert(7, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 7;
      longArray0[2] = (long) 7;
      longArray0[3] = (long) 7;
      longArray0[4] = (long) 7;
      longArray0[5] = (long) 7;
      longArray0[6] = (long) 7;
      longArray0[7] = (long) 7;
      longArray0[8] = (long) 7;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L}, longArray0);
      assertEquals(9, longArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (-1L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)57;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)127, (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)127, (byte)34, (byte)127, (byte)57, (byte)57}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-3505);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-925);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (-925);
      longArray0[7] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-3505L), 2L, 2L, (-925L), 2L, 2L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-90);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-90);
      byte[] byteArray2 = ArrayUtils.insert(1, byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-90), (byte)11, (byte) (-90), (byte) (-90)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-90), (byte) (-90), (byte)11, (byte) (-90), (byte) (-90), (byte)65, (byte)118, (byte) (-90)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)11, (byte)65, (byte)118, (byte) (-90)}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ArrayUtils.swap(longArray0, 2, (-3505));
      assertArrayEquals(new long[] {2L, 2L, (-3505L), (-925L), 2L, 2L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {2L, 2L, (-3505L), (-925L), 2L, 2L, (-925L), (-925L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 886;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 886;
      intArray0[5] = (-1);
      intArray0[6] = 886;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 40, (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {886, 0, 0, 0, 886, (-1), 886}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 65);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) true;
      booleanArray0[0] = true;
      objectArray0[6] = (Object) true;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1936;
      shortArray0[1] = (short)51;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2116.0F);
      floatArray0[1] = (float) 65;
      floatArray0[2] = (float) (short)1936;
      floatArray0[3] = (float) (short)1936;
      floatArray0[4] = (float) (short)1936;
      floatArray0[5] = (float) (short)51;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1234.38F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2116.0F), 65.0F, 1936.0F, 1936.0F, 1936.0F, 51.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2116.0F), 65.0F, 1936.0F, 1936.0F, 1936.0F, 51.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int1 = ArrayUtils.hashCode(objectArray0[3]);
      assertEquals(7, objectArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      Integer integer0 = new Integer(1982);
      assertNotNull(integer0);
      assertEquals(1982, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 2;
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-925);
      longArray0[3] = (long) (-925);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) 2;
      integerArray0[3] = (Integer) 2;
      integerArray0[4] = (Integer) 2;
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 48L, int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {2L, 2L, (-925L), (-925L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, 3938);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Short short0 = new Short((short) (-4094));
      assertNotNull(short0);
      assertEquals((short) (-4094), (short)short0);
      
      Short short1 = new Short((byte)12);
      assertNotNull(short1);
      assertEquals((short)12, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[7];
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      Short short2 = new Short((short)2008);
      assertNotNull(short2);
      assertEquals((short)2008, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray0[4] = short2;
      shortArray0[5] = short0;
      shortArray0[6] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-4094));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4094), (short) (-4094), (short)12, (short)12, (short)2008, (short) (-4094), (short)12}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2008;
      intArray0[1] = 1752;
      intArray0[2] = (-4589);
      intArray0[3] = (int) 'q';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) shortArray0[2]);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2008, 1752, (-4589), 113}, intArray1);
      assertArrayEquals(new int[] {2008, 1752, (-4589), 113}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(7, shortArray0.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (-1471), 108);
      assertNull(booleanArray1);
      
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {2008, 1752, (-4589), 113}, intArray2);
      assertArrayEquals(new int[] {2008, 1752, (-4589), 113}, intArray0);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.removeAllOccurrences(intArray0, 108);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertArrayEquals(new int[] {2008, 1752, (-4589), 113}, intArray3);
      assertArrayEquals(new int[] {2008, 1752, (-4589), 113}, intArray0);
      assertEquals(4, intArray3.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)shortArray0[5];
      longArray0[1] = (long) (short)shortArray0[3];
      longArray0[2] = (long) (short) (-4094);
      longArray0[3] = (long) 2008;
      longArray0[4] = (long) (short)shortArray0[6];
      longArray0[5] = 408L;
      longArray0[6] = (long) (short)shortArray0[4];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 113);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-4094L), 12L, (-4094L), 2008L, 12L, 408L, 2008L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, 158);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-460), 12, 800);
      assertEquals(20, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      ArrayUtils.reverse(booleanArray1, (-2365), 2145838066);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 84.0;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2145838066;
      doubleArray0[3] = (double) 27;
      doubleArray0[4] = (double) 2145838066;
      doubleArray0[5] = 1791.1105105882052;
      doubleArray0[6] = (double) 27;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 800, 800);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {84.0, 4.0, 2.145838066E9, 27.0, 2.145838066E9, 1791.1105105882052, 27.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 84.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {84.0, 4.0, 2.145838066E9, 27.0, 2.145838066E9, 1791.1105105882052, 27.0, 84.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {84.0, 4.0, 2.145838066E9, 27.0, 2.145838066E9, 1791.1105105882052, 27.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray0, 2145838066, (-4650));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {84.0, 4.0, 2.145838066E9, 27.0, 2.145838066E9, 1791.1105105882052, 27.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Integer integer0 = new Integer((-460));
      assertNotNull(integer0);
      assertEquals((-460), (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer0, (-4650));
      assertEquals((-1), int0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray0, (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.addAll((int[]) null, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)27;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)48);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)48, (byte)104, (byte)34, (byte) (-30), (byte) (-57), (byte)19, (byte)36, (byte)27}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-3866), (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (int) (short) (-3866), 3, (-2070));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-67L);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-3215), (-3215), 1879048192);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte)41, (byte)12, (byte)12}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-345.99091713405);
      ArrayUtils.shuffle(doubleArray1);
      assertArrayEquals(new double[] {(-345.99091713405)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)68, (byte) (-128), (byte) (-128), (byte)5, (byte)5, (byte) (-128)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (int) (byte) (-128), 28163, (-2680));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)5);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)68, (byte) (-128), (byte) (-128), (byte)5, (byte) (-128)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)68, (byte) (-128), (byte) (-128), (byte)5, (byte)5, (byte) (-128)}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 65);
      assertEquals((-1), int0);
      assertEquals(20, booleanArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      booleanArray0[0] = true;
      objectArray0[6] = (Object) true;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1936;
      shortArray0[1] = (short)51;
      shortArray0[2] = (short) (-23);
      shortArray0[3] = (short) (-426);
      shortArray0[4] = (short)2750;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1936, (short)51, (short) (-23), (short) (-426), (short)2750}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      booleanArray1[7] = true;
      booleanArray1[8] = false;
      ArrayUtils.shift(booleanArray1, (-2639), 65, (int) (short) (-23));
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, false, false}, booleanArray1));
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 140;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-496));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {140, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 835;
      floatArray0[1] = (float) 835;
      floatArray0[2] = (float) (-496);
      ArrayUtils.swap(floatArray0, (-186), (-3527), (-496));
      assertArrayEquals(new float[] {835.0F, 835.0F, (-496.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'l';
      intArray0[1] = 1879048192;
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) 'l';
      intArray0[4] = (int) 'l';
      intArray0[5] = (int) 'p';
      intArray0[6] = (int) 'p';
      intArray0[7] = 1879048192;
      intArray0[8] = 2370;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 108);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1879048192, 112, 112, 112, 1879048192, 2370}, intArray1);
      assertArrayEquals(new int[] {108, 1879048192, 112, 108, 108, 112, 112, 1879048192, 2370}, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {108, 1879048192, 112, 108, 108, 112, 112, 1879048192, 2370}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      Integer integer0 = new Integer((-3265));
      assertNotNull(integer0);
      assertEquals((-3265), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, " in an array of ");
      assertNotNull(string0);
      assertEquals("-3265", string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3265);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-925);
      longArray0[2] = (long) (-925);
      boolean boolean0 = new Boolean("-3265");
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-68), (int) (byte) (-68));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-32)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-68);
      ArrayUtils.swap((boolean[]) null, (int) (byte) (-32), (-68), (-1765));
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 2279, 2290, 2290);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-1394L);
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, (-1394L), 0L}, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, (-1394L), 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = Integer.valueOf((-139));
      assertNotNull(integer0);
      assertEquals((-139), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      ArrayUtils.reverse(doubleArray0, (-1460), 2145048438);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2145048438;
      intArray0[1] = (int) integerArray0[0];
      intArray0[2] = int0;
      intArray0[3] = (-139);
      intArray0[4] = (-1460);
      intArray0[5] = (int) integerArray0[0];
      intArray0[6] = 2145048438;
      intArray0[7] = (int) integerArray0[0];
      intArray0[8] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {2145048438, (-139), 0, (-139), (-1460), (-139), 2145048438, (-139), 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4094);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-4094);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-4094);
      doubleArray0[1] = (double) (-4094);
      doubleArray0[2] = (double) (-4094);
      doubleArray0[3] = (double) (-4094);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-4094.0), (-4094.0), (-4094.0), (-4094.0), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2940L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {2940L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)74);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray1, (long) integerArray0[0]);
      assertNotNull(bitSet1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {2940L}, longArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, integer0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 2;
      intArray0[1] = (-3505);
      float[] floatArray0 = new float[1];
      intArray0[2] = (-3505);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[2] = 'J';
      charArray0[3] = 'j';
      charArray0[5] = 'j';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'', 'j', 'J', 'j', '\u0000', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) 'J');
      assertNotNull(object0);
      assertEquals('J', object0);
      
      Float float0 = new Float((double) (-3505));
      assertNotNull(float0);
      assertEquals((-3505.0F), (float)float0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      assertNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-3505);
      integerArray0[1] = (Integer) (-3505);
      integerArray0[2] = (Integer) (-3505);
      integerArray0[3] = (Integer) (-3505);
      integerArray0[4] = (Integer) (-3505);
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[2]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1295.2091F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1295.2091F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 1L, 827);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, Integer.MAX_VALUE, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, Integer.MAX_VALUE, (Integer) 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals("{0, 1, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      floatArray0[7] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 0.0F, 2.14748365E9F, 0.0F, 0.0F, 2.14748365E9F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, 3307.0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 8192);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 159.85F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)113;
      shortArray0[1] = (short) (-19859);
      shortArray0[2] = (short)720;
      shortArray0[3] = (short)2529;
      shortArray0[4] = (short) (-1537);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)113, (short) (-19859), (short)720, (short)2529, (short) (-1537), (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '}';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'5', '}'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2049;
      shortArray0[1] = (short) (-1197);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1197));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2049, (short) (-1197)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-14));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, (int) (short) (-14));
      assertArrayEquals(new short[] {(short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14), (short) (-14)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = 'q';
      charArray0[4] = 'i';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'0', '0', '0', 'q', 'i', '0', 'N', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeAll(charArray1, intArray1);
      assertNotNull(charArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new char[] {'0', '0', '0', 'q', 'i', '0', 'N', '\u0000'}, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertEquals(16, charArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(914);
      assertNotNull(integer0);
      assertEquals(914, (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'0', '0', '0', 'q', 'i', '0', 'N', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short)2098;
      shortArray0[2] = (short)2098;
      shortArray0[3] = (short)2098;
      shortArray0[4] = (short)2098;
      ArrayUtils.shift(shortArray0, (int) (short)2098);
      assertArrayEquals(new short[] {(short)2098, (short)2098, (short)2098, (short)2098, (short)2098}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Integer integer1 = new Integer(35);
      assertNotNull(integer1);
      assertEquals(35, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(35, object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'q';
      charArray0[4] = 'i';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      charArray0[7] = '8';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'8', 'L', 'L', 'q', 'i', '0', 'N', '8'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short)2098;
      shortArray0[2] = (short)2098;
      shortArray0[3] = (short)2098;
      ArrayUtils.shift(shortArray0, (-1628));
      assertArrayEquals(new short[] {(short)2098, (short)2098, (short)2098, (short)2098}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'8', 'L', 'L', 'q', 'i', '0', 'N', '8'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '8');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'8', 'L', 'L', 'q', 'i', '0', 'N', '8'}, charArray0);
      assertArrayEquals(new char[] {'L', 'L', 'q', 'i', '0', 'N'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      intArray0[1] = 878;
      ArrayUtils.swap(intArray0, 1, 878, (-1596));
      assertArrayEquals(new int[] {(-1596), 878}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'G';
      charArray0[2] = 'V';
      ArrayUtils.reverse(charArray0, 217, 2146142611);
      assertArrayEquals(new char[] {'0', 'G', 'V'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'0', 'G', 'V'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 878, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-1230), 1087, 1082);
      assertEquals(0, integerArray0.length);
      
      Integer integer1 = ArrayUtils.get(integerArray0, 106);
      assertNull(integer1);
      assertEquals(0, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3845, 3845);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(0, object1);
      
      String string0 = ArrayUtils.toString(object1, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("0", string0);
      
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3845, (-714));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 'l';
      objectArray0[1] = (Object) 'l';
      objectArray0[2] = (Object) "0";
      objectArray0[3] = (Object) "0";
      objectArray0[4] = (Object) "0";
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[2] = integerArray0[0];
      Integer integer1 = new Integer(1813);
      assertNotNull(integer1);
      assertEquals(1813, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer1, 10);
      assertEquals((-1), int0);
      assertEquals(4, integerArray0.length);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Short[] shortArray0 = new Short[6];
      Integer integer1 = ArrayUtils.get(integerArray0, 106);
      assertNull(integer1);
      assertEquals(0, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(5, int0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(772);
      assertNotNull(integer0);
      assertEquals(772, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (-74));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-3078L);
      longArray0[2] = (-712L);
      longArray0[3] = 1L;
      longArray0[4] = 742L;
      longArray0[5] = 0L;
      longArray0[6] = (-1L);
      longArray0[7] = 9L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-3078L), (-712L), 1L, 742L, 0L, (-1L), 9L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 1256, 332);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'U';
      charArray0[2] = 'M';
      charArray0[3] = 'r';
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer0);
      assertSame(integerArray0, integerArray1);
      assertEquals((-1), int0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-509.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double((-2251.32495291));
      assertNotNull(double3);
      assertEquals((-2251.32495291), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double((-2251.32495291));
      assertNotNull(double4);
      assertEquals((-2251.32495291), (double)double4, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      Double double5 = new Double((double) doubleArray0[0]);
      assertNotNull(double5);
      assertEquals(1.0, (double)double5, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      doubleArray0[1] = double5;
      doubleArray0[2] = double4;
      doubleArray0[3] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, (-2251.32495291), 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      ArrayUtils.reverse((Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      ArrayUtils.shift(intArray0, (-411));
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-726));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = (Boolean) boolean0;
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) (-726);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), Float.NaN, (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-726.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, (-726.0F)}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'p';
      intArray0[1] = (int) 'p';
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) 'p';
      intArray0[5] = (-263);
      ArrayUtils.swap(intArray0, 112, 112, 112);
      assertArrayEquals(new int[] {112, 112, 112, 112, 0, (-263)}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.reverse(charArray0, 112, 217);
      assertArrayEquals(new char[] {'\u0000', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1792), (-1792));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertFalse(boolean2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray3 = new boolean[1];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = false;
      ArrayUtils.shuffle(booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertEquals(1, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'G';
      boolean boolean3 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean3);
      assertArrayEquals(new float[] {71.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 878;
      intArray0[2] = (int) 'B';
      intArray0[3] = 1;
      intArray0[4] = 878;
      intArray0[5] = (int) 'B';
      ArrayUtils.swap(intArray0, (-1324), 66, 878);
      assertArrayEquals(new int[] {1, 878, 66, 1, 878, 66}, intArray0);
      assertEquals(6, intArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'B';
      charArray0[3] = '0';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'G';
      charArray0[7] = 'G';
      charArray0[8] = 'E';
      ArrayUtils.reverse(charArray0, 66, 217);
      assertArrayEquals(new char[] {'V', 'V', 'B', '0', 'B', 'B', 'G', 'G', 'E'}, charArray0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 'E';
      floatArray0[3] = (float) 'V';
      floatArray0[4] = (float) 'B';
      floatArray0[5] = (float) 'E';
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 69.0F, 86.0F, 66.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) '\u0000';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1461));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'M';
      charArray0[2] = 'Q';
      charArray0[3] = 'y';
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false}, booleanArray0));
      assertEquals(16, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) true;
      int[] intArray0 = new int[6];
      intArray0[0] = 2116360696;
      intArray0[1] = (int) 'y';
      intArray0[2] = (int) 'y';
      intArray0[3] = (int) 'M';
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'y';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2116360696, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      long[] longArray0 = new long[8];
      longArray0[0] = 745L;
      longArray0[1] = 907L;
      longArray0[2] = 907L;
      longArray0[3] = 907L;
      longArray0[4] = 3143L;
      longArray0[5] = (-925L);
      longArray0[6] = 907L;
      longArray0[7] = 907L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {745L, 907L, 907L, 907L, 3143L, (-925L), 907L, 907L}, longArray0);
      assertArrayEquals(new long[] {745L, 907L, 907L, 907L, 3143L, (-925L), 907L, 907L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      Double double0 = new Double((-925L));
      assertNotNull(double0);
      assertEquals((-925.0), (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 907L, (-651));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = 52.8F;
      floatArray2[1] = 52.8F;
      floatArray2[2] = 52.8F;
      floatArray2[3] = 52.8F;
      floatArray2[4] = 52.8F;
      floatArray2[5] = 52.8F;
      floatArray2[6] = 52.8F;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 0.0F, 52.8F}, floatArray2, 0.01F);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'V';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      ArrayUtils.reverse(charArray0, 217, 2146142611);
      assertArrayEquals(new char[] {'a', 'V', 'G', 'G'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-3078L);
      longArray0[2] = (-712L);
      longArray0[3] = 1L;
      longArray0[4] = 742L;
      longArray0[5] = 0L;
      longArray0[6] = (-1L);
      longArray0[7] = 9L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-3078L), (-712L), 1L, 742L, 0L, (-1L), 9L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 1256, 332);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'U';
      charArray0[2] = 'M';
      charArray0[3] = 'r';
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 332, 332);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-3078L);
      doubleArray0[2] = (double) 'B';
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 'r';
      doubleArray0[5] = (double) (-712L);
      doubleArray0[6] = (double) 1256;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 68.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3078.0), 66.0, (-1.0), 114.0, (-712.0), 1256.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3078.0), 66.0, (-1.0), 114.0, (-712.0), 1256.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)12;
      ArrayUtils.swap(byteArray0, (-726), 3984, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-12), (byte) (-56), (byte)0, (byte)2, (byte)12}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-12), 878);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1596), 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ArrayUtils.shift(byteArray0, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, 1, 10, 10);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 10;
      floatArray0[1] = 10.0F;
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 1;
      intArray0[5] = 10;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap(floatArray1, 0, 3, 1208);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Integer integer0 = new Integer(42);
      assertNotNull(integer0);
      assertEquals(42, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = 'q';
      charArray0[4] = 'i';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'0', '0', '0', 'q', 'i', '0', 'N', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeAll(charArray1, intArray1);
      assertNotNull(charArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new char[] {'0', '0', '0', 'q', 'i', '0', 'N', '\u0000'}, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertEquals(16, charArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(914);
      assertNotNull(integer0);
      assertEquals(914, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2364);
      assertNotNull(integer1);
      assertEquals(2364, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1844));
      assertNotNull(integer2);
      assertEquals((-1844), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer3);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      MutableInt mutableInt0 = new MutableInt((-1));
      assertNotNull(mutableInt0);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      
      Integer integer4 = mutableInt0.toInteger();
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer4);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1184;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1184}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-535L));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(35, object0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[3] = 'q';
      charArray0[4] = 'i';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Short short0 = new Short((short) (-1636));
      assertNotNull(short0);
      assertEquals((short) (-1636), (short)short0);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, (-4589));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      Long[] longArray0 = new Long[4];
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (int) shortArray0[2], (int) shortArray0[2]);
      assertNull(booleanArray1);
      assertEquals(5, shortArray0.length);
      
      int[] intArray3 = ArrayUtils.removeAllOccurences(intArray2, (int) shortArray0[3]);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertEquals(5, shortArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-2219));
      assertNotNull(short0);
      assertEquals((short) (-2219), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertEquals((short) (-2219), (short)short1);
      assertEquals(7, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertNotNull(short2);
      assertEquals((short) (-2219), (short)short2);
      assertEquals(7, shortArray0.length);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-2219));
      assertNotNull(short3);
      assertEquals((short) (-2219), (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-811));
      assertNotNull(short4);
      assertEquals((short) (-811), (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[3]);
      assertNotNull(short5);
      assertEquals((short) (-2219), (short)short5);
      assertEquals(7, shortArray0.length);
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)91);
      assertNotNull(short6);
      assertEquals((short)91, (short)short6);
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)914);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2219), (short) (-2219), (short) (-2219), (short) (-2219), (short) (-811), (short) (-2219), (short)91}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE}, intArray0);
      assertEquals(2, intArray0.length);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, 0, (Integer) Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'T';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', 'T'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'T';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'T', 'Q', 'T'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      ArrayUtils.shift((short[]) null, (-636));
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'Q';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 84.0;
      ArrayUtils.shift(objectArray0, 0, 0, (-1));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'p';
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 'l';
      doubleArray0[3] = (double) 'p';
      doubleArray0[4] = (double) (-3215);
      doubleArray0[5] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-991.347714278), 108.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {112.0, 1.5, 108.0, 112.0, (-3215.0), 1.5}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) 1.5;
      objectArray0[2] = (Object) 1.5;
      objectArray0[3] = (Object) 112.0;
      ArrayUtils.shift(objectArray0, (-1), (-3215), (-1));
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-28L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-28L), (-28L), (-28L), (-28L), (-28L), (-28L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      ArrayUtils.shift((Object[]) longArray0, (-574), (-117), (-117));
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = (-81);
      Integer integer0 = new Integer((-81));
      assertNotNull(integer0);
      assertEquals((-81), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-10));
      assertNotNull(intArray0);
      assertSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) '\u0000';
      floatArray0[2] = (float) '%';
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) (-10);
      floatArray0[5] = (float) 154;
      floatArray0[6] = (float) '\u0000';
      floatArray0[7] = (float) '%';
      floatArray0[8] = (float) int0;
      int int1 = new Integer(154);
      assertEquals(154, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, int0);
      assertNotNull(intArray1);
      assertSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81), (-81)}, intArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(int0 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift(intArray0, (-1));
      assertSame(integerArray0, integerArray1);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-81), (-81), (-81), (-81)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '%');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      Integer[] integerArray0 = null;
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 69;
      intArray0[1] = 114;
      intArray0[2] = 16;
      intArray0[3] = 1932;
      intArray0[4] = (-343);
      intArray0[5] = 693;
      intArray0[6] = (-1872);
      intArray0[7] = (-836);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1932, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-3802));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802), (-3802), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertArrayEquals(new int[] {(-3802)}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)79);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-3802));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      intArray0[1] = 878;
      ArrayUtils.swap(intArray0, 1, 878, (-1596));
      assertArrayEquals(new int[] {(-1596), 878}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'G';
      charArray0[2] = 'V';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'0', 'G', 'V'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (byte)57, (short) (byte)57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-977);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)27587;
      shortArray0[3] = (short) (-2425);
      int int1 = 102;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 102, (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)21;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)21, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-429));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Integer integer0 = new Integer((-997));
      assertNotNull(integer0);
      assertEquals((-997), (int)integer0);
      
      ArrayUtils.reverse((float[]) null, 82, (-429));
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3186;
      shortArray0[1] = (short)3186;
      shortArray0[2] = (short)3186;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)3186, (short)3186, (short)3186}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u', (-2127031422));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'l';
      ArrayUtils.reverse(floatArray0, (-2127031422), 63);
      assertArrayEquals(new float[] {108.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {108.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {108.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      
      ArrayUtils.swap((char[]) null, 607, 607, (-2041));
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((-2703.295773));
      assertNotNull(float0);
      assertEquals((-2703.2957F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1353.279648639);
      assertNotNull(float1);
      assertEquals(1353.2797F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-3010.0354F));
      assertNotNull(float2);
      assertEquals((-3010.0354F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[2]);
      assertNotNull(float3);
      assertEquals((-3010.0354F), (float)float3, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1353.279648639);
      assertNotNull(float4);
      assertEquals(1353.2797F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      floatArray0[4] = float4;
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) floatArray0[3];
      floatArray1[1] = 1.0F;
      floatArray1[2] = (float) floatArray0[0];
      floatArray1[3] = (float) 607;
      floatArray1[4] = (float) 607;
      floatArray1[5] = (float) floatArray0[0];
      floatArray1[6] = (float) 607;
      ArrayUtils.reverse(floatArray1, 2144016325, 607);
      assertArrayEquals(new float[] {(-3010.0354F), 1.0F, (-2703.2957F), 607.0F, 607.0F, (-2703.2957F), 607.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {(-3010.0354F), 1.0F, (-2703.2957F), 607.0F, 607.0F, (-2703.2957F), 607.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-3010.0354F), 1.0F, (-2703.2957F), 607.0F, 607.0F, (-2703.2957F), 607.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)256;
      shortArray0[1] = (short)3186;
      shortArray0[2] = (short) (-2685);
      shortArray0[3] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)256, (short)3186, (short) (-2685), (short) (-1)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      ArrayUtils.shift((Object[]) characterArray0, (-213));
      assertEquals(9, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 97, 97);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)1757);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4955.54455458211, 32, 1.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short[] shortArray0 = new Short[15];
      Short short0 = new Short((short) (-1163));
      assertNotNull(short0);
      assertEquals((short) (-1163), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-4678));
      assertNotNull(shortArray1);
      assertEquals(15, shortArray0.length);
      assertEquals(15, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-4678), (-1413), (double) (short) (-4678));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1163);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1163.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1163.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertEquals(15, shortArray2.length);
      assertEquals(15, shortArray0.length);
      assertEquals(15, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'H');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (-451.833F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {72.0F, (-451.833F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {72.0F, (-451.833F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {72.0F, (-451.833F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)683;
      shortArray0[1] = (short)683;
      shortArray0[2] = (short)683;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)683, (short)683, (short)683}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3641.1047F;
      floatArray0[1] = (float) (short)683;
      floatArray0[2] = (float) (short)683;
      floatArray0[3] = (float) (short)683;
      floatArray0[4] = (float) (short)683;
      floatArray0[5] = (float) (short)683;
      floatArray0[6] = (float) (short)683;
      floatArray0[7] = (float) (short)683;
      floatArray0[8] = (float) (short)683;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {3641.1047F, 683.0F, 683.0F, 683.0F, 683.0F, 683.0F, 683.0F, 683.0F, 683.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3641.1047F, 683.0F, 683.0F, 683.0F, 683.0F, 683.0F, 683.0F, 683.0F, 683.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)683;
      intArray0[1] = 1388;
      intArray0[2] = (int) (short)683;
      intArray0[3] = 3845;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 683);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {683, 1388, 683, 3845}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1118));
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)683, (short)683, (short)683}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(int1 == int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-3730));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {683, 1388, 683, 3845}, intArray0);
      assertArrayEquals(new int[] {683, 1388, 683, 3845}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, (-627));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)683;
      shortArray0[2] = (short)1936;
      shortArray0[3] = (short)1936;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)683, (short)1936, (short)1936}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3730));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)65);
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)683, (short)1936, (short)1936}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-2251.32495291));
      assertNotNull(double3);
      assertEquals((-2251.32495291), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double((-2251.32495291));
      assertNotNull(double4);
      assertEquals((-2251.32495291), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      Double double5 = new Double((double) doubleArray0[0]);
      assertNotNull(double5);
      assertEquals(1.0, (double)double5, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[1] = double5;
      doubleArray0[2] = double4;
      doubleArray0[3] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, (-2251.32495291), 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      ArrayUtils.reverse((Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      ArrayUtils.shift(intArray0, (-411));
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-726));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 121;
      doubleArray0[1] = 1040.597436;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (double) 121;
      ArrayUtils.reverse(doubleArray0, 2065, 121);
      assertArrayEquals(new double[] {121.0, 0.0, 0.0, 121.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((short) (-1418));
      assertNotNull(short0);
      assertEquals((short) (-1418), (short)short0);
      
      Short[] shortArray0 = new Short[1];
      try { 
        Short.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-1), 100.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-442.8764021), (-1912), (double) (-1912));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-3078L);
      longArray0[2] = (-712L);
      long long0 = 1L;
      longArray0[3] = 1L;
      longArray0[4] = 742L;
      longArray0[5] = 0L;
      longArray0[6] = (-1L);
      longArray0[7] = 9L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-3078L), (-712L), 1L, 742L, 0L, (-1L), 9L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 1256, 332);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      char char0 = 'B';
      charArray0[0] = 'B';
      charArray0[1] = 'U';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '7', 332);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'B', 'U', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 112, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-345.99091713405);
      ArrayUtils.shuffle(doubleArray1);
      assertArrayEquals(new double[] {(-345.99091713405)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      ArrayUtils.reverse(byteArray0, 1566, (int) (byte) (-128));
      assertArrayEquals(new byte[] {(byte)68}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)68;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {68.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {68.0F, 68.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u', (-2127031422));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'l', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-2127031422);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-5162.7998046875));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {102.0, (-1.0), (-2.127031422E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {102.0, (-1.0), (-2.127031422E9)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 973L;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (byte)24;
      ArrayUtils.shift(longArray0, (int) (byte)24, 1, 1);
      assertArrayEquals(new long[] {973L, 1L, 1L, 24L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals(2, int0);
      assertArrayEquals(new long[] {973L, 1L, 1L, 24L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = Character.toChars(2);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0002'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2258;
      intArray0[2] = 15;
      intArray0[3] = 3538;
      intArray0[4] = (-914);
      intArray0[5] = 829;
      ArrayUtils.swap(intArray0, 0, (-1227), 3538);
      assertArrayEquals(new int[] {2, 2258, 15, 3538, (-914), 829}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2258, 15, 3538, (-914), 829}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '[';
      charArray0[2] = '!';
      charArray0[3] = '?';
      charArray0[4] = 'U';
      charArray0[5] = 'N';
      charArray0[6] = '<';
      charArray0[7] = '%';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '|', 15);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'_', '[', '!', '?', 'U', 'N', '<', '%'}, charArray0);
      assertEquals(8, charArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '|';
      longArray0[1] = 970L;
      longArray0[2] = (long) 'N';
      longArray0[3] = (long) '[';
      longArray0[4] = (long) (-914);
      longArray0[5] = (-1L);
      longArray0[6] = (long) '_';
      longArray0[7] = (long) 15;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals(5, int1);
      assertArrayEquals(new long[] {124L, 970L, 78L, 91L, (-914L), (-1L), 95L, 15L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      long[] longArray0 = new long[8];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-305L), 8192);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2137680472), (double) (-305L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2137680472, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-5453);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-5453));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-5453)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)304, (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)8551);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1785, (int) (short)1785);
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1426));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-4139));
      assertNotNull(integer0);
      assertEquals((-4139), (int)integer0);
      
      Integer integer1 = new Integer((byte)30);
      assertNotNull(integer1);
      assertEquals(30, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-2863));
      assertNotNull(integer2);
      assertEquals((-2863), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 988.01569055206;
      doubleArray0[1] = (double) (-2863);
      doubleArray0[2] = (double) (-4139);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-2863);
      doubleArray0[5] = (double) (byte)30;
      doubleArray0[6] = (double) (byte)30;
      doubleArray0[7] = (double) (byte)52;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-566.349207), 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {988.01569055206, (-2863.0), (-4139.0), (-1.0), (-2863.0), 30.0, 30.0, 52.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "9$i:[_^9PB?)z[HT@";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(6, stringArray1.length);
      assertEquals(6, stringArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)30;
      shortArray0[1] = (short) (byte)52;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-5453));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)30, (short)52}, shortArray0);
      assertArrayEquals(new short[] {(short)30, (short)52}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((byte) (-81));
      assertNotNull(short0);
      assertEquals((short) (-81), (short)short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2527, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2527, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)14);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Short short0 = new Short((byte)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      Short short1 = new Short((short)3849);
      assertNotNull(short1);
      assertEquals((short)3849, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((byte)14);
      assertNotNull(short2);
      assertEquals((short)14, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short2;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)14, (short)14}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      short[] shortArray2 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray2);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)14;
      byteArray1[5] = (byte)14;
      byteArray1[6] = (byte)14;
      byteArray1[7] = (byte)14;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(82, byteArray1, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[2] = 15;
      intArray0[3] = 2258;
      intArray0[4] = (-914);
      intArray0[5] = 829;
      ArrayUtils.swap(intArray0, 0, (-1227), 2258);
      assertArrayEquals(new int[] {2, 0, 15, 2258, (-914), 829}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 0, 15, 2258, (-914), 829}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '[';
      charArray0[2] = '!';
      charArray0[4] = 'U';
      charArray0[5] = 'N';
      charArray0[6] = '<';
      charArray0[7] = '%';
      ArrayUtils.shift(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {829, 2, 0, 15, 2258, (-914)}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 52.8F;
      floatArray2[1] = 52.8F;
      floatArray2[2] = 52.8F;
      floatArray2[3] = 52.8F;
      floatArray2[4] = 52.8F;
      floatArray2[5] = 52.8F;
      floatArray2[6] = 52.8F;
      floatArray2[7] = 0.0F;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 0.0F, 52.8F}, floatArray2, 0.01F);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1432);
      intArray0[1] = (-1432);
      intArray0[2] = (-1432);
      intArray0[3] = 3;
      intArray0[4] = (-1448);
      intArray0[5] = (-1432);
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      charArray0[5] = '|';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '|', 2146142611);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', '|'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int int1 = ArrayUtils.indexOf((long[]) null, 71L, (-1432));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 36.83;
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-2147393398), 2, (-2147393398));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'f';
      charArray0[2] = '*';
      charArray0[3] = 'R';
      charArray0[4] = '.';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'P', (int) (byte)12);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'g', 'f', '*', 'R', '.'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2131.27569711617;
      doubleArray0[1] = (double) 'g';
      doubleArray0[2] = (double) 'R';
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) '.';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2131.27569711617, 103.0, 82.0, 2.147483647E9, 46.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2131.27569711617, 103.0, 82.0, 2.147483647E9, 46.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '*';
      longArray0[1] = (long) 'P';
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {42L, 80L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), 822);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) 822);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-548.0F), (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = 907L;
      longArray0[4] = (-925L);
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 907L, (-925L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 907L, (-925L), (-1L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(532.323);
      assertNotNull(double0);
      assertEquals(532.323, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2235.0));
      assertNotNull(double1);
      assertEquals((-2235.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {532.323, (-2235.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-925L);
      floatArray0[1] = 2422.738F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 907L;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-1));
      assertEquals(4, int0);
      assertArrayEquals(new float[] {(-925.0F), 2422.738F, 0.0F, 0.0F, (-1.0F), 0.0F, 907.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray1.length);
      assertEquals(3, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 4346L;
      longArray0[2] = (-2190L);
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = '.';
      charArray0[6] = '.';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 2252);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.', '.'}, charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.', '.'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-2190L), 4346L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1323L;
      longArray0[1] = (-1801L);
      longArray0[2] = (-766L);
      longArray0[3] = 1518L;
      longArray0[4] = 1323L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1323L, (-1801L), (-766L), 1518L, 1323L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short)0, (-2447), (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1282);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 3903);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3903.0F, 3903.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) 3903);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {3903.0F, 3903.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 216);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-1));
      assertNull(floatArray0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-305L), 8192);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-721.0F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-721.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-721.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1317;
      intArray0[2] = (-1097);
      intArray0[3] = 91;
      intArray0[4] = (-2187);
      intArray0[5] = 1248;
      intArray0[6] = 14;
      intArray0[7] = (-106);
      intArray0[8] = 82;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1248);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1317, (-1097), 91, (-2187), 1248, 14, (-106), 82}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{5}", bitSet0.toString());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 14;
      longArray0[1] = (long) (-106);
      longArray0[2] = (long) (-106);
      longArray0[3] = 911L;
      longArray0[4] = 10L;
      longArray0[5] = (long) 1317;
      ArrayUtils.shift(longArray0, 3477, (-2187), 100);
      assertArrayEquals(new long[] {14L, (-106L), (-106L), 911L, 10L, 1317L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3802), (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-3802), 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      Integer integer0 = new Integer((-3265));
      assertNotNull(integer0);
      assertEquals((-3265), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, " in an array of ");
      assertNotNull(string0);
      assertEquals("-3265", string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3265);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-925);
      longArray0[2] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-925L), 0L, (-925L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)98;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-68), (int) (byte) (-68));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)98}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-68);
      intArray0[1] = (int) (byte)98;
      intArray0[2] = (-925);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (byte) (-68));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-68), 98, (-925)}, intArray0);
      assertArrayEquals(new int[] {98, (-925)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char char0 = 'm';
      char char1 = 'h';
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'h';
      char char2 = 'l';
      charArray0[2] = 'l';
      int int0 = (-1990);
      ArrayUtils.shift(charArray0, (-1990));
      assertArrayEquals(new char[] {'h', 'l', 'm'}, charArray0);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false, 4);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 'm';
      charArray0[2] = 'h';
      charArray0[3] = '|';
      ArrayUtils.shift(charArray0, (-1));
      assertArrayEquals(new char[] {'m', 'h', '|', '^'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 50, 4885);
      assertNull(booleanArray0);
      
      ArrayUtils.shift((Object[]) integerArray1, (-1187));
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 5, (-424));
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = Integer.valueOf(3109);
      assertNotNull(integer0);
      assertEquals(3109, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-3535));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-460), 12, 800);
      assertEquals(20, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      ArrayUtils.reverse(booleanArray1, (-2365), 2145838066);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-460);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-460));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-460L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(20, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, (-254));
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int int0 = (-13);
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-13));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      
      char char0 = '@';
      char char1 = 'c';
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'c';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(128, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true, (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '?');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char char0 = 'r';
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 91, (int) (byte)12, 4);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)12;
      intArray0[1] = 4;
      intArray0[2] = 91;
      intArray0[3] = (int) (byte)12;
      intArray0[4] = (int) (byte)12;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)12;
      intArray1[1] = (int) (byte)12;
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {12, 4, 91, 12, 12, 12, 12}, intArray2);
      assertArrayEquals(new int[] {12, 4, 91, 12, 12}, intArray0);
      assertArrayEquals(new int[] {12, 12}, intArray1);
      assertEquals(7, intArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      ArrayUtils.shift(byteArray0, 261, (int) (byte) (-1), (int) (byte)5);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-1), (byte)5, (byte)5, (byte)5, (byte)5, (byte)5}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)5;
      intArray0[1] = (-3165);
      intArray0[2] = (int) (byte)5;
      intArray0[3] = (int) (byte)5;
      intArray0[4] = (int) (byte)5;
      intArray0[5] = (int) (byte) (-1);
      intArray0[6] = (int) (byte)5;
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {5, (-3165), 5, 5, 5, (-1), 5}, intArray1);
      assertArrayEquals(new int[] {5, (-3165), 5, 5, 5, (-1), 5}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'T';
      intArray0[1] = (int) 'T';
      intArray0[2] = (int) 'T';
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {84, 84, 84}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double double0 = new Double((-1933.8179457347));
      assertNotNull(double0);
      assertEquals((-1933.8179457347), (double)double0, 0.01);
      
      Double double1 = new Double((-226.15));
      assertNotNull(double1);
      assertEquals((-226.15), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      int int0 = new Character('T');
      assertEquals('T', int0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-703), 0);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift((int[]) null, (-703), (-3336), (-3336));
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-703), 0);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1721.0185076622);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1721.0185076622}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int int0 = (-3059);
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-406.95F);
      floatArray0[1] = (-406.95F);
      floatArray0[2] = (-406.95F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3059), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3059, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-2251.32495291));
      assertNotNull(double3);
      assertEquals((-2251.32495291), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double((-2251.32495291));
      assertNotNull(double4);
      assertEquals((-2251.32495291), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      Double double5 = new Double((double) doubleArray0[0]);
      assertNotNull(double5);
      assertEquals(1.0, (double)double5, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[1] = double5;
      doubleArray0[2] = double4;
      doubleArray0[3] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, (-2251.32495291), 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      ArrayUtils.reverse((Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0L);
      int int0 = mockRandom0.nextInt((-1));
      assertEquals(0, int0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (double) doubleArray0[1]);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, (-2251.32495291), 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'u', 4);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'u';
      floatArray0[1] = 66.0F;
      floatArray0[2] = (float) 63;
      floatArray0[3] = (float) 4;
      ArrayUtils.reverse(floatArray0, 0, 4);
      assertArrayEquals(new float[] {4.0F, 63.0F, 66.0F, 117.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 63;
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {63.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {63.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift((char[]) null, (-3171), 122, 25);
      float[] floatArray3 = ArrayUtils.addFirst(floatArray1, (-771.5468F));
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {(-771.5468F), 63.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {63.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray3.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-83L));
      assertNotNull(long0);
      assertEquals((-83L), (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-83L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 3247);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Boolean boolean0 = new Boolean(", Length: ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("jS\"b");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[4];
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) booleanArray0);
      assertFalse(boolean2);
      assertEquals(4, booleanArray0.length);
      
      Long long0 = new Long(3247);
      assertNotNull(long0);
      assertEquals(3247L, (long)long0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(35, object0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = 'q';
      charArray0[4] = 'i';
      charArray0[5] = '0';
      charArray0[6] = 'N';
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Short short0 = new Short((short) (-1636));
      assertNotNull(short0);
      assertEquals((short) (-1636), (short)short0);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1636), (short)2, (short) (-1636), (short) (-1636), (short) (-1636)}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, (-4589));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-3154L));
      assertNotNull(long0);
      assertEquals((-3154L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short) (-1636));
      assertNotNull(long1);
      assertEquals((-1636L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(2470L);
      assertNotNull(long2);
      assertEquals(2470L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long(2470L);
      assertNotNull(long3);
      assertEquals(2470L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3154L), (-1636L), 2470L, 2470L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      char[] charArray0 = new char[4];
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Float float0 = new Float((double) 3);
      assertNotNull(float0);
      assertEquals(3.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 4313);
      assertNotNull(float1);
      assertEquals(4313.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'c';
      doubleArray0[1] = (double) 6256;
      doubleArray0[2] = (double) (short) (-5025);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 864.79542, 3, (double) (short) (-5025));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {99.0, 6256.0, (-5025.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-3505);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-3505);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-3505.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'L';
      charArray0[2] = '?';
      charArray0[3] = 'j';
      charArray0[5] = 'L';
      boolean boolean0 = ArrayUtils.contains(charArray0, '?');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'u', 'L', '?', 'j', '\u0000', 'L'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.toPrimitive((Object) '?');
      assertNotNull(object0);
      assertEquals('?', object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) '?';
      objectArray0[2] = (Object) 'L';
      ArrayUtils.shift(objectArray0, 82, (-3505), 1846);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.shift(intArray0, (-648));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 52.8F;
      floatArray2[1] = 52.8F;
      floatArray2[2] = 52.8F;
      floatArray2[3] = 52.8F;
      floatArray2[4] = 52.8F;
      floatArray2[5] = 52.8F;
      floatArray2[6] = 52.8F;
      floatArray2[7] = 0.0F;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 0.0F, 52.8F}, floatArray2, 0.01F);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1432);
      intArray0[1] = (-1432);
      intArray0[2] = (-1432);
      intArray0[3] = 3;
      intArray0[4] = (-1448);
      intArray0[5] = (-1432);
      ArrayUtils.shift(intArray0, 3538);
      assertArrayEquals(new int[] {(-1432), 3, (-1448), (-1432), (-1432), (-1432)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      Object[] objectArray0 = new Object[0];
      Integer integer0 = ArrayUtils.get((Integer[]) null, (-2146503060));
      assertNull(integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, 2, (Object) null);
      assertNull(object0);
      assertEquals(0, objectArray0.length);
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) null;
      objectArray1[2] = null;
      Object object1 = ArrayUtils.get(objectArray1, 2);
      assertNull(object1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object2 = ArrayUtils.get(objectArray1, 2085, object0);
      assertNull(object2);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-2896.9839769333), (double) 2);
      assertNotNull(doubleStream0);
      
      int int0 = mockRandom0.nextInt(13);
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer((-1793));
      assertNotNull(integer2);
      assertEquals((-1793), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer((-525));
      assertNotNull(integer0);
      assertEquals((-525), (int)integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1674), (Object) integer0);
      assertNotNull(object0);
      assertEquals((-525), object0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '[', (-1674));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'z');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      ArrayUtils.shift((Object[]) doubleArray0, 10);
      assertEquals(10, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'H');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1596), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1596), mutableInt0.intValue());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(1780);
      assertNotNull(integer4);
      assertEquals(1780, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      
      Integer integer6 = new Integer(4301);
      assertNotNull(integer6);
      assertEquals(4301, (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      
      Integer integer7 = new Integer(0);
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer1));
      
      Integer integer8 = new Integer(0);
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      
      mutableInt0.setValue((Number) integer8);
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      Integer integer9 = new Integer(0);
      assertNotNull(integer9);
      assertEquals(0, (int)integer9);
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer7));
      assertTrue(integer9.equals((Object)integer5));
      assertTrue(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)integer1));
      
      integerArray0[1] = integer9;
      integerArray0[2] = integer8;
      ArrayUtils.shift((Object[]) integerArray0, (-1596));
      assertEquals(7, integerArray0.length);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('P');
      assertNotNull(character0);
      assertEquals('P', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('\'');
      assertNotNull(character1);
      assertEquals('\'', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('C');
      assertNotNull(character2);
      assertEquals('C', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\\');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'P', '\'', 'C'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-1004), 8, 10);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 49, (-3805), 49);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char char0 = '!';
      Character character0 = Character.valueOf('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      Character character1 = new Character('/');
      assertNotNull(character1);
      assertEquals('/', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      Character character2 = new Character('!');
      assertNotNull(character2);
      assertEquals('!', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      
      characterArray0[1] = character2;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'!', '!', '!', '!', '!'}, charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '!';
      intArray0[1] = (int) char0;
      intArray0[2] = (int) '!';
      intArray0[3] = (int) char0;
      intArray0[4] = 881;
      ArrayUtils.swap(intArray0, 33, 0, 881);
      assertArrayEquals(new int[] {33, 33, 33, 33, 881}, intArray0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 881, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      long[] longArray0 = new long[4];
      longArray0[0] = (-1114L);
      longArray0[1] = (-1114L);
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '*';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = 'g';
      charArray0[6] = '0';
      charArray0[7] = '0';
      charArray0[8] = '\"';
      int int0 = ArrayUtils.indexOf(charArray0, 'D', 101);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\"', '\"', '*', '.', '.', 'g', '0', '0', '\"'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 36.83;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-93.4051829178);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      boolean[] booleanArray0 = new boolean[0];
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Short[] shortArray0 = new Short[5];
      short short0 = (short)111;
      Short short1 = new Short((short)111);
      assertNotNull(short1);
      assertEquals((short)111, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)111, (short)111, (short)111, (short)111, (short)111}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1163));
      assertNotNull(short0);
      assertEquals((short) (-1163), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-4678));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1163)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = 's';
      charArray0[6] = '3';
      charArray0[7] = '2';
      charArray0[8] = '$';
      ArrayUtils.swap(charArray0, (-367), (-367), (-367));
      assertArrayEquals(new char[] {'8', '5', '\u0000', ')', ':', 's', '3', '2', '$'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 114;
      Integer integer0 = new Integer(114);
      assertNotNull(integer0);
      assertEquals(114, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[1] = integer0;
      ArrayUtils.reverse((float[]) null, int0, 37);
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3186;
      shortArray0[1] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)3186, (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-15.8324);
      doubleArray0[1] = (-271.6224685020016);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1881.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-15.8324), (-271.6224685020016)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-15.8324), (-271.6224685020016), 1881.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1684.3608F;
      floatArray0[1] = 45.0F;
      floatArray0[2] = 80.0F;
      floatArray0[3] = 1075.09F;
      floatArray0[4] = 11.501F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 3905.0361F;
      floatArray0[7] = (-2962.0105F);
      floatArray0[8] = Float.NaN;
      ArrayUtils.reverse(floatArray0, 419, 754);
      assertArrayEquals(new float[] {1684.3608F, 45.0F, 80.0F, 1075.09F, 11.501F, 1.0F, 3905.0361F, (-2962.0105F), Float.NaN}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-436.35824831);
      doubleArray0[1] = 1185.885006182152;
      doubleArray0[2] = 3542.14;
      doubleArray0[3] = 3032.0550745291716;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1040.597436;
      ArrayUtils.reverse(doubleArray0, 121, 2065);
      assertArrayEquals(new double[] {(-436.35824831), 1185.885006182152, 3542.14, 3032.0550745291716, 0.0, 1040.597436}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3032.0550745291716;
      doubleArray0[1] = 3032.0550745291716;
      ArrayUtils.reverse(doubleArray0, (-3887), 9);
      assertArrayEquals(new double[] {3032.0550745291716, 3032.0550745291716}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2048), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2048, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((long[]) null, 2304L);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-81), (byte) (-81), (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeAll(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = 0;
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, 0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0, (-5234.1221));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = 1L;
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {66L, 0L, 0L, 0L, 0L, 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 66L, 0L, 0L, 0L, 0L, 0L, 1L, 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      int[] intArray0 = new int[0];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) 0L;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = int0;
      intArray1[1] = 0;
      intArray1[2] = int0;
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray1, intArray1);
      assertNotNull(doubleArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, intArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 4643, 0, 4643);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 0);
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 4643;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) 4643.0;
      objectArray0[2] = (Object) 4643.0;
      Integer integer0 = new Integer(85);
      assertNotNull(integer0);
      assertEquals(85, (int)integer0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) integer0);
      assertFalse(boolean1);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray1, 2681, (-32), (-3064));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1706.78352));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-3064), (short) (-2788));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3064, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (-2190L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-1092));
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, 0L, (-2190L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, (-2190L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0L;
      floatArray0[3] = (float) 0;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      intArray0[1] = 878;
      ArrayUtils.swap(intArray0, 1, 878, (-1596));
      assertArrayEquals(new int[] {(-1596), 878}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'G';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) 878;
      doubleArray0[4] = (double) '0';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 883.0);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {48.0, 48.0, 71.0, 878.0, 48.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = ";Ip1%DS^ifVM";
      stringArray0[7] = ";Ip1%DS^ifVM";
      stringArray0[8] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1763.59403138555;
      doubleArray0[1] = (-1836.0985545);
      doubleArray0[2] = 3449.50883;
      doubleArray0[3] = (-304.6007462);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, Integer.MAX_VALUE, 3449.50883);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {1763.59403138555, (-1836.0985545), 3449.50883, (-304.6007462)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      Integer integer0 = new Integer((-3265));
      assertNotNull(integer0);
      assertEquals((-3265), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, " in an array of ");
      assertNotNull(string0);
      assertEquals("-3265", string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3265);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-925);
      longArray0[1] = (long) (-925);
      longArray0[2] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-925L), (-925L), (-925L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 117);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'T';
      charArray0[0] = '|';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'|', 'T'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '8';
      charArray0[2] = 'F';
      charArray0[3] = 'N';
      charArray0[4] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'0', '8', 'F', 'N', 'i', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      ArrayUtils.shift((byte[]) null, (-1529));
      Integer integer0 = new Integer((-1529));
      assertNotNull(integer0);
      assertEquals((-1529), (int)integer0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'F';
      intArray0[2] = (int) 'N';
      intArray0[3] = (int) 'F';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      long[] longArray0 = new long[4];
      longArray0[0] = (-1114L);
      longArray0[1] = (-1114L);
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)53;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-109), (byte)0, (byte) (-109), (byte) (-1), (byte)53}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{4}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      Integer integer0 = new Integer((byte)52);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray0[2] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, 0);
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      assertEquals(3, integerArray0.length);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)30;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {30.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {30.0, 30.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift((long[]) null, 4643, (-1332), (-12));
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 4643);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      long[] longArray1 = ArrayUtils.insert((-12), (long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("-p|iM`zJ!pKng= ");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1420;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2458));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1420}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'R';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'V');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'`', '7', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'`', '7', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, 86.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 1073741824);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      Integer integer0 = new Integer(90);
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 90;
      doubleArray0[1] = (double) 90;
      doubleArray0[2] = (double) 90;
      Float float0 = new Float(512.036);
      assertNotNull(float0);
      assertEquals(512.036F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(1.0);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(3821.4802052);
      assertNotNull(float3);
      assertEquals(3821.4802F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float2;
      floatArray0[3] = float0;
      floatArray0[4] = float2;
      floatArray0[5] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {512.036F, 0.0F, 1.0F, 512.036F, 1.0F, 3821.4802F}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short)2098;
      ArrayUtils.shift(shortArray0, (int) (short)2098);
      assertArrayEquals(new short[] {(short)2098, (short)2098}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.shift((char[]) null, 65);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2194L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2194L, (-5065));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2194L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 121;
      doubleArray0[1] = 1040.597436;
      doubleArray0[1] = 0.0;
      ArrayUtils.reverse((byte[]) null, (-4967), (-5052));
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-5052);
      longArray0[1] = (long) 121;
      longArray0[2] = (long) (-5052);
      longArray0[3] = (long) (-5052);
      longArray0[4] = (long) (-5052);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-5052L), (-5052L), (-5052L), 121L, (-5052L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 68.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1114.5367516773;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 73.0;
      doubleArray0[6] = (-345.99091713405);
      doubleArray0[7] = (-1596.0);
      doubleArray0[8] = 2456.1949;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {68.0, (-1.0), 1114.5367516773, 0.0, 73.0, (-345.99091713405), (-1596.0), 2456.1949, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)0;
      ArrayUtils.reverse(byteArray0, (-2123080424), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)78, (byte)24, (byte) (-32), (byte)68, (byte) (-5), (byte)0, (byte)112, (byte) (-128), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)1936;
      ArrayUtils.swap((int[]) null, (-511), 8, 3110);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)127);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)127}, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)127}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 1512, 111);
      Integer[] integerArray0 = new Integer[5];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4094);
      ArrayUtils.swap(intArray0, 5, (-4094));
      assertArrayEquals(new int[] {(-4094)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-4094);
      integerArray0[1] = (Integer) (-4094);
      Integer integer0 = new Integer((-4094));
      assertNotNull(integer0);
      assertEquals((-4094), (int)integer0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) (-4094);
      integerArray0[4] = (Integer) (-4094);
      integerArray0[5] = (Integer) (-4094);
      integerArray0[6] = (Integer) (-4094);
      integerArray0[7] = (Integer) (-4094);
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)52;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)52, (byte)30}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'J';
      charArray0[2] = '(';
      charArray0[3] = 'K';
      charArray0[4] = ';';
      charArray0[5] = 'E';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'b', 'J', '(', 'K', ';', 'E'}, charArray1);
      assertArrayEquals(new char[] {'b', 'J', '(', 'K', ';', 'E'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'J';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {74L}, longArray0);
      assertArrayEquals(new long[] {74L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double double0 = new Double(35.0012655);
      assertNotNull(double0);
      assertEquals(35.0012655, (double)double0, 0.01);
      
      Double double1 = new Double(0.0F);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((byte)2);
      assertNotNull(double2);
      assertEquals(2.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.contains((byte[]) null, (byte)2);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      Integer integer1 = new Integer(35);
      assertNotNull(integer1);
      assertEquals(35, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(35, object0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-21);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-57), (byte)111, (byte)13, (byte)32, (byte)2}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((byte) (-21));
      assertNotNull(double0);
      assertEquals((-21.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)32);
      assertNotNull(double1);
      assertEquals(32.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte) (-21));
      assertNotNull(double2);
      assertEquals((-21.0), (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-5453);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)938);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-5453)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-5453)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.indexOf((double[]) null, 955.2462027);
      assertEquals((-1), int0);
      
      String string0 = "<null>";
      try { 
        Integer.valueOf("<null>", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "#`,$:yA";
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = Integer.valueOf((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MutableInt mutableInt0 = new MutableInt((-1596));
      assertNotNull(mutableInt0);
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), mutableInt0.intValue());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-1596), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals("-1596", mutableInt0.toString());
      assertEquals((-1596.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-60), mutableInt0.byteValue());
      assertEquals((-1596.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1596L), mutableInt0.longValue());
      assertEquals((-1596), (int)mutableInt0.toInteger());
      assertEquals((-1596), (int)mutableInt0.getValue());
      assertEquals((short) (-1596), mutableInt0.shortValue());
      assertEquals((-1596), mutableInt0.intValue());
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(1780);
      assertNotNull(integer4);
      assertEquals(1780, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      
      Integer integer6 = new Integer(4301);
      assertNotNull(integer6);
      assertEquals(4301, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      
      Integer integer7 = new Integer(0);
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      
      Integer integer8 = new Integer(0);
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer3));
      
      mutableInt0.setValue((Number) integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer3));
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer3;
      Integer integer9 = new Integer(0);
      assertNotNull(integer9);
      assertEquals(0, (int)integer9);
      assertTrue(integer9.equals((Object)integer5));
      assertTrue(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer8));
      assertTrue(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer4));
      assertTrue(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer6));
      
      integerArray0[1] = integer9;
      integerArray0[2] = integer8;
      integerArray0[3] = integer1;
      integerArray0[4] = integer6;
      integerArray0[5] = integer5;
      integerArray0[6] = integer2;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(6, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)integerArray0[4];
      doubleArray0[1] = (double) (-1596);
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, Double.NaN);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {4301.0, (-1596.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Parameter of type %s must reference an Enum type";
      stringArray0[1] = "";
      stringArray0[2] = ";Ip1%DS^ifVM";
      stringArray0[3] = "test-template-invocation";
      stringArray0[4] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 40);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-4113));
      assertNotNull(integer0);
      assertEquals((-4113), (int)integer0);
      
      Integer integer1 = new Integer((byte)30);
      assertNotNull(integer1);
      assertEquals(30, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-2863));
      assertNotNull(integer2);
      assertEquals((-2863), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) 52);
      assertNull(integer3);
      assertEquals(6, integerArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'C');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C', 'C', 'C'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (float) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 104.4714F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 45.0F);
      assertNull(floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 927, 1244.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 927, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = null;
      ArrayUtils.reverse((byte[]) null);
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)14);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-434));
      assertNotNull(short1);
      assertEquals((short) (-434), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertEquals((short)14, (short)short2);
      assertEquals(3, shortArray0.length);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)14, (short) (-434), (short)14}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)14, (short) (-434), (short)14}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-33), (byte) (-66));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -33, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1596);
      intArray0[1] = 878;
      ArrayUtils.swap(intArray0, 1, 878, (-1596));
      assertArrayEquals(new int[] {(-1596), 878}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'G';
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) (-1596);
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) (-1596);
      doubleArray0[4] = (double) 'G';
      doubleArray0[5] = (double) (-1596);
      doubleArray0[6] = (double) 'G';
      doubleArray0[7] = (double) 'V';
      doubleArray0[8] = (double) 1L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {48.0, (-1596.0), 71.0, (-1596.0), 71.0, (-1596.0), 71.0, 86.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-977L), 2349);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((long[]) null, 2304L);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte) (-81), (byte) (-81), (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 2128L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(longArray0, (-1), (-1), (-319));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      ArrayUtils.swap(longArray0, (-398), 254);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (-1600), 1202, (-1600));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      Integer integer1 = new Integer((byte) (-92));
      assertNotNull(integer1);
      assertEquals((-92), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(1038);
      assertNotNull(integer2);
      assertEquals(1038, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer1, (Object) integer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, (-2132));
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2132);
      floatArray0[1] = (float) (-1591);
      floatArray0[2] = (-629.83435F);
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert((-1591), (float[]) null, floatArray0);
      assertNull(floatArray1);
      assertArrayEquals(new float[] {(-2132.0F), (-1591.0F), (-629.83435F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      ArrayUtils.reverse(longArray0, 1538, 0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1538;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-3802));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1538, (-1), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-3802), 1538, (-1), 0, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = ArrayUtils.insert(13, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1887.0, 706.0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2125344640);
      doubleArray0[1] = 521.54666288;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2125344640), (-3151), 1003.8);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2.12534464E9), 521.54666288}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray0 = new Integer[1];
      try { 
        Integer.valueOf("Ig-9jM/i]p|?+K60(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ig-9jM/i]p|?+K60(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-616.2992823255), (-616.2992823255));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[19];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(19, booleanArray0.length);
      assertEquals(19, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[9];
      booleanArray2[0] = (boolean) boolean1;
      booleanArray2[1] = (boolean) boolean0;
      booleanArray2[2] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = false;
      booleanArray2[5] = (boolean) boolean1;
      booleanArray2[6] = (boolean) boolean1;
      booleanArray2[7] = (boolean) boolean0;
      booleanArray2[8] = true;
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      charArray0[8] = 'I';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'C');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'$', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'I'}, charArray0);
      assertArrayEquals(new char[] {'$', 'I'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) 'C';
      doubleArray0[2] = (double) 'C';
      doubleArray0[3] = (double) 'C';
      doubleArray0[4] = (double) 'C';
      doubleArray0[5] = (double) 'C';
      doubleArray0[6] = (double) 'C';
      doubleArray0[7] = 100.0;
      doubleArray0[8] = (double) 'I';
      int int0 = ArrayUtils.indexOf(doubleArray0, 67.0, 1.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {73.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 100.0, 73.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      int[] intArray0 = new int[11];
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE}, intArray0);
      assertEquals(2, intArray0.length);
      
      Object[] objectArray0 = new Object[5];
      Integer integer0 = new Integer(2876);
      assertNotNull(integer0);
      assertEquals(2876, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("-p|iM`zJ!pKng= ");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1420;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2458));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1420}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'R';
      charArray0[3] = '^';
      charArray0[4] = '~';
      charArray0[5] = 'C';
      charArray0[6] = 'e';
      charArray0[7] = '/';
      charArray0[8] = '#';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 32, 1420);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'`', '7', 'R', '^', '~', 'C', 'e', '/', '#'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) '#';
      longArray0[2] = (long) '7';
      ArrayUtils.reverse(longArray0, 32, 32);
      assertArrayEquals(new long[] {0L, 35L, 55L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-13), 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      integerArray0[5] = (Integer) (-1);
      integerArray0[6] = (Integer) (-1);
      integerArray0[7] = (Integer) (-1);
      Integer integer0 = new Integer((-2152));
      assertNotNull(integer0);
      assertEquals((-2152), (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int[] intArray0 = new int[1];
      intArray0[0] = 2306;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 1420);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2306}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      ArrayUtils.shift((Object[]) characterArray0, (-1964));
      assertEquals(9, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 4643, 0, 4643);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 0);
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0.0F;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 0.0;
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) bitSet0;
      objectArray0[8] = (Object) bitSet0;
      bitSet0.clear();
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift(objectArray0, (-4351));
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-2200), (-2200));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.shift((Object[]) null, 217);
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.swap((long[]) null, (-1), 65);
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2661), 15);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) false;
      objectArray0[8] = (Object) false;
      ArrayUtils.shift(objectArray0, 2849);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, 0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0, (-5234.1221));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = 1L;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {66L, 0L, 0L, 0L, 0L, 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 66L, 0L, 0L, 0L, 0L, 0L, 1L, 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap((float[]) null, 0, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (byte) (-81));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-81.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)60, (-3872));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_FLOAT_ARRAY, 1511, (-2674));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      Integer integer0 = new Integer((-3265));
      assertNotNull(integer0);
      assertEquals((-3265), (int)integer0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2142), 3);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), 100);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 36.83;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-93.4051829178);
      doubleArray0[4] = (-1.0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) (byte)0;
      floatArray0[7] = (-317.73F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-444), (int) (byte)0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F, (-317.73F)}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '>';
      charArray0[2] = '.';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)12, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&', '>', '.'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-640L);
      longArray0[1] = (long) '>';
      longArray0[2] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 62L, (-640L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(14, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-640L);
      doubleArray0[1] = (double) '.';
      doubleArray0[2] = (double) (byte)12;
      doubleArray0[3] = (double) '.';
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) '>';
      doubleArray0[6] = (double) (byte)12;
      ArrayUtils.shift(doubleArray0, (int) (byte)12);
      assertArrayEquals(new double[] {12.0, 46.0, 0.0, 62.0, 12.0, (-640.0), 46.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (int) (byte)12);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 62L, (-640L)}, longArray0);
      assertArrayEquals(new long[] {0L, 62L, (-640L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(2377.73654876);
      assertNotNull(double1);
      assertEquals(2377.73654876, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2377.73654876;
      doubleArray0[1] = (-3206.0);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 2377.73654876;
      doubleArray0[4] = 1.5;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {(-3206.0), (-1.0), 2377.73654876, 1.5, 2377.73654876}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, 1, 120, (-1));
      assertArrayEquals(new double[] {(-3206.0), 2377.73654876, 1.5, 2377.73654876, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      Double double0 = new Double(19.5);
      assertNotNull(double0);
      assertEquals(19.5, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 19.5;
      doubleArray0[1] = (-3206.0);
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {(-3206.0), 19.5}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-1610), 96, 83);
      assertArrayEquals(new double[] {19.5, (-3206.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 878;
      intArray0[2] = (int) 'B';
      intArray0[3] = 1;
      intArray0[4] = 878;
      intArray0[5] = (int) 'B';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24339;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)24339, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)24339, (short)24339, (short)2, (short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = ArrayUtils.insert((-4452), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 878;
      doubleArray0[1] = (double) (short)24339;
      doubleArray0[2] = (double) 878;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = 2114.906357366198;
      doubleArray0[5] = (-1755.26);
      int int0 = 5;
      ArrayUtils.shift(doubleArray0, (-84), 2, 5);
      assertArrayEquals(new double[] {24339.0, 878.0, 878.0, 2.0, 2114.906357366198, (-1755.26)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(89, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2404.3624501;
      doubleArray0[1] = (double) (-1610);
      doubleArray0[2] = (double) (-1610);
      doubleArray0[3] = (double) (-1610);
      doubleArray0[4] = (double) (-1610);
      doubleArray0[5] = (double) 96;
      doubleArray0[6] = (double) (-1610);
      doubleArray0[7] = (double) (-1610);
      doubleArray0[8] = (double) (-1610);
      ArrayUtils.shift(doubleArray0, (-1610), 96, (-1610));
      assertArrayEquals(new double[] {(-1610.0), 2404.3624501, (-1610.0), (-1610.0), (-1610.0), (-1610.0), 96.0, (-1610.0), (-1610.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2125344640);
      doubleArray0[1] = 521.54666288;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2125344640), (-3151), 1003.8);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2.12534464E9), 521.54666288}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = ArrayUtils.get(integerArray0, Integer.MAX_VALUE);
      assertNull(integer0);
      assertEquals(1, integerArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new double[] {(-2.12534464E9), 521.54666288}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      ArrayUtils.shift(doubleArray0, (-3151));
      assertArrayEquals(new double[] {521.54666288, (-2.12534464E9)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object1);
      assertEquals(16, object1);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, 0, 70, 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 51;
      floatArray0[1] = (float) (-2186);
      floatArray0[2] = (float) (-2186);
      floatArray0[3] = (float) 53;
      floatArray0[4] = 1467.0386F;
      floatArray0[5] = 1467.0386F;
      floatArray0[6] = (-1936.7029F);
      ArrayUtils.swap(floatArray0, 14, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {51.0F, (-2186.0F), (-2186.0F), 53.0F, 1467.0386F, 1467.0386F, (-1936.7029F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2186.0F);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 51.0F;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) 51.0F;
      ArrayUtils.swap(doubleArray0, (-1596), 1);
      assertArrayEquals(new double[] {14.0, 51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.reverse(floatArray0, 14, 1080);
      assertArrayEquals(new float[] {51.0F, (-2186.0F), (-2186.0F), 53.0F, 1467.0386F, 1467.0386F, (-1936.7029F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1172), 96, (-1172));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-257), (-257), 96);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-3206.0);
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {(-3206.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(",3Zt!GU*uy!~qEJ~JjL");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertTrue(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'b';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'Y', 'b', 'Y', 'b'}, charArray1);
      assertArrayEquals(new char[] {'Y', 'b'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-398);
      shortArray0[1] = (short)89;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-398), (short)89}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'b';
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (double) (short)89;
      doubleArray0[4] = (double) (short)89;
      doubleArray0[5] = (double) 'Y';
      doubleArray0[6] = (double) 'Y';
      doubleArray0[7] = (double) 'b';
      ArrayUtils.shift(doubleArray0, (int) (short) (-398), 254, (-1));
      assertArrayEquals(new double[] {98.0, 98.0, 89.0, 89.0, 89.0, 89.0, 98.0, 89.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, 0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0, (-5234.1221));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = 1L;
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {66L, 0L, 0L, 0L, 0L, 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 66L, 0L, 0L, 0L, 0L, 0L, 1L, 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray2 = ArrayUtils.insert(0, charArray1, charArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      ArrayUtils.reverse(charArray1, 0, (-904));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, 2404, 2404, (-3217));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 693);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 52.8F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 113, 113);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = new Integer((-1596));
      assertNotNull(integer0);
      assertEquals((-1596), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1596);
      doubleArray0[1] = (double) 6256;
      doubleArray0[2] = (double) 6256;
      doubleArray0[3] = (double) (short) (-5025);
      doubleArray0[4] = (double) 113;
      doubleArray0[5] = (double) 52.8F;
      doubleArray0[6] = (double) (short) (-5025);
      doubleArray0[7] = (double) 'c';
      doubleArray0[8] = (double) 52.8F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3094.1397742265676, (int) (short)4, 0.1);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1596.0), 6256.0, 6256.0, (-5025.0), 113.0, 52.79999923706055, (-5025.0), 99.0, 52.79999923706055}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'm';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 109.0, (-1707.2407786077786));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {109.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-175.05505706);
      doubleArray0[1] = 748.93;
      doubleArray0[2] = (-3802.0);
      doubleArray0[3] = (-3873.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3802.0), (-2146472590), (double) (-2146472590));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-175.05505706), 748.93, (-3802.0), (-3873.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      Integer integer0 = new Integer((-3265));
      assertNotNull(integer0);
      assertEquals((-3265), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, " in an array of ");
      assertNotNull(string0);
      assertEquals("-3265", string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3265);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-925);
      longArray0[1] = (long) (-925);
      longArray0[2] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-925L), (-925L), (-925L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_SHORT_ARRAY, (short)34);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)178);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[3] = (-3078L);
      longArray0[2] = (-712L);
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer((-1272));
      assertNotNull(integer0);
      assertEquals((-1272), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-215);
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean2);
      assertArrayEquals(new short[] {(short) (-215)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1761);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-215)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-215)}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray1 = ArrayUtils.add(longArray0, 0, (-3078L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-712L), (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-3078L), 0L, 0L, (-712L), (-3078L), 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 113;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-1272));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1272, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'T';
      floatArray0[2] = (float) 'T';
      floatArray0[3] = (-5162.8F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 76.0F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, (-5162.8F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'T';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {84L}, longArray0);
      assertArrayEquals(new long[] {84L, 84L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 2915, 1982292598, 0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {84L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1684.3608F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, (-5162.8F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray1, 0L);
      assertNotNull(bitSet1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {84L}, longArray0);
      assertArrayEquals(new long[] {84L, 84L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short) (-696);
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-696), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-696), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-696), (short)0}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, 1982292598, (-125L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1982292598, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 's';
      charArray0[3] = 'g';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 's';
      charArray1[1] = 's';
      charArray1[2] = 'g';
      charArray1[3] = 'g';
      charArray1[4] = 'g';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'g', 'g', 's', 'g'}, charArray0);
      assertArrayEquals(new char[] {'s', 's', 'g', 'g', 'g'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-3059));
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-2147301457), 1034, (-2147301457));
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'s', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'g';
      longArray0[1] = (long) 's';
      float[] floatArray0 = new float[0];
      ArrayUtils.shift((int[]) null, (-1432));
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[6];
      charArray0[1] = '-';
      charArray0[2] = 'A';
      charArray0[3] = 'G';
      charArray0[4] = 'L';
      charArray0[5] = 'P';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-', 'A', 'G', 'L', 'P'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'L';
      intArray0[1] = (int) 'A';
      intArray0[2] = (int) '-';
      intArray0[3] = (int) 'A';
      intArray0[4] = (int) 'A';
      intArray0[5] = (int) 'A';
      intArray0[6] = (int) 'A';
      intArray0[7] = (int) '-';
      intArray0[8] = (int) '-';
      ArrayUtils.shift(intArray0, 45);
      assertArrayEquals(new int[] {76, 65, 45, 65, 65, 65, 65, 45, 45}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-38);
      ArrayUtils.shift(byteArray0, (int) (byte)67);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)67, (byte)7}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1032;
      ArrayUtils.swap(shortArray0, (int) (short)1032, (int) (byte)67, (-876));
      assertArrayEquals(new short[] {(short)1032}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) 0, 0);
      assertEquals((-1), int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1323L;
      longArray0[1] = (-1801L);
      longArray0[2] = (-766L);
      longArray0[3] = 1518L;
      longArray0[4] = 4003L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1323L, (-1801L), (-766L), 1518L, 4003L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1264);
      ArrayUtils.swap(shortArray0, (-1792), (int) (short) (-1), (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-1264)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((float) (short) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (short) (-1264));
      assertNotNull(float1);
      assertEquals((-1264.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 4003L);
      assertNotNull(float2);
      assertEquals(4003.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) (short) (-1));
      assertNotNull(float3);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-1548.21007481066));
      assertNotNull(float4);
      assertEquals((-1548.2101F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(84.0F);
      assertNotNull(float5);
      assertEquals(84.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) (short)0);
      assertNotNull(float6);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((-5162.8F));
      assertNotNull(float7);
      assertEquals((-5162.8F), (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float(3028.2);
      assertNotNull(float8);
      assertEquals(3028.2F, (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 76.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1264.0F), 4003.0F, (-1.0F), (-1548.2101F), 84.0F, 0.0F, (-5162.8F), 3028.2F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, 113, 113, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(20, booleanArray0.length);
      assertEquals(19, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((short) (-1495));
      assertNotNull(short0);
      assertEquals((short) (-1495), (short)short0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) short0;
      objectArray0[5] = (Object) short0;
      objectArray0[6] = (Object) short0;
      objectArray0[7] = (Object) short0;
      ArrayUtils.shift(objectArray0, 1, 1, 6);
      assertEquals(8, objectArray0.length);
      
      Integer integer0 = Integer.valueOf(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      try { 
        Integer.valueOf("java.lang.Integer", 41);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 41 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Short short0 = new Short((short)521);
      assertNotNull(short0);
      assertEquals((short)521, (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)1153);
      assertNull(shortArray0);
      
      ArrayUtils.shift((Object[]) null, (-1), (int) (short)1153, (-911));
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.8F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 52.8F;
      floatArray2[1] = 52.8F;
      floatArray2[2] = 52.8F;
      floatArray2[3] = 52.8F;
      floatArray2[4] = 52.8F;
      floatArray2[5] = 52.8F;
      floatArray2[6] = 52.8F;
      floatArray2[7] = 0.0F;
      ArrayUtils.shuffle(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 0.0F, 52.8F}, floatArray2, 0.01F);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      ArrayUtils.reverse(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {52.8F, 0.0F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F}, floatArray2, 0.01F);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'H';
      charArray0[3] = '9';
      charArray0[4] = 'L';
      charArray0[4] = 't';
      charArray0[6] = '?';
      charArray0[7] = '[';
      charArray0[8] = 'u';
      boolean boolean1 = ArrayUtils.contains(charArray0, '[');
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'j', 'j', 'H', '9', 't', '\u0000', '?', '[', 'u'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift((Object[]) null, (-145), (-145), (-145));
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 36.83;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-93.4051829178);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 36.83, 0.0, (-93.4051829178), (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 2, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      long[] longArray0 = new long[2];
      longArray0[0] = 3135L;
      longArray0[1] = (-1114L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3135L, (-1114L)}, longArray0);
      assertArrayEquals(new long[] {1L, 3135L, (-1114L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-23), (-2204));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)75, (byte) (-127), (byte)52, (byte) (-117), (byte) (-127), (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.swap(intArray0, 14, 1, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)91, (-1029));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      
      objectArray0[0] = null;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1029));
      int int0 = mockRandom0.nextInt((-1029));
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1221.824));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte)91, (-1));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1936.7029F);
      floatArray0[1] = 1467.0386F;
      floatArray0[2] = (-284.33353F);
      floatArray0[3] = (float) (-925);
      floatArray0[4] = (float) (-925);
      floatArray0[5] = (float) 's';
      floatArray0[6] = (float) 51;
      ArrayUtils.swap(floatArray0, (-2186), 53);
      assertArrayEquals(new float[] {(-1936.7029F), 1467.0386F, (-284.33353F), (-925.0F), (-925.0F), 115.0F, 51.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1936.7029F);
      floatArray0[1] = 1467.0386F;
      floatArray0[3] = (float) (-925);
      floatArray0[4] = (float) (-925);
      floatArray0[5] = (float) 's';
      floatArray0[6] = (float) 51;
      ArrayUtils.swap(floatArray0, (-2186), 53);
      assertArrayEquals(new float[] {(-1936.7029F), 1467.0386F, 0.0F, (-925.0F), (-925.0F), 115.0F, 51.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      Integer integer0 = new Integer((-3265));
      assertNotNull(integer0);
      assertEquals((-3265), (int)integer0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3265);
      floatArray0[1] = (float) (-3265);
      floatArray0[2] = (float) (-3265);
      floatArray0[3] = (-284.33353F);
      floatArray0[4] = (float) (-925);
      floatArray0[5] = (float) (-3265);
      floatArray0[6] = (float) (-3265);
      floatArray0[7] = (float) (-925);
      floatArray0[8] = (float) (-3265);
      ArrayUtils.swap(floatArray0, 51, 0);
      assertArrayEquals(new float[] {(-3265.0F), (-3265.0F), (-3265.0F), (-284.33353F), (-925.0F), (-3265.0F), (-3265.0F), (-925.0F), (-3265.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-925);
      intArray0[1] = (-925);
      intArray0[2] = (-3265);
      intArray0[3] = 1;
      intArray0[4] = (-3265);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-925), (-925), (-3265), 1, (-3265)}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      char[] charArray0 = new char[5];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2711.7327F;
      ArrayUtils.swap(floatArray0, 2796, 271, (-1754));
      assertArrayEquals(new float[] {0.0F, 2711.7327F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CLASS_ARRAY);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)53, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1370L);
      int int0 = 12;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 12, (-275L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, 1165, (long) 1165);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1165, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '~';
      ArrayUtils.shift(charArray0, (int) (byte) (-81));
      assertArrayEquals(new char[] {'~', '%'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = Character.toChars(120);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (int) 'T';
      intArray0[2] = (int) 'T';
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1, 84, 84}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-3340.275349));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = '@';
      ArrayUtils.shift(charArray0, (-1596), 1200, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'T', '@', 'T', 'T', 'T'}, charArray0);
      assertEquals(5, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-104), 84);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1, 84, 84}, intArray0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[16];
      floatArray0[1] = (float) (-74);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(16, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'G';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-74), charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -74, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 'm';
      charArray0[2] = 'h';
      charArray0[3] = '|';
      ArrayUtils.shift(charArray0, (-1));
      assertArrayEquals(new char[] {'m', 'h', '|', '^'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, int0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = (-1);
      intArray0[2] = (int) 'h';
      intArray0[3] = (int) '^';
      intArray0[4] = (int) '|';
      intArray0[5] = (int) 'h';
      intArray0[6] = (int) 'h';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 124, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, 278);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 'm';
      char char0 = 'h';
      charArray0[2] = 'h';
      char char1 = '|';
      charArray0[3] = '|';
      ArrayUtils.shift(charArray0, (-1));
      assertArrayEquals(new char[] {'m', 'h', '|', '^'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, int0);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(int0, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-1394L);
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, (-1394L), 0L}, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, (-1394L), 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-20);
      intArray0[1] = 878;
      intArray0[2] = 878;
      intArray0[3] = 1060;
      intArray0[4] = 1;
      ArrayUtils.swap(intArray0, 2124736129, 1060, (-20));
      assertArrayEquals(new int[] {(-20), 878, 878, 1060, 1}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 5, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1332.877));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1332.877), (-3400), (double) 5);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ArrayUtils.swap(byteArray0, 4, 40, 108);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 40, (int) (byte)12);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.shift(byteArray0, 2147483638);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Integer integer0 = new Integer((byte)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, object0);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (byte)1, (int) (byte)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ArrayUtils.swap(byteArray0, (int) (byte)63, 5, 1693);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 1693);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1693, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.1);
      assertNotNull(float0);
      assertEquals(0.1F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.1F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.1F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-81);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)21);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)0, (byte)21, (byte) (-39), (byte) (-81), (byte)12, (byte)0, (byte) (-81)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (byte) (-81));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 3938);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3938.0F, 3938.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      boolean boolean3 = true;
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean1);
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertTrue(boolean6);
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean1));
      
      booleanArray0[0] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertNotNull(boolean7);
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      
      booleanArray0[6] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean3);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, true}, booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 45.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_CHAR_ARRAY, '/');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[3] = (-3078L);
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, (-32), 4643, (-3064));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertEquals(16, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray3);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray1, longArray3);
      assertSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3078L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertEquals(16, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'G', (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'P');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)52;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((byte)30);
      assertNotNull(integer2);
      assertEquals(30, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer3 = ArrayUtils.get(integerArray0, (-2126));
      assertNull(integer3);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)30;
      doubleArray0[3] = (double) (byte)30;
      doubleArray0[4] = (double) (byte)52;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (byte)52;
      doubleArray1[2] = (double) (byte)52;
      doubleArray1[3] = (double) 0;
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 52.0, 52.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {52.0, 0.0, 30.0, 30.0, 52.0, 0.0, 52.0, 52.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {52.0, 0.0, 30.0, 30.0, 52.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'C');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = 1323L;
      longArray0[0] = 1323L;
      longArray0[1] = (-1771L);
      long long1 = 1518L;
      longArray0[3] = 1518L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1323L, (-1771L), 0L, 1518L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short short0 = (short)0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-580), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -580, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      short[] shortArray0 = new short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(6, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '~';
      charArray0[3] = '?';
      charArray0[4] = '@';
      charArray0[5] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'e');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'>', '>', '~', '?', '@', ':'}, charArray0);
      assertArrayEquals(new char[] {'e', '>', '>', '~', '?', '@', ':'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2838);
      shortArray0[1] = (short)53;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(158, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 158, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-2170));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-2170)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'Z';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = 'Z';
      char[] charArray2 = ArrayUtils.insert(1, charArray0, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'l', 'Z'}, charArray0);
      assertArrayEquals(new char[] {'l', 'Z'}, charArray1);
      assertArrayEquals(new char[] {'l', 'l', 'Z', 'Z'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(10, classArray0.length);
      assertEquals(10, classArray1.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      short[] shortArray1 = ArrayUtils.insert((int) (short)8, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)12, (short)12, (short)12, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = ArrayUtils.insert((int) (byte)12, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 254;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, (int) (short)8);
      assertArrayEquals(new double[] {254.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'B';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'T', 'Q', 'B'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'T';
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-798), (byte)118);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -798, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = null;
      ArrayUtils.reverse((byte[]) null);
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-434));
      assertNotNull(short1);
      assertEquals((short) (-434), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      assertEquals(3, shortArray0.length);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-434), (short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("-1", string0);
      assertTrue(integer0.equals((Object)int0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-434), (short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 13, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1792), (-1792));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertFalse(boolean2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Integer integer0 = new Integer((-1792));
      assertNotNull(integer0);
      assertEquals((-1792), (int)integer0);
      
      Integer integer1 = new Integer((-1965));
      assertNotNull(integer1);
      assertEquals((-1965), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-456));
      assertNotNull(integer2);
      assertEquals((-456), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(872);
      assertNotNull(integer3);
      assertEquals(872, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer((-2144));
      assertNotNull(integer4);
      assertEquals((-2144), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer3;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      Integer integer5 = new Integer((-141));
      assertNotNull(integer5);
      assertEquals((-141), (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      
      integerArray0[4] = integer5;
      integerArray0[5] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-675), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -675, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Integer[] integerArray0 = new Integer[4];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(80, integerArray1, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray0, (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2038);
      assertNotNull(integer1);
      assertEquals(2038, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(784);
      assertNotNull(integer2);
      assertEquals(784, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(52);
      assertNotNull(integer3);
      assertEquals(52, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.insert(1, integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)12);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-104);
      longArray0[1] = (long) (byte)12;
      long[] longArray1 = ArrayUtils.add(longArray0, 2541L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-104L), 12L}, longArray0);
      assertArrayEquals(new long[] {(-104L), 12L, 2541L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.add(longArray1, (-67L));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-104L), 12L}, longArray0);
      assertArrayEquals(new long[] {(-104L), 12L, 2541L}, longArray1);
      assertArrayEquals(new long[] {(-104L), 12L, 2541L, (-67L)}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[8];
      MutableInt mutableInt0 = new MutableInt((Number) (byte)12);
      assertNotNull(mutableInt0);
      assertEquals(12, mutableInt0.intValue());
      assertEquals(12L, mutableInt0.longValue());
      assertEquals((short)12, mutableInt0.shortValue());
      assertEquals(12, (int)mutableInt0.getValue());
      assertEquals(12, (int)mutableInt0.toInteger());
      assertEquals(12.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals(12.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("12", mutableInt0.toString());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      assertEquals(12, mutableInt0.intValue());
      assertEquals(12L, mutableInt0.longValue());
      assertEquals((short)12, mutableInt0.shortValue());
      assertEquals(12, (int)mutableInt0.getValue());
      assertEquals(12, (int)mutableInt0.toInteger());
      assertEquals(12.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals(12.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("12", mutableInt0.toString());
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3727));
      assertNotNull(integer2);
      assertEquals((-3727), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(872);
      assertNotNull(integer3);
      assertEquals(872, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertNotNull(integer4);
      assertEquals((-3727), (int)integer4);
      assertEquals(8, integerArray0.length);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(65);
      assertNotNull(integer5);
      assertEquals(65, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2144));
      assertNotNull(integer6);
      assertEquals((-2144), (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((byte)12);
      assertNotNull(integer7);
      assertEquals(12, (int)integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      
      integerArray0[7] = integer7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 12, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[19];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(19, booleanArray0.length);
      assertEquals(19, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[9];
      booleanArray2[0] = (boolean) boolean1;
      booleanArray2[1] = (boolean) boolean0;
      booleanArray2[2] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = false;
      booleanArray2[5] = (boolean) boolean1;
      booleanArray2[6] = (boolean) boolean1;
      booleanArray2[7] = (boolean) boolean0;
      booleanArray2[8] = true;
      boolean[] booleanArray3 = ArrayUtils.addFirst(booleanArray2, false);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true, true, false, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, true, false, true}, booleanArray2));
      assertEquals(10, booleanArray3.length);
      assertEquals(9, booleanArray2.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (double) (-1));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, 0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 1689L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 6080L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 1689L, 0L, 0L, 6080L}, longArray0);
      assertArrayEquals(new long[] {0L, 1689L, 0L, 0L, 6080L, 0L, 1689L, 0L, 0L, 6080L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray1, 4643, 4643, 4643);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 1689L, 0L, 0L, 6080L}, longArray0);
      assertArrayEquals(new long[] {0L, 1689L, 0L, 0L, 6080L, 0L, 1689L, 0L, 0L, 6080L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 0L);
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 1689L, 0L, 0L, 6080L}, longArray0);
      assertArrayEquals(new long[] {0L, 1689L, 0L, 0L, 6080L, 0L, 1689L, 0L, 0L, 6080L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals("{0, 2, 3, 5, 7, 8}", bitSet0.toString());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, int1);
      assertArrayEquals(new long[] {0L, 1689L, 0L, 0L, 6080L}, longArray0);
      assertArrayEquals(new long[] {0L, 1689L, 0L, 0L, 6080L, 0L, 1689L, 0L, 0L, 6080L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'T';
      floatArray0[2] = (float) 'T';
      floatArray0[3] = (-5162.8F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 76.0F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, (-5162.8F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'T';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {84L}, longArray0);
      assertArrayEquals(new long[] {84L, 84L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 2915, 1982292598, 0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {84L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1684.3608F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, (-5162.8F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray1, 0L);
      assertNotNull(bitSet1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {84L}, longArray0);
      assertArrayEquals(new long[] {84L, 84L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 84L;
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = (double) 0L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-5162.8F));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {84.0, 84.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)14;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-3);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-1394L);
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, (-1394L), 0L}, longArray0);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, (-1394L), 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = Integer.valueOf((-139));
      assertNotNull(integer0);
      assertEquals((-139), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2134);
      assertNotNull(integer4);
      assertEquals(2134, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer5);
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer2));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1335));
      assertNotNull(integer7);
      assertEquals((-1335), (int)integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(551);
      assertNotNull(integer8);
      assertEquals(551, (int)integer8);
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      
      integerArray0[8] = integer8;
      int[] intArray0 = new int[5];
      intArray0[0] = 551;
      intArray0[1] = (-1774);
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = int0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 551, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArrayUtils.shift(byteArray0, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1149;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1149, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1149, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[4] = (float) (-925);
      floatArray0[7] = (float) (-925);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-925), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -925, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1278.5661010294475));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.insert(401, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Long long0 = new Long((-807L));
      assertNotNull(long0);
      assertEquals((-807L), (long)long0);
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-807L));
      assertNotNull(long2);
      assertEquals((-807L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 401;
      floatArray0[1] = (float) 401;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(401, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 401, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      Integer integer0 = new Integer((-3265));
      assertNotNull(integer0);
      assertEquals((-3265), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, " in an array of ");
      assertNotNull(string0);
      assertEquals("-3265", string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3265);
      floatArray0[1] = (float) (-3265);
      floatArray0[2] = (float) (-3265);
      floatArray0[3] = (-284.33353F);
      floatArray0[4] = (float) (-925);
      floatArray0[5] = (float) (-3265);
      floatArray0[6] = (float) (-3265);
      floatArray0[7] = (float) (-925);
      floatArray0[8] = (float) (-3265);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-925), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -925, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-64));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)49, (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)4, (int) (byte)4);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)98);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_FIELD_ARRAY);
      assertTrue(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      char char0 = 'v';
      charArray0[1] = 'v';
      int int0 = 59;
      int int1 = (-69);
      char[] charArray1 = ArrayUtils.subarray(charArray0, 59, (-69));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'@', 'v'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-69), '@');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -69, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)102;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)41;
      longArray0[1] = (long) (-1092);
      longArray0[2] = (long) (byte)64;
      longArray0[3] = (long) (byte) (-60);
      ArrayUtils.swap(longArray0, 0, (int) (byte) (-60));
      assertArrayEquals(new long[] {41L, (-1092L), 64L, (-60L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1461));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals("{1, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'M';
      charArray0[2] = 'Q';
      charArray0[3] = 'y';
      charArray0[4] = 'c';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'@', 'M', 'Q', 'y', 'c', '@', 'M', 'Q', 'y', 'c'}, charArray1);
      assertArrayEquals(new char[] {'@', 'M', 'Q', 'y', 'c'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (int) '@';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'N');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-669), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-3538), 226, 226);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray2, false, (-2119951805));
      assertSame(booleanArray0, booleanArray1);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift(booleanArray2, (int) (short)51, (-2652), (-2119951805));
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      ArrayUtils.reverse(booleanArray2, 0, (-2652));
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-60.0), (-2119951805));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-60.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-60.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer[] integerArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-3078L);
      longArray0[2] = (-712L);
      longArray0[3] = 1L;
      longArray0[4] = 742L;
      longArray0[5] = 0L;
      longArray0[6] = (-1L);
      longArray0[7] = 9L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-3078L), (-712L), 1L, 742L, 0L, (-1L), 9L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 1256, 332);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'U';
      charArray0[2] = 'M';
      charArray0[3] = 'r';
      charArray0[4] = 'G';
      charArray0[5] = '=';
      charArray0[6] = '2';
      charArray0[7] = 'V';
      charArray0[8] = '+';
      char[] charArray1 = ArrayUtils.add(charArray0, 'U');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'B', 'U', 'M', 'r', 'G', '=', '2', 'V', '+', 'U'}, charArray1);
      assertArrayEquals(new char[] {'B', 'U', 'M', 'r', 'G', '=', '2', 'V', '+'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (long) (-1));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (double) (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1), (double) (-1));
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      Integer integer0 = new Integer(90);
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 90;
      doubleArray0[1] = (double) 90;
      doubleArray0[2] = (double) 90;
      doubleArray0[3] = (double) 90;
      doubleArray0[4] = (double) 90;
      doubleArray0[5] = (double) 90;
      doubleArray0[6] = (double) 90;
      doubleArray0[7] = (double) 90;
      doubleArray0[8] = (double) 90;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 90, 90.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-1), (-2756));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertFalse(boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      Float float0 = new Float((double) (byte)21);
      assertNotNull(float0);
      assertEquals(21.0F, (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (byte)21, (int) (byte)21);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 4643, 0, 4643);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1518L;
      longArray0[1] = 2953L;
      longArray0[2] = (-766L);
      longArray0[3] = (-766L);
      longArray0[4] = 4003L;
      longArray0[5] = (long) (-3265);
      longArray0[6] = 4003L;
      longArray0[7] = 115L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1518L, 2953L, (-766L), (-766L), 4003L, (-3265L), 4003L, 115L}, longArray0);
      assertEquals(8, longArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-3265), 272, (int) (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short) (-3363), (int) (short) (-3363));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      Integer integer0 = ArrayUtils.get((Integer[]) null, Integer.MAX_VALUE);
      assertNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 's');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, int0, (Integer) int0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      Integer integer1 = ArrayUtils.get(integerArray1, int0);
      assertNotNull(integer1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertEquals(1, (int)integer1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertTrue(integer1.equals((Object)integer0));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray2, (Object) integer1, 121);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals((-1), int1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertNull(integer0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = 13;
      Object object1 = ArrayUtils.get(objectArray0, 13, object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[1] = object1;
      int int1 = 1;
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNotNull(object2);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, 13, object0);
      assertNotNull(object3);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertSame(object0, object3);
      assertSame(object3, object0);
      assertSame(object3, object2);
      assertSame(object3, object1);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = object3;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[0];
      int int2 = 2796;
      // Undeclared exception!
      try { 
        mockRandom0.doubles(1857.93, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '?';
      ArrayUtils.shift(charArray0, (-14));
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) '?';
      objectArray0[2] = (Object) '`';
      objectArray0[3] = (Object) '`';
      ArrayUtils.get(objectArray0, (-731));
      objectArray0[4] = null;
      objectArray0[5] = (Object) '`';
      ArrayUtils.swap(objectArray0, (-1057), (-14));
      Integer integer0 = new Integer((-1057));
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      mutableInt0.decrement();
      Integer integer1 = mutableInt0.getValue();
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      try { 
        Integer.valueOf("Node ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Node \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1.0F));
      floatArray0[0] = float0;
      Float float1 = new Float(895.481F);
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle((Object[]) floatArray0, (Random) mockRandom0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)115;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)115, 49);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      ArrayUtils.shift((Object[]) characterArray0, 10);
      assertEquals(9, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.indexOf(booleanArray0, false, 65);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) false;
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1936;
      shortArray0[1] = (short)51;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-426);
      shortArray0[4] = (short)2750;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BYTE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte)55;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)14, (byte)98, (byte) (-1), (byte)84, (byte)0, (byte) (-4), (byte)55}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      short[] shortArray0 = new short[12];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1));
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      ArrayUtils.removeElements((char[]) null, (char[]) null);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-406);
      shortArray0[1] = (short)204;
      shortArray0[2] = (short)59;
      shortArray0[3] = (short)1326;
      shortArray0[4] = (short)45;
      shortArray0[5] = (short) (-496);
      short[] shortArray1 = new short[5];
      shortArray1[0] = (short)913;
      shortArray1[1] = (short) (-406);
      shortArray1[2] = (short) (-6097);
      shortArray1[3] = (short)496;
      shortArray1[4] = (short)59;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)204, (short)1326, (short)45, (short) (-496)}, shortArray2);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 4643;
      longArray0[1] = (long) (-3064);
      longArray0[2] = (long) 4643;
      ArrayUtils.shift(longArray0, 85, 2387, 85);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertNotNull(longArray1);
      
      ArrayUtils.insert((-3845), (long[]) null, longArray1);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {4643L, (-3064L), 4643L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.contains(byteArray0, (byte) (-39));
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.removeElements(longArray0, longArray0);
      ArrayUtils.reverse((byte[]) null);
      ArrayUtils.indexOf((byte[]) null, (byte)14);
      Short short0 = new Short((byte)14);
      Short short1 = new Short((short) (-434));
      Integer integer0 = new Integer((-1));
      ArrayUtils.isEmpty((Object[]) null);
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      ArrayUtils.shift((Object[]) longArray0, 10);
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      Integer[] integerArray0 = new Integer[6];
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 3);
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'd';
      charArray0[2] = 'K';
      charArray0[3] = 'E';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      ArrayUtils.swap((Object[]) integerArray0, Integer.MAX_VALUE, 2560);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {366L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 366L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-1394L);
      longArray0[5] = 0L;
      ArrayUtils.add(longArray0, 0L);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = Integer.valueOf((-139));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.indexOf(booleanArray0, false, (int) integerArray0[0]);
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle((Object[]) integerArray0, (Random) mockRandom0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '>';
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '>';
      longArray0[1] = (-1801L);
      longArray0[2] = 1518L;
      longArray0[3] = 4003L;
      longArray0[4] = (long) '>';
      ArrayUtils.isEmpty(longArray0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1264);
      shortArray0[2] = (short)40;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1264);
      shortArray0[5] = (short) (-1947);
      ArrayUtils.swap(shortArray0, 116, (int) (short) (-1264), (-3522));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((int) (short)40, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(11, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (byte) (-6));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 2, '1');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.removeElements(longArray0, longArray0);
      ArrayUtils.reverse((byte[]) null);
      ArrayUtils.indexOf((byte[]) null, (byte)0);
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)0);
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-434));
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      Integer integer0 = new Integer((-1));
      ArrayUtils.toString((Object) integer0);
      ArrayUtils.removeElements(shortArray1, shortArray1);
      ArrayUtils.add((byte[]) null, 0, (byte) (-66));
      ArrayUtils.insert(90, (byte[]) null, (byte[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = '|';
      charArray0[2] = '*';
      charArray0[3] = '^';
      charArray0[4] = '0';
      charArray0[5] = '';
      charArray0[6] = '+';
      charArray0[7] = 'i';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-54);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1626), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1626, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)16);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      int int0 = (-1092);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)41;
      byte byte0 = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)102;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1092), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1092, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 52.8F);
      assertArrayEquals(new float[] {0.0F, 52.8F}, floatArray1, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) (byte) (-1));
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.isEmpty((Object[]) null);
      boolean boolean2 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.nullToEmpty(shortArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1075.09F;
      floatArray0[1] = 475.49F;
      floatArray0[2] = 1.0F;
      ArrayUtils.contains(floatArray0, 0.0F);
      ArrayUtils.addAll((long[]) null, (long[]) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-3505);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-925);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (-925);
      longArray0[7] = (long) (-925);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-925L));
      ArrayUtils.isEmpty((Object[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)14;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer integer0 = new Integer((-1));
      String string0 = ArrayUtils.toString((Object) integer0, "The type must not be null");
      assertEquals("-1", string0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      Integer integer0 = new Integer((-1674));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1674);
      ArrayUtils.swap(longArray0, (-1674), (-1674));
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1674));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1674L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-2611L));
      assertArrayEquals(new long[] {(-2611L)}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 's';
      longArray0[1] = (long) 'g';
      longArray0[2] = (long) 'g';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {115L, 103L, 103L, 115L, 103L, 103L}, longArray1);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      
      long[] longArray2 = new long[9];
      longArray2[0] = (long) 'g';
      longArray2[1] = (long) 's';
      longArray2[2] = (long) 's';
      longArray2[3] = (long) 's';
      longArray2[4] = (long) (-3059);
      longArray2[5] = (long) (-3059);
      longArray2[6] = (long) 's';
      longArray2[7] = (long) (-3059);
      longArray2[8] = (long) 'g';
      boolean boolean0 = ArrayUtils.contains(longArray2, 115L);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 115L;
      objectArray0[1] = (Object) 115L;
      objectArray0[2] = (Object) (-3059L);
      objectArray0[3] = (Object) 103L;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)0;
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1796);
      Integer integer2 = new Integer(4313);
      Integer integer3 = new Integer(0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[1] = integer3;
      integerArray0[3] = integer0;
      integerArray0[4] = integer2;
      integerArray0[5] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertEquals(6, integerArray1.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-3432));
      assertArrayEquals(new int[] {(-3432), 0, 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(14, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)12);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)30, (byte)52}, byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)12;
      long[] longArray1 = ArrayUtils.add(longArray0, (-3887L));
      assertArrayEquals(new long[] {12L, (-3887L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-39));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(0);
      ArrayUtils.removeElement(integerArray0, (Object) integer0);
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.longs(457L, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4094);
      ArrayUtils.swap(intArray0, 5, (-4094));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-4094);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, 117);
      ArrayUtils.shift((Object[]) integerArray0, 869);
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[4] = 0.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-5);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-64)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-64);
      doubleArray0[1] = (double) (byte) (-5);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)52;
      ArrayUtils.reverse(byteArray0);
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      long[] longArray0 = new long[5];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 226L);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 10);
      ArrayUtils.nullToEmpty(classArray0);
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      ArrayUtils.insert((int) (short)8, shortArray0, shortArray0);
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 1153, (int) (short)12, (int) (short)12);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(17, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      
      ArrayUtils.insert(2041, (short[]) null, (short[]) null);
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(2041);
      longArray0[0] = long0;
      Long long1 = new Long(2041);
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[1]);
      longArray0[3] = long3;
      Long long4 = new Long(0L);
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[3]);
      longArray0[5] = long5;
      Long long6 = new Long(880L);
      longArray0[6] = long6;
      Long long7 = new Long(0L);
      longArray0[7] = long7;
      Long long8 = new Long((-1L));
      longArray0[8] = long8;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2041L, 2041L, 2041L, 2041L, 0L, 2041L, 880L, 0L, (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'T';
      floatArray0[2] = (float) 'T';
      floatArray0[3] = (-5162.8F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 76.0F);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'T';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      ArrayUtils.shift(longArray0, 2915, 1982292598, 0);
      ArrayUtils.indexesOf(floatArray0, 1684.3608F);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 0L);
      assertEquals(12, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 84L;
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = (double) 0L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-5162.8F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1), (-1));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.ints();
      mockRandom0.doubles(0L);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'p';
      intArray0[1] = (int) 'l';
      intArray0[2] = (int) 'l';
      intArray0[3] = (int) 'l';
      intArray0[4] = (int) 'p';
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      ArrayUtils.lastIndexOf(longArray0, (-2190L), 2146142295);
      ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      ArrayUtils.swap((int[]) null, 734, 3110, 3110);
      ArrayUtils.subarray((byte[]) null, (int) (byte)127, 734);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Ir$.wdQ9=LxB3";
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1137L, 302);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 1.0;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.toObject(charArray0);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_LONG_ARRAY, (-1614L), (-1));
      ArrayUtils arrayUtils1 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils1.EMPTY_BYTE_OBJECT_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-755));
      assertEquals(3, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-67L);
      longArray0[3] = 0L;
      longArray0[4] = 2443L;
      longArray0[5] = 0L;
      longArray0[6] = 1077L;
      longArray0[7] = 1L;
      longArray0[8] = 127L;
      ArrayUtils.removeAllOccurences(longArray0, (-2190L));
      int[] intArray0 = new int[0];
      MockRandom mockRandom0 = new MockRandom(2443L);
      mockRandom0.ints();
      mockRandom0.doubles(0L);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      long[] longArray1 = new long[5];
      longArray1[0] = 2443L;
      longArray1[1] = (-1L);
      longArray1[2] = 2443L;
      longArray1[3] = 0L;
      longArray1[4] = (-67L);
      ArrayUtils.lastIndexOf(longArray1, (-4460L), (-675));
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.removeElements(booleanArray0, booleanArray0);
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.shift(charArray0, 1073741815);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(89, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_CHAR_ARRAY, 'a');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = ',';
      charArray0[2] = 'n';
      charArray0[3] = '5';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(16, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_SHORT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 1899L;
      longArray0[2] = 0L;
      longArray0[3] = (-4905L);
      ArrayUtils.isEmpty(longArray0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short)20;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 1669);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1669, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 1924);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1924, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.contains(doubleArray0, (-1278.5661010294475));
      ArrayUtils.insert(401, (short[]) null, (short[]) null);
      Long long0 = new Long((-807L));
      Long long1 = new Long(0L);
      Long long2 = new Long((-807L));
      Long long3 = new Long(3219L);
      Long[] longArray0 = new Long[3];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-895L));
      ArrayUtils.isEmpty(longArray1);
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1073741824;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.073741824E9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2235.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2969.023214);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2334;
      intArray0[1] = (-1);
      intArray0[2] = 3955;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), 0, 3955, (-1), 2334}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      ArrayUtils.removeAllOccurrences(integerArray0, integerArray0[0]);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY, "java.lang.Integer");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integerArray0[0]);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.removeAll(intArray0, intArray0);
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer(35);
      Integer integer1 = new Integer(35);
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      int int0 = (-2167);
      // Undeclared exception!
      try { 
        bitSet0.get(1160, (-2167));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -2167
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY, object0);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '=';
      ArrayUtils.removeAllOccurrences(charArray0, '=');
      byte[] byteArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("9$i:[_^9PB?)z[HT@");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(",3Zt!GU*uy!~qEJ~JjL");
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, true);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.subarray(floatArray0, (-2082), 0);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-2082));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = Double.valueOf(0.0);
      doubleArray0[4] = double4;
      Double double5 = new Double(0);
      doubleArray0[5] = double5;
      Double double6 = new Double((-571.82275));
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[0]);
      doubleArray0[7] = double7;
      Double double8 = new Double(2779.0848889992);
      doubleArray0[8] = double8;
      ArrayUtils.toPrimitive(doubleArray0);
      MockRandom mockRandom0 = new MockRandom(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray1, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean(false);
      Boolean.valueOf(",3Zt!GU*uy!~qEJ~JjL");
      Boolean boolean2 = Boolean.TRUE;
      Boolean boolean3 = Boolean.TRUE;
      char[] charArray0 = new char[0];
      Character.toChars((int) (byte)21);
      ArrayUtils.toObject((short[]) null);
      ArrayUtils.shift((double[]) null, (-2718), 254, (int) (byte)21);
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf(')');
      characterArray0[0] = character0;
      Character character1 = new Character('P');
      characterArray0[1] = character1;
      ArrayUtils.toPrimitive(characterArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      Integer integer0 = new Integer((byte) (-1));
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1271;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = new int[1];
      intArray2[0] = 1271;
      int int0 = ArrayUtils.lastIndexOf(intArray2, 6, 1271);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1697, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      ArrayUtils.swap(arrayUtils0.EMPTY_BYTE_ARRAY, (-4315), (-4315), (-4315));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 40, 40, 40);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 40;
      intArray0[1] = 40;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 886, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[3] = (-3078L);
      ArrayUtils.addAll(longArray0, longArray0);
      ArrayUtils.removeElement((int[]) null, 1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      Double double0 = new Double(3.0);
      Double double1 = new Double(3.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 0.7;
      doubleArray0[4] = 0.7;
      doubleArray0[5] = 3.0;
      doubleArray0[6] = 3.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, 6);
      assertEquals(6, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-92), 3.0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      Float float0 = new Float((float) (byte)41);
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'w';
      charArray0[2] = 'p';
      charArray0[3] = '&';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)41);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)41);
      assertSame(floatArray2, floatArray1);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-925));
      MockRandom mockRandom0 = new MockRandom((-1));
      int int0 = 0;
      double double2 = 0.0;
      // Undeclared exception!
      try { 
        mockRandom0.doubles(1277L, (double) 0, (double) (-925));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      ArrayUtils.nullToEmpty((byte[]) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1974.23;
      doubleArray0[1] = (-1018.99);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = 2282.068;
      ArrayUtils.lastIndexOf(doubleArray0, 1974.23, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) 0, 1.5, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1), (-1));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      float[] floatArray0 = new float[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1707.4093F));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.nullToEmpty(doubleArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '-';
      charArray0[2] = 'A';
      charArray0[3] = 'G';
      charArray0[4] = 'L';
      charArray0[5] = 'P';
      ArrayUtils.removeElements(charArray0, charArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'L';
      floatArray0[1] = (float) '-';
      floatArray0[2] = (float) 'P';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1511.4016F));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-436.35824831);
      doubleArray0[1] = 1185.885006182152;
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'N';
      charArray0[3] = '8';
      charArray0[4] = 'L';
      charArray0[5] = '0';
      charArray0[6] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short)2098;
      shortArray0[2] = (short)2098;
      ArrayUtils.shift(shortArray0, 431);
      assertArrayEquals(new short[] {(short)2098, (short)2098, (short)2098}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf(')');
      characterArray0[0] = character0;
      Character character1 = new Character('P');
      characterArray0[1] = character1;
      ArrayUtils.toPrimitive(characterArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-29);
      ArrayUtils.shift((short[]) null, 79);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      Float float0 = new Float((float) (byte)41);
      Float[] floatArray0 = new Float[0];
      ArrayUtils.toPrimitive(floatArray0);
      short[] shortArray0 = new short[0];
      ArrayUtils.nullToEmpty(shortArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'w';
      charArray0[2] = 'p';
      charArray0[3] = '&';
      charArray0[4] = 'U';
      ArrayUtils.reverse(charArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 3616, (-1700L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3616, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-81);
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '3';
      int int0 = 10;
      ArrayUtils.swap(charArray0, (-367), Integer.MAX_VALUE, 10);
      try { 
        Integer.valueOf("F", 10);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.shift(shortArray0, (-2146389301));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '8';
      charArray0[2] = 'L';
      charArray0[3] = 'N';
      charArray0[4] = 'i';
      ArrayUtils.isSorted(charArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2098;
      ArrayUtils.shift(shortArray0, (-636));
      assertArrayEquals(new short[] {(short)2098}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      float[] floatArray0 = new float[2];
      Float[] floatArray1 = new Float[0];
      ArrayUtils.toPrimitive(floatArray1);
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 2244, 3134, 2244);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(1, bitSet0.length());
      
      ArrayUtils.swap((char[]) null, 607, 607, (-2041));
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((-2703.295773));
      floatArray0[0] = float0;
      Float float1 = new Float(1353.279648639);
      floatArray0[1] = float1;
      Float float2 = new Float((-3010.0354F));
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[2]);
      floatArray0[3] = float3;
      Float float4 = new Float(1353.279648639);
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2703.2957F), 1353.2797F, (-3010.0354F), (-3010.0354F), 1353.2797F}, floatArray1, 0.01F);
      
      ArrayUtils.isSorted((char[]) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2098;
      shortArray0[1] = (short)1;
      ArrayUtils.shift(shortArray0, 1);
      assertArrayEquals(new short[] {(short)1, (short)2098}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[6];
      charArray0[2] = '%';
      charArray0[4] = '%';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '%', 5);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      ArrayUtils.toPrimitive((Character[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1425);
      intArray0[1] = 3054;
      ArrayUtils.swap(intArray0, (-1425), (-1014), 3054);
      assertArrayEquals(new int[] {(-1425), 3054}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-3505);
      intArray0[2] = 1073741824;
      intArray0[3] = 3;
      intArray0[4] = (-1432);
      intArray0[5] = (-1448);
      ArrayUtils.shift(intArray0, 2);
      assertArrayEquals(new int[] {(-1432), (-1448), 2, (-3505), 1073741824, 3}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer(4299);
      int[] intArray1 = new int[9];
      intArray1[0] = 4299;
      intArray1[1] = 4299;
      intArray1[2] = 4299;
      intArray1[3] = 1796;
      intArray1[4] = 4299;
      intArray1[5] = 4299;
      intArray1[6] = 4299;
      intArray1[8] = 4299;
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {4299, 4299, 4299, 1796, 4299, 4299, 4299, 4299}, intArray2);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2258;
      intArray0[1] = (-1227);
      intArray0[2] = 15;
      intArray0[3] = 829;
      intArray0[4] = 3538;
      intArray0[5] = (-1227);
      intArray0[6] = 2258;
      ArrayUtils.swap(intArray0, 2258, (-914), 322);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'N';
      charArray0[2] = '[';
      charArray0[3] = '_';
      charArray0[4] = '[';
      charArray0[5] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '!', (-1227));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '{', 1071);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[4];
      intArray0[0] = 3538;
      intArray0[1] = 0;
      intArray0[2] = (-1227);
      intArray0[3] = 829;
      ArrayUtils.swap(intArray0, 3538, (-434), 59);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '1', (-434));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      int[] intArray0 = new int[8];
      ArrayUtils.shift(intArray0, 3938);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(true);
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-455L));
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 4346L;
      longArray0[2] = (-2190L);
      ArrayUtils.indexOf(longArray0, 4346L, (-1092));
      ArrayUtils.isEmpty(longArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.swap(intArray0, 1136, 116, 1353);
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)127);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toStringArray(objectArray0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1356, 1356);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = ArrayUtils.toString(object1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.isEmpty(booleanArray0);
      long[] longArray0 = new long[8];
      longArray0[0] = 3810L;
      longArray0[1] = 3810L;
      longArray0[2] = 1L;
      longArray0[3] = 3810L;
      longArray0[4] = 3810L;
      longArray0[5] = 1L;
      longArray0[6] = 3810L;
      longArray0[7] = 3810L;
      ArrayUtils.indexesOf(longArray0, 1L);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-385), (-385));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("-p|iM`zJ!pKng= ");
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(true);
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray1));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1472.0);
      doubleArray0[1] = 1014.20712;
      doubleArray0[2] = 1.5;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertEquals(0, doubleArray1.length);
      
      Object object0 = new Object();
      ArrayUtils.toString(object0, "org.apache.commons.lang3.ArrayUtils");
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (-1L);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      boolean boolean5 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4094);
      ArrayUtils.swap(intArray0, 5, (-4094));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-4094);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-4094);
      doubleArray0[1] = (double) (-4094);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2186);
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) (-2186);
      floatArray0[3] = (float) 5;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) (-4094);
      ArrayUtils.swap(floatArray0, (int) integerArray0[0], (-4094));
      assertArrayEquals(new float[] {(-2186.0F), (-4094.0F), (-2186.0F), 5.0F, Float.NaN, (-4094.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '6');
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '6');
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', '6', '6', '6'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'b');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '\u0000';
      charArray0[1] = 's';
      MockRandom mockRandom0 = new MockRandom(0L);
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'s', 's'}, charArray0);
      
      Object[] objectArray0 = new Object[9];
      ArrayUtils.get(objectArray0, (-3059));
      objectArray0[0] = null;
      objectArray0[1] = (Object) mockRandom0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[5] = (Object) 's';
      objectArray0[6] = (Object) 's';
      objectArray0[7] = (Object) 's';
      Object object2 = new Object();
      objectArray0[8] = object2;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-442.8764021), 2221.7566);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse((float[]) null);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2651), 2877);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 40;
      floatArray0[1] = (float) 40;
      floatArray0[2] = (float) 40;
      ArrayUtils.reverse(floatArray0);
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.1);
      doubleArray0[1] = double1;
      Double double2 = new Double(882.0);
      doubleArray0[2] = double2;
      Double double3 = Double.valueOf((double) doubleArray0[1]);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.1);
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.1, 0.1, 882.0, 0.1, 0.1}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '0';
      charArray0[2] = 'g';
      charArray0[3] = '8';
      charArray0[4] = '*';
      int int0 = ArrayUtils.indexOf(charArray0, '\"', (-1494));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '5';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '5';
      floatArray0[1] = (float) (-3505);
      floatArray0[2] = (float) '8';
      floatArray0[3] = (float) '8';
      floatArray0[4] = (float) '5';
      floatArray0[5] = (float) '5';
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {53.0F, 53.0F, 56.0F, 56.0F, (-3505.0F), 53.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, '');
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1593));
      ArrayUtils.toPrimitive((Object) integer0);
      Float float0 = new Float((double) 53.0F);
      Float[] floatArray1 = new Float[5];
      floatArray1[0] = (Float) (-3505.0F);
      floatArray1[1] = (Float) 56.0F;
      floatArray1[2] = (Float) 53.0F;
      floatArray1[3] = (Float) 53.0F;
      floatArray1[4] = (Float) 53.0F;
      ArrayUtils.toPrimitive(floatArray1, (float) floatArray1[2]);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-3505));
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[5]);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) (-1));
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY);
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      float[] floatArray0 = new float[6];
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains((Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY, (Object) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean boolean0 = ArrayUtils.contains(charArray0, 's');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = 'U';
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      ArrayUtils.contains((Object[]) null, (Object) null);
      float[] floatArray0 = new float[0];
      ArrayUtils.add(floatArray0, 52.8F);
      float[] floatArray1 = new float[8];
      floatArray1[0] = 52.8F;
      floatArray1[1] = 52.8F;
      floatArray1[2] = 52.8F;
      floatArray1[3] = 52.8F;
      floatArray1[4] = 52.8F;
      floatArray1[5] = 52.8F;
      floatArray1[6] = 52.8F;
      floatArray1[7] = 0.0F;
      ArrayUtils.shuffle(floatArray1);
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {52.8F, 0.0F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F, 52.8F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'H';
      charArray0[3] = '9';
      charArray0[4] = 'L';
      charArray0[5] = 't';
      charArray0[6] = '?';
      charArray0[7] = '[';
      charArray0[8] = 'u';
      boolean boolean0 = ArrayUtils.contains(charArray0, '[');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1948));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotNull(intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)91, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-491);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-491));
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.removeElements(charArray0, charArray0);
      ArrayUtils.subarray((float[]) null, 0, 0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0, (-5234.1221));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)66, 2224);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)63, (int) (byte)63);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3802);
      intArray0[1] = 0;
      ArrayUtils.add(intArray0, 0, 0);
      ArrayUtils.removeElement(intArray0, 0);
      char[] charArray0 = new char[0];
      ArrayUtils.removeElements(charArray0, charArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)3;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (-1376));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 3950);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), 'v');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '#';
      charArray0[2] = '~';
      charArray0[3] = '?';
      charArray0[4] = '@';
      charArray0[5] = ':';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'e');
      assertArrayEquals(new char[] {'e', '>', '#', '~', '?', '@', ':'}, charArray1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-2096L));
      assertArrayEquals(new long[] {(-2096L), 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 10.0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4094);
      ArrayUtils.swap(intArray0, 5, (-4094));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-4094);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-4094);
      doubleArray0[1] = (double) (-4094);
      doubleArray0[2] = (double) (-4094);
      doubleArray0[3] = (double) (-4094);
      doubleArray0[4] = (double) (-4094);
      ArrayUtils.indexesOf(doubleArray0, 0.0);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2940L);
      assertArrayEquals(new long[] {2940L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0);
      assertEquals(2, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-799.3371));
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1L);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-64.52961955));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-64.52961955)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'T';
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) 'T';
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 7;
      intArray0[7] = (int) 'T';
      ArrayUtils.subarray(intArray0, 1637, 146);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 146;
      longArray0[2] = 1220L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      ArrayUtils.nullToEmpty(longArray0);
      Double double0 = new Double(1.5);
      Double double1 = new Double(1637);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.subarray(floatArray0, 0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      ArrayUtils.toPrimitive((Double[]) null);
      ArrayUtils.reverse((Object[]) null);
      MockRandom mockRandom0 = new MockRandom();
      Byte byte0 = new Byte((byte) (-1));
      Byte byte1 = new Byte((byte) (-113));
      Byte byte2 = new Byte((byte) (-63));
      Byte byte3 = new Byte((byte)70);
      Byte byte4 = new Byte((byte)8);
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte4;
      Byte byte5 = new Byte((byte) (-63));
      byteArray0[2] = byte5;
      byteArray0[3] = byte1;
      byteArray0[4] = byte4;
      byteArray0[5] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)8, (byte) (-63), (byte) (-113), (byte)8, (byte) (-63)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      ArrayUtils.indexesOf((double[]) null, (-442.8764021), (-1912), (-2690.0));
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 141, 141);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      Double double2 = new Double(1.0);
      Double double3 = new Double((-2251.32495291));
      Double double4 = new Double((-2251.32495291));
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double5;
      doubleArray0[2] = double4;
      doubleArray0[3] = double1;
      ArrayUtils.toPrimitive(doubleArray0);
      ArrayUtils.reverse((Object[]) doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-1), (-608));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-2796.6));
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      Double double5 = new Double((-2796.6));
      doubleArray0[5] = double5;
      ArrayUtils.toPrimitive(doubleArray0);
      ArrayUtils.reverse((Object[]) doubleArray0);
      short[] shortArray0 = null;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt((-1));
      // Undeclared exception!
      try { 
        mockRandom0.ints((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2490.7171651);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1686()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 'g';
      charArray0[2] = 's';
      charArray0[3] = 's';
      long[] longArray0 = new long[3];
      longArray0[0] = 973L;
      longArray0[1] = (long) 's';
      longArray0[2] = (long) 's';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 973L);
      assertEquals(0, int0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, (int) 's');
      assertArrayEquals(new char[] {'s', 'g', 's', 's'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1687()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1138);
      shortArray0[1] = (short)98;
      shortArray0[2] = (short) (-2079);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-869);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 992);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 992, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1688()  throws Throwable  {
      ArrayUtils.subarray((char[]) null, 2126834766, 2126834766);
      float[] floatArray0 = new float[0];
      ArrayUtils.nullToEmpty(floatArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2126834766;
      intArray0[1] = 2126834766;
      intArray0[2] = 2126834766;
      intArray0[3] = 2126834766;
      intArray0[4] = 2126834766;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2126834766, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1689()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      ArrayUtils.subarray(charArray0, (int) 'l', 2849);
      long[] longArray0 = new long[7];
      ArrayUtils.toObject(charArray0);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1690()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1691()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-4317L);
      longArray0[1] = (-4317L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-4317L), (-4317L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1692()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1693()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (-1));
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1694()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1695()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1696()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 2849);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'l', 'p'}, charArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2849;
      longArray0[1] = (long) 'l';
      longArray0[2] = (long) 'p';
      longArray0[3] = (long) 'p';
      longArray0[4] = (long) 'l';
      longArray0[5] = (long) 'p';
      longArray0[6] = (long) 2849;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {2849L, 112L, 108L, 112L, 112L, 108L, 2849L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1697()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1698()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1699()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (short)0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1700()  throws Throwable  {
      Object object0 = new Object();
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 280.0F, (-108));
      assertTrue(bitSet0.isEmpty());
      
      Integer integer0 = new Integer((-1531));
      boolean boolean0 = ArrayUtils.isSameType(object0, integer0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-108);
      longArray0[1] = (long) (-1531);
      longArray0[2] = (long) (-108);
      longArray0[3] = (long) (-108);
      longArray0[4] = (long) (-108);
      longArray0[5] = (long) (-108);
      longArray0[6] = (long) (-1531);
      longArray0[7] = (long) (-108);
      int int0 = ArrayUtils.indexOf(longArray0, (-108L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1701()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'T';
      ArrayUtils.removeElements(charArray0, charArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.subarray(floatArray0, 0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      ArrayUtils.contains(doubleArray0, 84.0, 0.0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'T';
      longArray0[1] = (long) 'Q';
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) 'T';
      longArray0[5] = (long) 'Q';
      longArray0[6] = 0L;
      ArrayUtils.add(longArray0, 0, 0L);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1702()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger((String) null, 0);
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt(int0);
      Integer integer2 = mutableInt0.getValue();
      integerArray0[2] = integer2;
      Integer integer3 = Integer.valueOf(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(34);
      integerArray0[5] = integer5;
      Integer integer6 = Integer.valueOf(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1206));
      integerArray0[7] = integer7;
      mutableInt0.getAndDecrement();
      Integer integer8 = Integer.getInteger((String) null, int0);
      integerArray0[8] = integer8;
      Integer integer9 = new Integer(0);
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer9);
      assertEquals(2, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1703()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)41;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-60);
      doubleArray0[1] = (double) (byte)41;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)41;
      doubleArray0[4] = (double) (byte)41;
      doubleArray0[5] = (double) (-1092);
      doubleArray0[6] = (double) (byte)41;
      doubleArray0[7] = 988.01569055206;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-2125344640), 1003.8);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1704()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.removeElements(charArray0, charArray0);
      ArrayUtils.subarray((float[]) null, 0, 0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.contains(doubleArray0, (double) 0, (-5234.1221));
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = 1L;
      longArray0[7] = (long) 0;
      ArrayUtils.add(longArray0, 0, 0L);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test1705()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (long) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1706()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1707()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1708()  throws Throwable  {
      Integer[] integerArray0 = new Integer[13];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1709()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 236.90951056);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1710()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (-1));
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1711()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 's';
      charArray0[3] = 'g';
      char[] charArray1 = new char[5];
      charArray1[0] = 's';
      charArray1[1] = 's';
      charArray1[2] = 'g';
      charArray1[3] = 'g';
      charArray1[4] = 'g';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-3059));
      ArrayUtils.shift(intArray0, (-3059));
      assertArrayEquals(new int[] {(-3059)}, intArray0);
      
      char[] charArray3 = ArrayUtils.removeElement(charArray0, 'g');
      assertArrayEquals(new char[] {'g', 's', 'g'}, charArray3);
      
      ArrayUtils.removeElements(charArray1, charArray2);
      assertEquals(0, charArray2.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.valueOf((-3059));
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1712()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1713()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'Q';
      charArray0[2] = 'B';
      ArrayUtils.removeElements(charArray0, charArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.subarray(floatArray0, 0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = 0.0;
      ArrayUtils.contains(doubleArray0, 84.0, 0.0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'T';
      longArray0[1] = (long) 'Q';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) 'T';
      longArray0[5] = (long) 'Q';
      longArray0[6] = 0L;
      ArrayUtils.add(longArray0, 0, 0L);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }
}
