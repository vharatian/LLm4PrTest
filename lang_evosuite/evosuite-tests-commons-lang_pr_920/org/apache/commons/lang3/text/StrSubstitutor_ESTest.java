/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 02:20:18 GMT 2025
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.lang3.text.StrLookup;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StrSubstitutor_ESTest extends StrSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(strLookup0).toString();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("xx", "Variable prefix matcher must not be null.", "R-Ya8sb?h&6zTvn/xV", "Variable prefix matcher must not be null.", "Variable prefix matcher must not be null.").when(strMatcher0).toString();
      doReturn(2996, 2996, (-1), (-1), (-1)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '$', strMatcher0);
      CharBuffer charBuffer0 = CharBuffer.allocate(3043);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      strSubstitutor0.replaceIn(stringBuffer0, 1, 2);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("X").when(strLookup0).toString();
      doReturn("0|s|WU43q>-").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'h');
      strSubstitutor0.setVariableSuffix(':');
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      char[] charArray0 = new char[7];
      charArray0[3] = '$';
      charArray0[5] = ':';
      String string0 = strSubstitutor1.replace(charArray0);
      assertEquals('h', strSubstitutor1.getEscapeChar());
      assertEquals("\u0000\u0000\u00000|s|WU43q>-\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Djq%F/V", "", '\'', "org.apache.commons.lang3.text.StrSubstitutor");
      assertEquals('\'', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "GGcksSs~ ", "GGcksSs~ ", '{');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('{', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix("org.junitpioneer.jupiter.params.DisbleIfNameExtension");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix("org.junitpioneer.jupter.params.DisableIfNameExtension");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix('~');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "", "", 'z');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix(" X:>");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix("org.junitpioneer.jupiter.params.DisbleIfNameExtension");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix('$');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter("org.junitpioneer.jupiter.params.DisbleIfNameExtension");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter("org.junitpioneer.jupiter.params.DisbleIfNameExtension");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter('$');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "?=Q}Xrv", "T `Yh2Kxh.\"6 E'");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter('x');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(256);
      String string0 = StrSubstitutor.replaceSystemProperties(stringBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariableSuffix('$');
      strSubstitutor0.setVariablePrefix('$');
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("e@L.$HVF$9d");
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '$';
      StringBuilder stringBuilder2 = stringBuilder1.insert(1, charArray0, 1, 1);
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder3);
      assertEquals("e$@L.$HVF$9d$\u0000", stringBuilder3.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(strMatcher0).toString();
      doReturn(0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'J');
      char[] charArray0 = new char[3];
      String string0 = strSubstitutor0.replace(charArray0, 0, 1);
      assertEquals('J', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      char[] charArray0 = new char[0];
      String string0 = strSubstitutor0.replace(charArray0, 0, 0);
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      strSubstitutor0.replace(stringBuffer0, 0, 0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "e");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      strSubstitutor0.replace(stringBuffer0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "BPCP`q5#", "]gc'@K< D[u2:", '=');
      String string0 = strSubstitutor0.replace("oe30T9", 1, 0);
      assertEquals("", string0);
      assertEquals('=', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      strSubstitutor0.replace("");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) "", properties0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0, "Dv%A~V$~0b[ywC![T;f", "Dv%A~V$~0b[ywC![T;f");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) "", (Map<String, String>) hashMap0, "add() is unsupported", "83\"\"726Y< Cg9Xg+,76");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, Object>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) "", (Map<String, String>) hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = strSubstitutor0.replace((Object) stringBuffer0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "zc", "zc", '\"', "zc");
      String string0 = strSubstitutor0.replace((CharSequence) "zc", 1, 1);
      assertNotNull(string0);
      assertEquals('\"', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      String string0 = strSubstitutor0.replace((CharSequence) "f%U.IEisv v", 0, 0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "", "", 'x', "");
      String string0 = strSubstitutor0.replace((CharSequence) "");
      assertNotNull(string0);
      assertEquals('x', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      boolean boolean0 = strSubstitutor0.isPreserveEscapes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      boolean boolean0 = strSubstitutor0.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "8", "Invalid exceptionStatus", 'Z', "8");
      char char0 = strSubstitutor0.getEscapeChar();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('Z', char0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn("%s does not implement the CartesianAnnotationConsumer<T> interface.").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("%s does not implement the CartesianAnnotationConsumer<T> interface.", "%s does not implement the CartesianAnnotationConsumer<T> interface.", "%s does not implement the CartesianAnnotationConsumer<T> interface.", "%s does not implement the CartesianAnnotationConsumer<T> interface.", "%s does not implement the CartesianAnnotationConsumer<T> interface.").when(strMatcher0).toString();
      doReturn(3, 3, 3, 3).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'G', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder("%s does not implement the CartesianAnnotationConsumer<T> interface.");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, 3, 12);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of does not imp: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Epe;texc'pti[ %s gs)&(tthr)w.", "Epe;texc'pti[ %s gs)&(tthr)w.", "Epe;texc'pti[ %s gs)&(tthr)w.").when(strMatcher0).toString();
      doReturn(0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '|', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder("xx");
      strSubstitutor0.replaceIn(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'P', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Ezpectm exc'ptin %s gas)&ot thr)wn.");
      strSubstitutor0.replaceIn(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("HVF", "Variable prefix matcher must not be null.").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'J');
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Variable prefix matcher must not be null.");
      strSubstitutor0.replaceIn(stringBuffer0, 1, 8);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn("Ezpectm exc'ptin %s was)not thrown.").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Ezpectm exc'ptin %s was)not thrown.", "Ezpectm exc'ptin %s was)not thrown.", "Ezpectm exc'ptin %s was)not thrown.", "Ezpectm exc'ptin %s was)not thrown.", "Ezpectm exc'ptin %s was)not thrown.").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'b', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer("llegal range. Equal fom and to wll produce an empt");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, 2, 4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of egal: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn("Illegal range. Equal from and to wll produce an empty range.").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Illegal range. Equal from and to wll produce an empty range.", "Illegal range. Equal from and to wll produce an empty range.", "Illegal range. Equal from and to wll produce an empty range.", "Illegal range. Equal from and to wll produce an empty range.", (String) null).when(strMatcher0).toString();
      doReturn(1, 1, 1, 1).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StringBuffer stringBuffer0 = new StringBuffer("Illegal range. Equal from and to wll produce an empty range.");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '4', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of Illegal range. Equal from and to wll produce an empty range.: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("HVF", "Variable prefix matcher must not be null.").when(strMatcher0).toString();
      doReturn((-527), (-527)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'J');
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0, 0, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Epectexc'ptin %s gs)&otthr)w.", "Epectexc'ptin %s gs)&otthr)w.", (String) null).when(strMatcher0).toString();
      doReturn(0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u008A', strMatcher0);
      char[] charArray0 = new char[1];
      strSubstitutor0.replace(charArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Epectexc'ptin %s gs)&otthr)w.", "Epectexc'ptin %s gs)&otthr)w.", (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\u008A', strMatcher0);
      char[] charArray0 = new char[4];
      strSubstitutor0.replace(charArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0, (int) '$', 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn("Ezpectm exc'ptin %s was)not thrown.").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Ezpectm exc'ptin %s was)not thrown.", "Ezpectm exc'ptin %s was)not thrown.", "Ezpectm exc'ptin %s was)not thrown.", "Ezpectm exc'ptin %s was)not thrown.", "Ezpectm exc'ptin %s was)not thrown.").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'b', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Ezpectm exc'ptin %s was)not thrown.");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0, 2, 17);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of pectm exc'ptin %s: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      CharBuffer charBuffer0 = CharBuffer.allocate(3043);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      stringBuilder0.append((CharSequence) charBuffer0);
      stringBuilder0.append((CharSequence) stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      // Undeclared exception!
      strSubstitutor0.replace(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("9I6*3:P", "9I6*3:P", (String) null).when(strMatcher0).toString();
      doReturn(6, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '~', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer("9I6*3:P");
      strSubstitutor0.replace(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Illegal range. Equal from and to wll produce an empty range.", "Illegal range. Equal from and to wll produce an empty range.", (String) null).when(strMatcher0).toString();
      doReturn((-10), 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'E', strMatcher0);
      strSubstitutor0.replace("Could not find parameter named %s in test %s", 3, 3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn("Infinite loop in property interpolation of ").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Infinite loop in property interpolation of ", "Infinite loop in property interpolation of ", "Infinite loop in property interpolation of ", "Infinite loop in property interpolation of ", "Infinite loop in property interpolation of ").when(strMatcher0).toString();
      doReturn(6, 6, 6, 6).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'L', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Infinite loop in property interpolation of ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of Infinite loop in property interpolation of : 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put(object0, object0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) null, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) strSubstitutor0, (Map<String, Object>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("ibBV:rRt*7}Xa5G`f!4]", "ibBV:rRt*7}Xa5G`f!4]", (String) null, (String) null, (String) null).when(strMatcher0).toString();
      doReturn((-2), 2930, (-2), (-2), (-2)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'y', strMatcher0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.replace((CharSequence) "ibBV:rRt*7}Xa5G`f!4]");
      // Undeclared exception!
      strSubstitutor0.replace((Object) "ibBV:rRt*7}Xa5G`f!4]");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Variable suffix must not be null.").when(strLookup0).toString();
      doReturn("Variable suffix must not be null.").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.junitpioneer.jupiter.StopwatchExtension", "org.junitpioneer.jupiter.StopwatchExtension", "#h", "org.junitpioneer.jupiter.StopwatchExtension", (String) null).when(strMatcher0).toString();
      doReturn(25, 25, (-1640)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '$', strMatcher0);
      Object object0 = new Object();
      strSubstitutor0.replace("$$$");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("maxWith cannot be negative", "maxWith cannot be negative", "maxWith cannot be negative").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'L', strMatcher0);
      strSubstitutor0.replace((Object) "maxWith cannot be negative");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(strMatcher0).toString();
      doReturn((-18)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '/', strMatcher0);
      strSubstitutor0.setVariableSuffix('/');
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Illegal range. Equal from and to wll produce an empty range.", "Illegal range. Equal from and to wll produce an empty range.", (String) null).when(strMatcher0).toString();
      doReturn(3, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'r', strMatcher0);
      strSubstitutor0.replace((CharSequence) "Illegal range. Equal from and to wll produce an empty range.", 24, 24);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "ibBV:rRt*7}Xa5G`f!4]";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("ibBV:rRt*7}Xa5G`f!4]", "ibBV:rRt*7}Xa5G`f!4]").when(strMatcher0).toString();
      doReturn((-2), 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'y', strMatcher0);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('y');
      strSubstitutor1.setEnableSubstitutionInVariables(true);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "ibBV:rRt*7}Xa5G`f!4]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("maxWith cannot be n~gative", "maxWith cannot be n~gative", "maxWith cannot be n~gative").when(strMatcher0).toString();
      doReturn((-11), (-11)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'N', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "maxWith cannot be n~gative");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (StrMatcher) null, strMatcher0, 'R');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, 'i', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, '\'');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, (String) null, (String) null, '[', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null, 'T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("$u$").when(strLookup0).toString();
      doReturn("$u$").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("J.8XUu", "J.8XUu", "dR;j9{!D67Wrn:{Xm", "dR;j9{!D67Wrn:{Xm", "dR;j9{!D67Wrn:{Xm").when(strMatcher0).toString();
      doReturn(8, 8, 504, 0, (-910)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '%', strMatcher0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn("maxWith cannot be negative").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("maxWith cannot be negative", "maxWith cannot be negative", "maxWith cannot be negative", "maxWith cannot be negative", (String) null).when(strMatcher0).toString();
      doReturn(16, 16, 16, 16).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'L', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "maxWith cannot be negative");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of maxWith cannot be negative: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "{F", "{F");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "{F");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder0, 0, 0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "SJs", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      String string0 = strSubstitutor0.replace((Object) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "Wo,X7.B", ".*{[0-9]+}.*", '1');
      char char0 = strSubstitutor0.getEscapeChar();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "D4V[", "");
      strSubstitutor0.setEscapeChar('k');
      assertEquals('k', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "SJs", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      strSubstitutor0.setVariableResolver(strLookup0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('$', char0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Dy:X4-r}uq*T6WUQ", "Dy:X4-r}uq*T6WUQ", '{', "Dy:X4-r}uq*T6WUQ");
      strSubstitutor0.isEnableSubstitutionInVariables();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('{', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, (StrMatcher) null, '\u0092', (StrMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "?=Q}Xrv", "T `Yh2Kxh.\"6 E'");
      strSubstitutor0.setVariableSuffix('$');
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      StrSubstitutor strSubstitutor2 = strSubstitutor1.setValueDelimiter('x');
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = 'x';
      charArray0[3] = '$';
      String string0 = strSubstitutor2.replace(charArray0);
      assertEquals('$', strSubstitutor2.getEscapeChar());
      assertFalse(strSubstitutor2.isPreserveEscapes());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariablePrefix('8');
      String string0 = strSubstitutor0.replace((Object) "6t; t8.8;Uu}");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "{F", "{F");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('$');
      strSubstitutor1.setVariablePrefix('U');
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '$';
      strSubstitutor0.replace(charArray0);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix('$');
      StringBuffer stringBuffer0 = new StringBuffer("$$\u0000$$");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix('.');
      String string0 = strSubstitutor0.replace((Object) "6t; t8.8;Uu}");
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("6t; t8.8;Uu}", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix(' ');
      assertFalse(strSubstitutor1.isPreserveEscapes());
      
      strSubstitutor1.setPreserveEscapes(true);
      char[] charArray0 = new char[10];
      charArray0[5] = '$';
      charArray0[6] = ' ';
      String string0 = strSubstitutor0.replace(charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000$ \u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn("Ezpectm exc'ptin %s gas)&ot thr)wn.").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Ezpectm exc'ptin %s gas)&ot thr)wn.", "Ezpectm exc'ptin %s gas)&ot thr)wn.", "Ezpectm exc'ptin %s gas)&ot thr)wn.", "Ezpectm exc'ptin %s gas)&ot thr)wn.", "Ezpectm exc'ptin %s gas)&ot thr)wn.").when(strMatcher0).toString();
      doReturn(2, 2, 2, 2).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("f2Akssb", 2, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of Aks: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Usinxboth amaqidep p!rVmeperajeRJng #n a*Ji-gZe @Di-pleIfASgmBntis n5!u5er4itBe;.");
      char[] charArray0 = new char[8];
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '{';
      stringBuilder0.insert(4, charArray0);
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder0, 4, 16);
      assertEquals("Usin\u0000\u0000\u0000${\u0000\u0000xboth amaqidep p!rVmeperajeRJng #n a*Ji-gZe @Di-pleIfASgmBntis n5!u5er4itBe;.", stringBuilder0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null, (int) '$', (int) '$');
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('9');
      StringBuffer stringBuffer0 = new StringBuffer("?@L$HVF$9Id");
      boolean boolean0 = strSubstitutor1.replaceIn(stringBuffer0);
      assertEquals(10, stringBuffer0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, (int) '$', (int) '$');
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) null, (int) '$', (int) '$');
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((CharSequence) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((StringBuffer) null, (int) '$', (int) '$');
      assertNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((StringBuffer) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = strSubstitutor0.replace(stringBuffer0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((char[]) null, 5, 5);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((char[]) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[0];
      String string0 = strSubstitutor0.replace(charArray0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace("Using both name and index parameter targeting in a single @DisableIfArgment is not permitted.", (int) '$', (int) '$');
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals("targeting in a single @DisableIfArgm", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null, (int) '$', (int) '$');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("8;FsXzTe\"OVeL", (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariablePrefix('v');
      String string0 = strSubstitutor0.replace("$$v\u0000v$");
      assertEquals("$v\u0000v$", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Properties properties0 = new Properties();
      StringReader stringReader0 = new StringReader("vrCN+@/");
      properties0.load((Reader) stringReader0);
      String string0 = StrSubstitutor.replace((Object) null, properties0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor.replace((Object) strSubstitutor0, (Properties) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.isPreserveEscapes();
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) strSubstitutor0, (Map<String, String>) hashMap0, ")", ")");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "", 'L');
      StringBuffer stringBuffer0 = new StringBuffer("sU^/6&3,f0rkr'd7Z7");
      String string0 = strSubstitutor0.replace(stringBuffer0, 0, 1);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('L', strSubstitutor0.getEscapeChar());
      assertEquals("s", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('$');
      StrSubstitutor strSubstitutor2 = strSubstitutor1.setVariablePrefix('$');
      strSubstitutor2.setValueDelimiter((String) null);
      StringBuffer stringBuffer0 = new StringBuffer("?@L$HVF$9Id");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor.replaceSystemProperties(strSubstitutor0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) hashMap0, (Map<String, String>) hashMap0);
      assertNotNull(string0);
  }
}
