/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:39:41 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3964);
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(3964, (-3877), (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((int[]) null);
      float[] floatArray0 = new float[9];
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(floatArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((-1L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-8);
      hashCodeBuilder3.append(byteArray0);
      int int0 = hashCodeBuilder3.toHashCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = hashCodeBuilder0.toHashCode();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      String[] stringArray0 = new String[5];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, stringArray0);
      //  // Unstable assertion: assertEquals(23464, int0);
      //  // Unstable assertion: assertEquals(17, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) " j^2*#RTZf", (String[]) null);
      assertEquals((-1099772658), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "/>'XE+X.$YQ", true);
      //  // Unstable assertion: assertEquals((-60717646), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "E;Ih%H", (Collection<String>) linkedHashSet0);
      assertEquals((-517879156), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, hashCodeBuilder0.toHashCode());
      
      Integer integer0 = new Integer((-839));
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[6];
      int int0 = HashCodeBuilder.reflectionHashCode((-1), 5, integer0, false, (Class<? super Integer>) class0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = HashCodeBuilder.reflectionHashCode((-1), (-1), (Object) hashCodeBuilder0, true);
      assertEquals(17, (int)hashCodeBuilder0.build());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(32);
      int int0 = HashCodeBuilder.reflectionHashCode(1, 1, (Object) integer0, false);
      //  // Unstable assertion: assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-403));
      int int0 = HashCodeBuilder.reflectionHashCode((-403), (-403), (Object) integer0);
      //  // Unstable assertion: assertEquals(162414, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = HashCodeBuilder.isRegistered(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((-629));
      hashCodeBuilder0.build();
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('L');
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-109);
      byteArray0[3] = (byte) (-1);
      hashCodeBuilder1.append(byteArray0);
      hashCodeBuilder0.build();
      assertEquals((-9285913), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.appendSuper((-4869));
      assertEquals((-4868), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper((-1));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      hashCodeBuilder1.append(booleanArray0);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((-629));
      short[] shortArray0 = new short[2];
      hashCodeBuilder0.append(shortArray0);
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 17);
      hashCodeBuilder0.appendSuper(17);
      hashCodeBuilder0.append((Object[]) null);
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[7];
      hashCodeBuilder0.append(objectArray0);
      assertEquals((-1065792035), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 727);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 727;
      hashCodeBuilder0.append(longArray0);
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((float) (short) (-330));
      Integer integer0 = new Integer(3964);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((Object) integer0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(false);
      hashCodeBuilder3.append((int[]) null);
      assertEquals((-531156264), hashCodeBuilder3.toHashCode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-330);
      hashCodeBuilder0.append(doubleArray0);
      assertEquals((-1066098059), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((-629));
      char[] charArray0 = new char[0];
      hashCodeBuilder0.append(charArray0);
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      char[] charArray0 = new char[7];
      charArray0[2] = 'j';
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(charArray0);
      byte[] byteArray0 = new byte[2];
      hashCodeBuilder1.append(byteArray0);
      assertEquals((-1691322865), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.appendSuper((-1));
      hashCodeBuilder0.append(true);
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      Integer integer0 = new Integer(1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((Object) integer0);
      hashCodeBuilder1.append((short)3);
      assertEquals(0, (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[10];
      hashCodeBuilder0.append(shortArray0);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-341));
      Integer integer0 = new Integer(3964);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((Object) integer0);
      hashCodeBuilder2.append(false);
      assertEquals((-1863228605), hashCodeBuilder0.toHashCode());
      assertEquals((-1863228605), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper((-1));
      Object[] objectArray0 = new Object[5];
      hashCodeBuilder1.append(objectArray0[0]);
      assertEquals(0, hashCodeBuilder0.toHashCode());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-245), (-321));
      hashCodeBuilder0.append('N');
      Integer integer0 = new Integer(2737);
      hashCodeBuilder0.append((Object) integer0);
      assertEquals((-25270081), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(2885, 2885);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(true);
      hashCodeBuilder1.append((long) 2885);
      assertEquals((-1757296766), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-629));
      hashCodeBuilder1.append((-1L));
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-245), (-321));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('N');
      hashCodeBuilder1.append((-245));
      assertEquals((-25270328), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      hashCodeBuilder1.append(0.0F);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(0.0F);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = new Integer(0);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((Object) integer0);
      float[] floatArray0 = new float[5];
      hashCodeBuilder1.append(floatArray0);
      hashCodeBuilder0.append((double) 0.0F);
      assertEquals((-229306513), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 17);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(17);
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) hashCodeBuilder1;
      objectArray0[2] = (Object) hashCodeBuilder0;
      HashCodeBuilder.reflectionHashCode((-1), (-1), objectArray0[2]);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(objectArray0);
      hashCodeBuilder2.append('L');
      assertEquals((-1282139129), hashCodeBuilder1.toHashCode());
      assertEquals((-1282139129), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte)37);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      hashCodeBuilder1.append(booleanArray0);
      assertEquals((-1), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-901), (-901), (String) null, true, (Class<? super String>) class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[15];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-870), (-870), "$", false, (Class<? super String>) class0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(24, 24, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(2892, 2892, (Object) "W", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      char[] charArray0 = new char[6];
      hashCodeBuilder0.append(charArray0);
      assertEquals(667675993, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer((-297));
      Class<Integer> class0 = Integer.TYPE;
      int int0 = HashCodeBuilder.reflectionHashCode((-297), (-297), integer0, false, (Class<? super Integer>) class0, (String[]) null);
      //  // Unstable assertion: assertEquals(88214, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((byte)3);
      assertEquals(632, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      int int0 = hashCodeBuilder0.toHashCode();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((long[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      long[] longArray0 = new long[8];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(longArray0);
      assertEquals((-1), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((int[]) null);
      float[] floatArray0 = new float[9];
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(floatArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((-1L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-8);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(byteArray0);
      hashCodeBuilder4.append(floatArray0);
      assertEquals(0, hashCodeBuilder1.toHashCode());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((double[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((char[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((byte[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((boolean[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(37, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder((-4994), (-4994));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedHashSet0, (Collection<String>) linkedHashSet0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(1.5);
      assertEquals(1073218165, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((-901), (-731436269), (Object) "$", false);
      //  // Unstable assertion: assertEquals(2054747894, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(1646);
      assertEquals(2275, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) '-', true);
      //  // Unstable assertion: assertEquals(634, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short)20);
      assertEquals(649, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((float) (short) (-330));
      Integer integer0 = new Integer(3964);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((Object) integer0);
      hashCodeBuilder2.append(false);
      hashCodeBuilder1.append((byte)0);
      assertEquals((-531156264), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[1];
      int int0 = HashCodeBuilder.reflectionHashCode((-901), (-901), "$", false, (Class<? super String>) class0, stringArray0);
      assertEquals((-731436269), int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(42, 42, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.hashCode();
      assertEquals(17, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(2885, 2885);
      hashCodeBuilder0.appendSuper(2885);
      assertEquals(8326110, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(17, (int)integer0);
  }
}
