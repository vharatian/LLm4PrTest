/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:30:41 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CompareToBuilder_ESTest extends CompareToBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      float[] floatArray0 = new float[0];
      long[] longArray0 = new long[5];
      compareToBuilder0.append(longArray0, (long[]) null);
      compareToBuilder0.append(floatArray0, floatArray0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1770.5;
      compareToBuilder0.append(doubleArray0, doubleArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((-678), 1925);
      double[] doubleArray0 = new double[4];
      compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byte[] byteArray1 = new byte[9];
      compareToBuilder0.append(byteArray0, byteArray1);
      assertEquals((-126), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-678), 1925);
      byte[] byteArray0 = new byte[7];
      compareToBuilder1.append(byteArray0, byteArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[6];
      char[] charArray1 = new char[6];
      charArray1[0] = 'd';
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals((-100), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, true);
      char[] charArray0 = new char[8];
      compareToBuilder1.append(charArray0, charArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[9];
      short[] shortArray1 = new short[9];
      shortArray1[0] = (short)64;
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals((-64), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      long[] longArray0 = new long[2];
      longArray0[0] = 424L;
      long[] longArray1 = new long[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1);
      short[] shortArray0 = new short[7];
      compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1989;
      int[] intArray1 = new int[7];
      compareToBuilder0.append(intArray0, intArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper(5);
      int[] intArray0 = new int[8];
      compareToBuilder0.append(intArray0, intArray0);
      assertEquals(5, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, true);
      long[] longArray0 = new long[4];
      compareToBuilder1.append(longArray0, longArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = new Integer(32);
      String[] stringArray0 = new String[7];
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      compareToBuilder0.append((Object[]) stringArray0, objectArray0);
      compareToBuilder0.append((boolean[]) null, (boolean[]) null);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[3];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object[]) null, objectArray0, comparator0);
      compareToBuilder0.append(false, false);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[8];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short[]) null, shortArray0);
      compareToBuilder1.append('\"', '}');
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[7];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((boolean[]) null, booleanArray0);
      compareToBuilder1.append(0, 0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((-1285));
      compareToBuilder1.append((-986L), 1234L);
      assertEquals((-1285), compareToBuilder0.toComparison());
      assertEquals((-1285), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray1, intArray0);
      Object object0 = new Object();
      compareToBuilder1.append(object0, (Object) intArray1[2]);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[4];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1.0F;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray1);
      compareToBuilder1.appendSuper(2216);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[6];
      compareToBuilder0.append(intArray1, intArray0);
      int int0 = compareToBuilder0.toComparison();
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((-678), 1925);
      int int0 = compareToBuilder0.toComparison();
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      String[] stringArray0 = new String[5];
      int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) compareToBuilder0, stringArray0);
      assertEquals(0, (int)compareToBuilder0.build());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(32);
      String[] stringArray0 = new String[7];
      Integer integer1 = new Integer(23);
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, stringArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      String[] stringArray0 = new String[1];
      Integer integer1 = new Integer((-1505));
      int int0 = CompareToBuilder.reflectionCompare((Object) integer1, (Object) integer0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger("", 2199);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[0];
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, true, (Class<?>) class0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer((-2134));
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(249);
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare(object0, object0, (Collection<String>) linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer((-491));
      Integer integer1 = Integer.getInteger("", 2151);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) integer1, (Object) integer0, (Collection<String>) linkedList0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = Integer.getInteger("1q{Da/?Rr[i!z~BUoq", 2199);
      Integer integer1 = new Integer(3129);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, (Collection<String>) linkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      long[] longArray0 = new long[2];
      longArray0[0] = 424L;
      long[] longArray1 = new long[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1);
      Integer integer0 = compareToBuilder1.build();
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper((-50));
      compareToBuilder0.build();
      assertEquals((-50), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) compareToBuilder0, (Object) compareToBuilder0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((long) (short) (-652), (long) (byte) (-67));
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-678), 1925);
      compareToBuilder1.append((float) 1925, (-1777.0189F));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[3];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object[]) null, objectArray0, comparator0);
      compareToBuilder1.append(466.956950156884, (-1.0));
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append('\"', '}');
      assertEquals((-91), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((byte) (-84), (byte) (-61));
      assertEquals((-23), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "Extension context \"", object0, (String[]) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      String[] stringArray0 = new String[0];
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object0, (Object) null, true, class0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) "L", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "3zZxLm<Mpp@g", object0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "", object0, (Collection<String>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) compareToBuilder0;
      objectArray0[1] = (Object) compareToBuilder0;
      objectArray0[2] = (Object) compareToBuilder0;
      objectArray0[3] = (Object) compareToBuilder0;
      Object object0 = new Object();
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) compareToBuilder0;
      objectArray1[1] = (Object) compareToBuilder0;
      objectArray1[2] = (Object) compareToBuilder0;
      objectArray1[3] = object0;
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      objectArray1[1] = object0;
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray0, objectArray1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        compareToBuilder0.append(object0, object1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      char[] charArray0 = new char[21];
      char[] charArray1 = new char[8];
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[2];
      char[] charArray1 = new char[8];
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) compareToBuilder0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      compareToBuilder0.append(objectArray0, (Object[]) stringArray0, (Comparator<?>) comparator0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[7];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object[] objectArray0 = new Object[6];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      compareToBuilder0.append(objectArray0, (Object[]) stringArray0, (Comparator<?>) comparator0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[5];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, (Object[]) stringArray0, (Comparator<?>) comparator0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0, (Comparator<?>) null);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Integer integer0 = Integer.valueOf(1124);
      Integer integer1 = new Integer((-512));
      compareToBuilder0.append((Object) integer0, (Object) integer1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object[]) null, (Object[]) null, comparator0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-245.0F), (-245.0F));
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1.0), (-1.0));
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('P', 'P');
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short) (-1484), (short) (-1484));
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compareToBuilder0.append(object0, (Object) "ZoGm!Z*~_ez6MjWdS5", (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object object0 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(object0, (Object) null, comparator0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = new Integer((-283));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) null, (Object) integer0, (Comparator<?>) comparator0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) "9qJ6XYS:jd8_:S", (Object) "9qJ6XYS:jd8_:S", (Comparator<?>) comparator0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object[]) null, objectArray0, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(object0, (Object) "WD+&hcxb3okn{N<", (Comparator<?>) comparator1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      String[] stringArray0 = new String[0];
      int int0 = CompareToBuilder.reflectionCompare((Object) "0gK**", (Object) "9n", true, (Class<?>) class0, stringArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "StdIo_Std_In", object0, true, (Class<?>) class0, stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[7];
      int int0 = CompareToBuilder.reflectionCompare(object0, object0, false, class0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object0, (Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int int0 = compareToBuilder0.toComparison();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[10];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[2];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[7];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[0];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray1);
      compareToBuilder1.append(booleanArray1, booleanArray1);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      boolean[] booleanArray0 = new boolean[0];
      compareToBuilder0.append(booleanArray0, (boolean[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[0];
      compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      float[] floatArray0 = new float[0];
      compareToBuilder0.append(floatArray0, (float[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[1];
      compareToBuilder0.append((float[]) null, floatArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[3];
      compareToBuilder0.append(floatArray0, floatArray1);
      compareToBuilder0.append(floatArray0, floatArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 2640.0;
      compareToBuilder0.append(doubleArray1, doubleArray0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      double[] doubleArray0 = new double[4];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, (double[]) null);
      compareToBuilder1.append((short) (-2766), (short)1883);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[0];
      compareToBuilder0.append((double[]) null, doubleArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(888);
      compareToBuilder1.append(doubleArray0, doubleArray0);
      assertEquals(888, (int)compareToBuilder0.build());
      assertEquals(888, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)40;
      compareToBuilder0.append(byteArray1, byteArray0);
      assertEquals(40, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[10];
      compareToBuilder0.append(byteArray0, byteArray1);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      byte[] byteArray0 = new byte[9];
      compareToBuilder0.append(byteArray0, (byte[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[1];
      compareToBuilder0.append((byte[]) null, byteArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder0.append(byteArray0, byteArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte[]) null, (byte[]) null);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[0];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "UuUl=D6evt/PM7Qj", (Object) "Only one method-level arguments source can be used with @CartesianTest");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      char[] charArray0 = new char[0];
      compareToBuilder0.append(charArray0, (char[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[0];
      compareToBuilder0.append((char[]) null, charArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((char[]) null, (char[]) null);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(12);
      char[] charArray0 = new char[2];
      compareToBuilder1.append(charArray0, charArray0);
      assertEquals(12, (int)compareToBuilder0.build());
      assertEquals(12, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)6;
      short[] shortArray1 = new short[10];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(6, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[2];
      short[] shortArray1 = new short[3];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      short[] shortArray0 = new short[2];
      short[] shortArray1 = new short[1];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      short[] shortArray0 = new short[7];
      compareToBuilder0.append(shortArray0, (short[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short[]) null, (short[]) null);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((-2776));
      short[] shortArray0 = new short[0];
      compareToBuilder1.append(shortArray0, shortArray0);
      assertEquals((-2776), (int)compareToBuilder0.build());
      assertEquals((-2776), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[2];
      intArray1[0] = 16;
      compareToBuilder0.append(intArray0, intArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[4];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[10];
      compareToBuilder0.append(intArray0, intArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      int[] intArray0 = new int[1];
      compareToBuilder0.append(intArray0, (int[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((-1253));
      int[] intArray0 = new int[9];
      compareToBuilder1.append(intArray0, intArray0);
      assertEquals((-1253), (int)compareToBuilder0.build());
      assertEquals((-1253), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[0];
      compareToBuilder0.append((int[]) null, intArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[2];
      longArray1[0] = 1L;
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[1];
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[9];
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray1);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray0, longArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(769);
      compareToBuilder1.append((long[]) null, (long[]) null);
      assertEquals(769, (int)compareToBuilder0.build());
      assertEquals(769, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[1];
      compareToBuilder0.append((long[]) null, longArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[2];
      compareToBuilder0.append(objectArray0, objectArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[0];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      char[] charArray1 = new char[3];
      compareToBuilder0.append(charArray0, charArray1);
      Object[] objectArray0 = new Object[2];
      compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(78, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append(true, false);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(true, true);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = new float[4];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray1, floatArray0);
      compareToBuilder1.append(false, false);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, true);
      compareToBuilder1.append((byte)127, (byte)127);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      compareToBuilder1.append(0.0F, 0.0F);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object[] objectArray0 = new Object[7];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, (Object[]) null, comparator0);
      compareToBuilder1.append((-32.6250408778416), (-1.0));
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[6];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte)110, (byte)5);
      compareToBuilder1.append((byte)5, (byte)110);
      assertEquals(105, (int)compareToBuilder0.build());
      assertEquals(105, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte) (-14), (byte) (-14));
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(6);
      compareToBuilder1.append(',', ',');
      assertEquals(6, (int)compareToBuilder0.build());
      assertEquals(6, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "dNsuj>{", (Object) "JeQJ+KF");
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[11];
      compareToBuilder0.append(floatArray0, floatArray1);
      compareToBuilder0.append((short)16, (short)16);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper(',');
      compareToBuilder0.append((int) ',', (int) ',');
      assertEquals(44, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1011), (-1011));
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper(494);
      compareToBuilder0.append((-1L), (-1L));
      assertEquals(494, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1442L), (-1442L));
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) comparator0, object0, (Comparator<?>) comparator0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[2];
      compareToBuilder0.append(objectArray0[0], (Object) compareToBuilder0);
      compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper(2683);
      compareToBuilder0.appendSuper(2683);
      assertEquals(2683, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[1];
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, true, (Class<?>) class0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "", object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "nLtjg,L?E", (Object) null, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = compareToBuilder0.build();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "", false);
      assertEquals(0, int0);
  }
}
