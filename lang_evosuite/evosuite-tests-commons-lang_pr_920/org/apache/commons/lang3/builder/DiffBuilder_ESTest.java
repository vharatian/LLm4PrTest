/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 01:33:00 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.apache.commons.lang3.builder.DiffBuilder;
import org.apache.commons.lang3.builder.DiffResult;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DiffBuilder_ESTest extends DiffBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(655);
      Integer integer1 = new Integer(7);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (double) 655, 758.7061904);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(5);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 'z', '~');
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(34);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte)30, (byte)1);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (boolean[]) null, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(2167);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short[]) null, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (Object[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-996000582));
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, longArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(822);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, floatArray0, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      Integer integer0 = new Integer(0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2519));
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, charArray0, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0, false);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, byteArray0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(2160);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer(93);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short)15, (short)15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(2838);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$5", (DiffResult<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Diff result cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer((-1146));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (Object) null, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-2432));
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (long) (-2432), (long) (-2432));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer((-1146));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (-1146), (-1146));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(2160);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (float) 2160, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(2238);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (double) 2238, (double) 2238);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, '2', '2');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(2873);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (byte)0, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiffBuilder<Integer> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Integer>((Integer) null, (Integer) null, (ToStringStyle) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Integer>((Integer) null, (Integer) null, toStringStyle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(2162);
      Integer integer1 = new Integer(32);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", diffResult0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(655);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      Object[] objectArray0 = new Object[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", objectArray0, objectArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-184));
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      Object[] objectArray0 = new Object[6];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("1hAH`C! dmBvvX4,kEv", objectArray0, objectArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer(1594);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      Integer integer1 = new Integer(1594);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (Object) integer1, (Object) integer0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-1745));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("&oslash;", (Object) null, (Object) "&oslash;");
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-4606));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(".z", (Object) integer0, (Object) integer0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(109);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("sz%Ez]]|-Av{3[.vt'", (Object) integer0, (Object) integer0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(34);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      short[] shortArray0 = new short[9];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("CW+lD4`", shortArray0, shortArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(2105);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, true);
      short[] shortArray0 = new short[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Invalid exceptionStatus", shortArray0, shortArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-74));
      Integer integer1 = new Integer(0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("UwVz}yPc=m##F", (short)197, (short)197);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(181);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult0, diffResult0, toStringStyle0);
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append(".4y;@D", (short) (byte)0, (short) (byte) (-92));
      assertSame(diffBuilder2, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(34);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (long[]) null, (long[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(1469);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      long[] longArray0 = new long[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("sHSe>YhTt 3,U;4,2", longArray0, longArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer(1569);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Comparator should not be null.", (long) 1569, (long) 1569);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Nf", (-1669L), (long) 0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(655);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      int[] intArray0 = new int[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", intArray0, intArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      int[] intArray0 = new int[7];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Nf", intArray0, intArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-4606));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(".z", 0, 0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(109);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("F2l", (int) (byte) (-74), 392);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-4606));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      float[] floatArray0 = new float[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Tr", floatArray0, floatArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(181);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult0, diffResult0, toStringStyle0);
      float[] floatArray0 = new float[9];
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("J-q56n|JHA", floatArray0, floatArray0);
      assertSame(diffBuilder1, diffBuilder2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer((-1745));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (float) (-1745), (float) (-1745));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(181);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult0, diffResult0, toStringStyle0);
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("", (-291.0F), (-1.0F));
      assertSame(diffBuilder2, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(34);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      double[] doubleArray0 = new double[6];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(",6yU:-x5@^w", doubleArray0, doubleArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      double[] doubleArray0 = new double[7];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Nf", doubleArray0, doubleArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (double) 0, (double) 0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (double) 202, (double) (-1));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer(1);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      char[] charArray0 = new char[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("&cup;", charArray0, charArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (char[]) null, (char[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(34);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", '~', '~');
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(109);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("char", '[', '[');
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(7082);
      Integer integer1 = new Integer(2021);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      byte[] byteArray0 = new byte[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("CPobmvwOP", byteArray0, byteArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer(109);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      byte[] byteArray0 = new byte[6];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", byteArray0, byteArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte)46, (byte)46);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      boolean[] booleanArray0 = new boolean[9];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$5", booleanArray0, booleanArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(109);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      boolean[] booleanArray0 = new boolean[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("char", booleanArray0, booleanArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(7082);
      Integer integer1 = new Integer(2021);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", true, true);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", true, true);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, recursiveToStringStyle0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer((-2455));
      Integer integer1 = new Integer(7);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      int[] intArray0 = new int[4];
      diffBuilder0.append("k`E6v^t06uu^J", intArray0, (int[]) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append("Digf result cannot be null", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(65499);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer1 = new Integer((-1166));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$8", 1.5, 0.0);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$8", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer((-3645));
      Integer integer1 = new Integer(39);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 39, (-3645));
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(7082);
      Integer integer1 = new Integer(2021);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("`{GOz#s&28&", 75, 1392);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer(2240);
      Integer integer1 = new Integer(7);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      char[] charArray0 = new char[16];
      diffBuilder0.append("", charArray0, (char[]) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer((-1745));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", floatArray0, floatArray1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("wv4#(N^gH(11_4", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer(2162);
      Integer integer1 = new Integer(32);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      diffBuilder0.append("", (float) 32, (float) 2162);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-4606));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 918.0F, (float) (-4606));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer(637);
      Integer integer1 = new Integer((-111));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[1];
      diffBuilder0.append("", doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = new Integer(2184);
      Integer integer1 = new Integer(32);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", shortArray0, shortArray1);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Integer integer0 = new Integer(2153);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      diffBuilder0.append("mG&", (short)70, (short)1);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("mG&", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Integer integer0 = new Integer(34);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(",6yU:-x5@^w", (short) (byte)0, (short)1170);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer((-996000578));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer1 = new Integer(0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("&uml;", longArray0, longArray1);
      // Undeclared exception!
      try { 
        diffBuilder1.append("Q{%RCR#e+$pt67 '", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer((-996000563));
      Integer integer1 = new Integer(36);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$9", (long) 36, (long) (-996000563));
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-4606));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(".z", (long) (-4606), (-1L));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Integer integer0 = new Integer((-2272));
      Integer integer1 = new Integer(7);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) toStringStyle0;
      Object[] objectArray1 = new Object[1];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", objectArray0, objectArray1);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer(45);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("7?YNm", (Object) integer0, (Object) standardToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("7?YNm", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(9);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
      diffBuilder0.append("", (byte)18, (byte)59);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      diffResult0.toString((ToStringStyle) standardToStringStyle0);
      assertEquals(1, diffResult0.getNumberOfDiffs());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Integer integer0 = new Integer(2184);
      Integer integer1 = new Integer(32);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      boolean[] booleanArray0 = new boolean[2];
      diffBuilder0.append("", (boolean[]) null, booleanArray0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Integer integer0 = new Integer((-2225));
      Integer integer1 = new Integer((-184));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, standardToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 'P', '(');
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Integer integer0 = new Integer(1392);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      Integer integer1 = new Integer(1154);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[3];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("&Gamma;", byteArray0, byteArray1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Integer integer0 = new Integer((-2210));
      Integer integer1 = new Integer((-1709));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, standardToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      diffBuilder0.append("", false, true);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("S}rd+{n", diffResult0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer(34);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("a]xgnH<zwQU", (byte)0, (byte)0);
      assertSame(diffBuilder1, diffBuilder0);
  }
}
