/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:18:58 GMT 2025
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1981, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1981,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1981, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1981,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1981, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", fastDateParser0.getPattern());
      
      Date date0 = fastDateParser0.parse("pacific/tahiti");
      assertNotNull(date0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1981,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1981, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertNotNull(timeZone1);
      assertSame(simpleTimeZone0, timeZone1);
      assertSame(timeZone1, simpleTimeZone0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1981,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1981, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", fastDateParser0.getPattern());
      assertFalse(timeZone1.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1981,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone1.toString());
      assertEquals(1981, timeZone1.getRawOffset());
      assertEquals(0, timeZone1.getDSTSavings());
      assertEquals("", timeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{K}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = new FastDateParser("(Z|(?:[+-]d{K}d{2}))", timeZone0, locale0);
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser1.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 2, 688, 90, 0);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = fastDateParser1.parse("(Z|(?:[+-]d{K}d{2}))", parsePosition0, (Calendar) mockGregorianCalendar0);
      assertFalse(boolean0);
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser1.getPattern());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals(1, parsePosition0.getErrorIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=688,HOUR_OF_DAY=688,MINUTE=90,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("', '", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("', '", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = new FastDateParser("", timeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertTrue(boolean0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(fastDateParser0.equals((Object)fastDateParser1));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      TimeZone timeZone0 = TimeZone.getTimeZone(" 9'4");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = "";
      FastDateParser fastDateParser0 = new FastDateParser("F6", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("F6", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{K}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = new FastDateParser("[){", timeZone0, locale0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("[){", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
      assertEquals("[){", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{K}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.FRANCE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr_FR", locale1.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("X", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("X", fastDateParser0.getPattern());
      
      String string0 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=X, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=en, century=1900, startYear=34, patterns=[StrategyAndWidth [strategy=ISO8601TimeZoneStrategy [pattern=(Z|(?:[+-]\\d{2}))], width=1]]]", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("X", fastDateParser0.getPattern());
      
      Locale locale2 = fastDateParser0.getLocale();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("X", fastDateParser0.getPattern());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("en", locale2.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      
      String string0 = "', '";
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      FastDateParser fastDateParser0 = new FastDateParser("', '", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("', '", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("{arguments}", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("wF-", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("wF-", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(60);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(60, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=60,errorIndex=-1]", parsePosition0.toString());
      
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{K}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
      
      String string0 = fastDateParser0.toStringAll();
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{K}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("my", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("my", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|<?:[+-]6d{2}?{2}))", timeZone0, locale0, (Date) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("w-u", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("w-u", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(4);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(4, parsePosition0.getIndex());
      
      Object object0 = fastDateParser0.parseObject("'%>}8IGK", parsePosition0);
      assertNull(object0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("w-u", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=5,errorIndex=5]", parsePosition0.toString());
      assertEquals(5, parsePosition0.getIndex());
      assertEquals(5, parsePosition0.getErrorIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        fastDateParser_TimeZoneStrategy0.setCalendar(fastDateParser0, mockGregorianCalendar0, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      
      String string0 = "y";
      FastDateParser fastDateParser0 = new FastDateParser("y", timeZone0, locale0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("y", fastDateParser0.getPattern());
      
      int int0 = 116;
      ParsePosition parsePosition0 = new ParsePosition(116);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(116, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=116,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = fastDateParser0.parse("n En>'$\u0001'q", parsePosition0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNull(date0);
      assertNotSame(timeZone0, timeZone1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("y", fastDateParser0.getPattern());
      assertEquals(116, parsePosition0.getIndex());
      assertEquals(116, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=116,errorIndex=116]", parsePosition0.toString());
      
      try { 
        fastDateParser0.parse("y");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: y
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("y", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("y", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("y");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: y
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("my", timeZone0, locale0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("my", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(60);
      assertNotNull(parsePosition0);
      assertEquals(60, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=60,errorIndex=-1]", parsePosition0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = fastDateParser0.parse("W%UgN 2vs", parsePosition0, (Calendar) mockGregorianCalendar0);
      assertFalse(boolean0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotSame(timeZone0, timeZone1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("my", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=60,errorIndex=60]", parsePosition0.toString());
      assertEquals(60, parsePosition0.getErrorIndex());
      assertEquals(60, parsePosition0.getIndex());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      try { 
        fastDateParser0.parse("my");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: my
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string0 = "w-su";
      String string1 = "my";
      FastDateParser fastDateParser0 = new FastDateParser("my", timeZone0, locale0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("my", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-1877));
      assertNotNull(parsePosition0);
      assertEquals((-1877), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=-1877,errorIndex=-1]", parsePosition0.toString());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("Invalid exceptionStatus", parsePosition0, calendar0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("w-u", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("w-u", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      ParsePosition parsePosition0 = new ParsePosition(698);
      assertNotNull(parsePosition0);
      assertEquals(698, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=698,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = fastDateParser0.parse("w-u", parsePosition0);
      assertNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("w-u", fastDateParser0.getPattern());
      assertEquals(698, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=698,errorIndex=698]", parsePosition0.toString());
      assertEquals(698, parsePosition0.getErrorIndex());
      
      try { 
        fastDateParser0.parse("w-u");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: w-u
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string0 = "w-u";
      FastDateParser fastDateParser0 = new FastDateParser("w-u", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("w-u", fastDateParser0.getPattern());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      try { 
        fastDateParser0.parse("6[jpOC'8doA\"8");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: 6[jpOC'8doA\"8
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("(|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("(|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("(|(?:[+-]d{2}d{2}))");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: (|(?:[+-]d{2}d{2}))
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("w-su", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("w-su", fastDateParser0.getPattern());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("G`c5}G<{TEFN\">N1E", timeZone0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'c' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'T' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("(H;<?:[+-]6d{2}?{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("(H;<?:[+-]6d{2}?{2}))", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|<?:[+-]6d{2}?{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("(Z|<?:[+-]6d{2}?{2}))", fastDateParser0.getPattern());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("(Z|<?:[+-]6d{2}?{2}))", fastDateParser0.getPattern());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(Z|<?:[+-]6d{2}?{2}))", (ParsePosition) null, calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      TimeZone timeZone1 = TimeZone.getTimeZone("");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale1 = Locale.JAPAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale1);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(locale1);
      assertFalse(boolean0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(timeZone0, timeZone1);
      assertNotSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      String string0 = fastDateParser0.getPattern();
      assertEquals("", string0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(timeZone0, timeZone1);
      assertNotSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("my", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("my", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = new FastDateParser("my", timeZone0, locale0);
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("my", fastDateParser1.getPattern());
      
      try { 
        fastDateParser1.parse(")");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: )
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("my", timeZone0, locale0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("my", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("my");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: my
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(9);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=9,errorIndex=-1]", parsePosition0.toString());
      assertEquals(9, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date0 = fastDateParser0.parse("(Z|(?:[+-]d{2}d{2}))", parsePosition0);
      assertNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=9,errorIndex=9]", parsePosition0.toString());
      assertEquals(9, parsePosition0.getIndex());
      assertEquals(9, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse(" annotation, but there were ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date:  annotation, but there were 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CHINA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("' not supported", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("my", timeZone0, locale0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("my", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(60000);
      assertNotNull(parsePosition0);
      assertEquals(60000, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=60000,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date0 = fastDateParser0.parse("w-su", parsePosition0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNull(date0);
      assertNotSame(timeZone0, timeZone1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("my", fastDateParser0.getPattern());
      assertEquals(60000, parsePosition0.getIndex());
      assertEquals(60000, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=60000,errorIndex=60000]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      Locale locale1 = Locale.JAPAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja_JP", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      
      ParsePosition parsePosition0 = new ParsePosition(9);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=9,errorIndex=-1]", parsePosition0.toString());
      assertEquals(9, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      FastDateParser fastDateParser0 = new FastDateParser("w-su", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("w-su", fastDateParser0.getPattern());
      
      Date date0 = fastDateParser0.parse("w-su", parsePosition0);
      assertFalse(locale0.equals((Object)locale1));
      assertNull(date0);
      assertNotSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("java.text.ParsePosition[index=9,errorIndex=9]", parsePosition0.toString());
      assertEquals(9, parsePosition0.getIndex());
      assertEquals(9, parsePosition0.getErrorIndex());
      assertEquals("w-su", fastDateParser0.getPattern());
      
      System.setCurrentTimeMillis(320L);
      boolean boolean0 = fastDateParser0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("w-su", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("w-su", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("w-su", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(109);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(109, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=109,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = fastDateParser0.parse("w-su", parsePosition0);
      assertNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("w-su", fastDateParser0.getPattern());
      assertEquals(109, parsePosition0.getErrorIndex());
      assertEquals(109, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=109,errorIndex=109]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertFalse(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("UTC", timeZone1.getID());
      
      String string0 = "blank_blank_blank_2014";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("blank_blank_blank_2014", timeZone1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'b' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("y7ub", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'b' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      String string0 = "w-su";
      FastDateParser fastDateParser0 = new FastDateParser("my", timeZone0, locale0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("my", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("my");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: my
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("w-su", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("w-su", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("w-su");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: w-su
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getTimeZone("N!U)9FQI[~mHI");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("w-su", timeZone0, locale0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("w-su", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(9);
      assertNotNull(parsePosition0);
      assertEquals(9, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=9,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = fastDateParser0.parse("2a4iABla{=tq,5", parsePosition0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNull(date0);
      assertNotSame(timeZone0, timeZone1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("w-su", fastDateParser0.getPattern());
      assertEquals(9, parsePosition0.getErrorIndex());
      assertEquals(9, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=9,errorIndex=9]", parsePosition0.toString());
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      MockDate mockDate0 = new MockDate(2953, 2953, 2953, 2953, 22, 22);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("/W#Q", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'Q' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("}FQi1<", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'Q' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("V");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale1 = Locale.ENGLISH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      
      MockDate mockDate0 = new MockDate((-1388), 2493, 1991, 1991, (-2064), 1149);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("OO.a6&E_ I/rB2*iZ*", timeZone0, locale1, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'O' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("%O/_g&2qp~@d/o a", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'O' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      MockDate mockDate0 = new MockDate(2141L);
      assertNotNull(mockDate0);
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("JP", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      
      Locale locale2 = Locale.JAPAN;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JPN", locale2.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Invalid exceptionStatus", timeZone0, locale1, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'I' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Illegal range. There's no way to get from %s to %s with a step of %s.", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'I' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      FastDateParser fastDateParser1 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone1, locale0, mockDate0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("GMT", timeZone1.getID());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser1.getPattern());
      
      try { 
        fastDateParser1.parse("dx%");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"dx%
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      String string0 = "(Z|(?:[+-]\\d{K}\\d{2}))";
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{K}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(Z|(?:[+-]d{K}d{2}))", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      String string0 = "Y9Bx4qE";
      TimeZone timeZone1 = TimeZone.getTimeZone("A");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      assertFalse(boolean0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotSame(timeZone0, timeZone1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("A", timeZone1, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'A' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("86[G7_q7w(NN", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'q' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("G'bW^/7:>6JI", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string0 = "Yf!\\{";
      TimeZone timeZone1 = TimeZone.getTimeZone("Yf!{");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      MockDate mockDate0 = new MockDate(24, 91, 993);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Yf!{", timeZone0, locale1, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'f' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("z", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("z", fastDateParser0.getPattern());
      
      String string0 = "p";
      String string1 = fastDateParser0.toStringAll();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("z", fastDateParser0.getPattern());
      
      int int0 = timeZone0.getOffset((long) 4254);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      
      String string2 = fastDateParser0.toString();
      assertEquals("FastDateParser[z, ja_JP_JP_#u-ca-japanese, GMT]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("z", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parseObject("z");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"z
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      TimeZone timeZone1 = TimeZone.getTimeZone("Y9Bx4qE");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      MockDate mockDate0 = new MockDate(1366, 1366, 1366, 1366, 1447, (-1));
      assertNotNull(mockDate0);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("u}[Ea8=aWV?", timeZone1, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'V' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(" annotation, but there were ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'n' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("9lblrc#7-}|)m##M", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'l' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "D/ND4BP7i";
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getTimeZone("D/ND4BP7i");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone2 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertFalse(timeZone2.equals((Object)timeZone1));
      assertFalse(timeZone2.equals((Object)timeZone0));
      assertNotNull(timeZone2);
      assertNotSame(timeZone2, timeZone1);
      assertNotSame(timeZone2, timeZone0);
      assertEquals("GMT+18:00", timeZone2.getID());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("'F7ldxQ)TKr`*\"v", timeZone1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(" 9'4", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$StrategyParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      MockDate mockDate0 = new MockDate(2113L);
      assertNotNull(mockDate0);
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JP", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      
      TimeZone timeZone1 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$Strategy");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale2 = Locale.JAPAN;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getVariant());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      
      Locale locale3 = Locale.UK;
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en_GB", locale3.toString());
      assertEquals("en", locale3.getLanguage());
      assertEquals("GB", locale3.getCountry());
      assertEquals("GBR", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("yMDKXMq2j", timeZone1, locale3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'q' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      MockDate mockDate0 = new MockDate(565, 565, 565, 565, (-393));
      assertNotNull(mockDate0);
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      long long0 = mockDate0.getTime();
      assertEquals(17157248820000L, long0);
      assertEquals("Sun Sep 10 06:27:00 GMT 2513", mockDate0.toString());
      
      long long1 = MockDate.UTC(565, 8, 565, 1202, 3, 3);
      assertEquals(15694826583000L, long1);
      assertFalse(long1 == long0);
      
      FastDateParser fastDateParser0 = new FastDateParser("82kE|y!", timeZone0, locale0, mockDate0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("Sun Sep 10 06:27:00 GMT 2513", mockDate0.toString());
      assertEquals("82kE|y!", fastDateParser0.getPattern());
      
      String string1 = fastDateParser0.getPattern();
      assertEquals("82kE|y!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("Sun Sep 10 06:27:00 GMT 2513", mockDate0.toString());
      assertEquals("82kE|y!", fastDateParser0.getPattern());
      
      System.setCurrentTimeMillis(15694826583000L);
      String string2 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=82kE|y!, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=, century=2500, startYear=13, patterns=[StrategyAndWidth [strategy=CopyQuotedStrategy [formatField=82], width=2], StrategyAndWidth [strategy=NumberStrategy [field=11], width=1], StrategyAndWidth [strategy=CaseInsensitiveTextStrategy [field=7, locale=, lKeyValues={thu=5, saturday=7, tue=3, sat=7, thursday=5, mon=2, sun=1, sunday=1, tuesday=3, wed=4, wednesday=4, friday=6, fri=6, monday=2}, pattern=((?iu)wednesday|wed|tuesday|tue|thursday|thu|sunday|sun|saturday|sat|monday|mon|friday|fri)], width=1], StrategyAndWidth [strategy=CopyQuotedStrategy [formatField=|], width=1], StrategyAndWidth [strategy=NumberStrategy [field=1], width=1], StrategyAndWidth [strategy=CopyQuotedStrategy [formatField=!], width=1]]]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("Sun Sep 10 06:27:00 GMT 2513", mockDate0.toString());
      assertEquals("82kE|y!", fastDateParser0.getPattern());
      
      String string3 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=82kE|y!, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=, century=2500, startYear=13, patterns=[StrategyAndWidth [strategy=CopyQuotedStrategy [formatField=82], width=2], StrategyAndWidth [strategy=NumberStrategy [field=11], width=1], StrategyAndWidth [strategy=CaseInsensitiveTextStrategy [field=7, locale=, lKeyValues={thu=5, saturday=7, tue=3, sat=7, thursday=5, mon=2, sun=1, sunday=1, tuesday=3, wed=4, wednesday=4, friday=6, fri=6, monday=2}, pattern=((?iu)wednesday|wed|tuesday|tue|thursday|thu|sunday|sun|saturday|sat|monday|mon|friday|fri)], width=1], StrategyAndWidth [strategy=CopyQuotedStrategy [formatField=|], width=1], StrategyAndWidth [strategy=NumberStrategy [field=1], width=1], StrategyAndWidth [strategy=CopyQuotedStrategy [formatField=!], width=1]]]", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("Sun Sep 10 06:27:00 GMT 2513", mockDate0.toString());
      assertEquals("82kE|y!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      MockDate mockDate0 = new MockDate(2113L);
      assertNotNull(mockDate0);
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JP", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-2946));
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-2946), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-2946,errorIndex=-1]", parsePosition0.toString());
      
      String string0 = fastDateParser0.toStringAll();
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[(Z|(?:[+-]d{2}d{2})), , GMT]", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      ParsePosition parsePosition1 = new ParsePosition(100);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertNotNull(parsePosition1);
      assertEquals(100, parsePosition1.getIndex());
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=100,errorIndex=-1]", parsePosition1.toString());
      
      parsePosition1.setIndex(1626);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertNotSame(parsePosition1, parsePosition0);
      assertEquals(1626, parsePosition1.getIndex());
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1626,errorIndex=-1]", parsePosition1.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(mockGregorianCalendar0);
      
      try { 
        fastDateParser0.parse("(Z|(?:[+-]d{2}d{2}))");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: (Z|(?:[+-]d{2}d{2}))
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      ParsePosition parsePosition0 = new ParsePosition(92);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=92,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(92, parsePosition0.getIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{K}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("(Z|(?:[+-]d{K}d{2}))", fastDateParser0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(Z|(?:[+-]d{K}d{2}))", parsePosition0, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("z", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("z", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = new FastDateParser("z", timeZone0, locale0);
      assertTrue(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("z", fastDateParser1.getPattern());
      
      MockDate mockDate0 = new MockDate(88, 88, (-362));
      assertNotNull(mockDate0);
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("JP", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      
      FastDateParser fastDateParser2 = new FastDateParser("z", timeZone0, locale1, (Date) null);
      assertTrue(fastDateParser2.equals((Object)fastDateParser1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("JP", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("z", fastDateParser2.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-1050));
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=-1050,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1050), parsePosition0.getIndex());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        fastDateParser1.parse("Y(zB_'Z)x*Yg", parsePosition0, calendar0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      MockDate mockDate0 = new MockDate(2113L);
      assertNotNull(mockDate0);
      
      String string0 = "Parameter of type %s must reference an Enum type";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Parameter of type %s must reference an Enum type", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'P' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Parameter has to be annotated with ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'P' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "ja";
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      TimeZone timeZone1 = TimeZone.getTimeZone("Y9Bx4qE");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      boolean boolean0 = timeZone1.inDaylightTime(mockDate0);
      assertFalse(boolean0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotSame(timeZone1, timeZone0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Y9Bx4qE", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'B' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      String string0 = "Ly,c%?vt];4%bf/4}b";
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      int int0 = (-3806);
      String string1 = ",hWcX4z|^8U<xUEZe";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(",hWcX4z|^8U<xUEZe", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'c' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("$cJSER&`dU", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'c' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(810);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(810, parsePosition0.getIndex());
      
      String string0 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      
      int int0 = timeZone0.getOffset((long) 810);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      
      Date date0 = fastDateParser0.parse("p", parsePosition0);
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(810, parsePosition0.getIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("JP", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      
      Locale locale2 = Locale.CANADA_FRENCH;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", timeZone0, locale2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 't' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      TimeZone timeZone1 = TimeZone.getTimeZone("CaseInsensitiveTextStrategy [field=");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      Locale locale1 = Locale.JAPAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone2 = TimeZone.getTimeZone("CaseInsensitiveTextStrategy [field=");
      assertTrue(timeZone2.equals((Object)timeZone0));
      assertTrue(timeZone2.equals((Object)timeZone1));
      assertNotNull(timeZone2);
      assertNotSame(timeZone2, timeZone0);
      assertNotSame(timeZone2, timeZone1);
      assertEquals("GMT", timeZone2.getID());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("R1Iav`V|}grB", timeZone2, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'R' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("yGRl*w", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'R' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "D/ND4BP7i";
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate(2113L);
      assertNotNull(mockDate0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string1 = "E4W+ `n|mo";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("E4W+ `n|mo", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'n' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      TimeZone timeZone0 = TimeZone.getTimeZone(" 9'4");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("kWoNGFb7J", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'o' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$Strategy");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("iJ;RQwQ&c", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'i' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Mi|p8kGAQ=BNz*ii", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'i' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      String string0 = "ReportEntry";
      TimeZone timeZone1 = TimeZone.getTimeZone("ReportEntry");
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      boolean boolean0 = timeZone1.inDaylightTime(mockDate0);
      assertFalse(boolean0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotSame(timeZone1, timeZone0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone1.getID());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("value must not be empty", timeZone1, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'v' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      String string0 = "vwAT_";
      Locale locale1 = Locale.CANADA_FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("vwAT_", timeZone0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'v' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|<?:[+-]6d{2}?{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("(Z|<?:[+-]6d{2}?{2}))", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("(Z|<?:[+-]6d{2}?{2}))");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"(Z|<?:[+-]6d{2}?{2}))
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser("z", timeZone0, (Locale) null);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("z", fastDateParser0.getPattern());
      
      String string0 = fastDateParser0.getPattern();
      assertEquals("z", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate((-3806), (-3806), (-1295), (-345), 16);
      assertNotNull(mockDate0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      MockDate mockDate1 = new MockDate(1, (-1), (-1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      boolean boolean0 = mockDate0.after(mockDate1);
      assertFalse(boolean0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Fri Mar 31 15:16:00 GMT 2228", mockDate0.toString());
      assertEquals("Thu Nov 29 00:00:00 GMT 1900", mockDate1.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("us/arizona", timeZone0, locale0, mockDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'r' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("]Ju_F|^OaA>z*N", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'J' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(810);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(810, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      
      String string0 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      
      int int0 = timeZone0.getOffset((long) 810);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      
      Date date0 = fastDateParser0.parse("p", parsePosition0);
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(810, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      
      Object object0 = fastDateParser0.parseObject("");
      assertTrue(object0.equals((Object)date0));
      assertNotNull(object0);
      assertNotSame(object0, date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      String string2 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      
      String string3 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDateParser0.getPattern());
      
      parsePosition0.setIndex(9);
      assertEquals(9, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=9,errorIndex=-1]", parsePosition0.toString());
      
      int int1 = 13;
      parsePosition0.setIndex(13);
      assertEquals(13, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=13,errorIndex=-1]", parsePosition0.toString());
      
      String string4 = "XJVZP`m}$D_=FLJ*";
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("XJVZP`m}$D_=FLJ*", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'J' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("51_X2E;l>;X#%.", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'l' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      MockDate mockDate0 = new MockDate(76, 1294, 1294, 96, 96);
      assertNotNull(mockDate0);
      
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Wed May 21 01:36:00 GMT 2087", mockDate0.toString());
      
      Locale locale1 = Locale.US;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      
      FastDateParser fastDateParser1 = new FastDateParser("", timeZone0, locale1, mockDate0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Wed May 21 01:36:00 GMT 2087", mockDate0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertEquals("", fastDateParser1.getPattern());
      
      FastDateParser fastDateParser2 = new FastDateParser("", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertNotNull(fastDateParser2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", fastDateParser2.getPattern());
      
      String string0 = fastDateParser2.toString();
      assertEquals("FastDateParser[, zh, GMT]", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser2, fastDateParser1);
      assertNotSame(fastDateParser2, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", fastDateParser2.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(76);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=76,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(76, parsePosition0.getIndex());
      
      Locale locale2 = Locale.GERMAN;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(mockGregorianCalendar0);
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      
      ParsePosition parsePosition1 = new ParsePosition(65);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertNotNull(parsePosition1);
      assertEquals("java.text.ParsePosition[index=65,errorIndex=-1]", parsePosition1.toString());
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertEquals(65, parsePosition1.getIndex());
      
      Date date0 = fastDateParser0.parse("~", parsePosition0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertTrue(fastDateParser0.equals((Object)fastDateParser2));
      assertFalse(parsePosition0.equals((Object)parsePosition1));
      assertNotNull(date0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser0, fastDateParser2);
      assertNotSame(parsePosition0, parsePosition1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=76,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(76, parsePosition0.getIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      boolean boolean1 = fastDateParser2.parse((String) null, parsePosition0, (Calendar) mockGregorianCalendar0);
      assertTrue(boolean1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertFalse(parsePosition0.equals((Object)parsePosition1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser2, fastDateParser1);
      assertNotSame(fastDateParser2, fastDateParser0);
      assertNotSame(parsePosition0, parsePosition1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", fastDateParser2.getPattern());
      assertEquals("java.text.ParsePosition[index=76,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(76, parsePosition0.getIndex());
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      fastDateParser2.hashCode();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(fastDateParser2.equals((Object)fastDateParser0));
      assertFalse(fastDateParser2.equals((Object)fastDateParser1));
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser2, fastDateParser1);
      assertNotSame(fastDateParser2, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", fastDateParser2.getPattern());
      
      Date date1 = fastDateParser1.parse("pacific/tahiti");
      assertTrue(date1.equals((Object)date0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(fastDateParser1.equals((Object)fastDateParser2));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(date1);
      assertNotSame(date1, date0);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(fastDateParser1, fastDateParser2);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertEquals("Wed May 21 01:36:00 GMT 2087", mockDate0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertEquals("", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      ParsePosition parsePosition0 = new ParsePosition(40);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(40, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=40,errorIndex=-1]", parsePosition0.toString());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(Z|(?:[+-]d{2}d{2}))", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$Strategy");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("\"", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("\"", fastDateParser0.getPattern());
      
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[\", ja, GMT]", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("\"", fastDateParser0.getPattern());
      
      int int0 = 2896;
      ParsePosition parsePosition0 = new ParsePosition(2896);
      assertNotNull(parsePosition0);
      assertEquals(2896, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2896,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      parsePosition0.setIndex(77);
      assertEquals(77, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=77,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parse("raV[", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("universal", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'n' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      
      Locale locale1 = Locale.forLanguageTag("{^w2Ug-Ua");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("{^w2Ug-Ua", timeZone0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'U' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "Unterminated quote";
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("systemv/est5", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 't' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("y", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      MockDate mockDate0 = new MockDate(1187L);
      assertNotNull(mockDate0);
      
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("us/eastern", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'e' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("e{0\"v");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("e{0\"v", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'e' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(810);
      assertNotNull(parsePosition0);
      assertEquals(810, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      
      String string0 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      
      int int0 = timeZone0.getOffset((long) 810);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      
      Date date0 = fastDateParser0.parse("p", parsePosition0);
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals(810, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      
      String string2 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      
      Object object0 = fastDateParser0.parseObject("");
      assertTrue(object0.equals((Object)date0));
      assertNotNull(object0);
      assertNotSame(object0, date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      Object object1 = fastDateParser0.parseObject("Rg_-Fh>41c=MW!$?EBc", parsePosition0);
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)date0));
      assertNotNull(object1);
      assertNotSame(object1, date0);
      assertNotSame(object1, object0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals(810, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object1.toString());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JP", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      
      Date date1 = fastDateParser0.parse("systemv/ast4adt");
      assertTrue(date1.equals((Object)object1));
      assertTrue(date1.equals((Object)date0));
      assertTrue(date1.equals((Object)object0));
      assertNotNull(date1);
      assertSame(locale0, locale1);
      assertNotSame(date1, date0);
      assertNotSame(date1, object1);
      assertNotSame(date1, object0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
      assertSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      
      Date date2 = fastDateParser0.parse((String) null, parsePosition0);
      assertTrue(date2.equals((Object)date1));
      assertTrue(date2.equals((Object)object1));
      assertTrue(date2.equals((Object)object0));
      assertTrue(date2.equals((Object)date0));
      assertNotNull(date2);
      assertSame(locale0, locale1);
      assertNotSame(date2, object0);
      assertNotSame(date2, date1);
      assertNotSame(date2, date0);
      assertNotSame(date2, object1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals(810, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      Date date0 = fastDateParser0.parse("");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", fastDateParser0.getPattern());
      
      FastDateParser fastDateParser1 = new FastDateParser("", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDateParser1.getPattern());
      
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("", fastDateParser1.getPattern());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      MockDate mockDate0 = new MockDate(2113L);
      assertNotNull(mockDate0);
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JP", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-2946));
      assertNotNull(parsePosition0);
      assertEquals((-2946), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-2946,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      String string0 = fastDateParser0.toStringAll();
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[(Z|(?:[+-]d{2}d{2})), , GMT]", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      ParsePosition parsePosition1 = new ParsePosition(100);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertNotNull(parsePosition1);
      assertEquals(100, parsePosition1.getIndex());
      assertEquals("java.text.ParsePosition[index=100,errorIndex=-1]", parsePosition1.toString());
      assertEquals((-1), parsePosition1.getErrorIndex());
      
      parsePosition1.setIndex(1626);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertNotSame(parsePosition1, parsePosition0);
      assertEquals("java.text.ParsePosition[index=1626,errorIndex=-1]", parsePosition1.toString());
      assertEquals(1626, parsePosition1.getIndex());
      assertEquals((-1), parsePosition1.getErrorIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(mockGregorianCalendar0);
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("JP", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      
      // Undeclared exception!
      try { 
        fastDateParser_TimeZoneStrategy0.setCalendar(fastDateParser0, mockGregorianCalendar0, "hJfLgS&F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(810);
      assertNotNull(parsePosition0);
      assertEquals(810, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      String string0 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      int int0 = timeZone0.getOffset((long) 810);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      
      Date date0 = fastDateParser0.parse("p", parsePosition0);
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals(810, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      Object object0 = fastDateParser0.parseObject("");
      assertTrue(object0.equals((Object)date0));
      assertNotNull(object0);
      assertNotSame(object0, date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      String string2 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      String string3 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      parsePosition0.setIndex(0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date1 = fastDateParser0.parse("", parsePosition0);
      assertTrue(date1.equals((Object)date0));
      assertTrue(date1.equals((Object)object0));
      assertNotNull(date1);
      assertNotSame(date1, date0);
      assertNotSame(date1, object0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean0 = fastDateParser0.parse("pacific/wake", parsePosition0, (Calendar) mockGregorianCalendar0);
      assertTrue(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      int int1 = fastDateParser0.hashCode();
      assertFalse(int1 == int0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("qfVD|+_nus", timeZone1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'q' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = "u q'Hv:?";
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("u q'Hv:?", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'q' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      MockDate mockDate0 = new MockDate(2123L);
      assertNotNull(mockDate0);
      
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Unterminated quote", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'U' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("MU|p8kGAQ=BNz*ii", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'U' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      String string0 = ",)]|hjVm[\"";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(",)]|hjVm[\"", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'j' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$Strategy");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      
      int int0 = 58;
      MockDate mockDate0 = new MockDate(58, 86, 60, 60, 58);
      assertNotNull(mockDate0);
      
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Sat May 01 12:58:00 GMT 1965", mockDate0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("=CJM?}", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'C' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Cannot cleQr and set the following entries at the same time: ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'C' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ja");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = 2029;
      MockDate mockDate0 = new MockDate(1389, 2029, (-3617), (-3617), 0, 2029);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(" Zh?g4ZhnQWAz}}zc-", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'g' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser("z", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("z", fastDateParser0.getPattern());
      
      String string0 = fastDateParser0.toStringAll();
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("z", fastDateParser0.getPattern());
      
      int int0 = timeZone0.getOffset((long) 4254);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[z, ja_JP_JP_#u-ca-japanese, GMT]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("z", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parseObject("z");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"z
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      MockDate mockDate0 = new MockDate(2113L);
      assertNotNull(mockDate0);
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JP", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-2946));
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=-2946,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-2946), parsePosition0.getIndex());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("systemv/ast4adt", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(810);
      assertNotNull(parsePosition0);
      assertEquals(810, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      String string0 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      int int0 = timeZone0.getOffset((long) 810);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      
      Date date0 = fastDateParser0.parse("p", parsePosition0);
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals(810, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      Object object0 = fastDateParser0.parseObject("");
      assertTrue(object0.equals((Object)date0));
      assertNotNull(object0);
      assertNotSame(object0, date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      String string2 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      String string3 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      parsePosition0.setIndex(0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      
      // Undeclared exception!
      try { 
        fastDateParser_TimeZoneStrategy0.setCalendar(fastDateParser0, mockGregorianCalendar0, "B)aL+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("w-u", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("w-u", fastDateParser0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        fastDateParser_TimeZoneStrategy0.setCalendar(fastDateParser0, mockGregorianCalendar0, "w-u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" must return `CartesianProductTest.Sets`.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      
      String string0 = "0S!m >:g";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("0S!m >:g", timeZone0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'g' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("gf1", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'g' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      String string0 = fastDateParser_TimeZoneStrategy0.toString();
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      MockDate mockDate0 = new MockDate(2113L);
      assertNotNull(mockDate0);
      
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0, mockDate0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-23));
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=-23,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-23), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Object object0 = fastDateParser0.parseObject("org.apache.commons.lang3.time.FastDateParser$StrategyParser", parsePosition0);
      assertNotNull(object0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=-23,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-23), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[, , GMT]", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition1 = new ParsePosition(118);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertNotNull(parsePosition1);
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=118,errorIndex=-1]", parsePosition1.toString());
      assertEquals(118, parsePosition1.getIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(48, 1, 118, (-3559), 96, 1);
      assertNotNull(mockGregorianCalendar0);
      
      boolean boolean1 = fastDateParser0.parse("FastDateParser[, , GMT]", parsePosition1, (Calendar) mockGregorianCalendar0);
      assertTrue(boolean1);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(parsePosition1, parsePosition0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=118,errorIndex=-1]", parsePosition1.toString());
      assertEquals(118, parsePosition1.getIndex());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=48,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=118,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3559,HOUR_OF_DAY=-3559,MINUTE=96,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      System.setCurrentTimeMillis(48);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(810);
      assertNotNull(parsePosition0);
      assertEquals(810, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      
      String string0 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("JP", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDateParser0.getPattern());
      
      int int0 = timeZone0.getOffset((long) 810);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate(97, (-296), 903, 122, 0, 579);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser1 = null;
      try {
        fastDateParser1 = new FastDateParser("p", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'p' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("pacific/tarawa", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'p' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      
      String string0 = locale1.getDisplayCountry(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      
      MockDate mockDate0 = new MockDate(16, 16, 16, (-1580), 16);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale1, mockDate0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("Sun Mar 11 04:16:00 GMT 1917", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      String string1 = "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s";
      ParsePosition parsePosition0 = new ParsePosition(7);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=7,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(7, parsePosition0.getIndex());
      
      Date date0 = fastDateParser0.parse("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", parsePosition0);
      assertNotNull(date0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("Sun Mar 11 04:16:00 GMT 1917", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("java.text.ParsePosition[index=7,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(7, parsePosition0.getIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      String string2 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ko, GMT]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("Sun Mar 11 04:16:00 GMT 1917", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      String string3 = "(U(JU%";
      Object object0 = fastDateParser0.parseObject("(U(JU%");
      assertTrue(object0.equals((Object)date0));
      assertNotNull(object0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(object0, date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("Sun Mar 11 04:16:00 GMT 1917", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      String string4 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ko, century=1900, startYear=17, patterns=[]]", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("Sun Mar 11 04:16:00 GMT 1917", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      String string5 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ko, GMT]", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("Sun Mar 11 04:16:00 GMT 1917", mockDate0.toString());
      assertEquals("", fastDateParser0.getPattern());
      
      parsePosition0.setIndex(340);
      assertEquals(340, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=340,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        timeZone0.getOffset(16, (-1890), 1989, 3143, (-6729), 430);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = Locale.KOREA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("X", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("X", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(99);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(99, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=99,errorIndex=-1]", parsePosition0.toString());
      
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("X", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      MockDate mockDate0 = new MockDate(2113L);
      assertNotNull(mockDate0);
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      Locale locale2 = fastDateParser0.getLocale();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      
      try { 
        fastDateParser0.parse("pacific/rarotonga");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: pacific/rarotonga
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("w-su", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("w-su", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(882);
      assertNotNull(parsePosition0);
      assertEquals(882, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=882,errorIndex=-1]", parsePosition0.toString());
      
      Object object0 = fastDateParser0.parseObject("w-su", parsePosition0);
      assertNull(object0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("w-su", fastDateParser0.getPattern());
      assertEquals(882, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=882,errorIndex=882]", parsePosition0.toString());
      assertEquals(882, parsePosition0.getErrorIndex());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("w-su", fastDateParser0.getPattern());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      try { 
        fastDateParser0.parse("(Z|(?:[+-]d{2}d{2}))");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: (Z|(?:[+-]d{2}d{2}))
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      String string0 = "Ly,c%?vt];4%bf/4}b";
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      int int0 = (-345);
      int int1 = 16;
      MockDate mockDate0 = new MockDate((-345), (-345), (-3806), (-3806), 16);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 't' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("S#fYg7Fmhr[%~Xe@r", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'f' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$Strategy");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("org.apache.commons.lang3.time.FastDateParser$Strategy", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'o' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("o`JP\u0002K_", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'o' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("(Z|(?:[+-]d{2}d{2}))", fastDateParser0.getPattern());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      
      Date date0 = fastDateParser0.parse("");
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      fastDateParser_TimeZoneStrategy0.setCalendar(fastDateParser0, mockGregorianCalendar0, "");
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=[GmtTimeZone id=\"GMT+00:00\",offset=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      
      ParsePosition parsePosition0 = new ParsePosition(810);
      assertNotNull(parsePosition0);
      assertEquals(810, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      
      String string0 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      
      int int0 = timeZone0.getOffset((long) 810);
      assertEquals(0, int0);
      assertEquals("GMT", timeZone0.getID());
      
      Date date0 = fastDateParser0.parse("p", parsePosition0);
      assertNotNull(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals(810, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=810,errorIndex=-1]", parsePosition0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      
      Object object0 = fastDateParser0.parseObject("");
      assertTrue(object0.equals((Object)date0));
      assertNotNull(object0);
      assertNotSame(object0, date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      String string2 = fastDateParser0.toStringAll();
      assertEquals("FastDateParser [pattern=, timeZone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale=ja_JP_JP_#u-ca-japanese, century=0, startYear=0, patterns=[]]", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      
      String string3 = fastDateParser0.toString();
      assertEquals("FastDateParser[, ja_JP_JP_#u-ca-japanese, GMT]", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      
      parsePosition0.setIndex(0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2546), 2709, 2709, 810, 7, 7);
      assertNotNull(mockGregorianCalendar0);
      
      ParsePosition parsePosition1 = new ParsePosition(6);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertNotNull(parsePosition1);
      assertEquals(6, parsePosition1.getIndex());
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition1.toString());
      
      boolean boolean0 = fastDateParser0.parse("", parsePosition1, (Calendar) mockGregorianCalendar0);
      assertTrue(boolean0);
      assertFalse(parsePosition1.equals((Object)parsePosition0));
      assertNotSame(parsePosition1, parsePosition0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2546,MONTH=2709,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2709,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=810,HOUR_OF_DAY=810,MINUTE=7,SECOND=7,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(6, parsePosition1.getIndex());
      assertEquals((-1), parsePosition1.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition1.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]{}d{2})", timeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("(Z|(?:[+-]{}d{2})", fastDateParser0.getPattern());
      
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertNotNull(timeZone1);
      assertSame(timeZone0, timeZone1);
      assertSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("(Z|(?:[+-]{}d{2})", fastDateParser0.getPattern());
      assertEquals("GMT", timeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1857), "", (-1857), 0, 0, 0, (-1857), 0, 0, 2693);
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1857), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1857,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1857,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=-1857,endDay=0,endDayOfWeek=0,endTime=2693,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1857), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1857,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1857,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=-1857,endDay=0,endDayOfWeek=0,endTime=2693,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1857), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1857,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1857,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=-1857,endDay=0,endDayOfWeek=0,endTime=2693,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDateParser0.getPattern());
      assertEquals((-1857), timeZone0.getRawOffset());
      assertEquals("", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1857,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1857,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=-1857,endDay=0,endDayOfWeek=0,endTime=2693,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      MockDate mockDate0 = new MockDate(2113L);
      assertNotNull(mockDate0);
      
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("D/ND4BP7i", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'N' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("z[@DyN=$72sPA`(", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'N' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("(Z|(?:N+-d{}d{2}))", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'N' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$Strategy");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(" must return `CartesianProductTest.Sets`.", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 't' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("us/michigan", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'i' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser("uZ|<?:[+]d{2},{2))", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JP", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("(T}Ehe ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'T' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("kx!l", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'x' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      String string0 = locale1.getDisplayCountry(locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      MockDate mockDate0 = new MockDate(7, 16, 7, (-105), 3, (-296));
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("kTSCeHi~9-", timeZone0, locale1, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'T' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ja");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      MockDate mockDate0 = new MockDate(1389, 2029, (-3617), (-3617), 0, 2029);
      assertNotNull(mockDate0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("ja", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'j' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("j2_lUCZGhw;Nt:r", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'j' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("systemv/mst7mdt", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 't' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Y}XL['*.ITy-]`u%7", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'L' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "test-template-invocation";
      int int0 = 1779;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1779, "test-template-invocation");
      assertNotNull(simpleTimeZone0);
      assertEquals(1779, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("test-template-invocation", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=test-template-invocation,offset=1779,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("test-template-invocation", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 't' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("F%5tq ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 't' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      assertNotNull(fastDateParser_TimeZoneStrategy0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser("(Z|<?:[+-]6d{2}?{2}))", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      String string0 = "(Z|(?:[+-]\\d{2}\\d{2}))";
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("(Z|(?:[+-]d{2}d{2}))");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: (Z|(?:[+-]d{2}d{2}))
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("[){", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[[){, , GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("(Z|(?:[+-]d{2}d{2}))", timeZone0, locale0);
      String string0 = fastDateParser0.toStringAll();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(810);
      fastDateParser0.toStringAll();
      timeZone0.getOffset((long) 810);
      fastDateParser0.parse("p", parsePosition0);
      fastDateParser0.toString();
      fastDateParser0.parseObject("");
      fastDateParser0.toStringAll();
      fastDateParser0.toString();
      parsePosition0.setIndex(0);
      // Undeclared exception!
      try { 
        timeZone0.getOffset(0, 43, 3143, 3075, 810, 654);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "xl}C=";
      int int0 = 9;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "xl}C=");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("xl}C=", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'x' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("HM`");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("]dx[{X8E&]", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'x' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Locale.setDefault(locale0);
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("qv", (TimeZone) null, locale0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("', '", timeZone0, locale0);
      try { 
        fastDateParser0.parse("', '");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: ', '
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDateParser.TimeZoneStrategy fastDateParser_TimeZoneStrategy0 = new FastDateParser.TimeZoneStrategy(locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = (-345);
      MockDate mockDate0 = new MockDate((-345), (-345), (-3806), (-3806), 16);
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Ly,c%?vt];4%bf/4}b", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'L' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateParser$Strategy";
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$Strategy");
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("[+-]d{4}", timeZone0, locale1);
      ParsePosition parsePosition0 = new ParsePosition((-2946));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("systemv/mst7", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      Locale locale1 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("Y]~''H", timeZone0, locale0);
      assertEquals("Y]~''H", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(" annotation, but there were ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'n' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("%s was not annotated with @ArgumentsSource but should have been.", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'n' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("r!S9Dn\"'({L", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'r' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("V");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("V", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'V' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "%s requires that either `contains` or `matches` is set.";
      int int0 = 10;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 10);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("%s requires that either `contains` or `matches` is set.", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format 'r' not supported
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }
}
