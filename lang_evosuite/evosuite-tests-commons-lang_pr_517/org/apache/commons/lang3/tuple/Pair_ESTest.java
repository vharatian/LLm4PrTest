/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 12:36:30 GMT 2025
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.FormatFlagsConversionMismatchException;
import java.util.IllegalFormatConversionException;
import java.util.Map;
import java.util.MissingFormatWidthException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(749);
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      MutablePair<Integer, Integer> mutablePair0 = MutablePair.of((Map.Entry<Integer, Integer>) immutablePair0);
      mutablePair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImmutablePair<ImmutablePair<Integer, Object>, Object> immutablePair0 = ImmutablePair.nullPair();
      String string0 = immutablePair0.toString("org.apache.commons.lang3.tuple.ImmutablePair");
      assertEquals("org.apache.commons.lang3.tuple.ImmutablePair", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      Integer integer0 = mutablePair0.getValue();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      MutablePair<ImmutablePair<Integer, Integer>, ImmutablePair<Integer, Integer>> mutablePair0 = new MutablePair<ImmutablePair<Integer, Integer>, ImmutablePair<Integer, Integer>>(immutablePair0, immutablePair0);
      ImmutablePair<Integer, Integer> immutablePair1 = mutablePair0.getValue();
      assertSame(immutablePair0, immutablePair1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImmutablePair<Integer, ImmutablePair<Integer, Integer>> immutablePair0 = ImmutablePair.nullPair();
      ImmutablePair<Integer, Integer> immutablePair1 = immutablePair0.getRight();
      assertNull(immutablePair1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      MutablePair<Integer, ImmutablePair<Integer, Integer>> mutablePair0 = new MutablePair<Integer, ImmutablePair<Integer, Integer>>(integer0, immutablePair0);
      ImmutablePair<Integer, Integer> immutablePair1 = mutablePair0.getRight();
      assertSame(immutablePair1, immutablePair0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.nullPair();
      MutablePair<Integer, Integer> mutablePair0 = MutablePair.of((Map.Entry<Integer, Integer>) immutablePair0);
      Integer integer0 = mutablePair0.getLeft();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(4424);
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.of(integer0, integer0);
      ImmutablePair<ImmutablePair<Integer, Integer>, Integer> immutablePair1 = new ImmutablePair<ImmutablePair<Integer, Integer>, Integer>(immutablePair0, integer0);
      MutablePair<ImmutablePair<Integer, Integer>, Integer> mutablePair0 = MutablePair.of((Map.Entry<ImmutablePair<Integer, Integer>, Integer>) immutablePair1);
      ImmutablePair<Integer, Integer> immutablePair2 = mutablePair0.getLeft();
      assertSame(immutablePair0, immutablePair2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutablePair<Integer, ImmutablePair<Integer, Integer>> mutablePair0 = new MutablePair<Integer, ImmutablePair<Integer, Integer>>();
      Integer integer0 = mutablePair0.getKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.of((Map.Entry<Integer, Integer>) abstractMap_SimpleImmutableEntry0);
      MutablePair<ImmutablePair<Integer, Integer>, Integer> mutablePair0 = MutablePair.of(immutablePair0, integer0);
      ImmutablePair<Integer, Integer> immutablePair1 = mutablePair0.getKey();
      assertSame(immutablePair1, immutablePair0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = MutablePair.of((Map.Entry<Integer, Integer>) null);
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.of((Map.Entry<Integer, Integer>) mutablePair0);
      MutablePair<Integer, ImmutablePair<Integer, Integer>> mutablePair1 = new MutablePair<Integer, ImmutablePair<Integer, Integer>>();
      mutablePair1.setLeft(integer0);
      Integer integer1 = new Integer((-1914));
      ImmutablePair<Integer, ImmutablePair<Integer, Integer>> immutablePair1 = ImmutablePair.of(integer1, immutablePair0);
      int int0 = mutablePair1.compareTo((Pair<Integer, ImmutablePair<Integer, Integer>>) immutablePair1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      Integer integer0 = new Integer((-4269));
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.of(integer0, integer0);
      int int0 = mutablePair0.compareTo((Pair<Integer, Integer>) immutablePair0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImmutablePair<Integer, ImmutablePair<Integer, Integer>> immutablePair0 = ImmutablePair.nullPair();
      // Undeclared exception!
      try { 
        immutablePair0.toString("GcJ%;fCTR&]V");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ';'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(44);
      MutablePair<Comparable<Integer>, Integer> mutablePair0 = new MutablePair<Comparable<Integer>, Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        mutablePair0.toString("<R%-aWuju3O}<J");
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-a
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.nullPair();
      Integer integer0 = new Integer(152);
      ImmutablePair<Object, Integer> immutablePair1 = new ImmutablePair<Object, Integer>(immutablePair0, integer0);
      // Undeclared exception!
      try { 
        immutablePair1.toString("k4VN|-%1Ay*X[");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != org.apache.commons.lang3.tuple.ImmutablePair
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutablePair<ImmutablePair<Integer, Integer>, Integer> mutablePair0 = MutablePair.of((Map.Entry<ImmutablePair<Integer, Integer>, Integer>) null);
      // Undeclared exception!
      try { 
        mutablePair0.toString("jd%#br+aYU;C5L");
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = b, Flags = #
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImmutablePair<Integer, ImmutablePair<Integer, Integer>> immutablePair0 = ImmutablePair.nullPair();
      // Undeclared exception!
      try { 
        immutablePair0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImmutablePair<Integer, ImmutablePair<Integer, Integer>> immutablePair0 = ImmutablePair.nullPair();
      // Undeclared exception!
      try { 
        immutablePair0.compareTo((Pair<Integer, ImmutablePair<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(44);
      ImmutablePair<Comparable<Integer>, Object> immutablePair0 = ImmutablePair.of((Comparable<Integer>) integer0, (Object) integer0);
      MutablePair<Comparable<Integer>, Object> mutablePair0 = MutablePair.of((Comparable<Integer>) integer0, (Object) immutablePair0);
      // Undeclared exception!
      try { 
        immutablePair0.compareTo((Pair<Comparable<Integer>, Object>) mutablePair0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.tuple.ImmutablePair cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImmutablePair<ImmutablePair<Integer, Integer>, ImmutablePair<Integer, Integer>> immutablePair0 = ImmutablePair.nullPair();
      boolean boolean0 = immutablePair0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImmutablePair<Integer, ImmutablePair<Integer, Integer>> immutablePair0 = ImmutablePair.nullPair();
      Pair<Integer, ImmutablePair<Integer, Integer>> pair0 = Pair.of((Map.Entry<Integer, ImmutablePair<Integer, Integer>>) immutablePair0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      Pair<Integer, ImmutablePair<Integer, Integer>> pair0 = Pair.of(integer0, immutablePair0);
      ImmutablePair<Integer, ImmutablePair<Integer, Integer>> immutablePair1 = new ImmutablePair<Integer, ImmutablePair<Integer, Integer>>(integer0, immutablePair0);
      boolean boolean0 = immutablePair1.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      ImmutablePair<ImmutablePair<Integer, Integer>, ImmutablePair<Integer, Integer>> immutablePair1 = new ImmutablePair<ImmutablePair<Integer, Integer>, ImmutablePair<Integer, Integer>>(immutablePair0, immutablePair0);
      boolean boolean0 = immutablePair1.equals(immutablePair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImmutablePair<ImmutablePair<Integer, Integer>, ImmutablePair<Integer, Integer>> immutablePair0 = ImmutablePair.nullPair();
      boolean boolean0 = immutablePair0.equals(immutablePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      Pair<Integer, ImmutablePair<Integer, Integer>> pair0 = Pair.of(integer0, immutablePair0);
      boolean boolean0 = pair0.equals(immutablePair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      Pair<Integer, ImmutablePair<Integer, Integer>> pair0 = Pair.of(integer0, immutablePair0);
      String string0 = pair0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      MutablePair<Integer, Integer> mutablePair0 = MutablePair.of((Map.Entry<Integer, Integer>) immutablePair0);
      int int0 = mutablePair0.compareTo((Pair<Integer, Integer>) mutablePair0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0);
      Pair<Integer, ImmutablePair<Integer, Integer>> pair0 = Pair.of(integer0, immutablePair0);
      String string0 = pair0.toString();
      assertEquals("(0,(0,0))", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Pair<ImmutablePair<Integer, Integer>, Object>[] pairArray0 = Pair.emptyArray();
      assertEquals(0, pairArray0.length);
  }
}
