/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:45:39 GMT 2025
 */

package org.apache.commons.lang3.compare;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.function.Predicate;
import org.apache.commons.lang3.compare.ComparableUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ComparableUtils_ESTest extends ComparableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1895));
      Integer integer1 = new Integer(0);
      Predicate<Integer> predicate0 = ComparableUtils.betweenExclusive(integer1, integer0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Predicate<Integer> predicate0 = ComparableUtils.between(integer0, integer1);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-262));
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer(0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.equalTo(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.lessThanOrEqualTo(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(2365);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer(0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.lessThanOrEqualTo(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.lessThan(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer(1);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.lessThan(integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.greaterThanOrEqualTo(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1895));
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer(0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.greaterThanOrEqualTo(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer((-1760));
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.greaterThan(integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.greaterThan(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1307);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.equalTo(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(3561);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer(1);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.equalTo(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer((-1760));
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.betweenExclusive(integer1, integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.betweenExclusive(integer0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(43);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer((-2059));
      Integer integer2 = Integer.valueOf(1988);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.betweenExclusive(integer1, integer2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer(1);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.between(integer1, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer((-1));
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.between(integer1, integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.between(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(592);
      ComparableUtils.ComparableCheckBuilder<Integer> comparableUtils_ComparableCheckBuilder0 = ComparableUtils.is(integer0);
      Integer integer1 = new Integer(1459);
      Integer integer2 = new Integer(1);
      boolean boolean0 = comparableUtils_ComparableCheckBuilder0.betweenExclusive(integer1, integer2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Predicate<Integer> predicate0 = ComparableUtils.gt((Integer) null);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Predicate<Integer> predicate0 = ComparableUtils.ge((Integer) null);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Predicate<Integer> predicate0 = ComparableUtils.lt((Integer) null);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Predicate<Integer> predicate0 = ComparableUtils.le((Integer) null);
      assertNotNull(predicate0);
  }
}
