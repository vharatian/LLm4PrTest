/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:41:37 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedWriter;
import java.lang.reflect.Array;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.text.Collator;
import java.time.chrono.IsoEra;
import java.time.chrono.MinguoDate;
import java.time.chrono.MinguoEra;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.function.Supplier;
import java.util.function.ToIntFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(7);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-32768));
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      Integer integer2 = ObjectUtils.median(integerArray0);
      assertEquals((-32768), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ToIntFunction<Integer> toIntFunction0 = (ToIntFunction<Integer>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-933), 219, 31, (-933), 6).when(toIntFunction0).applyAsInt(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2057));
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integerArray0[1];
      Integer integer1 = ObjectUtils.median(comparator0, integerArray0);
      assertEquals((-2057), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      int int0 = ObjectUtils.hashCodeMulti(integerArray0);
      assertEquals((-1664653280), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = ObjectUtils.defaultIfNull((Integer) null, integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = ObjectUtils.defaultIfNull(integer0, (Integer) null);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(32767);
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = new Integer(64);
      ObjectUtils.identityToString(stringBuilder0, (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Object, Integer>[] hashMapArray0 = (HashMap<Object, Integer>[]) Array.newInstance(HashMap.class, 3);
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      hashMapArray0[0] = (HashMap<Object, Integer>) linkedHashMap0;
      hashMapArray0[1] = (HashMap<Object, Integer>) linkedHashMap0;
      HashMap<Object, Integer> hashMap0 = ObjectUtils.mode(hashMapArray0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_CategoryArray0[0];
      Locale.Category locale_Category1 = ObjectUtils.median(locale_CategoryArray0);
      assertEquals(Locale.Category.DISPLAY, locale_Category1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(toIntFunction0).applyAsInt(any());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      Comparator<ArrayDeque<Object>> comparator1 = Comparator.nullsLast((Comparator<? super ArrayDeque<Object>>) comparator0);
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      arrayDequeArray0[3] = arrayDequeArray0[0];
      arrayDequeArray0[4] = arrayDequeArray0[1];
      arrayDequeArray0[5] = arrayDequeArray0[0];
      ArrayDeque<Object> arrayDeque1 = ObjectUtils.median(comparator1, arrayDequeArray0);
      assertSame(arrayDeque1, arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 1);
      Object object0 = new Object();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(supplier0).get();
      supplierArray0[0] = supplier0;
      Object object1 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer integer0 = new Integer((-4799));
      int int0 = ObjectUtils.compare(integer0, (Integer) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer((-1483));
      Integer integer1 = new Integer(858);
      int int0 = ObjectUtils.compare(integer0, integer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = ObjectUtils.cloneIfPossible((Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-3530));
      assertEquals((short) (-3530), short0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = ObjectUtils.CONST((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = ObjectUtils.CONST((long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = ObjectUtils.CONST(1486L);
      assertEquals(1486L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = ObjectUtils.CONST(3567);
      assertEquals(3567, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = ObjectUtils.CONST((-1172.7F));
      assertEquals((-1172.7F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = ObjectUtils.CONST((double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-15.3803));
      assertEquals((-15.3803), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char char0 = ObjectUtils.CONST('?');
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char char0 = ObjectUtils.CONST('0');
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-81));
      assertEquals((byte) (-81), byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedHashMap<Integer, Object> linkedHashMap0 = new LinkedHashMap<Integer, Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) linkedHashMap0;
      Integer integer0 = new Integer(13);
      linkedHashMap0.put(integer0, objectArray0[0]);
      // Undeclared exception!
      try { 
        ObjectUtils.mode(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Integer>) null, (Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Collator collator0 = Collator.getInstance();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) collator0;
      objectArray0[1] = (Object) arrayDeque0;
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.RuleBasedCollator cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MinguoDate minguoDate0 = MockMinguoDate.now();
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuffer) null, (Object) minguoDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) charBuffer0, (Object) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) charBuffer0, (Object) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        ObjectUtils.identityToString((Appendable) pipedWriter0, (Object) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.isEmpty(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      Object object1 = ObjectUtils.firstNonNull(objectArray0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = ObjectUtils.firstNonNull((Object[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = ObjectUtils.compare(integer0, (Integer) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      int int0 = ObjectUtils.compare(integer0, (Integer) null, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer((-793));
      int int0 = ObjectUtils.compare((Integer) null, integer0, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2155);
      integerArray0[0] = integer0;
      int int0 = ObjectUtils.compare(integerArray0[0], integer0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-383));
      Integer integer0 = mutableInt0.toInteger();
      int int0 = ObjectUtils.compare(integer0, integer0, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) objectUtils0;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      boolean boolean0 = ObjectUtils.allNotNull(integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      //  // Unstable assertion: assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer((-793));
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = ObjectUtils.toString((Object) integer0, supplier0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(120);
      String string0 = ObjectUtils.toString((Object) integer0, "Cannot clone Cloneable type ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(195);
      String string0 = ObjectUtils.toString((Object) integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = ObjectUtils.notEqual("", (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object[] objectArray0 = new Object[18];
      objectArray0[15] = (Object) arrayDeque0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Supplier<Integer>[] supplierArray0 = (Supplier<Integer>[]) Array.newInstance(Supplier.class, 0);
      Object object0 = ObjectUtils.mode((Object[]) supplierArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      linkedHashMap0.putIfAbsent((Integer) null, (Integer) null);
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.isNotEmpty(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Integer integer0 = new Integer(990);
      arrayDeque0.add(integer0);
      Object object0 = ObjectUtils.CONST((Object) arrayDeque0);
      boolean boolean0 = ObjectUtils.isEmpty(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("O;Z8KT,05d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      String string0 = ObjectUtils.identityToString((Object) objectUtils0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      ObjectUtils.hashCode((Object) objectUtils0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Comparable<ArrayDeque> comparable0 = ObjectUtils.getIfNull((Comparable<ArrayDeque>) null, (Supplier<Comparable<ArrayDeque>>) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayDeque<Integer> arrayDeque1 = ObjectUtils.getIfNull(arrayDeque0, (Supplier<ArrayDeque<Integer>>) null);
      assertSame(arrayDeque1, arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Integer integer0 = ObjectUtils.getIfNull((Integer) null, supplier0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Supplier<Integer>[] supplierArray0 = (Supplier<Integer>[]) Array.newInstance(Supplier.class, 1);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      supplierArray0[0] = supplier0;
      Integer integer0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Supplier<Integer>[] supplierArray0 = (Supplier<Integer>[]) Array.newInstance(Supplier.class, 1);
      Integer integer0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = ObjectUtils.getFirstNonNull((Supplier<Integer>[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 19);
      Object object0 = ObjectUtils.firstNonNull((Object[]) supplierArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      boolean boolean0 = ObjectUtils.equals((Object) "java.util.LinkedHashMap@0000000001", (Object) linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.notEqual(object0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = ObjectUtils.equals((Object) "", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.defaultIfNull((Comparable<Object>) null, (Comparable<Object>) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT(32791);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [32791]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT((-32795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [-32795]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE(2728);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [2728]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-479));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-479]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MinguoEra[] minguoEraArray0 = new MinguoEra[8];
      MinguoEra minguoEra0 = MinguoEra.ROC;
      minguoEraArray0[0] = minguoEra0;
      MinguoEra minguoEra1 = MinguoEra.BEFORE_ROC;
      minguoEraArray0[6] = minguoEra1;
      MinguoEra minguoEra2 = ObjectUtils.min(minguoEraArray0);
      assertEquals(MinguoEra.BEFORE_ROC, minguoEra2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IsoEra[] isoEraArray0 = new IsoEra[11];
      IsoEra isoEra0 = IsoEra.BCE;
      isoEraArray0[0] = isoEra0;
      IsoEra isoEra1 = ObjectUtils.max(isoEraArray0);
      assertEquals(IsoEra.BCE, isoEra1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      int int0 = ObjectUtils.compare((Integer) null, integer0, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Comparable<Integer> comparable0 = ObjectUtils.cloneIfPossible((Comparable<Integer>) 1);
      assertEquals(1, comparable0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = ObjectUtils.cloneIfPossible(arrayDeque0);
      assertNotSame(arrayDeque1, arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = ObjectUtils.clone((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      boolean boolean0 = ObjectUtils.anyNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Comparator<Comparable<Integer>> comparator0 = Comparator.nullsLast((Comparator<? super Comparable<Integer>>) null);
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null/empty items
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = ObjectUtils.CONST(3440.0F);
      assertEquals(3440.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) objectUtils0;
      boolean boolean0 = ObjectUtils.allNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object object0 = ObjectUtils.CONST((Object) arrayDeque0);
      boolean boolean0 = ObjectUtils.isEmpty(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(2745);
      Integer integer0 = new Integer(2745);
      ObjectUtils.identityToString(stringBuffer0, (Object) integer0);
      assertEquals(19, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = ObjectUtils.CONST(1736.466386803345);
      assertEquals(1736.466386803345, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)714);
      assertEquals((short)714, short0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char char0 = ObjectUtils.CONST('j');
      assertEquals('j', char0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)114);
      assertEquals((byte)114, byte0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer(195);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1676);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      ObjectUtils.identityToString((Appendable) mockPrintWriter0, (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer((-175));
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = ObjectUtils.CONST((-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-1796951359));
      assertEquals((-1796951359), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = ObjectUtils.compare(integer0, integer0);
      assertEquals(0, int0);
  }
}
