/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 14:54:33 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.apache.commons.lang3.builder.Diff;
import org.apache.commons.lang3.builder.DiffBuilder;
import org.apache.commons.lang3.builder.DiffResult;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DiffBuilder_ESTest extends DiffBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1347);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("m:o", (short)0, (short)3150);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer1 = new Integer(9);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, multilineRecursiveToStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("E<W8", (long) 9, (long) 0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1983);
      Integer integer1 = new Integer(1);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (float) (short) (-4306), 0.0F);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(249);
      Integer integer1 = new Integer(44);
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 0.0, 249.0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1983);
      Integer integer1 = new Integer(5);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("@ze5bx.w+M", 'g', '>');
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(249);
      Integer integer1 = new Integer(44);
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Can only resolve parameter of type ", (byte)44, (byte) (-30));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1980);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, booleanArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-35));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short[]) null, (short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(487);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, objectArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(519);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(495);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (int[]) null, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(487);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, floatArray0, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(627);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(2010);
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, charArray0, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(487);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(629);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-167));
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short)2286, (short)2286);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1569);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (Object) integer0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(341);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (long) 341, (-781L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(2546);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, 2546, 2546);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(1166);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (double) 1166, (double) 1166);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-370));
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, '$', '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-1888));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (byte)58, (byte)58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Diff<Integer>> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Diff<Integer>>((Diff<Integer>) null, (Diff<Integer>) null, toStringStyle0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lhs cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-12));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (float) (-12), (float) (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field name cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(1939);
      Integer integer1 = new Integer(2344);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", diffResult0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-517));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("ebm=G@n9NP*[", (DiffResult<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Diff result cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(2);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer1 = new Integer(0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, standardToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("XPTMr4,2{q^?c#Zt", (Object[]) null, (Object[]) null);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      Object[] objectArray0 = new Object[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$14", objectArray0, objectArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(1987);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer1 = new Integer(1987);
      Integer integer2 = new Integer(1145088708);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer2, standardToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("1M", (Object) integer1, (Object) integer0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(487);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      Integer integer1 = new Integer(1145088708);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("_I&c_", (Object) null, (Object) integer1);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(25);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (Object) integer0, (Object) integer0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(515);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("G%<n~-<`k", (Object) integer0, (Object) integer0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(3);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      Integer integer1 = new Integer(1983);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$6", (short[]) null, (short[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer((-370));
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$10", (short[]) null, (short[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(1769);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (short)14, (short)14);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      Integer integer0 = new Integer((-535));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("+wSHKFH`dG", (short)0, (short)0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(2330);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (long[]) null, (long[]) null);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(487);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      long[] longArray0 = new long[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", longArray0, longArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-2009));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (long) (-2009), (long) (-2009));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("P?A*,aN5ol-8+.W", (long) 1, (long) 1);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer((-1349));
      Integer integer1 = new Integer((-1243));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      int[] intArray0 = new int[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", intArray0, intArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(847);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("3DL<R-\"o!N", (int[]) null, (int[]) null);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer((-2009));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (-2009), (-2009));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(487);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("R", 487, 487);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(503);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer1 = new Integer(1145088708);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      float[] floatArray0 = new float[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("_I&c_", floatArray0, floatArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(627);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      float[] floatArray0 = new float[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", floatArray0, floatArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(474);
      Integer integer1 = new Integer((-46));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (float) 474, (float) 474);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("+dd0(G%M(D'*", (float) 0, (float) 0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(1988);
      Integer integer1 = new Integer(24);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      double[] doubleArray0 = new double[9];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", doubleArray0, doubleArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(515);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (double[]) null, (double[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer((-1356));
      Integer integer1 = new Integer((-1232));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("gW1mUb4qpKR(", (double) (-1232), (double) (-1232));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(":xu3oc{t8`^2Jmu^1b", (double) (-1), (double) (-1));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(123);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("=l2zv", (char[]) null, (char[]) null);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(22);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      char[] charArray0 = new char[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", charArray0, charArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(102);
      Integer integer1 = new Integer(503);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("z", ']', ']');
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer(515);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("[,ElV", '.', '.');
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer((-2146579443));
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Integer integer1 = new Integer(490);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte[]) null, (byte[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(515);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      byte[] byteArray0 = new byte[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("bo(x*t;Q{6Ec", byteArray0, byteArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Integer integer1 = new Integer((-2));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle", (byte)34, (byte)34);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(3252);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("?k$bejU55ty_", (byte)91, (byte)91);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$9", (boolean[]) null, (boolean[]) null);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(1166);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      boolean[] booleanArray0 = new boolean[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$10", booleanArray0, booleanArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("~,.+wFDtn5A|O\"UQ", false, false);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(487);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("~G3zMA:b0\"m", true, true);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      Integer integer0 = new Integer(76);
      Integer integer1 = new Integer(76);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(487);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Integer>(integer0, (Integer) null, toStringStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rhs cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      int[] intArray0 = new int[4];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("(pPA", intArray0, (int[]) null);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("(pPA", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(3150);
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("N7T`m`&bK# OH", (double) 3150, 1.0);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("N7T`m`&bK# OH", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer(1980);
      Integer integer1 = new Integer((-851));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (-851), 1980);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = new Integer(2486);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer1 = new Integer(2321);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("~v!g&`vp^a6G3", 2486, 2321);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer(2324);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      char[] charArray0 = new char[3];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (char[]) null, charArray0);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = new Integer((-1346));
      Integer integer1 = new Integer((-1210));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[1];
      diffBuilder0.append("", floatArray0, floatArray1);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Integer integer0 = new Integer(1983);
      Integer integer1 = new Integer(1);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0, true);
      diffBuilder0.append("", (float) 1983, (-1.0F));
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Integer integer0 = new Integer(1987);
      Integer integer1 = new Integer(7);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[13];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer((-1350));
      Integer integer1 = new Integer((-1221));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      short[] shortArray0 = new short[1];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("^O#}Ag,A", shortArray0, (short[]) null);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("gW1mUb4qpKR(", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer(1988);
      Integer integer1 = new Integer(24);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (short) (-1), (short) (-32768));
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = new Integer(24);
      Integer integer1 = new Integer((-29));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      long[] longArray0 = new long[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (long[]) null, longArray0);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer((-29));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      diffBuilder0.append("", (long) (-29), 1L);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Integer integer0 = new Integer((-1350));
      Integer integer1 = new Integer(2146681712);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      Object[] objectArray0 = new Object[1];
      diffBuilder0.append("&divide;", (Object[]) null, objectArray0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("&divide;", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer integer0 = new Integer(18);
      Integer integer1 = new Integer(19);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (Object) integer1, (Object) diffResult0);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Integer integer0 = new Integer(2004);
      Integer integer1 = new Integer((-7));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte) (-32), (byte) (-2));
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Integer integer0 = new Integer(1987);
      Integer integer1 = new Integer(5);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      boolean[] booleanArray0 = new boolean[0];
      diffBuilder0.append("", (boolean[]) null, booleanArray0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("8asMRG;", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Integer integer0 = new Integer(19);
      Integer integer1 = new Integer(2327);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      diffBuilder0.append("", 'B', 'K');
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer((-2130));
      Integer integer1 = new Integer(0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("<s!KZ`J3EJK_", byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Integer integer0 = new Integer(36);
      Integer integer1 = new Integer((-45));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", false, true);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer((-323));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", diffResult0);
      assertSame(diffBuilder0, diffBuilder1);
  }
}
