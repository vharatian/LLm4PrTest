/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 09:30:00 GMT 2025
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0~QF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = NumberUtils.max(2974L, 2974L, 2974L);
      assertEquals(2974L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = NumberUtils.max(1697L, (long) 0, (long) 1);
      assertEquals(1697L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte) (-1), 97, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = NumberUtils.min((-309L), 867L, (-4284L));
      assertEquals((-4284L), long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-3551.37874119402);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-3551.37874119402), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)55;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("(4h%'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // (4h%' is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short short0 = NumberUtils.toShort("(", (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = NumberUtils.toShort("5");
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      BigDecimal bigDecimal1 = NumberUtils.toScaledBigDecimal(bigDecimal0, (int) (short)0, roundingMode0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-338L));
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      BigDecimal bigDecimal1 = NumberUtils.toScaledBigDecimal(bigDecimal0, (int) (byte)22, roundingMode0);
      assertEquals((short) (-338), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = NumberUtils.toScaledBigDecimal(bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal("7", 929, roundingMode0);
      assertEquals((short)7, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal("5");
      assertEquals((short)5, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_ONE;
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0, 1290, roundingMode0);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float((-4329.679370431683));
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0, 1290, roundingMode0);
      assertEquals((short) (-4329), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_MINUS_ONE;
      RoundingMode roundingMode0 = RoundingMode.UP;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0, (int) (byte)0, roundingMode0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = NumberUtils.DOUBLE_ONE;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(double0, 0, roundingMode0);
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = NumberUtils.DOUBLE_MINUS_ONE;
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(double0, 70, roundingMode0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double double0 = NumberUtils.DOUBLE_ONE;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(double0);
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = NumberUtils.DOUBLE_MINUS_ONE;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(double0);
      BigDecimal bigDecimal1 = NumberUtils.toScaledBigDecimal(bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short) (-1), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = NumberUtils.toLong("-#", (long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = NumberUtils.toLong("2");
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = NumberUtils.toInt("Z!0|+^.", (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = NumberUtils.toInt("7");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-0x-", (-551.6557F));
      assertEquals((-551.6557F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = NumberUtils.toFloat("5");
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-7L));
      double double0 = NumberUtils.toDouble(bigDecimal0, 993.41252);
      assertEquals((-7.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_MINUS_ONE;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0);
      double double0 = NumberUtils.toDouble(bigDecimal0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = NumberUtils.toDouble("2Hm\".0e{", 788.0);
      assertEquals(788.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = NumberUtils.toDouble("7");
      assertEquals(7.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("5\"", (byte) (-74));
      assertEquals((byte) (-74), byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("5");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)8;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)103;
      longArray0[1] = (long) (byte)103;
      longArray0[2] = (long) (byte)103;
      longArray0[3] = (long) (byte)39;
      longArray0[4] = (long) (byte)120;
      longArray0[5] = (long) (byte)103;
      longArray0[6] = (long) (byte)39;
      longArray0[7] = (long) (byte)103;
      longArray0[8] = (long) (byte)120;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(39L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-117);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-117L), long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 57;
      intArray0[1] = 45;
      intArray0[2] = 64;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-299);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-299), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2200.4805F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(2200.4805F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)118;
      doubleArray0[1] = (double) (short)118;
      doubleArray0[2] = (double) (short)118;
      doubleArray0[3] = (double) (short)118;
      doubleArray0[4] = (double) (short)118;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(118.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)55, byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-6);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-6), byte0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short short0 = NumberUtils.min((short)48, (short)48, (short)48);
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = NumberUtils.min(267.43228F, 2247.0F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = NumberUtils.min(1351.4F, (-1174.0F), (-1174.0F));
      assertEquals((-1174.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = NumberUtils.min((double) 1698L, 260.1, (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = NumberUtils.min((double) (short) (-30319), (-1505.330637), 3.0);
      assertEquals((-30319.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)1, (byte)93);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1945);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1945), short0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 723;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(723, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2114);
      intArray0[1] = (int) (byte) (-15);
      intArray0[2] = (int) (byte) (-15);
      intArray0[3] = (int) (byte) (-15);
      intArray0[4] = (int) (byte) (-94);
      intArray0[5] = (int) (byte) (-94);
      intArray0[6] = (int) (byte) (-15);
      intArray0[7] = (int) (byte) (-94);
      intArray0[8] = (int) (byte) (-94);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1354.5403F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1354.5403F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-83.4);
      doubleArray0[1] = (-2208.1);
      doubleArray0[2] = (-1300.744611);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-83.4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-71), byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-3197), (short) (-3197), (short) (-3197));
      assertEquals((short) (-3197), short0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte)0, (long) (byte)0, (-324L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = NumberUtils.max((-7L), (-7L), (-1422L));
      assertEquals((-7L), long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short)0, (-678), (-1625));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = NumberUtils.max((int) (byte) (-22), (int) (byte) (-22), (int) (byte) (-22));
      assertEquals((-22), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = NumberUtils.max((float) 10, (float) 10, (float) 10);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = NumberUtils.max((float) (-1L), (float) (-2406L), (float) (-2406L));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), (double) (byte)0, (double) (byte) (-117));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = NumberUtils.max((double) (byte)25, (-5331.093), 3639.13652903747);
      assertEquals(3639.13652903747, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = NumberUtils.createLong("2");
      assertEquals(2L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-#D");
      assertEquals((-13L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("5");
      assertEquals(5, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0xD");
      assertEquals((-13), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("1");
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("1");
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0XD");
      assertEquals((byte) (-13), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("9");
      assertEquals((short)9, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("#DC");
      assertEquals((byte) (-36), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("9");
      assertEquals((short)9, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = NumberUtils.compare((byte) (-71), (byte) (-71));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = NumberUtils.compare((byte)37, (byte) (-102));
      assertEquals(139, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal("", (-4290), roundingMode0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(float0, 0, roundingMode0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float(Float.NaN);
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(float0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(double0, 1333, roundingMode0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(double0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Array must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("0X1XhPTMPIGUH7m%N8/HR");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0IGTZu6vG'0Cwm7V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"IGTZu\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("q>(^`UC!gHklex=d@]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"q>(^`UC!gHklex=d@]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("~:hh&'`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~:hh&'`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("#Qi+7HXG5[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("wD@*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((String) null, 35, roundingMode0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal("#", 5, roundingMode0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((Double) null, 0, roundingMode0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_MINUS_ONE;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(float0, (-2211), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((Float) null, (int) (short)32267, roundingMode0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(bigDecimal0, (-4047), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((BigDecimal) null, (-1), roundingMode0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short) (-2817));
      assertEquals((short) (-2817), short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("1 :qAYF%_&;`;", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)29);
      assertEquals((byte)29, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      double double0 = NumberUtils.toDouble(bigDecimal0, (double) (-2382));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = NumberUtils.toDouble((BigDecimal) null, 788.0);
      assertEquals(788.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) (byte)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", (-580.322161));
      assertEquals((-580.322161), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0X!}o^", 632.3081F);
      assertEquals(632.3081F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) 723);
      assertEquals(723L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = NumberUtils.toLong("", (-600L));
      assertEquals((-600L), long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (int) (short)1498);
      assertEquals(1498, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = NumberUtils.toInt("-0X01\"-fcL", (-1263));
      assertEquals((-1263), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = NumberUtils.compare((short)18011, (short)5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = NumberUtils.compare((short) (-3009), (short) (-3009));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = NumberUtils.compare((short)0, (short)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = NumberUtils.compare(1L, (-8L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = NumberUtils.compare((-1841L), (-1841L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = NumberUtils.compare((-399L), 1732L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = NumberUtils.compare(321, 76);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = NumberUtils.compare((-1762), (-1762));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = NumberUtils.compare(0, 2804);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable(".e#wp&FEX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("-=Xx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable(",B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("4f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable(".e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("-#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0-\"tZ-]o(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("3+w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("ElH~D7*G\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0eI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("03;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("00");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("03+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0XB}@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("-0Xc#qD$#NDH-fUPK03h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0X0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0xg0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("+w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("-0x.e#wp&FEX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-21), (byte) (-89), (byte)19);
      assertEquals((byte)19, byte0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-1), (byte)0, (byte) (-1));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-1), (byte) (-1), (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1945), (short) (-22621), (short)1498);
      assertEquals((short)1498, short0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2015), (short)3947, (short) (-2015));
      assertEquals((short)3947, short0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = NumberUtils.max(1, 0, 2127);
      assertEquals(2127, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = NumberUtils.max(0, 1290, 1290);
      assertEquals(1290, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long long0 = NumberUtils.max(1L, 1L, 61L);
      assertEquals(61L, long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long long0 = NumberUtils.max(1697L, 4221L, (long) 1);
      assertEquals(4221L, long0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)76, (byte) (-27), (byte) (-78));
      assertEquals((byte) (-78), byte0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)41, (byte)22, (byte)41);
      assertEquals((byte)22, byte0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-31), (byte) (-31), (byte) (-31));
      assertEquals((byte) (-31), byte0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short short0 = NumberUtils.min((short)262, (short)1310, (short) (-2693));
      assertEquals((short) (-2693), short0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      short short0 = NumberUtils.min((short)3, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-2228), (short)2980, (short)100);
      assertEquals((short) (-2228), short0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = NumberUtils.min(312, 312, 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = NumberUtils.min(3957, (-3781), 1774);
      assertEquals((-3781), int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      long long0 = NumberUtils.min(1698L, 1698L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      long long0 = NumberUtils.min((-1476L), (long) (short) (-1532), 1L);
      assertEquals((-1532L), long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      long long0 = NumberUtils.min(44L, (long) (short)44, (long) (short)44);
      assertEquals(44L, long0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1324.338F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 2468;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(2468.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)111;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)111, byte0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)93;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)93, short0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2454);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (long) (short)2144;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2144L, long0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short) (-220);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-220), short0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      short[] shortArray0 = new short[12];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 321;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long[] longArray0 = new long[11];
      longArray0[0] = 1L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0x0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // + is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.1");
      assertEquals(0.1F, number0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0%UB,}WQ7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%UB,}WQ7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0f");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("<^(69>?9J)0r.?L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // <^(69>?9J)0r.?L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4f");
      assertEquals(4.0F, number0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("Wwd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Wwd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber(";11YL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;11YL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("s\"FKF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // s\"FKF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("MYD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // MYD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0.Y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.Y is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0eI");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eI is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("MF%j30VkqVI5'QU.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("ze#pqE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ze#pqE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber(",@d%+kEO[L-^\"A4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber(".6e#p&FEX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .6e#p&FEX is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber(".e#wp&FEX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .e#wp&FEX is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("-0XBuWul>xq");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-BuWul>xq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0X/WJ(+ B>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/WJ(+ B>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0X%~lz4A9hD(v*!z5{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%~lz4A9hD(v*!z5{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0x-#KQ+%N~LJ7^OB|_Q+/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0x0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("#DCOp?y^mlTRA6p-%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber(" ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((String) null);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Double double0 = NumberUtils.DOUBLE_ONE;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(double0, (-2964), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((Float) null);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double double0 = NumberUtils.toDouble((BigDecimal) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      float float0 = NumberUtils.toFloat("v?A2I3z!>giiH$O5*[)");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1610.528);
      double double0 = NumberUtils.toDouble(bigDecimal0);
      assertEquals(1610.528, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((Double) null);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_ONE;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double double0 = NumberUtils.max((-228.24886579944283), (-228.24886579944283), (-228.24886579944283));
      assertEquals((-228.24886579944283), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      double double0 = NumberUtils.min((double) byte0, 0.7, (double) 1);
      assertEquals(0.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-BV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      float float0 = NumberUtils.min((float) 1290, (float) 0L, (float) 1290);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal("Nr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      float float0 = NumberUtils.max((float) 0, (float) 0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // - is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("%{LL'v6zZhm}u*7w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int int0 = NumberUtils.compare((byte) (-117), (byte)0);
      assertEquals((-117), int0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((BigDecimal) null);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }
}
