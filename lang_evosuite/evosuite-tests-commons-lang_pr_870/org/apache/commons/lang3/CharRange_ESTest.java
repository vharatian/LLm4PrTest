/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:14:35 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.apache.commons.lang3.CharRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharRange_ESTest extends CharRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('j', '(');
      CharRange charRange1 = CharRange.isNot('(');
      boolean boolean0 = charRange0.equals(charRange1);
      assertTrue(charRange1.isNegated());
      assertFalse(boolean0);
      assertEquals('(', charRange1.getStart());
      assertEquals('j', charRange0.getEnd());
      assertFalse(charRange1.equals((Object)charRange0));
      assertEquals('(', charRange0.getStart());
      assertEquals('(', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('$', '$');
      CharRange charRange1 = CharRange.isIn('k', 'L');
      boolean boolean0 = charRange1.equals(charRange0);
      assertFalse(boolean0);
      assertEquals('k', charRange1.getEnd());
      assertEquals('L', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('K', 'l');
      CharRange charRange1 = CharRange.is('K');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('K', charRange1.getStart());
      assertEquals('l', charRange0.getEnd());
      assertTrue(boolean0);
      assertEquals('K', charRange0.getStart());
      assertEquals('K', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('+', 'x');
      CharRange charRange1 = CharRange.isIn('x', 'Y');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('Y', charRange1.getStart());
      assertFalse(boolean0);
      assertEquals('x', charRange1.getEnd());
      assertEquals('+', charRange0.getStart());
      assertEquals('x', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharRange charRange0 = CharRange.is('R');
      CharRange charRange1 = CharRange.isNot('R');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('R', charRange1.getEnd());
      assertFalse(boolean0);
      assertEquals('R', charRange0.getEnd());
      assertEquals('R', charRange1.getStart());
      assertEquals('R', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('');
      CharRange charRange1 = CharRange.isNotIn('\uFFF7', '');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('', charRange0.getStart());
      assertEquals('', charRange1.getStart());
      assertEquals('\uFFF7', charRange1.getEnd());
      assertTrue(boolean0);
      assertEquals('', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharRange charRange0 = CharRange.is('O');
      charRange0.iterator();
      assertEquals('O', charRange0.getEnd());
      assertFalse(charRange0.isNegated());
      assertEquals('O', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharRange charRange0 = CharRange.is('\u0000');
      boolean boolean0 = charRange0.isNegated();
      assertEquals('\u0000', charRange0.getStart());
      assertFalse(boolean0);
      assertEquals('\u0000', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('9', '9');
      char char0 = charRange0.getStart();
      assertEquals('9', charRange0.getEnd());
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('o', 'a');
      char char0 = charRange0.getStart();
      assertEquals('o', charRange0.getEnd());
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('}');
      char char0 = charRange0.getEnd();
      assertEquals('}', charRange0.getStart());
      assertTrue(charRange0.isNegated());
      assertEquals('}', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('x', 'Y');
      char char0 = charRange0.getEnd();
      assertEquals('Y', charRange0.getStart());
      assertEquals('x', char0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('\u0000');
      // Undeclared exception!
      try { 
        charRange0.contains((CharRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Range must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('H', 'C');
      assertFalse(charRange0.isNegated());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange0.forEach(consumer0);
      assertEquals('C', charRange0.getStart());
      assertEquals('H', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\uFFFF', '');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange0.forEach(consumer0);
      assertEquals('\uFFFF', charRange0.getEnd());
      assertEquals('', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\uFFF7', '');
      assertTrue(charRange0.isNegated());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange0.forEach(consumer0);
      assertEquals('', charRange0.getStart());
      assertEquals('\uFFF7', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\u0000', '');
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      charRange0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\u001D', '$');
      String string0 = charRange0.toString();
      assertEquals("^\u001D-$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('U', '9');
      charRange0.hashCode();
      assertTrue(charRange0.isNegated());
      assertEquals('9', charRange0.getStart());
      assertEquals('U', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('$', '$');
      charRange0.hashCode();
      assertFalse(charRange0.isNegated());
      assertEquals('$', charRange0.getEnd());
      assertEquals('$', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharRange charRange0 = CharRange.is('O');
      CharRange charRange1 = CharRange.isNot('O');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('O', charRange1.getStart());
      assertEquals('O', charRange0.getStart());
      assertEquals('O', charRange1.getEnd());
      assertFalse(boolean0);
      assertTrue(charRange1.isNegated());
      assertEquals('O', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('\u0015', '\u0015');
      CharRange charRange1 = CharRange.isNotIn('\u0015', '\u001D');
      boolean boolean0 = charRange0.equals(charRange1);
      assertFalse(charRange0.isNegated());
      assertTrue(charRange1.isNegated());
      assertEquals('\u0015', charRange1.getStart());
      assertEquals('\u001D', charRange1.getEnd());
      assertFalse(boolean0);
      assertEquals('\u0015', charRange0.getEnd());
      assertEquals('\u0015', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      Character character0 = Character.valueOf('z');
      boolean boolean0 = charRange0.equals(character0);
      assertEquals('6', charRange0.getStart());
      assertFalse(boolean0);
      assertFalse(charRange0.isNegated());
      assertEquals('6', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('G', 'G');
      boolean boolean0 = charRange0.equals(charRange0);
      assertEquals('G', charRange0.getEnd());
      assertEquals('G', charRange0.getStart());
      assertTrue(boolean0);
      assertTrue(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\u001D', '$');
      CharRange charRange1 = CharRange.isIn('$', '$');
      boolean boolean0 = charRange0.equals(charRange1);
      assertEquals('$', charRange1.getEnd());
      assertFalse(charRange1.isNegated());
      assertFalse(boolean0);
      assertEquals('$', charRange1.getStart());
      assertEquals('\u001D', charRange0.getStart());
      assertTrue(charRange0.isNegated());
      assertEquals('$', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharRange charRange0 = CharRange.is('<');
      CharRange charRange1 = CharRange.isIn('J', 'J');
      boolean boolean0 = charRange0.contains(charRange1);
      assertFalse(charRange1.isNegated());
      assertEquals('J', charRange1.getEnd());
      assertEquals('<', charRange0.getEnd());
      assertFalse(boolean0);
      assertEquals('J', charRange1.getStart());
      assertEquals('<', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('^', '^');
      CharRange charRange1 = CharRange.is('@');
      boolean boolean0 = charRange0.contains(charRange1);
      assertFalse(charRange1.isNegated());
      assertEquals('@', charRange1.getStart());
      assertEquals('^', charRange0.getStart());
      assertEquals('^', charRange0.getEnd());
      assertFalse(boolean0);
      assertEquals('@', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharRange charRange0 = CharRange.is('\u0000');
      CharRange charRange1 = CharRange.isNot('\u0000');
      boolean boolean0 = charRange0.contains(charRange1);
      assertFalse(boolean0);
      assertTrue(charRange1.isNegated());
      assertEquals('\u0000', charRange1.getEnd());
      assertEquals('\u0000', charRange0.getEnd());
      assertEquals('\u0000', charRange1.getStart());
      assertEquals('\u0000', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharRange charRange0 = CharRange.is('<');
      boolean boolean0 = charRange0.contains(charRange0);
      assertEquals('<', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('<', charRange0.getEnd());
      assertFalse(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\u001D', '$');
      CharRange charRange1 = CharRange.isIn('H', 'H');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('H', charRange1.getStart());
      assertEquals('$', charRange0.getEnd());
      assertEquals('\u001D', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('H', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('e');
      CharRange charRange1 = CharRange.is('X');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('X', charRange1.getEnd());
      assertEquals('e', charRange0.getEnd());
      assertEquals('X', charRange1.getStart());
      assertTrue(boolean0);
      assertEquals('e', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('E');
      CharRange charRange1 = CharRange.isNot('#');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('#', charRange1.getStart());
      assertFalse(boolean0);
      assertEquals('#', charRange1.getEnd());
      assertTrue(charRange1.isNegated());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\u001D', '$');
      CharRange charRange1 = CharRange.isNotIn('M', 'p');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('M', charRange1.getStart());
      assertFalse(boolean0);
      assertTrue(charRange1.isNegated());
      assertEquals('p', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\u001D', '$');
      boolean boolean0 = charRange0.contains(charRange0);
      assertEquals('$', charRange0.getEnd());
      assertTrue(boolean0);
      assertTrue(charRange0.isNegated());
      assertEquals('\u001D', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\u001D', '$');
      CharRange charRange1 = CharRange.isIn('$', '$');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('\u001D', charRange0.getStart());
      assertEquals('$', charRange1.getStart());
      assertFalse(boolean0);
      assertEquals('$', charRange1.getEnd());
      assertEquals('$', charRange0.getEnd());
      assertTrue(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('', '`');
      boolean boolean0 = charRange0.contains('y');
      assertEquals('', charRange0.getEnd());
      assertFalse(boolean0);
      assertEquals('`', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharRange charRange0 = CharRange.is('y');
      boolean boolean0 = charRange0.contains('y');
      assertEquals('y', charRange0.getEnd());
      assertTrue(boolean0);
      assertEquals('y', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('U', '9');
      boolean boolean0 = charRange0.contains('X');
      assertTrue(boolean0);
      assertEquals('U', charRange0.getEnd());
      assertEquals('9', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('R');
      boolean boolean0 = charRange0.contains(' ');
      assertEquals('R', charRange0.getEnd());
      assertEquals('R', charRange0.getStart());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharRange charRange0 = CharRange.is('6');
      char char0 = charRange0.getEnd();
      assertFalse(charRange0.isNegated());
      assertEquals('6', charRange0.getStart());
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('U', '9');
      boolean boolean0 = charRange0.isNegated();
      assertEquals('9', charRange0.getStart());
      assertEquals('U', charRange0.getEnd());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('\u001D', '$');
      char char0 = charRange0.getStart();
      assertEquals('\u001D', char0);
      assertTrue(charRange0.isNegated());
      assertEquals('$', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('$', '$');
      CharRange charRange1 = CharRange.is('$');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('$', charRange1.getStart());
      assertTrue(boolean0);
      assertFalse(charRange1.isNegated());
      assertEquals('$', charRange1.getEnd());
  }
}
