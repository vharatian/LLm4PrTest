/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 05:16:51 GMT 2025
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.time.StopWatch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StopWatch_ESTest extends StopWatch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      System.setCurrentTimeMillis(899L);
      stopWatch0.resume();
      assertNull(stopWatch0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis((-3235L));
      stopWatch0.stop();
      // Undeclared exception!
      try { 
        stopWatch0.formatTime();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis((-3235L));
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      long long0 = stopWatch0.getTime(timeUnit0);
      assertEquals((-1392409284L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-2385L));
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis(0L);
      long long0 = stopWatch0.getTime();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      long long0 = stopWatch0.getStopTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis((-3235L));
      stopWatch0.stop();
      long long0 = stopWatch0.getStopTime();
      assertEquals((-3235L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getStartTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-2385L));
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getStartTime();
      assertEquals((-2385L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      long long0 = stopWatch0.getSplitTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      System.setCurrentTimeMillis((-190L));
      stopWatch0.suspend();
      long long0 = stopWatch0.getSplitTime();
      assertEquals((-1392409281L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      System.setCurrentTimeMillis((-190L));
      stopWatch0.suspend();
      long long0 = stopWatch0.getSplitNanoTime();
      assertEquals((-1392409281510000L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-2385L));
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis(0L);
      long long0 = stopWatch0.getNanoTime();
      assertEquals(2385000L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis((-981L));
      long long0 = stopWatch0.getNanoTime();
      assertEquals((-1392409282301000L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("hcyGzhlR");
      String string0 = stopWatch0.getMessage();
      assertEquals("hcyGzhlR", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("");
      String string0 = stopWatch0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      String string0 = stopWatch0.formatSplitTime();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      System.setCurrentTimeMillis(2779L);
      // Undeclared exception!
      try { 
        stopWatch0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("5");
      stopWatch0.start();
      System.setCurrentTimeMillis(1878L);
      stopWatch0.split();
      // Undeclared exception!
      try { 
        stopWatch0.toSplitString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      // Undeclared exception!
      try { 
        stopWatch0.getTime((TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.getSplitNanoTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be split to get the split time.
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      long long0 = stopWatch0.getNanoTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      long long0 = stopWatch0.getNanoTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      long long0 = stopWatch0.getNanoTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      String string0 = stopWatch0.formatTime();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      // Undeclared exception!
      try { 
        stopWatch0.formatSplitTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be split to get the split time.
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.unsplit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch has not been split. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      stopWatch0.unsplit();
      assertNull(stopWatch0.getMessage());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      String string0 = stopWatch0.toSplitString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("H");
      stopWatch0.start();
      stopWatch0.split();
      String string0 = stopWatch0.toSplitString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      // Undeclared exception!
      try { 
        stopWatch0.suspend();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be running to suspend. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch is not running. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      stopWatch0.stop();
      assertNull(stopWatch0.getMessage());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      // Undeclared exception!
      try { 
        stopWatch0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch already started. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      // Undeclared exception!
      try { 
        stopWatch0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be reset before being restarted. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      // Undeclared exception!
      try { 
        stopWatch0.resume();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be suspended to resume. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      stopWatch0.resume();
      System.setCurrentTimeMillis(68L);
      long long0 = stopWatch0.getTime();
      assertEquals((-1392409281L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      // Undeclared exception!
      try { 
        stopWatch0.getStopTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch has not been started
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getStopTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      // Undeclared exception!
      try { 
        stopWatch0.getStartTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch has not been started
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      long long0 = stopWatch0.getStartTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.split();
      long long0 = stopWatch0.getSplitNanoTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("H");
      String string0 = stopWatch0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      stopWatch0.suspend();
      long long0 = stopWatch0.getTime(timeUnit0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      boolean boolean0 = stopWatch0.isStarted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      boolean boolean0 = stopWatch0.isSuspended();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.stop();
      boolean boolean0 = stopWatch0.isStopped();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      boolean boolean0 = stopWatch0.isStarted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      boolean boolean0 = stopWatch0.isSuspended();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      stopWatch0.suspend();
      boolean boolean0 = stopWatch0.isStopped();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      boolean boolean0 = stopWatch0.isStarted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch("H");
      boolean boolean0 = stopWatch0.isStopped();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      boolean boolean0 = stopWatch0.isSuspended();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      // Undeclared exception!
      try { 
        stopWatch0.toSplitString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be split to get the split time.
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.create();
      // Undeclared exception!
      try { 
        stopWatch0.split();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch is not running. 
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StopWatch stopWatch0 = new StopWatch();
      stopWatch0.reset();
      assertNull(stopWatch0.getMessage());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      boolean boolean0 = stopWatch0.isStopped();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      boolean boolean0 = stopWatch0.isStarted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      boolean boolean0 = stopWatch0.isSuspended();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      String string0 = stopWatch0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      String string0 = stopWatch0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StopWatch stopWatch0 = StopWatch.createStarted();
      // Undeclared exception!
      try { 
        stopWatch0.getSplitTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stopwatch must be split to get the split time.
         //
         verifyException("org.apache.commons.lang3.time.StopWatch", e);
      }
  }
}
