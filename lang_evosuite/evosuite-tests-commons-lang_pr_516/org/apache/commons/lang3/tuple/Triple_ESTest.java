/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 12:39:35 GMT 2025
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.DuplicateFormatFlagsException;
import java.util.FormatFlagsConversionMismatchException;
import java.util.IllegalFormatCodePointException;
import java.util.IllegalFormatConversionException;
import java.util.IllegalFormatFlagsException;
import java.util.IllegalFormatWidthException;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.apache.commons.lang3.tuple.Triple;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Triple_ESTest extends Triple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-2081));
      ImmutableTriple<Integer, Integer, Integer> immutableTriple0 = ImmutableTriple.of(integer0, integer1, integer1);
      immutableTriple0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3355);
      Integer integer1 = new Integer(3355);
      Triple<Integer, Integer, Integer> triple0 = Triple.of(integer1, integer0, integer1);
      assertNotNull(triple0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(4483);
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = new MutableTriple<Integer, Integer, Integer>(integer0, integer0, integer0);
      String string0 = mutableTriple0.toString("IZ_n$cPY");
      assertEquals("IZ_n$cPY", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = new MutableTriple<Integer, Integer, Integer>();
      String string0 = mutableTriple0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableTriple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer> mutableTriple0 = new MutableTriple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer>();
      Integer integer0 = mutableTriple0.getRight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(2681);
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = new MutableTriple<Integer, Integer, Integer>();
      MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> mutableTriple1 = MutableTriple.of(integer0, integer0, (Triple<Integer, Integer, Integer>) mutableTriple0);
      Triple<Integer, Integer, Integer> triple0 = mutableTriple1.getRight();
      assertNotNull(triple0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImmutableTriple<Integer, Integer, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = immutableTriple0.getMiddle();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableTriple<Integer, Integer, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      ImmutableTriple<Integer, Triple<Integer, Integer, Integer>, Integer> immutableTriple1 = ImmutableTriple.of(integer0, (Triple<Integer, Integer, Integer>) immutableTriple0, integer0);
      Triple<Integer, Integer, Integer> triple0 = immutableTriple1.getMiddle();
      assertNotNull(triple0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImmutableTriple<Integer, Integer, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      Integer integer0 = immutableTriple0.getLeft();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableTriple<Integer, Integer, Integer> immutableTriple0 = new ImmutableTriple<Integer, Integer, Integer>((Integer) null, integer0, integer0);
      MutableTriple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer> mutableTriple0 = MutableTriple.of((Triple<Integer, Integer, Integer>) immutableTriple0, (Triple<Integer, Integer, Integer>) immutableTriple0, (Integer) null);
      Object object0 = mutableTriple0.getLeft();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(245);
      ImmutableTriple<Integer, Integer, Integer> immutableTriple0 = new ImmutableTriple<Integer, Integer, Integer>(integer0, integer0, integer0);
      MutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer> mutableTriple0 = new MutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer>(immutableTriple0, integer0, integer0);
      MutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer> mutableTriple1 = new MutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer>(immutableTriple0, integer0, (Integer) null);
      int int0 = mutableTriple0.compareTo((Triple<Triple<Integer, Integer, Integer>, Integer, Integer>) mutableTriple1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ImmutableTriple<Integer, Integer, Integer> immutableTriple0 = ImmutableTriple.of(integer0, integer0, integer0);
      MutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer> mutableTriple0 = new MutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer>();
      ImmutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer> immutableTriple1 = ImmutableTriple.of((Triple<Integer, Integer, Integer>) immutableTriple0, integer0, integer0);
      int int0 = mutableTriple0.compareTo((Triple<Triple<Integer, Integer, Integer>, Integer, Integer>) immutableTriple1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableTriple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer> mutableTriple0 = new MutableTriple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        mutableTriple0.toString("d%k");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'k'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = new MutableTriple<Integer, Integer, Integer>();
      Integer integer0 = new Integer((-162));
      Triple<Triple<Integer, Integer, Integer>, Integer, Integer> triple0 = Triple.of((Triple<Integer, Integer, Integer>) mutableTriple0, integer0, integer0);
      // Undeclared exception!
      try { 
        triple0.toString("KOhBLeLu9y%0o");
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %0o
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Triple<Integer, Integer, Integer> triple0 = Triple.of(integer0, integer0, integer0);
      MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> mutableTriple0 = new MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>>(integer0, integer0, triple0);
      // Undeclared exception!
      try { 
        mutableTriple0.toString("SVoQU%<S{[w:");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%<S'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableTriple<Integer, Triple<Integer, Integer, Integer>, Integer> mutableTriple0 = new MutableTriple<Integer, Triple<Integer, Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        mutableTriple0.toString("[E%3n-");
        fail("Expecting exception: IllegalFormatWidthException");
      
      } catch(IllegalFormatWidthException e) {
         //
         // 3
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImmutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      // Undeclared exception!
      try { 
        immutableTriple0.toString("/j2q#961g%(%");
        fail("Expecting exception: IllegalFormatFlagsException");
      
      } catch(IllegalFormatFlagsException e) {
         //
         // Flags = '('
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = new MutableTriple<Integer, Integer, Integer>(integer0, integer0, integer0);
      ImmutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer> immutableTriple0 = new ImmutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer>(mutableTriple0, integer0, integer0);
      // Undeclared exception!
      try { 
        immutableTriple0.toString("%1fB8k`{i!");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != org.apache.commons.lang3.tuple.MutableTriple
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> mutableTriple0 = new MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>>();
      // Undeclared exception!
      try { 
        mutableTriple0.toString("(eJ.w%(Cz)N");
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = c, Flags = (
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = new MutableTriple<Integer, Integer, Integer>();
      MutableTriple<Integer, Triple<Integer, Integer, Integer>, Integer> mutableTriple1 = new MutableTriple<Integer, Triple<Integer, Integer, Integer>, Integer>((Integer) null, mutableTriple0, (Integer) null);
      // Undeclared exception!
      try { 
        mutableTriple1.toString("|H^[1z9TIc%++o J");
        fail("Expecting exception: DuplicateFormatFlagsException");
      
      } catch(DuplicateFormatFlagsException e) {
         //
         // Flags = '+'
         //
         verifyException("java.util.Formatter$Flags", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableTriple<Integer, Triple<Integer, Integer, Integer>, Integer> mutableTriple0 = new MutableTriple<Integer, Triple<Integer, Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        mutableTriple0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImmutableTriple<Triple<Integer, Integer, Integer>, Integer, Integer> immutableTriple0 = ImmutableTriple.nullTriple();
      // Undeclared exception!
      try { 
        immutableTriple0.compareTo((Triple<Triple<Integer, Integer, Integer>, Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.Triple", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImmutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> immutableTriple0 = ImmutableTriple.nullTriple();
      Object object0 = new Object();
      boolean boolean0 = immutableTriple0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImmutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> immutableTriple0 = ImmutableTriple.nullTriple();
      MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> mutableTriple0 = new MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>>();
      Integer integer0 = new Integer(0);
      mutableTriple0.setMiddle(integer0);
      boolean boolean0 = mutableTriple0.equals(immutableTriple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = new MutableTriple<Integer, Integer, Integer>();
      MutableTriple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>> mutableTriple1 = new MutableTriple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>>(mutableTriple0, mutableTriple0, mutableTriple0);
      boolean boolean0 = mutableTriple1.equals(mutableTriple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(3355);
      Triple<Integer, Integer, Integer> triple0 = Triple.of(integer0, integer0, integer0);
      MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> mutableTriple0 = MutableTriple.of(integer0, integer0, triple0);
      boolean boolean0 = mutableTriple0.equals(triple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImmutableTriple<Integer, Integer, Triple<Triple<Integer, Integer, Integer>, Integer, Integer>> immutableTriple0 = ImmutableTriple.nullTriple();
      ImmutableTriple<Triple<Integer, Integer, Integer>, Triple<Integer, Integer, Integer>, Integer> immutableTriple1 = ImmutableTriple.nullTriple();
      boolean boolean0 = immutableTriple1.equals(immutableTriple0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImmutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> immutableTriple0 = ImmutableTriple.nullTriple();
      MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> mutableTriple0 = new MutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>>();
      boolean boolean0 = mutableTriple0.equals(immutableTriple0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-3087));
      MutableTriple<Integer, Integer, Integer> mutableTriple0 = new MutableTriple<Integer, Integer, Integer>(integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        mutableTriple0.toString("[yB%CO7Bii/te");
        fail("Expecting exception: IllegalFormatCodePointException");
      
      } catch(IllegalFormatCodePointException e) {
         //
         // Code point = 0xfffff3f1
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImmutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> immutableTriple0 = ImmutableTriple.nullTriple();
      String string0 = immutableTriple0.toString();
      assertEquals("(null,null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImmutableTriple<Integer, Integer, Triple<Integer, Integer, Integer>> immutableTriple0 = ImmutableTriple.nullTriple();
      int int0 = immutableTriple0.compareTo((Triple<Integer, Integer, Triple<Integer, Integer, Integer>>) immutableTriple0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Triple<Integer, Integer, Integer>[] tripleArray0 = Triple.emptyArray();
      assertEquals(0, tripleArray0.length);
  }
}
